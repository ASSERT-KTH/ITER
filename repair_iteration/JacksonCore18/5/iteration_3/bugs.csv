bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite( "write  text  length: "  +  text);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_verifyValueWrite( "write  text  length: "  +  text);	  _verifyValueWrite(   "write    text    length   ");    	compilable	  [FE]  AssertionFailedError  	27	1	replace
2	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  length: "  +  text);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite( "write  text  length: "  +  text);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite( "write  text  length: "  +  text);	  _verifyValueWrite(   "write    text    length   ");    	compilable	  [FE]  AssertionFailedError  	27	1	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite( "write  text  length: ");  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_verifyValueWrite( "write  text  length: ");	  _verifyValueWrite(   "write    text    length   ");    	compilable	  [FE]  AssertionFailedError  	27	1	replace
4	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  length: ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite( "write  text  length: ");  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite( "write  text  length: ");	  _verifyValueWrite(   "write    text    length   ");    	compilable	  [FE]  AssertionFailedError  	27	1	replace
5	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  length ",  text);  [CE]  no  suitable  method  found  for  _verifyValueWrite(String,String)  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite( "write  text  length ",  text);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite( "write  text  length ",  text);	  _verifyValueWrite(   "write    text    length   ");    	non-compiled	[CE]  no  suitable  method  found  for  _verifyValueWrite(String,String)	27	None	replace
6	[BUG]  [BUGGY]  _writer.writeRawLong(text,  room,  _outputTail);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.writeRawLong(text,  room,  _outputTail);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.writeRawLong(text,  room,  _outputTail);	  _writer.writeRawLong(text,    room);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
7	[BUG]  [BUGGY]  _writer.writeRawLong(text,  room  +  1);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.writeRawLong(text,  room  +  1);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.writeRawLong(text,  room  +  1);	  _writer.writeRawLong(text,    room);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
8	[BUG]  [BUGGY]  _writer.writeRawLong(text,  room,  _outputBuffer);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.writeRawLong(text,  room,  _outputBuffer);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.writeRawLong(text,  room,  _outputBuffer);	  _writer.writeRawLong(text,    room);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
9	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room    >=    _outputEnd)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(room  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	45	1	add
10	[BUG]  [BUGGY]  if(room  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    >=    _outputEnd)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(room  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	45	1	add
11	[BUG]  [BUGGY]  if(room  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >>  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [CE]  incompatible  types  [FE]      StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >>  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    >=    _outputEnd)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(room  >>  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	non-compiled	[CE]  incompatible  types	45	None	add
12	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >=  _outputEnd)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room    >=    _outputEnd)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(room  >=  _outputEnd)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	45	1	add
13	[BUG]  [BUGGY]  if(room  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >=  _outputEnd)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >=  _outputEnd)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    >=    _outputEnd)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(room  >=  _outputEnd)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	45	1	add
14	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room!=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room    >=    _outputEnd)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(room!=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	45	1	add
15	[BUG]  [BUGGY]  if(room  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room!=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room!=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    >=    _outputEnd)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(room!=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	45	1	add
16	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(text!=  null)  {  _writer.write(text);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(text!=  null)  {  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail  >=  _outputEnd)  {  if(text!=  null)  {  _writer.write(text);  }	  if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _flushBuffer();    }    	non-compiled	[CE]  ';'  expected	77	None	replace
17	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(text!=  null)  {  _writer.write(text);  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(text!=  null)  {  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  SHORT_WRITE)  {  if(text!=  null)  {  _writer.write(text);  }	  if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _flushBuffer();    }    	non-compiled	[CE]  ';'  expected	77	None	replace
18	[BUG]  [BUGGY]  if(_outputTail  >=  room)  {  if(text!=  null)  {  _writer.write(text);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail  >=  room)  {  if(text!=  null)  {  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail  >=  room)  {  if(text!=  null)  {  _writer.write(text);  }	  if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _flushBuffer();    }    	non-compiled	[CE]  ';'  expected	77	None	replace
19	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [CE]  ';'  expected  [FE]    IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  SHORT_WRITE)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  SHORT_WRITE)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }	  _writer.write(text);    if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    	non-compiled	[CE]  ';'  expected	79	None	replace
20	[BUG]  [BUGGY]  if(_outputTail  >=  room)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [CE]  ';'  expected  [FE]      IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail  >=  room)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail  >=  room)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }	  _writer.write(text);    if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    	non-compiled	[CE]  ';'  expected	79	None	replace
21	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [CE]  ';'  expected  [FE]        IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail  >=  _outputEnd)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }	  _writer.write(text);    if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    	non-compiled	[CE]  ';'  expected	79	None	replace
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _outputTail  =  room;  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_outputTail  =  room;	  if(_outputTail    >    room)    {    _flushBuffer();    }    while(_outputTail    >    room)    {    _flushBuffer();    }    	compilable	  [FE]  AssertionFailedError  	50	1	replace
23	[BUG]  [BUGGY]  _outputTail  =  room;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _outputTail  =  room;  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_outputTail  =  room;	  if(_outputTail    >    room)    {    _flushBuffer();    }    while(_outputTail    >    room)    {    _flushBuffer();    }    	compilable	  [FE]  AssertionFailedError  	50	1	replace
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite(   "write  text  value.   ");  _verifyValueWrite( "write  text  value.   ");  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_verifyValueWrite(   "write    text    value.   ");    _verifyValueWrite( "write  text  value.   ");	  	compilable	  [FE]  AssertionFailedError  	69	1	add
25	[BUG]  [BUGGY]  _verifyValueWrite(   "write  text  value.   ");  _verifyValueWrite( "write  text  value.   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite(   "write  text  value.   ");  _verifyValueWrite( "write  text  value.   ");  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite(   "write    text    value.   ");    _verifyValueWrite( "write  text  value.   ");	  	compilable	  [FE]  AssertionFailedError  	69	1	add
26	[BUG]  [BUGGY]  _verifyValueWrite(   "write  text  value.   ");  _verifyValueWrite( "write  text  value. "));  [CE]  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite(   "write  text  value.   ");  _verifyValueWrite( "write  text  value. "));  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite(   "write    text    value.   ");    _verifyValueWrite( "write  text  value. "));	  	non-compiled	[CE]  	69	None	add
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite(   "write  text  value.   ");  _verifyValueWrite( ",write  text  value.   ");  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_verifyValueWrite(   "write    text    value.   ");    _verifyValueWrite( ",write  text  value.   ");	  	compilable	  [FE]  AssertionFailedError  	69	1	add
28	[BUG]  [BUGGY]  _verifyValueWrite(   "write  text  value.   ");  _verifyValueWrite( ",write  text  value.   ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite(   "write  text  value.   ");  _verifyValueWrite( ",write  text  value.   ");  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite(   "write    text    value.   ");    _verifyValueWrite( ",write  text  value.   ");	  	compilable	  [FE]  AssertionFailedError  	69	1	add
29	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room    >    _outputTail)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(room  >  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	8	1	add
30	[BUG]  [BUGGY]  if(room  >  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    >    _outputTail)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(room  >  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	8	1	add
31	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >  _outputTail)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room    >    _outputTail)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(room  >  _outputTail)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	8	1	add
32	[BUG]  [BUGGY]  if(room  >  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >  _outputTail)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >  _outputTail)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    >    _outputTail)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(room  >  _outputTail)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	8	1	add
33	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  <  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room    >    _outputTail)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(room  <  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	8	1	add
34	[BUG]  [BUGGY]  if(room  >  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  <  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  <  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    >    _outputTail)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(room  <  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	8	1	add
35	[BUG]  [BUGGY]  if(room  >  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  If(room  >  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]          StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  If(room  >  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    >    _outputTail)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    If(room  >  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	non-compiled	[CE]  ';'  expected	8	None	add
36	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite(   "write  text  length   ");  _verifyValueWrite( "write  text  length   ");  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_verifyValueWrite(   "write    text    length   ");    _verifyValueWrite( "write  text  length   ");	  	compilable	  [FE]  AssertionFailedError  	26	1	add
37	[BUG]  [BUGGY]  _verifyValueWrite(   "write  text  length   ");  _verifyValueWrite( "write  text  length   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite(   "write  text  length   ");  _verifyValueWrite( "write  text  length   ");  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite(   "write    text    length   ");    _verifyValueWrite( "write  text  length   ");	  	compilable	  [FE]  AssertionFailedError  	26	1	add
38	[BUG]  [BUGGY]  _verifyValueWrite(   "write  text  length   ");  _verifyValueWrite( "write  text  length "));  [CE]  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite(   "write  text  length   ");  _verifyValueWrite( "write  text  length "));  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite(   "write    text    length   ");    _verifyValueWrite( "write  text  length "));	  	non-compiled	[CE]  	26	None	add
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite(   "write  text  length   ");  _verifyValueWrite( ",write  text  length   ");  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_verifyValueWrite(   "write    text    length   ");    _verifyValueWrite( ",write  text  length   ");	  	compilable	  [FE]  AssertionFailedError  	26	1	add
40	[BUG]  [BUGGY]  _verifyValueWrite(   "write  text  length   ");  _verifyValueWrite( ",write  text  length   ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite(   "write  text  length   ");  _verifyValueWrite( ",write  text  length   ");  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite(   "write    text    length   ");    _verifyValueWrite( ",write  text  length   ");	  	compilable	  [FE]  AssertionFailedError  	26	1	add
41	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ");  }  else  {  _writer.writeRawLong(text);  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite( "write  text  value ");  }  else  {  _writer.writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite( "write  text  value ");  }  else  {  _writer.writeRawLong(text);  }	  if(_writer!=    null)    {    _verifyValueWrite(   "write    text    value   ");    }    else    {    _writer.writeRawLong(text);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
42	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]    IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  SHORT_WRITE)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  SHORT_WRITE)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }	  _writer.write(text);    if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _flushBuffer();    }    	non-compiled	[CE]  ';'  expected	84	None	replace
43	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]      IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  <  SHORT_WRITE)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  <  SHORT_WRITE)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }	  _writer.write(text);    if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _flushBuffer();    }    	non-compiled	[CE]  ';'  expected	84	None	replace
44	[BUG]  [BUGGY]  if(_outputTail  >=  room)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]        IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail  >=  room)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail  >=  room)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }	  _writer.write(text);    if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _flushBuffer();    }    	non-compiled	[CE]  ';'  expected	84	None	replace
45	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >=  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >=    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	65	1	add
46	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >=  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >=  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >=    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	65	1	add
47	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >=  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >  space)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [CE]  cannot  find  symbol  space  [FE]      StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >=  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >  space)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >=    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  space)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	non-compiled	[CE]  cannot  find  symbol  space	65	None	add
48	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >=  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  <  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >=    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  <  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	65	1	add
49	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >=  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  <  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >=  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  <  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >=    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  <  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	65	1	add
50	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >=  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  If(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]          StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >=  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  If(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >=    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    If(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	non-compiled	[CE]  ';'  expected	65	None	add
51	[BUG]  [BUGGY]  ||(room  <  _outputEnd  &&  _outputTail  >  0))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  ||(room  <  _outputEnd  &&  _outputTail  >  0))  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	||(room  <  _outputEnd  &&  _outputTail  >  0))  {  _flushBuffer();  }	  if(room    <    _outputEnd)    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
52	[BUG]  [BUGGY]  ||(room  >=  _outputEnd  &&  _outputTail)>  _outputEnd)  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  ||(room  >=  _outputEnd  &&  _outputTail)>  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	||(room  >=  _outputEnd  &&  _outputTail)>  _outputEnd)  {  _flushBuffer();  }	  if(room    <    _outputEnd)    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
53	[BUG]  [BUGGY]  ||(room  >=  _outputEnd  &&  _outputTail  >  0))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  ||(room  >=  _outputEnd  &&  _outputTail  >  0))  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	||(room  >=  _outputEnd  &&  _outputTail  >  0))  {  _flushBuffer();  }	  if(room    <    _outputEnd)    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
54	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite(     "write    text    value     ");    _verifyValueWrite(   "write  text  value     ");  _verifyValueWrite( "write  text  value   ");  _verifyValueWrite( "write  text  value   ");  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_verifyValueWrite(       "write        text        value       ");        _verifyValueWrite(   "write    text    value       ");    _verifyValueWrite( "write  text  value   ");  _verifyValueWrite( "write  text  value   ");	  	compilable	  [FE]  AssertionFailedError  	14	1	add
55	[BUG]  [BUGGY]  _verifyValueWrite(     "write    text    value     ");    _verifyValueWrite(   "write  text  value     ");  _verifyValueWrite( "write  text  value   ");  _verifyValueWrite( "write  text  value   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite(     "write    text    value     ");    _verifyValueWrite(   "write  text  value     ");  _verifyValueWrite( "write  text  value   ");  _verifyValueWrite( "write  text  value   ");  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite(       "write        text        value       ");        _verifyValueWrite(   "write    text    value       ");    _verifyValueWrite( "write  text  value   ");  _verifyValueWrite( "write  text  value   ");	  	compilable	  [FE]  AssertionFailedError  	14	1	add
56	[BUG]  [BUGGY]  if(room  >  room)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  room)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >  room)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text);  }	  _writer.write(text);    if(_writer!=    null)    {    if(_writer!=    null)    {    _writer    =    new    SerializableString(text);    }    	non-compiled	[CE]  ';'  expected	42	None	replace
57	[BUG]  [BUGGY]  if(room  >  room)  {  _writer.write(text);  if(_writer  ==  null)  {  _writer  =  new  SerializableString(text);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  room)  {  _writer.write(text);  if(_writer  ==  null)  {  _writer  =  new  SerializableString(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >  room)  {  _writer.write(text);  if(_writer  ==  null)  {  _writer  =  new  SerializableString(text);  }	  _writer.write(text);    if(_writer!=    null)    {    if(_writer!=    null)    {    _writer    =    new    SerializableString(text);    }    	non-compiled	[CE]  ';'  expected	42	None	replace
58	[BUG]  [BUGGY]  _writer  =  new  SerializableString(text);  [CE]  cannot  assign  a  value  to  final  variable  _writer  [FE]                AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer  =  new  SerializableString(text);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer  =  new  SerializableString(text);	  _writer.write(text);    if(_writer!=    null)    {    if(_writer!=    null)    {    _writer    =    new    SerializableString(text);    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  _writer	42	None	replace
59	[BUG]  [BUGGY]  _writeRawLong(text,  null);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writeRawLong(text,  null);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writeRawLong(text,  null);	  _writeRawLong(text,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
60	[BUG]  [BUGGY]  _writeRawLong(text,  0,  _outputTail);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writeRawLong(text,  0,  _outputTail);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writeRawLong(text,  0,  _outputTail);	  _writeRawLong(text,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
61	[BUG]  [BUGGY]  _writeRawLong(text.getChars(0,  room,  _outputBuffer,  _outputTail));  [CE]  'void'  type  not  allowed  here  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writeRawLong(text.getChars(0,  room,  _outputBuffer,  _outputTail));  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writeRawLong(text.getChars(0,  room,  _outputBuffer,  _outputTail));	  if(room    >    _outputTail)    {    _flushBuffer();    }    	non-compiled	[CE]  'void'  type  not  allowed  here	13	None	replace
62	[BUG]  [BUGGY]  _writeRawLong(text.getChars(0,  room,  _outputBuffer,  _outputTail),  _outputTail);  [CE]  'void'  type  not  allowed  here  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writeRawLong(text.getChars(0,  room,  _outputBuffer,  _outputTail),  _outputTail);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writeRawLong(text.getChars(0,  room,  _outputBuffer,  _outputTail),  _outputTail);	  if(room    >    _outputTail)    {    _flushBuffer();    }    	non-compiled	[CE]  'void'  type  not  allowed  here	13	None	replace
63	[BUG]  [BUGGY]  _writeRawLong(text.getChars(0,  room),  _outputBuffer,  _outputTail);  [CE]  no  suitable  method  found  for  getChars(int,int)  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writeRawLong(text.getChars(0,  room),  _outputBuffer,  _outputTail);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writeRawLong(text.getChars(0,  room),  _outputBuffer,  _outputTail);	  if(room    >    _outputTail)    {    _flushBuffer();    }    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int)	13	None	replace
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _outputHead    =    0;    }    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	74	1	add
65	[BUG]  [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _outputHead    =    0;    }    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	74	1	add
66	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  if(text  ==  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _outputHead    =    0;    }    if(text  ==  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	74	1	add
67	[BUG]  [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  if(text  ==  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  if(text  ==  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _outputHead    =    0;    }    if(text  ==  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	74	1	add
68	[BUG]  [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  If(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  If(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _outputHead    =    0;    }    If(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }	  	non-compiled	[CE]  ';'  expected	74	None	add
69	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputHead);  _outputTail  +=  room;  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _outputHead    =    0;    }    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputHead);  _outputTail  +=  room;  }	  	compilable	  [FE]  AssertionFailedError  	74	1	add
70	[BUG]  [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputHead);  _outputTail  +=  room;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputHead);  _outputTail  +=  room;  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _outputHead    =    0;    }    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputHead);  _outputTail  +=  room;  }	  	compilable	  [FE]  AssertionFailedError  	74	1	add
71	[BUG]  [BUGGY]  _writer.writeRaw(text,  null);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.writeRaw(text,  null);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.writeRaw(text,  null);	          _writer.writeRaw(text);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
72	[BUG]  [BUGGY]  _writer.writeRaw(text,  room);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.writeRaw(text,  room);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.writeRaw(text,  room);	          _writer.writeRaw(text);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
73	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	15	1	replace
74	[BUG]  [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	15	1	replace
75	[BUG]  [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }  else  {  _writer.writeRawLong(text);  }  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }  else  {  _writer.writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }  else  {  _writer.writeRawLong(text);  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value       ");    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
76	[BUG]  [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }  else  {  _writer.writeLong(text);  }  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }  else  {  _writer.writeLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }  else  {  _writer.writeLong(text);  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value       ");    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
77	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  _writer.write(text);  if(_writer!=  null)  {  if(text.length()  ==  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  }  }  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  _writer.write(text);  if(_writer!=  null)  {  if(text.length()  ==  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  }  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail  >=  _outputEnd)  {  _writer.write(text);  if(_writer!=  null)  {  if(text.length()  ==  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  }  }	  _writer.write(text);    if(_writer!=    null)    {    if(text.length()    ==    0)    {    text.getChars(0,    room,    _outputBuffer,    0);    }    	non-compiled	[CE]  ';'  expected	57	None	replace
78	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  _writer.write(text);  if(_writer!=  null)  {  if(text.length()  ==  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  _writer.write(text);  if(_writer!=  null)  {  if(text.length()  ==  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail  >=  _outputEnd)  {  _writer.write(text);  if(_writer!=  null)  {  if(text.length()  ==  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  }	  _writer.write(text);    if(_writer!=    null)    {    if(text.length()    ==    0)    {    text.getChars(0,    room,    _outputBuffer,    0);    }    	non-compiled	[CE]  ';'  expected	57	None	replace
79	[BUG]  [BUGGY]  if(_outputTail  >  room)  {  _writer.write(text);  if(_writer!=  null)  {  if(text.length()  ==  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail  >  room)  {  _writer.write(text);  if(_writer!=  null)  {  if(text.length()  ==  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail  >  room)  {  _writer.write(text);  if(_writer!=  null)  {  if(text.length()  ==  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  }	  _writer.write(text);    if(_writer!=    null)    {    if(text.length()    ==    0)    {    text.getChars(0,    room,    _outputBuffer,    0);    }    	non-compiled	[CE]  ';'  expected	57	None	replace
80	[BUG]  [BUGGY]  TextUtilities.writeRawLong(text,  _outputBuffer);  [CE]  cannot  find  symbol  TextUtilities  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  TextUtilities.writeRawLong(text,  _outputBuffer);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	TextUtilities.writeRawLong(text,  _outputBuffer);	  TextUtilities.writeRawLong(text);    	non-compiled	[CE]  cannot  find  symbol  TextUtilities	53	None	replace
81	[BUG]  [BUGGY]  TextUtilities.writeRawLong(text,  room);  [CE]  cannot  find  symbol  TextUtilities  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  TextUtilities.writeRawLong(text,  room);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	TextUtilities.writeRawLong(text,  room);	  TextUtilities.writeRawLong(text);    	non-compiled	[CE]  cannot  find  symbol  TextUtilities	53	None	replace
82	[BUG]  [BUGGY]  TextUtilities.writeRawLong(text,  _outputTail);  [CE]  cannot  find  symbol  TextUtilities  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  TextUtilities.writeRawLong(text,  _outputTail);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	TextUtilities.writeRawLong(text,  _outputTail);	  TextUtilities.writeRawLong(text);    	non-compiled	[CE]  cannot  find  symbol  TextUtilities	53	None	replace
83	[BUG]  [BUGGY]  ||(_writer!=  null  &&  _writer.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  _verifyValueWrite( "write  text  value ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  ||(_writer!=  null  &&  _writer.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  _verifyValueWrite( "write  text  value ");  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	||(_writer!=  null  &&  _writer.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  _verifyValueWrite( "write  text  value ");  }	  if(_writer!=    null)    {    _verifyValueWrite(   "write    text    value   ");    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
84	[BUG]  [BUGGY]  ||(_writer!=  null  &&  _writer.isEmpty()))  {  _verifyValueWrite( "write  text  value ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  ||(_writer!=  null  &&  _writer.isEmpty()))  {  _verifyValueWrite( "write  text  value ");  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	||(_writer!=  null  &&  _writer.isEmpty()))  {  _verifyValueWrite( "write  text  value ");  }	  if(_writer!=    null)    {    _verifyValueWrite(   "write    text    value   ");    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
85	[BUG]  [BUGGY]  ||(room  <  SHORT_WRITE  &&  room  >  _outputEnd))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  ||(room  <  SHORT_WRITE  &&  room  >  _outputEnd))  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	||(room  <  SHORT_WRITE  &&  room  >  _outputEnd))  {  _flushBuffer();  }	  if(room    >    _outputEnd)    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
86	[BUG]  [BUGGY]  if(_outputTail  >  room)  {  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail  >  room)  {  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail  >  room)  {  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }	  _writer.write(text);    if(_writer!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _writer.write(text);    }    	non-compiled	[CE]  ';'  expected	59	None	replace
87	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail  >=  _outputEnd)  {  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }	  _writer.write(text);    if(_writer!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _writer.write(text);    }    	non-compiled	[CE]  ';'  expected	59	None	replace
88	[BUG]  [BUGGY]  if(_outputTail  >=  room)  {  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail  >=  room)  {  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail  >=  room)  {  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }	  _writer.write(text);    if(_writer!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _writer.write(text);    }    	non-compiled	[CE]  ';'  expected	59	None	replace
89	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite(     "write    text    value     ");    _verifyValueWrite(   ",write  text  value     ");  _verifyValueWrite( "write  text  value   ");  _verifyValueWrite( ",write  text  value   ");  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_verifyValueWrite(       "write        text        value       ");        _verifyValueWrite(   ",write    text    value       ");    _verifyValueWrite( "write  text  value   ");  _verifyValueWrite( ",write  text  value   ");	  	compilable	  [FE]  AssertionFailedError  	17	1	add
90	[BUG]  [BUGGY]  _verifyValueWrite(     "write    text    value     ");    _verifyValueWrite(   ",write  text  value     ");  _verifyValueWrite( "write  text  value   ");  _verifyValueWrite( ",write  text  value   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite(     "write    text    value     ");    _verifyValueWrite(   ",write  text  value     ");  _verifyValueWrite( "write  text  value   ");  _verifyValueWrite( ",write  text  value   ");  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite(       "write        text        value       ");        _verifyValueWrite(   ",write    text    value       ");    _verifyValueWrite( "write  text  value   ");  _verifyValueWrite( ",write  text  value   ");	  	compilable	  [FE]  AssertionFailedError  	17	1	add
91	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  _writer.write(text);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _flushBuffer();    }    _writer.write(text);	  	compilable	  [FE]  IndexOutOfBoundsException  	83	1	add
92	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  _writer.write(text);  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  _writer.write(text);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _flushBuffer();    }    _writer.write(text);	  	compilable	  [FE]  IndexOutOfBoundsException  	83	1	add
93	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  if(_writer!=  null)  {  if(_writer!=  null)  {  _writer  =  new  SerializableStringBuilder();  }  [CE]  ';'  expected  [FE]      IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  if(_writer!=  null)  {  if(_writer!=  null)  {  _writer  =  new  SerializableStringBuilder();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _flushBuffer();    }    if(_writer!=  null)  {  if(_writer!=  null)  {  _writer  =  new  SerializableStringBuilder();  }	  	non-compiled	[CE]  ';'  expected	83	None	add
94	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  if(_writer!=  null)  {  if(_writer!=  null)  {  _writer  =  new  SerializableString(text);  }  [CE]  ';'  expected  [FE]        IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  if(_writer!=  null)  {  if(_writer!=  null)  {  _writer  =  new  SerializableString(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _flushBuffer();    }    if(_writer!=  null)  {  if(_writer!=  null)  {  _writer  =  new  SerializableString(text);  }	  	non-compiled	[CE]  ';'  expected	83	None	add
95	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  if(_writer!=  null)  {  if(_writer!=  null)  {  _writer  =  new  SerializableStringGenerator();  }  [CE]  ';'  expected  [FE]          IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  if(_writer!=  null)  {  if(_writer!=  null)  {  _writer  =  new  SerializableStringGenerator();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _flushBuffer();    }    if(_writer!=  null)  {  if(_writer!=  null)  {  _writer  =  new  SerializableStringGenerator();  }	  	non-compiled	[CE]  ';'  expected	83	None	add
96	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  if(_writer!=  null)  {  if(_writer!=  null)  {  _writer  =  new  StringBuilder();  }  [CE]  ';'  expected  [FE]            IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  if(_writer!=  null)  {  if(_writer!=  null)  {  _writer  =  new  StringBuilder();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _flushBuffer();    }    if(_writer!=  null)  {  if(_writer!=  null)  {  _writer  =  new  StringBuilder();  }	  	non-compiled	[CE]  ';'  expected	83	None	add
97	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ",write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	18	1	replace
98	[BUG]  [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ",write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	18	1	replace
99	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite( ",write  text  value ");  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_verifyValueWrite( ",write  text  value ");	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ",write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	18	1	replace
100	[BUG]  [BUGGY]  _verifyValueWrite( ",write  text  value ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite( ",write  text  value ");  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite( ",write  text  value ");	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ",write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	18	1	replace
101	[BUG]  [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }  else  {  _writer.writeRawLong(text);  }  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }  else  {  _writer.writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }  else  {  _writer.writeRawLong(text);  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ",write    text    value       ");    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
102	[BUG]  [BUGGY]  ||(_outputTail  >=  room  &&  _outputHead!=  null))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  ||(_outputTail  >=  room  &&  _outputHead!=  null))  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	||(_outputTail  >=  room  &&  _outputHead!=  null))  {  _flushBuffer();  }	  ||(_outputTail    >    room    &&    _outputHead!=    null))    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
103	[BUG]  [BUGGY]  ||(room  >  _outputHead  &&  _outputTail!=  null))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  ||(room  >  _outputHead  &&  _outputTail!=  null))  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	||(room  >  _outputHead  &&  _outputTail!=  null))  {  _flushBuffer();  }	  ||(_outputTail    >    room    &&    _outputHead!=    null))    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
104	[BUG]  [BUGGY]  ||(room  >  _outputEnd  &&  _outputHead!=  null))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  ||(room  >  _outputEnd  &&  _outputHead!=  null))  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	||(room  >  _outputEnd  &&  _outputHead!=  null))  {  _flushBuffer();  }	  ||(_outputTail    >    room    &&    _outputHead!=    null))    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
105	[BUG]  [BUGGY]  if(_outputTail  >=  room)  {  _flushBuffer();  }  else  {  writeRawLong(text.getChars(0,  room,  _outputBuffer,  0));  }  [CE]  'void'  type  not  allowed  here  [FE]        AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail  >=  room)  {  _flushBuffer();  }  else  {  writeRawLong(text.getChars(0,  room,  _outputBuffer,  0));  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail  >=  room)  {  _flushBuffer();  }  else  {  writeRawLong(text.getChars(0,  room,  _outputBuffer,  0));  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text.getChars(0,    room,    _outputBuffer,    0));    }    	non-compiled	[CE]  'void'  type  not  allowed  here	64	None	replace
106	[BUG]  [BUGGY]  _writeRawLong(text.getChars(0,  room,  _outputBuffer,  0));  [CE]  'void'  type  not  allowed  here  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writeRawLong(text.getChars(0,  room,  _outputBuffer,  0));  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writeRawLong(text.getChars(0,  room,  _outputBuffer,  0));	  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text.getChars(0,    room,    _outputBuffer,    0));    }    	non-compiled	[CE]  'void'  type  not  allowed  here	64	None	replace
107	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  _outputEnd)  {  _flushBuffer();  }  if(room  >=  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room    >=    _outputEnd)    {    _flushBuffer();    }    if(room  >=  _outputEnd)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
108	[BUG]  [BUGGY]  if(room  >=  _outputEnd)  {  _flushBuffer();  }  if(room  >=  _outputEnd)  {  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  _outputEnd)  {  _flushBuffer();  }  if(room  >=  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    >=    _outputEnd)    {    _flushBuffer();    }    if(room  >=  _outputEnd)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
109	[BUG]  [BUGGY]  if(room  >=  _outputEnd)  {  _flushBuffer();  }  if(room  >>  _outputEnd)  {  _flushBuffer();  }  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  _outputEnd)  {  _flushBuffer();  }  if(room  >>  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    >=    _outputEnd)    {    _flushBuffer();    }    if(room  >>  _outputEnd)  {  _flushBuffer();  }	  	non-compiled	[CE]  incompatible  types	60	None	add
110	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  _outputEnd)  {  _flushBuffer();  }  if(room!=  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room    >=    _outputEnd)    {    _flushBuffer();    }    if(room!=  _outputEnd)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
111	[BUG]  [BUGGY]  if(room  >=  _outputEnd)  {  _flushBuffer();  }  if(room!=  _outputEnd)  {  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  _outputEnd)  {  _flushBuffer();  }  if(room!=  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    >=    _outputEnd)    {    _flushBuffer();    }    if(room!=  _outputEnd)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
112	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  _outputEnd)  {  _flushBuffer();  }  if(room  ==  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room    >=    _outputEnd)    {    _flushBuffer();    }    if(room  ==  _outputEnd)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
113	[BUG]  [BUGGY]  if(room  >=  _outputEnd)  {  _flushBuffer();  }  if(room  ==  _outputEnd)  {  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  _outputEnd)  {  _flushBuffer();  }  if(room  ==  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    >=    _outputEnd)    {    _flushBuffer();    }    if(room  ==  _outputEnd)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
114	[BUG]  [BUGGY]  _writer.writeRawLong(text,  _outputBuffer,  _outputTail);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.writeRawLong(text,  _outputBuffer,  _outputTail);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.writeRawLong(text,  _outputBuffer,  _outputTail);	  _writer.writeRawLong(text,    _outputBuffer);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
115	[BUG]  [BUGGY]  _writer.writeRawLong(text,  _outputBuffer,  _outputHead);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.writeRawLong(text,  _outputBuffer,  _outputHead);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.writeRawLong(text,  _outputBuffer,  _outputHead);	  _writer.writeRawLong(text,    _outputBuffer);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
116	[BUG]  [BUGGY]  ||(room  >=  _outputEnd  &&  _outputTail  +  len)>  _outputEnd)  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  ||(room  >=  _outputEnd  &&  _outputTail  +  len)>  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	||(room  >=  _outputEnd  &&  _outputTail  +  len)>  _outputEnd)  {  _flushBuffer();  }	  if(room    >=    _outputEnd)    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
117	[BUG]  [BUGGY]  ||(room  >=  _outputEnd  &&  _outputBuffer!=  null))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  ||(room  >=  _outputEnd  &&  _outputBuffer!=  null))  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	||(room  >=  _outputEnd  &&  _outputBuffer!=  null))  {  _flushBuffer();  }	  if(room    >=    _outputEnd)    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
118	[BUG]  [BUGGY]  if(room  >=  0)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [CE]  ';'  expected  [FE]    IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  0)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  0)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }	  _writer.write(text);    if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _writer.write(text);    }    	non-compiled	[CE]  ';'  expected	82	None	replace
119	[BUG]  [BUGGY]  if(room  >=  0)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write  [CE]  not  a  statement  [FE]      IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  0)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  0)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write	  _writer.write(text);    if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _writer.write(text);    }    	non-compiled	[CE]  not  a  statement	82	None	replace
120	[BUG]  [BUGGY]  if(room  >=  0)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  [CE]  ';'  expected  [FE]        IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  0)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  0)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }	  _writer.write(text);    if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _writer.write(text);    }    	non-compiled	[CE]  ';'  expected	82	None	replace
121	[BUG]  [BUGGY]  _writer.writeLong(text,  room);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.writeLong(text,  room);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.writeLong(text,  room);	          _writer.writeLong(text);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
122	[BUG]  [BUGGY]  _writer.writeLong(text,  _outputBuffer);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.writeLong(text,  _outputBuffer);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.writeLong(text,  _outputBuffer);	          _writer.writeLong(text);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
123	[BUG]  [BUGGY]  _writer.writeLong(text,  null);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.writeLong(text,  null);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.writeLong(text,  null);	          _writer.writeLong(text);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
124	[BUG]  [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  _writeRawLong(text);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  _writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  _writeRawLong(text);  }	  _verifyValueWrite(   "write    text    value   ");    if(text!=    null)    {    _writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	85	None	replace
125	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ");  }  else  {  _writer.writeLong(text);  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite( "write  text  value ");  }  else  {  _writer.writeLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite( "write  text  value ");  }  else  {  _writer.writeLong(text);  }	  if(_writer!=    null)    {    _verifyValueWrite(   "write    text    value   ");    }    else    {    _writer.writeLong(text);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
126	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _outputTail  +=  room;  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_outputTail  +=  room;	  if(room    >=    _outputMaxContiguous)    {    if(_outputTail    >    room)    {    _flushBuffer();    }    	compilable	  [FE]  AssertionFailedError  	48	1	replace
127	[BUG]  [BUGGY]  _outputTail  +=  room;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _outputTail  +=  room;  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_outputTail  +=  room;	  if(room    >=    _outputMaxContiguous)    {    if(_outputTail    >    room)    {    _flushBuffer();    }    	compilable	  [FE]  AssertionFailedError  	48	1	replace
128	[BUG]  [BUGGY]  if(room  >  room)  {  _writer.write(text);  if(_writer!=  null)  {  if(!_writer.isEmpty())  {  _writer.write(text);  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  room)  {  _writer.write(text);  if(_writer!=  null)  {  if(!_writer.isEmpty())  {  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >  room)  {  _writer.write(text);  if(_writer!=  null)  {  if(!_writer.isEmpty())  {  _writer.write(text);  }	  _writer.write(text);    if(_writer!=    null)    {    if(!_writer.isEmpty())    {    _writer.write(text);    }    	non-compiled	[CE]  ';'  expected	41	None	replace
129	[BUG]  [BUGGY]  if(_writer!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  if(!_writer.isEmpty())  {  _writer.write(text);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_writer!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  if(!_writer.isEmpty())  {  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_writer!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  if(!_writer.isEmpty())  {  _writer.write(text);  }	  _writer.write(text);    if(_writer!=    null)    {    if(!_writer.isEmpty())    {    _writer.write(text);    }    	non-compiled	[CE]  ';'  expected	41	None	replace
130	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  text.length();  }	  _writer.write(text);    if(_writer!=    null)    {    if(!_writer.isEmpty())    {    _writer.write(text);    }    	compilable	  [FE]  AssertionFailedError  	41	1	replace
131	[BUG]  [BUGGY]  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  text.length();  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  text.length();  }	  _writer.write(text);    if(_writer!=    null)    {    if(!_writer.isEmpty())    {    _writer.write(text);    }    	compilable	  [FE]  AssertionFailedError  	41	1	replace
132	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text);        if(_writer!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _writer.write(text);    }    _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }	  	compilable	  [FE]  AssertionFailedError  	58	1	add
133	[BUG]  [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(_writer!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _writer.write(text);    }    _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }	  	compilable	  [FE]  AssertionFailedError  	58	1	add
134	[BUG]  [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(_writer!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _writer.write(text);    }    if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.	  	non-compiled	[CE]  ';'  expected	58	None	add
135	[BUG]  [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  if(_writer!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  if(_writer!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(_writer!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _writer.write(text);    }    if(_writer!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }	  	non-compiled	[CE]  ';'  expected	58	None	add
136	[BUG]  [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(_writer!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _writer.write(text);    }    if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write	  	non-compiled	[CE]  ';'  expected	58	None	add
137	[BUG]  [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(_writer!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _writer.write(text);    }    if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer	  	non-compiled	[CE]  ';'  expected	58	None	add
138	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite(   "write  text  value   ");  }  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value   ");  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(_writer!=    null)    {    _verifyValueWrite(   "write    text    value   ");    }    if(_writer!=  null)  {  _verifyValueWrite( "write  text  value   ");  }	  	compilable	  [FE]  AssertionFailedError  	35	1	add
139	[BUG]  [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite(   "write  text  value   ");  }  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite(   "write  text  value   ");  }  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value   ");  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_writer!=    null)    {    _verifyValueWrite(   "write    text    value   ");    }    if(_writer!=  null)  {  _verifyValueWrite( "write  text  value   ");  }	  	compilable	  [FE]  AssertionFailedError  	35	1	add
140	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite(   "write  text  value   ");  }  if(_writer  ==  null)  {  _verifyValueWrite( "write  text  value   ");  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(_writer!=    null)    {    _verifyValueWrite(   "write    text    value   ");    }    if(_writer  ==  null)  {  _verifyValueWrite( "write  text  value   ");  }	  	compilable	  [FE]  AssertionFailedError  	35	1	add
141	[BUG]  [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite(   "write  text  value   ");  }  if(_writer  ==  null)  {  _verifyValueWrite( "write  text  value   ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite(   "write  text  value   ");  }  if(_writer  ==  null)  {  _verifyValueWrite( "write  text  value   ");  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_writer!=    null)    {    _verifyValueWrite(   "write    text    value   ");    }    if(_writer  ==  null)  {  _verifyValueWrite( "write  text  value   ");  }	  	compilable	  [FE]  AssertionFailedError  	35	1	add
142	[BUG]  [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite(   "write  text  value   ");  }  If(_writer!=  null)  {  _verifyValueWrite( "write  text  value   ");  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite(   "write  text  value   ");  }  If(_writer!=  null)  {  _verifyValueWrite( "write  text  value   ");  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_writer!=    null)    {    _verifyValueWrite(   "write    text    value   ");    }    If(_writer!=  null)  {  _verifyValueWrite( "write  text  value   ");  }	  	non-compiled	[CE]  	35	None	add
143	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail  >=  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(_outputTail  >=  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail    >    room)    {    writeRawLong(text);    }    else    {    writeRawLong(text);    }    	compilable	  [FE]  AssertionFailedError  	34	1	replace
144	[BUG]  [BUGGY]  if(_outputTail  >=  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [FE]  AssertionFailedError  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail  >=  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail  >=  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail    >    room)    {    writeRawLong(text);    }    else    {    writeRawLong(text);    }    	compilable	  [FE]  AssertionFailedError  	34	1	replace
145	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail  >=  room)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(_outputTail  >=  room)  {  _flushBuffer();  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail    >    room)    {    writeRawLong(text);    }    else    {    writeRawLong(text);    }    	compilable	  [FE]  AssertionFailedError  	34	1	replace
146	[BUG]  [BUGGY]  if(_outputTail  >=  room)  {  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]      StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail  >=  room)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail  >=  room)  {  _flushBuffer();  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail    >    room)    {    writeRawLong(text);    }    else    {    writeRawLong(text);    }    	compilable	  [FE]  AssertionFailedError  	34	1	replace
147	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	29	1	add
148	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	29	1	add
149	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >  space)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [CE]  cannot  find  symbol  space  [FE]      StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >  space)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  space)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	non-compiled	[CE]  cannot  find  symbol  space	29	None	add
150	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  If(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]        StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  If(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    If(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	non-compiled	[CE]  ';'  expected	29	None	add
151	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  _writeBuffer();  }  else  {  writeRawLong(text);  }  [CE]  cannot  find  symbol  [FE]          StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  _writeBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  _writeBuffer();  }  else  {  writeRawLong(text);  }	  	non-compiled	[CE]  cannot  find  symbol	29	None	add
152	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >    room)    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	67	1	add
153	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >    room)    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	67	1	add
154	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >    room)    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	67	1	add
155	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }  [FE]  StackOverflowError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >    room)    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	67	1	add
156	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  if(_outputTail  >  space)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [CE]  cannot  find  symbol  space  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  if(_outputTail  >  space)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >    room)    {    writeRawLong(text);    }    if(_outputTail  >  space)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	non-compiled	[CE]  cannot  find  symbol  space	67	None	add
157	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  If(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  If(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >    room)    {    writeRawLong(text);    }    If(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	non-compiled	[CE]  ';'  expected	67	None	add
158	[BUG]  [BUGGY]  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  writeRawLong(text.charAt(i));  }  [CE]  cannot  find  symbol  start  [FE]        AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  writeRawLong(text.charAt(i));  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  writeRawLong(text.charAt(i));  }	          if(room    <    SHORT_WRITE)    {    int    len    =    text.length();    for(int    i    =    start;    i    <    len;    ++i)    {    writeRawLong(text.charAt(i));    }    	non-compiled	[CE]  cannot  find  symbol  start	89	None	replace
159	[BUG]  [BUGGY]  Integer  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  writeRawLong(text.charAt(i));  }  [CE]  cannot  find  symbol  start  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  Integer  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  writeRawLong(text.charAt(i));  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	Integer  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  writeRawLong(text.charAt(i));  }	          if(room    <    SHORT_WRITE)    {    int    len    =    text.length();    for(int    i    =    start;    i    <    len;    ++i)    {    writeRawLong(text.charAt(i));    }    	non-compiled	[CE]  cannot  find  symbol  start	89	None	replace
160	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  writeRawLong(text.charAt  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  writeRawLong(text.charAt  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail  >=  _outputEnd)  {  if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  writeRawLong(text.charAt	          if(room    <    SHORT_WRITE)    {    int    len    =    text.length();    for(int    i    =    start;    i    <    len;    ++i)    {    writeRawLong(text.charAt(i));    }    	non-compiled	[CE]  ')'  expected	89	None	replace
161	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }	  	compilable	  [FE]  IndexOutOfBoundsException  	78	1	add
162	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }	  	compilable	  [FE]  IndexOutOfBoundsException  	78	1	add
163	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [CE]  ';'  expected  [FE]      IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }	  	non-compiled	[CE]  ';'  expected	78	None	add
164	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]        IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  _writer.write(text);  if(text  ==  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    _writer.write(text);  if(text  ==  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }	  	compilable	  [FE]  IndexOutOfBoundsException  	78	1	add
165	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  _writer.write(text);  if(text  ==  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [FE]  IndexOutOfBoundsException  [FE]        IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  _writer.write(text);  if(text  ==  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    _writer.write(text);  if(text  ==  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }	  	compilable	  [FE]  IndexOutOfBoundsException  	78	1	add
166	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  space,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [CE]  cannot  find  symbol  space  [FE]          IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  space,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    _writer.write(text);  if(text!=  null)  {  text.getChars(0,  space,  _outputBuffer,  0);  _outputTail  +=  text.length();  }	  	non-compiled	[CE]  cannot  find  symbol  space	78	None	add
167	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]            IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  _writer.write(text);  if(text!=  null)  {  text.getChars(1,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    _writer.write(text);  if(text!=  null)  {  text.getChars(1,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }	  	compilable	  [FE]  IndexOutOfBoundsException  	78	1	add
168	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  _writer.write(text);  if(text!=  null)  {  text.getChars(1,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [FE]  IndexOutOfBoundsException  [FE]            IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  _writer.write(text);  if(text!=  null)  {  text.getChars(1,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    _writer.write(text);  if(text!=  null)  {  text.getChars(1,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }	  	compilable	  [FE]  IndexOutOfBoundsException  	78	1	add
169	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite( "write  text  value ");  if(room!=  0)  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_verifyValueWrite( "write  text  value ");  if(room!=  0)  {  writeRawLong(text);  }	  _verifyValueWrite(   "write    text    value   ");    if(text!=    null)    {    writeRawLong(text);    }    	compilable	  [FE]  StackOverflowError  	87	1	replace
170	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ");  if(room!=  0)  {  writeRawLong(text);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite( "write  text  value ");  if(room!=  0)  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite( "write  text  value ");  if(room!=  0)  {  writeRawLong(text);  }	  _verifyValueWrite(   "write    text    value   ");    if(text!=    null)    {    writeRawLong(text);    }    	compilable	  [FE]  StackOverflowError  	87	1	replace
171	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite( "write  text  value ");  if(text  ==  null)  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_verifyValueWrite( "write  text  value ");  if(text  ==  null)  {  writeRawLong(text);  }	  _verifyValueWrite(   "write    text    value   ");    if(text!=    null)    {    writeRawLong(text);    }    	compilable	  [FE]  AssertionFailedError  	87	1	replace
172	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ");  if(text  ==  null)  {  writeRawLong(text);  }  [FE]  AssertionFailedError  [FE]      StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite( "write  text  value ");  if(text  ==  null)  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite( "write  text  value ");  if(text  ==  null)  {  writeRawLong(text);  }	  _verifyValueWrite(   "write    text    value   ");    if(text!=    null)    {    writeRawLong(text);    }    	compilable	  [FE]  AssertionFailedError  	87	1	replace
173	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    while(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  while(_outputTail  >  room)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(_outputTail        >        room)        {        _flushBuffer();        }        while(_outputTail    >    room)    {    _flushBuffer();    }    if(_outputTail  >  room)  {  _flushBuffer();  }  while(_outputTail  >  room)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	49	1	add
174	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    while(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  while(_outputTail  >  room)  {  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    while(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  while(_outputTail  >  room)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        while(_outputTail    >    room)    {    _flushBuffer();    }    if(_outputTail  >  room)  {  _flushBuffer();  }  while(_outputTail  >  room)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	49	1	add
175	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    while(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  space)  {  _flushBuffer();  }  while(_outputTail  >  room)  {  _flushBuffer();  }  [CE]  cannot  find  symbol  space  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    while(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  space)  {  _flushBuffer();  }  while(_outputTail  >  room)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        while(_outputTail    >    room)    {    _flushBuffer();    }    if(_outputTail  >  space)  {  _flushBuffer();  }  while(_outputTail  >  room)  {  _flushBuffer();  }	  	non-compiled	[CE]  cannot  find  symbol  space	49	None	add
176	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    while(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  while(_outputTail  >  space)  {  _flushBuffer();  }  [CE]  cannot  find  symbol  space  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    while(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  while(_outputTail  >  space)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        while(_outputTail    >    room)    {    _flushBuffer();    }    if(_outputTail  >  room)  {  _flushBuffer();  }  while(_outputTail  >  space)  {  _flushBuffer();  }	  	non-compiled	[CE]  cannot  find  symbol  space	49	None	add
177	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    while(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  while(_outputTail  >  room)  {  _flushBuffer();  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    while(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  while(_outputTail  >  room)  {  _flushBuffer();  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        while(_outputTail    >    room)    {    _flushBuffer();    }    if(_outputTail  >  room)  {  _flushBuffer();  }  while(_outputTail  >  room)  {  _flushBuffer();	  	non-compiled	[CE]  ';'  expected	49	None	add
178	[BUG]  [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value "));  }  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value "));  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value "));  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value   "));    	non-compiled	[CE]  	16	None	replace
179	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value "));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite( "write  text  value "));  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite( "write  text  value "));	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value   "));    	non-compiled	[CE]  	16	None	replace
180	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _writer.write(text);    }    _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }	  	compilable	  [FE]  IndexOutOfBoundsException  	81	1	add
181	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _writer.write(text);    }    _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }	  	compilable	  [FE]  IndexOutOfBoundsException  	81	1	add
182	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.  [CE]  ';'  expected  [FE]      IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _writer.write(text);    }    _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.	  	non-compiled	[CE]  ';'  expected	81	None	add
183	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]        IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _writer.write(text);    }    _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }	  	compilable	  [FE]  IndexOutOfBoundsException  	81	1	add
184	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  [FE]  IndexOutOfBoundsException  [FE]        IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _writer.write(text);    }    _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }	  	compilable	  [FE]  IndexOutOfBoundsException  	81	1	add
185	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [CE]  ';'  expected  [FE]          IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _writer.write(text);    }    _writer.write(text);  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }	  	non-compiled	[CE]  ';'  expected	81	None	add
186	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write  [CE]  ';'  expected  [FE]            IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _writer.write(text);    }    _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write	  	non-compiled	[CE]  ';'  expected	81	None	add
187	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    _writer.write(text);  _writer.write(text);  _writer.write(text);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text);        _writer.write(text);    _writer.write(text);  _writer.write(text);	  	compilable	  [FE]  AssertionFailedError  	39	1	add
188	[BUG]  [BUGGY]  _writer.write(text);    _writer.write(text);  _writer.write(text);  _writer.write(text);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    _writer.write(text);  _writer.write(text);  _writer.write(text);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        _writer.write(text);    _writer.write(text);  _writer.write(text);	  	compilable	  [FE]  AssertionFailedError  	39	1	add
189	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    _writer.write(text);  if(_outputTail  >  room)  {  _writer.write(text);  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text);        _writer.write(text);    if(_outputTail  >  room)  {  _writer.write(text);  _writer.write(text);  }	  	compilable	  [FE]  AssertionFailedError  	39	1	add
190	[BUG]  [BUGGY]  _writer.write(text);    _writer.write(text);  if(_outputTail  >  room)  {  _writer.write(text);  _writer.write(text);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    _writer.write(text);  if(_outputTail  >  room)  {  _writer.write(text);  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        _writer.write(text);    if(_outputTail  >  room)  {  _writer.write(text);  _writer.write(text);  }	  	compilable	  [FE]  AssertionFailedError  	39	1	add
191	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    _writer.write(text);  if(_outputTail  >=  room)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text);        _writer.write(text);    if(_outputTail  >=  room)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  }	  	compilable	  [FE]  AssertionFailedError  	39	1	add
192	[BUG]  [BUGGY]  _writer.write(text);    _writer.write(text);  if(_outputTail  >=  room)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    _writer.write(text);  if(_outputTail  >=  room)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        _writer.write(text);    if(_outputTail  >=  room)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  }	  	compilable	  [FE]  AssertionFailedError  	39	1	add
193	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    _writer.write(text);  if(_outputTail  >  room)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text);        _writer.write(text);    if(_outputTail  >  room)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	39	1	add
194	[BUG]  [BUGGY]  _writer.write(text);    _writer.write(text);  if(_outputTail  >  room)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    _writer.write(text);  if(_outputTail  >  room)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        _writer.write(text);    if(_outputTail  >  room)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	39	1	add
195	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    _writer.write(text);  if(_outputTail  >=  room)  {  _writer.write(text);  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text);        _writer.write(text);    if(_outputTail  >=  room)  {  _writer.write(text);  _writer.write(text);  }	  	compilable	  [FE]  AssertionFailedError  	39	1	add
196	[BUG]  [BUGGY]  _writer.write(text);    _writer.write(text);  if(_outputTail  >=  room)  {  _writer.write(text);  _writer.write(text);  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    _writer.write(text);  if(_outputTail  >=  room)  {  _writer.write(text);  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        _writer.write(text);    if(_outputTail  >=  room)  {  _writer.write(text);  _writer.write(text);  }	  	compilable	  [FE]  AssertionFailedError  	39	1	add
197	[BUG]  [BUGGY]  _writer.writeRawLong(text,  0,  _outputTail);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.writeRawLong(text,  0,  _outputTail);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.writeRawLong(text,  0,  _outputTail);	  _writer.writeRawLong(text,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
198	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_writer!=  null)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(_writer!=  null)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  }	  _writer.write(text);    _writer.write(text);    	compilable	  [FE]  AssertionFailedError  	40	1	replace
199	[BUG]  [BUGGY]  if(_writer!=  null)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_writer!=  null)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_writer!=  null)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  }	  _writer.write(text);    _writer.write(text);    	compilable	  [FE]  AssertionFailedError  	40	1	replace
200	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail  >=  room)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(_outputTail  >=  room)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  text.length();  }	  _writer.write(text);    _writer.write(text);    	compilable	  [FE]  AssertionFailedError  	40	1	replace
201	[BUG]  [BUGGY]  if(_outputTail  >=  room)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  text.length();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail  >=  room)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail  >=  room)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  text.length();  }	  _writer.write(text);    _writer.write(text);    	compilable	  [FE]  AssertionFailedError  	40	1	replace
202	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_writer!=  null)  {  _writer.write(text);  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(_writer!=  null)  {  _writer.write(text);  _writer.write(text);  }	  _writer.write(text);    _writer.write(text);    	compilable	  [FE]  AssertionFailedError  	40	1	replace
203	[BUG]  [BUGGY]  if(_writer!=  null)  {  _writer.write(text);  _writer.write(text);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_writer!=  null)  {  _writer.write(text);  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_writer!=  null)  {  _writer.write(text);  _writer.write(text);  }	  _writer.write(text);    _writer.write(text);    	compilable	  [FE]  AssertionFailedError  	40	1	replace
204	[BUG]  [BUGGY]  ||  room  >  _outputMaxContiguous)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  ||  room  >  _outputMaxContiguous)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	||  room  >  _outputMaxContiguous)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  if(room    >    _outputMaxContiguous)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
205	[BUG]  [BUGGY]  ||  room  >  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  ||  room  >  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	||  room  >  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  if(room    >    _outputMaxContiguous)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
206	[BUG]  [BUGGY]  ||  room  >  _outputMaxContiguous)  {  writeRawLong(text);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  ||  room  >  _outputMaxContiguous)  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	||  room  >  _outputMaxContiguous)  {  writeRawLong(text);  }	  if(room    >    _outputMaxContiguous)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
207	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(_outputTail        >        room)        {        _flushBuffer();        }        if(_outputTail    >    room)    {    _flushBuffer();    }    if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	21	1	add
208	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        if(_outputTail    >    room)    {    _flushBuffer();    }    if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	21	1	add
209	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(_outputTail        >        room)        {        _flushBuffer();        }        if(_outputTail    >    room)    {    _flushBuffer();    }    if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	21	1	add
210	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        if(_outputTail    >    room)    {    _flushBuffer();    }    if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	21	1	add
211	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        if(_outputTail    >    room)    {    _flushBuffer();    }    if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer	  	non-compiled	[CE]  ';'  expected	21	None	add
212	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        if(_outputTail    >    room)    {    _flushBuffer();    }    if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >	  	non-compiled	[CE]  ')'  expected	21	None	add
213	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flush  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flush  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        if(_outputTail    >    room)    {    _flushBuffer();    }    if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flush	  	non-compiled	[CE]  ';'  expected	21	None	add
214	[BUG]  [BUGGY]  ||(room  >  room  &&  _outputHead  <  =  0))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  ||(room  >  room  &&  _outputHead  <  =  0))  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	||(room  >  room  &&  _outputHead  <  =  0))  {  _flushBuffer();  }	  if(room    >    _outputMaxContiguous)    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
215	[BUG]  [BUGGY]  ||  room  >  _outputMaxContiguous)  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  ||  room  >  _outputMaxContiguous)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	||  room  >  _outputMaxContiguous)  {  _flushBuffer();  }	  if(room    >    _outputMaxContiguous)    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
216	[BUG]  [BUGGY]  ||(room  >  room  &&  _outputTail  >  _outputEnd))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  ||(room  >  room  &&  _outputTail  >  _outputEnd))  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	||(room  >  room  &&  _outputTail  >  _outputEnd))  {  _flushBuffer();  }	  if(room    >    _outputMaxContiguous)    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
217	[BUG]  [BUGGY]  _writer.write(_outputBuffer,  _outputTail);  [CE]  no  suitable  method  found  for  write(char[],int)  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(_outputBuffer,  _outputTail);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(_outputBuffer,  _outputTail);	          if(room    <    SHORT_WRITE)    {    int    len    =    text.length();    for(int    i    =    start;    i    <    len;    ++i)    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _outputHead    =    	non-compiled	[CE]  no  suitable  method  found  for  write(char[],int)	90	None	replace
218	[BUG]  [BUGGY]  _writer.write(_outputBuffer,  _outputTail,  len);  [CE]  cannot  find  symbol  len  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(_outputBuffer,  _outputTail,  len);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(_outputBuffer,  _outputTail,  len);	          if(room    <    SHORT_WRITE)    {    int    len    =    text.length();    for(int    i    =    start;    i    <    len;    ++i)    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _outputHead    =    	non-compiled	[CE]  cannot  find  symbol  len	90	None	replace
219	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(_outputBuffer,  0,  _outputTail);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(_outputBuffer,  0,  _outputTail);	          if(room    <    SHORT_WRITE)    {    int    len    =    text.length();    for(int    i    =    start;    i    <    len;    ++i)    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _outputHead    =    	compilable	  [FE]  AssertionFailedError  	90	1	replace
220	[BUG]  [BUGGY]  _writer.write(_outputBuffer,  0,  _outputTail);  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(_outputBuffer,  0,  _outputTail);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(_outputBuffer,  0,  _outputTail);	          if(room    <    SHORT_WRITE)    {    int    len    =    text.length();    for(int    i    =    start;    i    <    len;    ++i)    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _outputHead    =    	compilable	  [FE]  AssertionFailedError  	90	1	replace
221	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail  <  room)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(_outputTail  <  room)  {  _flushBuffer();  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail    >    room)    {    writeRawLong(text);    }    	compilable	  [FE]  AssertionFailedError  	68	1	replace
222	[BUG]  [BUGGY]  if(_outputTail  <  room)  {  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail  <  room)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail  <  room)  {  _flushBuffer();  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail    >    room)    {    writeRawLong(text);    }    	compilable	  [FE]  AssertionFailedError  	68	1	replace
223	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >    room)    {    writeRawLong(text);    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	33	1	add
224	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >    room)    {    writeRawLong(text);    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	33	1	add
225	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }  if(_outputTail  >  space)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [CE]  cannot  find  symbol  space  [FE]      StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }  if(_outputTail  >  space)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >    room)    {    writeRawLong(text);    }    else    {    writeRawLong(text);    }    if(_outputTail  >  space)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	non-compiled	[CE]  cannot  find  symbol  space	33	None	add
226	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }  if(_outputTail  <  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >    room)    {    writeRawLong(text);    }    else    {    writeRawLong(text);    }    if(_outputTail  <  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	33	1	add
227	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }  if(_outputTail  <  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }  if(_outputTail  <  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >    room)    {    writeRawLong(text);    }    else    {    writeRawLong(text);    }    if(_outputTail  <  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	33	1	add
228	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }  If(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]          StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }  If(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >    room)    {    writeRawLong(text);    }    else    {    writeRawLong(text);    }    If(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	non-compiled	[CE]  ';'  expected	33	None	add
229	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text.substring(1),  text.length());  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  SHORT_WRITE)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text.substring(1),  text.length());  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  SHORT_WRITE)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text.substring(1),  text.length());  }	  _writer.write(text);    if(_writer!=    null)    {    if(_writer!=    null)    {    _writer    =    new    SerializableString(text.substring(1),    text.length());    }    	non-compiled	[CE]  ';'  expected	44	None	replace
230	[BUG]  [BUGGY]  if(room  >  room)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text.substring(1),  text.length());  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  room)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text.substring(1),  text.length());  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >  room)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text.substring(1),  text.length());  }	  _writer.write(text);    if(_writer!=    null)    {    if(_writer!=    null)    {    _writer    =    new    SerializableString(text.substring(1),    text.length());    }    	non-compiled	[CE]  ';'  expected	44	None	replace
231	[BUG]  [BUGGY]  _writer  =  new  SerializableString(text.substring(1),  text.length());  [CE]  cannot  assign  a  value  to  final  variable  _writer  [FE]                    AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer  =  new  SerializableString(text.substring(1),  text.length());  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer  =  new  SerializableString(text.substring(1),  text.length());	  _writer.write(text);    if(_writer!=    null)    {    if(_writer!=    null)    {    _writer    =    new    SerializableString(text.substring(1),    text.length());    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  _writer	44	None	replace
232	[BUG]  [BUGGY]  _writeRawLong(text,  null,  _outputBuffer);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writeRawLong(text,  null,  _outputBuffer);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writeRawLong(text,  null,  _outputBuffer);	  _writeRawLong(text,    _outputBuffer);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
233	[BUG]  [BUGGY]  _writeRawLong(text,  0,  _outputBuffer);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writeRawLong(text,  0,  _outputBuffer);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writeRawLong(text,  0,  _outputBuffer);	  _writeRawLong(text,    _outputBuffer);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
234	[BUG]  [BUGGY]  ||(_outputTail  >=  _outputEnd  &&  _outputHead!=  _outputEnd))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  ||(_outputTail  >=  _outputEnd  &&  _outputHead!=  _outputEnd))  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	||(_outputTail  >=  _outputEnd  &&  _outputHead!=  _outputEnd))  {  _flushBuffer();  }	  ||(_outputTail    >    room    &&    _outputHead!=    _outputEnd))    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
235	[BUG]  [BUGGY]  ||(_outputTail  >=  _outputEnd  &&  room!=  _outputEnd))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  ||(_outputTail  >=  _outputEnd  &&  room!=  _outputEnd))  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	||(_outputTail  >=  _outputEnd  &&  room!=  _outputEnd))  {  _flushBuffer();  }	  ||(_outputTail    >    room    &&    _outputHead!=    _outputEnd))    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
236	[BUG]  [BUGGY]  ||(room  >  _outputEnd  &&  _outputTail  >=  _outputEnd))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  ||(room  >  _outputEnd  &&  _outputTail  >=  _outputEnd))  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	||(room  >  _outputEnd  &&  _outputTail  >=  _outputEnd))  {  _flushBuffer();  }	  ||(_outputTail    >    room    &&    _outputHead!=    _outputEnd))    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
237	[BUG]  [BUGGY]  ||(_outputTail  >=  room  &&  _outputHead!=  _outputEnd))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  ||(_outputTail  >=  room  &&  _outputHead!=  _outputEnd))  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	||(_outputTail  >=  room  &&  _outputHead!=  _outputEnd))  {  _flushBuffer();  }	  ||(_outputTail    >    room    &&    _outputHead!=    _outputEnd))    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
238	[BUG]  [BUGGY]  _writeRawLong(text,  room,  _outputTail);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writeRawLong(text,  room,  _outputTail);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writeRawLong(text,  room,  _outputTail);	  _writeRawLong(text,    room);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
239	[BUG]  [BUGGY]  _writeRawLong(text,  room,  _outputBuffer);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writeRawLong(text,  room,  _outputBuffer);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writeRawLong(text,  room,  _outputBuffer);	  _writeRawLong(text,    room);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
240	[BUG]  [BUGGY]  _writeRawLong(text,  room,  qlen);  [CE]  cannot  find  symbol  qlen  [FE]                  AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writeRawLong(text,  room,  qlen);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writeRawLong(text,  room,  qlen);	  _writeRawLong(text,    room);    	non-compiled	[CE]  cannot  find  symbol  qlen	28	None	replace
241	[BUG]  [BUGGY]  _writer.writeRawLong(text,  null,  room);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.writeRawLong(text,  null,  room);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.writeRawLong(text,  null,  room);	  _writer.writeRawLong(text,    null);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
242	[BUG]  [BUGGY]  _writer.writeRawLong(text,  null,  _outputTail);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.writeRawLong(text,  null,  _outputTail);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.writeRawLong(text,  null,  _outputTail);	  _writer.writeRawLong(text,    null);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
243	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text,  0,  room  +  1);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text,  0,  room  +  1);	          _writer.write(text,    0,    room);    	compilable	  [FE]  AssertionFailedError  	3	1	replace
244	[BUG]  [BUGGY]  _writer.write(text,  0,  room  +  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text,  0,  room  +  1);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text,  0,  room  +  1);	          _writer.write(text,    0,    room);    	compilable	  [FE]  AssertionFailedError  	3	1	replace
245	[BUG]  [BUGGY]  _writer.write(text,  0,  room  +  1,  text.length());  [CE]  no  suitable  method  found  for  write(String,int,int,int)  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text,  0,  room  +  1,  text.length());  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text,  0,  room  +  1,  text.length());	          _writer.write(text,    0,    room);    	non-compiled	[CE]  no  suitable  method  found  for  write(String,int,int,int)	3	None	replace
246	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text,  0,  room  +  2);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text,  0,  room  +  2);	          _writer.write(text,    0,    room);    	compilable	  [FE]  AssertionFailedError  	3	1	replace
247	[BUG]  [BUGGY]  _writer.write(text,  0,  room  +  2);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text,  0,  room  +  2);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text,  0,  room  +  2);	          _writer.write(text,    0,    room);    	compilable	  [FE]  AssertionFailedError  	3	1	replace
248	[BUG]  [BUGGY]  if(room!=  SHORT_WRITE)  {  if(text!=  null)  {  _writer.write(text);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room!=  SHORT_WRITE)  {  if(text!=  null)  {  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room!=  SHORT_WRITE)  {  if(text!=  null)  {  _writer.write(text);  }	  if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _outputHead    =    0;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
249	[BUG]  [BUGGY]  TextUtilities.writeRawLong(text,  room,  _outputBuffer,  _outputTail);  [CE]  cannot  find  symbol  TextUtilities  [FE]        AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  TextUtilities.writeRawLong(text,  room,  _outputBuffer,  _outputTail);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	TextUtilities.writeRawLong(text,  room,  _outputBuffer,  _outputTail);	  TextUtilities.writeRawLong(text,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol  TextUtilities	52	None	replace
250	[BUG]  [BUGGY]  TextUtilities.writeRawLong(text,  _outputBuffer,  _outputTail,  _outputHead);  [CE]  cannot  find  symbol  TextUtilities  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  TextUtilities.writeRawLong(text,  _outputBuffer,  _outputTail,  _outputHead);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	TextUtilities.writeRawLong(text,  _outputBuffer,  _outputTail,  _outputHead);	  TextUtilities.writeRawLong(text,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol  TextUtilities	52	None	replace
251	[BUG]  [BUGGY]  TextUtilities.writeRawLong(text,  _outputBuffer,  _outputTail,  room);  [CE]  cannot  find  symbol  TextUtilities  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  TextUtilities.writeRawLong(text,  _outputBuffer,  _outputTail,  room);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	TextUtilities.writeRawLong(text,  _outputBuffer,  _outputTail,  room);	  TextUtilities.writeRawLong(text,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol  TextUtilities	52	None	replace
252	[BUG]  [BUGGY]  TextUtilities.writeRawLong(text,  _outputBuffer,  _outputTail  +  1);  [CE]  cannot  find  symbol  TextUtilities  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  TextUtilities.writeRawLong(text,  _outputBuffer,  _outputTail  +  1);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	TextUtilities.writeRawLong(text,  _outputBuffer,  _outputTail  +  1);	  TextUtilities.writeRawLong(text,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol  TextUtilities	52	None	replace
253	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableStringBuilder().append(text);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  SHORT_WRITE)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableStringBuilder().append(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  SHORT_WRITE)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableStringBuilder().append(text);  }	  _writer.write(text);    if(_writer!=    null)    {    if(_writer!=    null)    {    _writer    =    new    SerializableStringBuilder().append(text);    }    	non-compiled	[CE]  ';'  expected	43	None	replace
254	[BUG]  [BUGGY]  _writer  =  new  SerializableStringBuilder().append(text);  [CE]  cannot  assign  a  value  to  final  variable  _writer  [FE]                AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer  =  new  SerializableStringBuilder().append(text);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer  =  new  SerializableStringBuilder().append(text);	  _writer.write(text);    if(_writer!=    null)    {    if(_writer!=    null)    {    _writer    =    new    SerializableStringBuilder().append(text);    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  _writer	43	None	replace
255	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  _writer.write(text);  if(_writer  ==  null)  {  _writer  =  new  SerializableStringBuilder().append(text);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  SHORT_WRITE)  {  _writer.write(text);  if(_writer  ==  null)  {  _writer  =  new  SerializableStringBuilder().append(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  SHORT_WRITE)  {  _writer.write(text);  if(_writer  ==  null)  {  _writer  =  new  SerializableStringBuilder().append(text);  }	  _writer.write(text);    if(_writer!=    null)    {    if(_writer!=    null)    {    _writer    =    new    SerializableStringBuilder().append(text);    }    	non-compiled	[CE]  ';'  expected	43	None	replace
256	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _flushBuffer();    }    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	76	1	add
257	[BUG]  [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _flushBuffer();    }    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	76	1	add
258	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  if(text  ==  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _flushBuffer();    }    if(text  ==  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	76	1	add
259	[BUG]  [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  if(text  ==  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  if(text  ==  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _flushBuffer();    }    if(text  ==  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	76	1	add
260	[BUG]  [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  If(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  If(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _flushBuffer();    }    If(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }	  	non-compiled	[CE]  ';'  expected	76	None	add
261	[BUG]  [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  space,  _outputBuffer,  _outputTail);  _flushBuffer();  }  [CE]  cannot  find  symbol  space  [FE]          AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  space,  _outputBuffer,  _outputTail);  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _flushBuffer();    }    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  space,  _outputBuffer,  _outputTail);  _flushBuffer();  }	  	non-compiled	[CE]  cannot  find  symbol  space	76	None	add
262	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite( "write  text  value ".trim());  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_verifyValueWrite( "write  text  value ".trim());	  _verifyValueWrite(   "write    text    value.   ");    	compilable	  [FE]  AssertionFailedError  	70	1	replace
263	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ".trim());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite( "write  text  value ".trim());  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite( "write  text  value ".trim());	  _verifyValueWrite(   "write    text    value.   ");    	compilable	  [FE]  AssertionFailedError  	70	1	replace
264	[BUG]  [BUGGY]  _outputTail  +=  space)  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _outputTail  +=  space)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_outputTail  +=  space)  {  _flushBuffer();  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    if(_outputTail    >    space)    {    _flushBuffer();    }    	non-compiled	[CE]  ';'  expected	23	None	replace
265	[BUG]  [BUGGY]  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  }  [CE]  cannot  find  symbol  start  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  }	          if(room    <    SHORT_WRITE)    {    int    len    =    text.length();    for(int    i    =    start;    i    <    len;    ++i)    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    }    	non-compiled	[CE]  cannot  find  symbol  start	91	None	replace
266	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  text.getChars(0,  room,  _outputBuffer,  _outputTa  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  text.getChars(0,  room,  _outputBuffer,  _outputTa  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail  >=  _outputEnd)  {  if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  text.getChars(0,  room,  _outputBuffer,  _outputTa	          if(room    <    SHORT_WRITE)    {    int    len    =    text.length();    for(int    i    =    start;    i    <    len;    ++i)    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    }    	non-compiled	[CE]  ')'  expected	91	None	replace
267	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail  >=  _outputEnd)  {  if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  }	          if(room    <    SHORT_WRITE)    {    int    len    =    text.length();    for(int    i    =    start;    i    <    len;    ++i)    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    }    	non-compiled	[CE]  ';'  expected	91	None	replace
268	[BUG]  [BUGGY]  if(_outputTail  >  room)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(offset,  offset+room,  _outputBuffer,  0);  _outputHead  =  0;  _flushBuffer();  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail  >  room)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(offset,  offset+room,  _outputBuffer,  0);  _outputHead  =  0;  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail  >  room)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(offset,  offset+room,  _outputBuffer,  0);  _outputHead  =  0;  _flushBuffer();  }	  _writer.write(text);    if(text!=    null)    {    text.getChars(offset,    offset+room,    _outputBuffer,    0);    _outputHead    =    0;    _flushBuffer();    }    	non-compiled	[CE]  ';'  expected	80	None	replace
269	[BUG]  [BUGGY]  if(_outputTail  >=  room)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(offset,  offset+room,  _outputBuffer,  0);  _outputHead  =  0;  _flushBuffer();  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail  >=  room)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(offset,  offset+room,  _outputBuffer,  0);  _outputHead  =  0;  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail  >=  room)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(offset,  offset+room,  _outputBuffer,  0);  _outputHead  =  0;  _flushBuffer();  }	  _writer.write(text);    if(text!=    null)    {    text.getChars(offset,    offset+room,    _outputBuffer,    0);    _outputHead    =    0;    _flushBuffer();    }    	non-compiled	[CE]  ';'  expected	80	None	replace
270	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(offset,  offset+room,  _outputBuffer,  0);  _outputHead  =  0;  _flushBuffer();  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(offset,  offset+room,  _outputBuffer,  0);  _outputHead  =  0;  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail  >=  _outputEnd)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(offset,  offset+room,  _outputBuffer,  0);  _outputHead  =  0;  _flushBuffer();  }	  _writer.write(text);    if(text!=    null)    {    text.getChars(offset,    offset+room,    _outputBuffer,    0);    _outputHead    =    0;    _flushBuffer();    }    	non-compiled	[CE]  ';'  expected	80	None	replace
271	[BUG]  [BUGGY]  _writer.write(text,  null,  room);  [CE]  no  suitable  method  found  for  write(String,<null>,int)  [FE]        AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text,  null,  room);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text,  null,  room);	  _writer.write(text,    null);    	non-compiled	[CE]  no  suitable  method  found  for  write(String,<null>,int)	25	None	replace
272	[BUG]  [BUGGY]  _writer.write(text,  null,  _outputTail);  [CE]  no  suitable  method  found  for  write(String,<null>,int)  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text,  null,  _outputTail);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text,  null,  _outputTail);	  _writer.write(text,    null);    	non-compiled	[CE]  no  suitable  method  found  for  write(String,<null>,int)	25	None	replace
273	[BUG]  [BUGGY]  _writer.write(text,  null,  _outputBuffer);  [CE]  no  suitable  method  found  for  write(String,<null>,char[])  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text,  null,  _outputBuffer);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text,  null,  _outputBuffer);	  _writer.write(text,    null);    	non-compiled	[CE]  no  suitable  method  found  for  write(String,<null>,char[])	25	None	replace
274	[BUG]  [BUGGY]  _writer.write(text,  room,  null);  [CE]  no  suitable  method  found  for  write(String,int,<null>)  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text,  room,  null);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text,  room,  null);	  _writer.write(text,    null);    	non-compiled	[CE]  no  suitable  method  found  for  write(String,int,<null>)	25	None	replace
275	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite(   "write  text  value   ");  if(text!=  null)  {  writeRawLong(text);  }  _verifyValueWrite( "write  text  value   ");  if(text!=  null)  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_verifyValueWrite(   "write    text    value   ");    if(text!=    null)    {    writeRawLong(text);    }    _verifyValueWrite( "write  text  value   ");  if(text!=  null)  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	86	1	add
276	[BUG]  [BUGGY]  _verifyValueWrite(   "write  text  value   ");  if(text!=  null)  {  writeRawLong(text);  }  _verifyValueWrite( "write  text  value   ");  if(text!=  null)  {  writeRawLong(text);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite(   "write  text  value   ");  if(text!=  null)  {  writeRawLong(text);  }  _verifyValueWrite( "write  text  value   ");  if(text!=  null)  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite(   "write    text    value   ");    if(text!=    null)    {    writeRawLong(text);    }    _verifyValueWrite( "write  text  value   ");  if(text!=  null)  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	86	1	add
277	[BUG]  [BUGGY]  _verifyValueWrite(   "write  text  value   ");  if(text!=  null)  {  writeRawLong(text);  }  if(text!=  null)  {  _verifyValueWrite( "write  text  value   ");  if(text!=  null)  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]      StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite(   "write  text  value   ");  if(text!=  null)  {  writeRawLong(text);  }  if(text!=  null)  {  _verifyValueWrite( "write  text  value   ");  if(text!=  null)  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite(   "write    text    value   ");    if(text!=    null)    {    writeRawLong(text);    }    if(text!=  null)  {  _verifyValueWrite( "write  text  value   ");  if(text!=  null)  {  writeRawLong(text);  }	  	non-compiled	[CE]  ';'  expected	86	None	add
278	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite(   "write  text  value   ");  if(text!=  null)  {  writeRawLong(text);  }  _verifyValueWrite( "write  text  value   ");  if(text  ==  null)  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_verifyValueWrite(   "write    text    value   ");    if(text!=    null)    {    writeRawLong(text);    }    _verifyValueWrite( "write  text  value   ");  if(text  ==  null)  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	86	1	add
279	[BUG]  [BUGGY]  _verifyValueWrite(   "write  text  value   ");  if(text!=  null)  {  writeRawLong(text);  }  _verifyValueWrite( "write  text  value   ");  if(text  ==  null)  {  writeRawLong(text);  }  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite(   "write  text  value   ");  if(text!=  null)  {  writeRawLong(text);  }  _verifyValueWrite( "write  text  value   ");  if(text  ==  null)  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite(   "write    text    value   ");    if(text!=    null)    {    writeRawLong(text);    }    _verifyValueWrite( "write  text  value   ");  if(text  ==  null)  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	86	1	add
280	[BUG]  [BUGGY]  _verifyValueWrite(   "write  text  value   ");  if(text!=  null)  {  writeRawLong(text);  }  _verifyValueWrite( "write  text  value "));  if(text!=  null)  {  writeRawLong(text);  }  [CE]  [FE]          StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite(   "write  text  value   ");  if(text!=  null)  {  writeRawLong(text);  }  _verifyValueWrite( "write  text  value "));  if(text!=  null)  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite(   "write    text    value   ");    if(text!=    null)    {    writeRawLong(text);    }    _verifyValueWrite( "write  text  value "));  if(text!=  null)  {  writeRawLong(text);  }	  	non-compiled	[CE]  	86	None	add
281	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room    >    _outputEnd)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(room  >  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	10	1	add
282	[BUG]  [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    >    _outputEnd)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(room  >  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	10	1	add
283	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >  _outputEnd)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room    >    _outputEnd)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(room  >  _outputEnd)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	10	1	add
284	[BUG]  [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >  _outputEnd)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >  _outputEnd)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    >    _outputEnd)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(room  >  _outputEnd)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	10	1	add
285	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  <  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room    >    _outputEnd)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(room  <  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	10	1	add
286	[BUG]  [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  <  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  <  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    >    _outputEnd)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(room  <  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	10	1	add
287	[BUG]  [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >  _outputEnd)  {  _writeBuffer();  }  else  {  writeRawLong(text);  }  [CE]  cannot  find  symbol  [FE]          StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >  _outputEnd)  {  _writeBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    >    _outputEnd)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(room  >  _outputEnd)  {  _writeBuffer();  }  else  {  writeRawLong(text);  }	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
288	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  if(room  >  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room    >    _outputEnd)    {    _flushBuffer();    }    if(room  >  _outputEnd)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	71	1	add
289	[BUG]  [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  if(room  >  _outputEnd)  {  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  if(room  >  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    >    _outputEnd)    {    _flushBuffer();    }    if(room  >  _outputEnd)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	71	1	add
290	[BUG]  [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  If(room  >  _outputEnd)  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  If(room  >  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    >    _outputEnd)    {    _flushBuffer();    }    If(room  >  _outputEnd)  {  _flushBuffer();  }	  	non-compiled	[CE]  ';'  expected	71	None	add
291	[BUG]  [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  if(room  >  _outputStart)  {  _flushBuffer();  }  [CE]  cannot  find  symbol  _outputStart  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  if(room  >  _outputStart)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    >    _outputEnd)    {    _flushBuffer();    }    if(room  >  _outputStart)  {  _flushBuffer();  }	  	non-compiled	[CE]  cannot  find  symbol  _outputStart	71	None	add
292	[BUG]  [BUGGY]  if(_outputTail  >=  room)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail  >=  room)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail  >=  room)  {  if(_outputTail  >  room)  {  _flushBuffer();  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    If(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
293	[BUG]  [BUGGY]  if(_outputTail  >=  room)  {  if(_outputEnd  >  room)  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail  >=  room)  {  if(_outputEnd  >  room)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail  >=  room)  {  if(_outputEnd  >  room)  {  _flushBuffer();  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    If(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
294	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  <  _outputEnd)  {  _flushBuffer();  }  if(room  <  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room    <    _outputEnd)    {    _flushBuffer();    }    if(room  <  _outputEnd)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	62	1	add
295	[BUG]  [BUGGY]  if(room  <  _outputEnd)  {  _flushBuffer();  }  if(room  <  _outputEnd)  {  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  <  _outputEnd)  {  _flushBuffer();  }  if(room  <  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    <    _outputEnd)    {    _flushBuffer();    }    if(room  <  _outputEnd)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	62	1	add
296	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  <  _outputEnd)  {  _flushBuffer();  }  if(room  >=  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room    <    _outputEnd)    {    _flushBuffer();    }    if(room  >=  _outputEnd)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	62	1	add
297	[BUG]  [BUGGY]  if(room  <  _outputEnd)  {  _flushBuffer();  }  if(room  >=  _outputEnd)  {  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  <  _outputEnd)  {  _flushBuffer();  }  if(room  >=  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    <    _outputEnd)    {    _flushBuffer();    }    if(room  >=  _outputEnd)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	62	1	add
298	[BUG]  [BUGGY]  if(room  <  _outputEnd)  {  _flushBuffer();  }  If(room  <  _outputEnd)  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  <  _outputEnd)  {  _flushBuffer();  }  If(room  <  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    <    _outputEnd)    {    _flushBuffer();    }    If(room  <  _outputEnd)  {  _flushBuffer();  }	  	non-compiled	[CE]  ';'  expected	62	None	add
299	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]          _writer.write(text,  0,  room);  _writer.write(text,  0,  room);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	                _writer.write(text,    0,    room);    _writer.write(text,  0,  room);	  	compilable	  [FE]  AssertionFailedError  	2	1	add
300	[BUG]  [BUGGY]          _writer.write(text,  0,  room);  _writer.write(text,  0,  room);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]          _writer.write(text,  0,  room);  _writer.write(text,  0,  room);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	                _writer.write(text,    0,    room);    _writer.write(text,  0,  room);	  	compilable	  [FE]  AssertionFailedError  	2	1	add
301	[BUG]  [BUGGY]          _writer.write(text,  0,  room);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text);  }  else  {  _writer.write(text,  0,  room);  }  [CE]  cannot  assign  a  value  to  final  variable  _writer  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]          _writer.write(text,  0,  room);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text);  }  else  {  _writer.write(text,  0,  room);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	                _writer.write(text,    0,    room);    if(_writer!=  null)  {  _writer  =  new  SerializableString(text);  }  else  {  _writer.write(text,  0,  room);  }	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  _writer	2	None	add
302	[BUG]  [BUGGY]          _writer.write(text,  0,  room);  if(_writer!=  null)  {  if(_writer!=  null)  {  _writer  =  new  SerializableString(text,  0,  text.length());  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]          _writer.write(text,  0,  room);  if(_writer!=  null)  {  if(_writer!=  null)  {  _writer  =  new  SerializableString(text,  0,  text.length());  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	                _writer.write(text,    0,    room);    if(_writer!=  null)  {  if(_writer!=  null)  {  _writer  =  new  SerializableString(text,  0,  text.length());  }	  	non-compiled	[CE]  ';'  expected	2	None	add
303	[BUG]  [BUGGY]          _writer.write(text,  0,  room);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text,  0,  room);  }  else  {  _writer.write(text,  0,  room);  }  [CE]  cannot  assign  a  value  to  final  variable  _writer  [FE]          AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]          _writer.write(text,  0,  room);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text,  0,  room);  }  else  {  _writer.write(text,  0,  room);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	                _writer.write(text,    0,    room);    if(_writer!=  null)  {  _writer  =  new  SerializableString(text,  0,  room);  }  else  {  _writer.write(text,  0,  room);  }	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  _writer	2	None	add
304	[BUG]  [BUGGY]          _writer.write(text,  0,  room);  if(_writer!=  null)  {  if(_writer!=  null)  {  _writer  =  new  SerializableString(text);  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]          _writer.write(text,  0,  room);  if(_writer!=  null)  {  if(_writer!=  null)  {  _writer  =  new  SerializableString(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	                _writer.write(text,    0,    room);    if(_writer!=  null)  {  if(_writer!=  null)  {  _writer  =  new  SerializableString(text);  }	  	non-compiled	[CE]  ';'  expected	2	None	add
305	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputTail)  {  _flushBuffer();  }  if(room  >  _outputTail)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room    >    _outputTail)    {    _flushBuffer();    }    if(room  >  _outputTail)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	12	1	add
306	[BUG]  [BUGGY]  if(room  >  _outputTail)  {  _flushBuffer();  }  if(room  >  _outputTail)  {  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputTail)  {  _flushBuffer();  }  if(room  >  _outputTail)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    >    _outputTail)    {    _flushBuffer();    }    if(room  >  _outputTail)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	12	1	add
307	[BUG]  [BUGGY]  if(room  >  _outputTail)  {  _flushBuffer();  }  If(room  >  _outputTail)  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputTail)  {  _flushBuffer();  }  If(room  >  _outputTail)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    >    _outputTail)    {    _flushBuffer();    }    If(room  >  _outputTail)  {  _flushBuffer();  }	  	non-compiled	[CE]  ';'  expected	12	None	add
308	[BUG]  [BUGGY]  if(room  >  _outputTail)  {  _flushBuffer();  }  when(room  >  _outputTail)  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputTail)  {  _flushBuffer();  }  when(room  >  _outputTail)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    >    _outputTail)    {    _flushBuffer();    }    when(room  >  _outputTail)  {  _flushBuffer();  }	  	non-compiled	[CE]  ';'  expected	12	None	add
309	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value "  +  text,  room);  [CE]  no  suitable  method  found  for  _verifyValueWrite(String,int)  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite( "write  text  value "  +  text,  room);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite( "write  text  value "  +  text,  room);	  _verifyValueWrite(   "write    text    value   ",    text);    	non-compiled	[CE]  no  suitable  method  found  for  _verifyValueWrite(String,int)	38	None	replace
310	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite( "write  text  value "  +  text);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_verifyValueWrite( "write  text  value "  +  text);	  _verifyValueWrite(   "write    text    value   ",    text);    	compilable	  [FE]  AssertionFailedError  	38	1	replace
311	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value "  +  text);  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite( "write  text  value "  +  text);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite( "write  text  value "  +  text);	  _verifyValueWrite(   "write    text    value   ",    text);    	compilable	  [FE]  AssertionFailedError  	38	1	replace
312	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ",  text,  room);  [CE]  no  suitable  method  found  for  _verifyValueWrite(String,String,int)  [FE]                AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite( "write  text  value ",  text,  room);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite( "write  text  value ",  text,  room);	  _verifyValueWrite(   "write    text    value   ",    text);    	non-compiled	[CE]  no  suitable  method  found  for  _verifyValueWrite(String,String,int)	38	None	replace
313	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  if(text!=  null)  {  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _flushBuffer();    }    if(text!=  null)  {  _writer.write(text);  }	  	compilable	  [FE]  AssertionFailedError  	76	1	add
314	[BUG]  [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  if(text!=  null)  {  _writer.write(text);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  if(text!=  null)  {  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _flushBuffer();    }    if(text!=  null)  {  _writer.write(text);  }	  	compilable	  [FE]  AssertionFailedError  	76	1	add
315	[BUG]  [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(1  +  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  [CE]  no  suitable  method  found  for  getChars(int,char[],int)  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(1  +  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _flushBuffer();    }    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(1  +  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }	  	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,char[],int)	76	None	add
316	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _flushBuffer();    }    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	76	1	add
317	[BUG]  [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _flushBuffer();    }    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	76	1	add
318	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  _verifyValueWrite( "write  text  value ");  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _flushBuffer();    }    _verifyValueWrite( "write  text  value ");	  	compilable	  [FE]  IndexOutOfBoundsException  	83	1	add
319	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  _verifyValueWrite( "write  text  value ");  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  _verifyValueWrite( "write  text  value ");  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _flushBuffer();    }    _verifyValueWrite( "write  text  value ");	  	compilable	  [FE]  IndexOutOfBoundsException  	83	1	add
320	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]      IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  _verifyValueWrite( "write  text  value ");  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _flushBuffer();    }    _verifyValueWrite( "write  text  value ");  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }	  	compilable	  [FE]  IndexOutOfBoundsException  	83	1	add
321	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  _verifyValueWrite( "write  text  value ");  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  [FE]  IndexOutOfBoundsException  [FE]      IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  _verifyValueWrite( "write  text  value ");  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _flushBuffer();    }    _verifyValueWrite( "write  text  value ");  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }	  	compilable	  [FE]  IndexOutOfBoundsException  	83	1	add
322	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]        IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  _verifyValueWrite( "write  text  value ");  if(_outputTail!=  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _flushBuffer();    }    _verifyValueWrite( "write  text  value ");  if(_outputTail!=  _outputEnd)  {  _flushBuffer();  }	  	compilable	  [FE]  IndexOutOfBoundsException  	83	1	add
323	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  _verifyValueWrite( "write  text  value ");  if(_outputTail!=  _outputEnd)  {  _flushBuffer();  }  [FE]  IndexOutOfBoundsException  [FE]        IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  _verifyValueWrite( "write  text  value ");  if(_outputTail!=  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _flushBuffer();    }    _verifyValueWrite( "write  text  value ");  if(_outputTail!=  _outputEnd)  {  _flushBuffer();  }	  	compilable	  [FE]  IndexOutOfBoundsException  	83	1	add
324	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]          IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  _verifyValueWrite( "write  text  value ");  if(_outputTail  ==  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _flushBuffer();    }    _verifyValueWrite( "write  text  value ");  if(_outputTail  ==  _outputEnd)  {  _flushBuffer();  }	  	compilable	  [FE]  IndexOutOfBoundsException  	83	1	add
325	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  _verifyValueWrite( "write  text  value ");  if(_outputTail  ==  _outputEnd)  {  _flushBuffer();  }  [FE]  IndexOutOfBoundsException  [FE]          IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  _verifyValueWrite( "write  text  value ");  if(_outputTail  ==  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _flushBuffer();    }    _verifyValueWrite( "write  text  value ");  if(_outputTail  ==  _outputEnd)  {  _flushBuffer();  }	  	compilable	  [FE]  IndexOutOfBoundsException  	83	1	add
326	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(text!=  null)  {  _verifyValueWrite( "write  text  value ");  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(text!=  null)  {  _verifyValueWrite( "write  text  value ");  }	  if(_writer!=    null)    {    _verifyValueWrite(   "write    text    value   ");    }    	compilable	  [FE]  AssertionFailedError  	36	1	replace
327	[BUG]  [BUGGY]  if(text!=  null)  {  _verifyValueWrite( "write  text  value ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(text!=  null)  {  _verifyValueWrite( "write  text  value ");  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(text!=  null)  {  _verifyValueWrite( "write  text  value ");  }	  if(_writer!=    null)    {    _verifyValueWrite(   "write    text    value   ");    }    	compilable	  [FE]  AssertionFailedError  	36	1	replace
328	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room!=  0)  {  _verifyValueWrite( "write  text  value ");  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room!=  0)  {  _verifyValueWrite( "write  text  value ");  }	  if(_writer!=    null)    {    _verifyValueWrite(   "write    text    value   ");    }    	compilable	  [FE]  AssertionFailedError  	36	1	replace
329	[BUG]  [BUGGY]  if(room!=  0)  {  _verifyValueWrite( "write  text  value ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room!=  0)  {  _verifyValueWrite( "write  text  value ");  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room!=  0)  {  _verifyValueWrite( "write  text  value ");  }	  if(_writer!=    null)    {    _verifyValueWrite(   "write    text    value   ");    }    	compilable	  [FE]  AssertionFailedError  	36	1	replace
330	[BUG]  [BUGGY]  _writeRawLong(text,  _outputBuffer,  _outputTail);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writeRawLong(text,  _outputBuffer,  _outputTail);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writeRawLong(text,  _outputBuffer,  _outputTail);	  _writeRawLong(text,    _outputBuffer);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
331	[BUG]  [BUGGY]  _writer.writeLong(text,  _outputTail);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.writeLong(text,  _outputTail);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.writeLong(text,  _outputTail);	          _writer.writeLong(text);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
332	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite( "write  text  length "  +  text);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_verifyValueWrite( "write  text  length "  +  text);	  _verifyValueWrite(   "write    text    length   ");    	compilable	  [FE]  AssertionFailedError  	27	1	replace
333	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  length "  +  text);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite( "write  text  length "  +  text);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite( "write  text  length "  +  text);	  _verifyValueWrite(   "write    text    length   ");    	compilable	  [FE]  AssertionFailedError  	27	1	replace
334	[BUG]  [BUGGY]  if(room  >=  0)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableStringBuilder().append(text);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  0)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableStringBuilder().append(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  0)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableStringBuilder().append(text);  }	  _writer.write(text);    if(_writer!=    null)    {    if(_writer!=    null)    {    _writer    =    new    SerializableStringBuilder().append(text);    }    	non-compiled	[CE]  ';'  expected	43	None	replace
335	[BUG]  [BUGGY]  null  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  null  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	null  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  if(room    >    _outputMaxContiguous)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  not  a  statement	88	None	replace
336	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead	          if(room    <    SHORT_WRITE)    {    int    len    =    text.length();    for(int    i    =    start;    i    <    len;    ++i)    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _outputHead    =    	non-compiled	[CE]  not  a  statement	90	None	replace
337	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _out  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _out  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _out	          if(room    <    SHORT_WRITE)    {    int    len    =    text.length();    for(int    i    =    start;    i    <    len;    ++i)    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _outputHead    =    	non-compiled	[CE]  not  a  statement	90	None	replace
338	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHe  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHe  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHe	          if(room    <    SHORT_WRITE)    {    int    len    =    text.length();    for(int    i    =    start;    i    <    len;    ++i)    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _outputHead    =    	non-compiled	[CE]  not  a  statement	90	None	replace
339	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite(   "write  text  value.   ");  _verifyValueWrite( ".write  text  value.   ");  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_verifyValueWrite(   "write    text    value.   ");    _verifyValueWrite( ".write  text  value.   ");	  	compilable	  [FE]  AssertionFailedError  	69	1	add
340	[BUG]  [BUGGY]  _verifyValueWrite(   "write  text  value.   ");  _verifyValueWrite( ".write  text  value.   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite(   "write  text  value.   ");  _verifyValueWrite( ".write  text  value.   ");  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite(   "write    text    value.   ");    _verifyValueWrite( ".write  text  value.   ");	  	compilable	  [FE]  AssertionFailedError  	69	1	add
341	[BUG]  [BUGGY]  if(room  >=  0)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  0)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  0)  {  if(_outputTail  >  room)  {  _flushBuffer();  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    If(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
342	[BUG]  [BUGGY]  if(room!=  0)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room!=  0)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room!=  0)  {  if(_outputTail  >  room)  {  _flushBuffer();  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    If(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
343	[BUG]  [BUGGY]  if(room  >=  _outputEnd)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  _outputEnd)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  _outputEnd)  {  if(_outputTail  >  room)  {  _flushBuffer();  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    If(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
344	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  if(_outputTail  <  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >    room)    {    writeRawLong(text);    }    if(_outputTail  <  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	67	1	add
345	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  if(_outputTail  <  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  if(_outputTail  <  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >    room)    {    writeRawLong(text);    }    if(_outputTail  <  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	67	1	add
346	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text.getChars(0,  room,  _outputBuffer,  0));  }  [CE]  'void'  type  not  allowed  here  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text.getChars(0,  room,  _outputBuffer,  0));  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >    room)    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text.getChars(0,  room,  _outputBuffer,  0));  }	  	non-compiled	[CE]  'void'  type  not  allowed  here	67	None	add
347	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >    room)    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }	  	compilable	  [FE]  AssertionFailedError  	67	1	add
348	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  writeRawLong(text);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >    room)    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }	  	compilable	  [FE]  AssertionFailedError  	67	1	add
349	[BUG]  [BUGGY]  if(room  >=  0)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value "));  }  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  0)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value "));  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  0)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value "));  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value   "));    	non-compiled	[CE]  	16	None	replace
350	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  0)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room  >=  0)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	15	1	replace
351	[BUG]  [BUGGY]  if(room  >=  0)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  0)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  0)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	15	1	replace
352	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  writeRawLong(text.charAt(i));  }  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  writeRawLong(text.charAt(i));  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  writeRawLong(text.charAt(i));  }	          if(room    <    SHORT_WRITE)    {    int    len    =    text.length();    for(int    i    =    start;    i    <    len;    ++i)    {    writeRawLong(text.charAt(i));    }    	non-compiled	[CE]  ';'  expected	89	None	replace
353	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  start  +  len;  i  <  len;  ++i)  {  writeRawLong(text.charAt(i));  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  start  +  len;  i  <  len;  ++i)  {  writeRawLong(text.charAt(i));  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  start  +  len;  i  <  len;  ++i)  {  writeRawLong(text.charAt(i));  }	          if(room    <    SHORT_WRITE)    {    int    len    =    text.length();    for(int    i    =    start;    i    <    len;    ++i)    {    writeRawLong(text.charAt(i));    }    	non-compiled	[CE]  ';'  expected	89	None	replace
354	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  <  SHORT_WRITE)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  <  SHORT_WRITE)  {  if(_outputTail  >  room)  {  _flushBuffer();  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
355	[BUG]  [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  if(room  >  _outputEnd)  {  _flushBuffer();  System.arraycopy(text,  0,  _outputBuffer,  _outputTail,  _outputHead,  _outputTail);  _outputTail  +=  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  if(room  >  _outputEnd)  {  _flushBuffer();  System.arraycopy(text,  0,  _outputBuffer,  _outputTail,  _outputHead,  _outputTail);  _outputTail  +=  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    >    _outputEnd)    {    _flushBuffer();    }    if(room  >  _outputEnd)  {  _flushBuffer();  System.arraycopy(text,  0,  _outputBuffer,  _outputTail,  _outputHead,  _outputTail);  _outputTail  +=	  	non-compiled	[CE]  ';'  expected	71	None	add
356	[BUG]  [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  if(room  >  _outputEnd)  {  _flushBuffer();  System.arraycopy(text,  0,  _outputBuffer,  _outputTail,  _outputHead,  _outputTail);  _outputTail  +=  room;  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  if(room  >  _outputEnd)  {  _flushBuffer();  System.arraycopy(text,  0,  _outputBuffer,  _outputTail,  _outputHead,  _outputTail);  _outputTail  +=  room;  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    >    _outputEnd)    {    _flushBuffer();    }    if(room  >  _outputEnd)  {  _flushBuffer();  System.arraycopy(text,  0,  _outputBuffer,  _outputTail,  _outputHead,  _outputTail);  _outputTail  +=  room;  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	71	None	add
357	[BUG]  [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  if(room  >  _outputEnd)  {  _flushBuffer();  System.arraycopy(text,  0,  _outputBuffer,  _outputTail,  _outputTail,  room);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  if(room  >  _outputEnd)  {  _flushBuffer();  System.arraycopy(text,  0,  _outputBuffer,  _outputTail,  _outputTail,  room);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    >    _outputEnd)    {    _flushBuffer();    }    if(room  >  _outputEnd)  {  _flushBuffer();  System.arraycopy(text,  0,  _outputBuffer,  _outputTail,  _outputTail,  room);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	71	None	add
358	[BUG]  [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  if(room  >  _outputEnd)  {  _flushBuffer();  System.arraycopy(text,  0,  _outputBuffer,  _outputTail,  _outputTail,  _outputHead);  _outputTail  +=  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  if(room  >  _outputEnd)  {  _flushBuffer();  System.arraycopy(text,  0,  _outputBuffer,  _outputTail,  _outputTail,  _outputHead);  _outputTail  +=  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    >    _outputEnd)    {    _flushBuffer();    }    if(room  >  _outputEnd)  {  _flushBuffer();  System.arraycopy(text,  0,  _outputBuffer,  _outputTail,  _outputTail,  _outputHead);  _outputTail  +=	  	non-compiled	[CE]  ';'  expected	71	None	add
359	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ");  if(_outputTail!=  null)  {  _writeRawLong(text);  }  [CE]  incomparable  types:  int  and  <null>  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite( "write  text  value ");  if(_outputTail!=  null)  {  _writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite( "write  text  value ");  if(_outputTail!=  null)  {  _writeRawLong(text);  }	  _verifyValueWrite(   "write    text    value   ");    if(text!=    null)    {    _writeRawLong(text);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	85	None	replace
360	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ");  if(_writer!=  null)  {  _writeRawLong(text);  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite( "write  text  value ");  if(_writer!=  null)  {  _writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite( "write  text  value ");  if(_writer!=  null)  {  _writeRawLong(text);  }	  _verifyValueWrite(   "write    text    value   ");    if(text!=    null)    {    _writeRawLong(text);    }    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
361	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >=  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room    >    _outputTail)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(room  >=  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	8	1	add
362	[BUG]  [BUGGY]  if(room  >  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >=  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >=  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    >    _outputTail)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(room  >=  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	8	1	add
363	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room    >    _outputTail)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(room  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	8	1	add
364	[BUG]  [BUGGY]  if(room  >  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    >    _outputTail)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(room  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	8	1	add
365	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >  _outputTail)  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room    >    _outputTail)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(room  >  _outputTail)  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	8	1	add
366	[BUG]  [BUGGY]  if(room  >  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >  _outputTail)  {  writeRawLong(text);  }  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >  _outputTail)  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    >    _outputTail)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(room  >  _outputTail)  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	8	1	add
367	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite(   "write  text  value   ");  if(text!=  null)  {  writeRawLong(text);  }  _verifyValueWrite( "write  text  value   ");  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_verifyValueWrite(   "write    text    value   ");    if(text!=    null)    {    writeRawLong(text);    }    _verifyValueWrite( "write  text  value   ");	  	compilable	  [FE]  StackOverflowError  	86	1	add
368	[BUG]  [BUGGY]  _verifyValueWrite(   "write  text  value   ");  if(text!=  null)  {  writeRawLong(text);  }  _verifyValueWrite( "write  text  value   ");  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite(   "write  text  value   ");  if(text!=  null)  {  writeRawLong(text);  }  _verifyValueWrite( "write  text  value   ");  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite(   "write    text    value   ");    if(text!=    null)    {    writeRawLong(text);    }    _verifyValueWrite( "write  text  value   ");	  	compilable	  [FE]  StackOverflowError  	86	1	add
369	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  <  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  <  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	29	1	add
370	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  <  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  <  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  <  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	29	1	add
371	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text.getChars(offset,  offset+room,  _outputBuffer,  0);  }  [CE]  ')'  expected  [FE]      StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text.getChars(offset,  offset+room,  _outputBuffer,  0);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text.getChars(offset,  offset+room,  _outputBuffer,  0);  }	  	non-compiled	[CE]  ')'  expected	29	None	add
372	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  _writeRawLong(text);  }  else  {  writeRawLong(text);  }  [CE]  cannot  find  symbol  [FE]        StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  _writeRawLong(text);  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  _writeRawLong(text);  }  else  {  writeRawLong(text);  }	  	non-compiled	[CE]  cannot  find  symbol	29	None	add
373	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text.getChars(0,  room,  _outputBuffer,  0));  }  [CE]  'void'  type  not  allowed  here  [FE]          StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text.getChars(0,  room,  _outputBuffer,  0));  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text.getChars(0,  room,  _outputBuffer,  0));  }	  	non-compiled	[CE]  'void'  type  not  allowed  here	29	None	add
374	[BUG]  [BUGGY]  TextUtilities.writeRawLong(text,  _outputBuffer,  _outputTail  +  room);  [CE]  cannot  find  symbol  TextUtilities  [FE]        AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  TextUtilities.writeRawLong(text,  _outputBuffer,  _outputTail  +  room);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	TextUtilities.writeRawLong(text,  _outputBuffer,  _outputTail  +  room);	  TextUtilities.writeRawLong(text,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol  TextUtilities	52	None	replace
375	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  0)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room  >=  0)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ",write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	18	1	replace
376	[BUG]  [BUGGY]  if(room  >=  0)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  0)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  0)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ",write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	18	1	replace
377	[BUG]  [BUGGY]  if(_outputTail  >  0)  {  _writer.write(text);  if(_writer!=  null)  {  if(text.length()  ==  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  }  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail  >  0)  {  _writer.write(text);  if(_writer!=  null)  {  if(text.length()  ==  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail  >  0)  {  _writer.write(text);  if(_writer!=  null)  {  if(text.length()  ==  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  }	  _writer.write(text);    if(_writer!=    null)    {    if(text.length()    ==    0)    {    text.getChars(0,    room,    _outputBuffer,    0);    }    	non-compiled	[CE]  ';'  expected	57	None	replace
378	[BUG]  [BUGGY]  if(room  >=  0)  {  _writer.write(text);  if(_writer!=  null)  {  if(text.length()  ==  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  0)  {  _writer.write(text);  if(_writer!=  null)  {  if(text.length()  ==  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  0)  {  _writer.write(text);  if(_writer!=  null)  {  if(text.length()  ==  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  }	  _writer.write(text);    if(_writer!=    null)    {    if(text.length()    ==    0)    {    text.getChars(0,    room,    _outputBuffer,    0);    }    	non-compiled	[CE]  ';'  expected	57	None	replace
379	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  _outputEnd)  {  _flushBuffer();  }  if(room  <  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room    >=    _outputEnd)    {    _flushBuffer();    }    if(room  <  _outputEnd)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
380	[BUG]  [BUGGY]  if(room  >=  _outputEnd)  {  _flushBuffer();  }  if(room  <  _outputEnd)  {  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  _outputEnd)  {  _flushBuffer();  }  if(room  <  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    >=    _outputEnd)    {    _flushBuffer();    }    if(room  <  _outputEnd)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
381	[BUG]  [BUGGY]          _writer.write(text,  0,  room);  if(_writer!=  null)  {  if(!_writer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  _writer.write(text,  0,  room);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]          _writer.write(text,  0,  room);  if(_writer!=  null)  {  if(!_writer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  _writer.write(text,  0,  room);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	                _writer.write(text,    0,    room);    if(_writer!=  null)  {  if(!_writer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  _writer.write(text,  0,  room);  }	  	non-compiled	[CE]  ';'  expected	2	None	add
382	[BUG]  [BUGGY]          _writer.write(text,  0,  room);  if(_writer!=  null)  {  if(!_writer.isEmpty())  {  _writer.write(text,  0,  room);  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]          _writer.write(text,  0,  room);  if(_writer!=  null)  {  if(!_writer.isEmpty())  {  _writer.write(text,  0,  room);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	                _writer.write(text,    0,    room);    if(_writer!=  null)  {  if(!_writer.isEmpty())  {  _writer.write(text,  0,  room);  }	  	non-compiled	[CE]  ';'  expected	2	None	add
383	[BUG]  [BUGGY]          _writer.write(text,  0,  room);  if(_writer!=  null)  {  if(!_writer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  text.getChars(0,  room,  _outputBuffer,  0);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]          _writer.write(text,  0,  room);  if(_writer!=  null)  {  if(!_writer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  text.getChars(0,  room,  _outputBuffer,  0);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	                _writer.write(text,    0,    room);    if(_writer!=  null)  {  if(!_writer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  text.getChars(0,  room,  _outputBuffer,  0);  }	  	non-compiled	[CE]  ';'  expected	2	None	add
384	[BUG]  [BUGGY]          _writer.write(text,  0,  room);  if(_writer!=  null)  {  if(_writer!=  null)  {  _writer  =  new  SerializableString(text);  text.getChars(0,  room,  _outputBuffer,  0);  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]          _writer.write(text,  0,  room);  if(_writer!=  null)  {  if(_writer!=  null)  {  _writer  =  new  SerializableString(text);  text.getChars(0,  room,  _outputBuffer,  0);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	                _writer.write(text,    0,    room);    if(_writer!=  null)  {  if(_writer!=  null)  {  _writer  =  new  SerializableString(text);  text.getChars(0,  room,  _outputBuffer,  0);  }	  	non-compiled	[CE]  ';'  expected	2	None	add
385	[BUG]  [BUGGY]  _writer.writeRawLong(text,  0,  _outputBuffer);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.writeRawLong(text,  0,  _outputBuffer);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.writeRawLong(text,  0,  _outputBuffer);	  _writer.writeRawLong(text,    _outputBuffer);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
386	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >=  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >=  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >=    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >=  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	65	1	add
387	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >=  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >=  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >=  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >=  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >=    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >=  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	65	1	add
388	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >=  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text.getChars(offset,  offset+room,  _outputBuffer,  0);  }  [CE]  ')'  expected  [FE]      StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >=  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text.getChars(offset,  offset+room,  _outputBuffer,  0);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >=    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text.getChars(offset,  offset+room,  _outputBuffer,  0);  }	  	non-compiled	[CE]  ')'  expected	65	None	add
389	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >=  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text.getChars(0,  room,  _outputBuffer,  0));  }  [CE]  'void'  type  not  allowed  here  [FE]        StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >=  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text.getChars(0,  room,  _outputBuffer,  0));  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >=    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text.getChars(0,  room,  _outputBuffer,  0));  }	  	non-compiled	[CE]  'void'  type  not  allowed  here	65	None	add
390	[BUG]  [BUGGY]  ||(room  >  _outputEnd  &&  _outputTail!=  _outputEnd))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  ||(room  >  _outputEnd  &&  _outputTail!=  _outputEnd))  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	||(room  >  _outputEnd  &&  _outputTail!=  _outputEnd))  {  _flushBuffer();  }	  ||(_outputTail    >    room    &&    _outputHead!=    _outputEnd))    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
391	[BUG]  [BUGGY]  ||(room  >=  _outputEnd  &&  _outputTail  >=  _outputEnd))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  ||(room  >=  _outputEnd  &&  _outputTail  >=  _outputEnd))  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	||(room  >=  _outputEnd  &&  _outputTail  >=  _outputEnd))  {  _flushBuffer();  }	  ||(_outputTail    >    room    &&    _outputHead!=    _outputEnd))    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
392	[BUG]  [BUGGY]  ||(_outputTail  >=  _outputEnd))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  ||(_outputTail  >=  _outputEnd))  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	||(_outputTail  >=  _outputEnd))  {  _flushBuffer();  }	  ||(_outputTail    >    room    &&    _outputHead!=    _outputEnd))    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
393	[BUG]  [BUGGY]  if(room  >=  _outputEnd)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  _outputEnd)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  _outputEnd)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  if(room    >=    _outputMaxContiguous)    {    if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	47	None	replace
394	[BUG]  [BUGGY]  if(room  >=  0)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  0)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  0)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  if(room    >=    _outputMaxContiguous)    {    if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	47	None	replace
395	[BUG]  [BUGGY]  if(room  >=  0)  {  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  0)  {  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  0)  {  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }	  if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _outputHead    =    0;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
396	[BUG]  [BUGGY]  if(room!=  0)  {  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room!=  0)  {  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room!=  0)  {  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }	  if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _outputHead    =    0;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
397	[BUG]  [BUGGY]  if(room  >=  0)  {  if(text!=  null)  {  _writer.write(text);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  0)  {  if(text!=  null)  {  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  0)  {  if(text!=  null)  {  _writer.write(text);  }	  if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _outputHead    =    0;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
398	[BUG]  [BUGGY]  if(room  >=  _outputMaxContiguous)  {  if(room  >  _outputTail)  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  _outputMaxContiguous)  {  if(room  >  _outputTail)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  _outputMaxContiguous)  {  if(room  >  _outputTail)  {  _flushBuffer();  }	  if(room    >    _outputTail)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
399	[BUG]  [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(_writer!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _writer.write(text);    }    if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }	  	non-compiled	[CE]  ';'  expected	58	None	add
400	[BUG]  [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  if(_writer!=  null)  {  TextUtilities.writeRawLong(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  if(_writer!=  null)  {  TextUtilities.writeRawLong(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(_writer!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _writer.write(text);    }    if(_writer!=  null)  {  TextUtilities.writeRawLong(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }	  	non-compiled	[CE]  ';'  expected	58	None	add
401	[BUG]  [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  space,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  [CE]  cannot  find  symbol  space  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  space,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _outputHead    =    0;    }    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  space,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }	  	non-compiled	[CE]  cannot  find  symbol  space	74	None	add
402	[BUG]  [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(1  +  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  [CE]  no  suitable  method  found  for  getChars(int,char[],int)  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(1  +  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _outputHead    =    0;    }    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(1  +  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }	  	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,char[],int)	74	None	add
403	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _outputHead    =    0;    }    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	74	1	add
404	[BUG]  [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _outputHead    =    0;    }    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	74	1	add
405	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  +=  1;  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _outputHead    =    0;    }    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  +=  1;  }	  	compilable	  [FE]  AssertionFailedError  	74	1	add
406	[BUG]  [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  +=  1;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  +=  1;  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _outputHead    =    0;    }    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  +=  1;  }	  	compilable	  [FE]  AssertionFailedError  	74	1	add
407	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  _writer.write(text);  if(_writer!=  null)  {  if(!_writer.isEmpty())  {  _writer.write(text);  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  SHORT_WRITE)  {  _writer.write(text);  if(_writer!=  null)  {  if(!_writer.isEmpty())  {  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  SHORT_WRITE)  {  _writer.write(text);  if(_writer!=  null)  {  if(!_writer.isEmpty())  {  _writer.write(text);  }	  _writer.write(text);    if(_writer!=    null)    {    if(!_writer.isEmpty())    {    _writer.write(text);    }    	non-compiled	[CE]  ';'  expected	41	None	replace
408	[BUG]  [BUGGY]  if(room  >=  0)  {  _writer.write(text);  if(_writer!=  null)  {  if(!_writer.isEmpty())  {  _writer.write(text);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  0)  {  _writer.write(text);  if(_writer!=  null)  {  if(!_writer.isEmpty())  {  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  0)  {  _writer.write(text);  if(_writer!=  null)  {  if(!_writer.isEmpty())  {  _writer.write(text);  }	  _writer.write(text);    if(_writer!=    null)    {    if(!_writer.isEmpty())    {    _writer.write(text);    }    	non-compiled	[CE]  ';'  expected	41	None	replace
409	[BUG]  [BUGGY]  if(room  >=  0)  {  _writer.writeLong(text);  if(_writer!=  null)  {  if(!_writer.isEmpty())  {  _writer.writeLong(text);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  0)  {  _writer.writeLong(text);  if(_writer!=  null)  {  if(!_writer.isEmpty())  {  _writer.writeLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  0)  {  _writer.writeLong(text);  if(_writer!=  null)  {  if(!_writer.isEmpty())  {  _writer.writeLong(text);  }	  _writer.write(text);    if(_writer!=    null)    {    if(!_writer.isEmpty())    {    _writer.write(text);    }    	non-compiled	[CE]  ';'  expected	41	None	replace
410	[BUG]  [BUGGY]  (_outputTail  >  room  &&  _outputHead  <  =  1))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  (_outputTail  >  room  &&  _outputHead  <  =  1))  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	(_outputTail  >  room  &&  _outputHead  <  =  1))  {  _flushBuffer();  }	  if(room    >    _outputTail)    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
411	[BUG]  [BUGGY]  (_outputTail  >  room  &&  _outputHead  >=  0))  {  _flushBuffer();  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  (_outputTail  >  room  &&  _outputHead  >=  0))  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	(_outputTail  >  room  &&  _outputHead  >=  0))  {  _flushBuffer();  }	  if(room    >    _outputTail)    {    _flushBuffer();    }    	non-compiled	[CE]  not  a  statement	13	None	replace
412	[BUG]  [BUGGY]  if(room  >=  0)  {  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  0)  {  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  0)  {  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }	  if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _flushBuffer();    }    	non-compiled	[CE]  ';'  expected	77	None	replace
413	[BUG]  [BUGGY]  if(room!=  0)  {  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room!=  0)  {  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room!=  0)  {  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }	  if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _flushBuffer();    }    	non-compiled	[CE]  ';'  expected	77	None	replace
414	[BUG]  [BUGGY]  if(room  >=  0)  {  _writer.writeLong(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [CE]  ';'  expected  [FE]    IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  0)  {  _writer.writeLong(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  0)  {  _writer.writeLong(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }	  _writer.write(text);    if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _writer.write(text);    }    	non-compiled	[CE]  ';'  expected	82	None	replace
415	[BUG]  [BUGGY]  if(room!=  0)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [CE]  ';'  expected  [FE]      IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room!=  0)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room!=  0)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }	  _writer.write(text);    if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _writer.write(text);    }    	non-compiled	[CE]  ';'  expected	82	None	replace
416	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  }	          if(room    <    SHORT_WRITE)    {    int    len    =    text.length();    for(int    i    =    start;    i    <    len;    ++i)    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    }    	non-compiled	[CE]  ';'  expected	91	None	replace
417	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  text.getChars(0,  space,  _outputBuffer,  _outputTail);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  text.getChars(0,  space,  _outputBuffer,  _outputTail);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  text.getChars(0,  space,  _outputBuffer,  _outputTail);  }	          if(room    <    SHORT_WRITE)    {    int    len    =    text.length();    for(int    i    =    start;    i    <    len;    ++i)    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    }    	non-compiled	[CE]  ';'  expected	91	None	replace
418	[BUG]  [BUGGY]  _writeRawLong(text,  room  +  1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writeRawLong(text,  room  +  1);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writeRawLong(text,  room  +  1);	  _writeRawLong(text,    room);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
419	[BUG]  [BUGGY]  if(_outputTail!=  _outputEnd)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [CE]  ';'  expected  [FE]    IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail!=  _outputEnd)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail!=  _outputEnd)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }	  _writer.write(text);    if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    	non-compiled	[CE]  ';'  expected	79	None	replace
420	[BUG]  [BUGGY]  if(room  <  _outputEnd)  {  _flushBuffer();  }  if(room  <  _outputStart)  {  _flushBuffer();  }  [CE]  cannot  find  symbol  _outputStart  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  <  _outputEnd)  {  _flushBuffer();  }  if(room  <  _outputStart)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    <    _outputEnd)    {    _flushBuffer();    }    if(room  <  _outputStart)  {  _flushBuffer();  }	  	non-compiled	[CE]  cannot  find  symbol  _outputStart	62	None	add
421	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  if(text.length()  >  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputHead  =  0;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  <  SHORT_WRITE)  {  if(text.length()  >  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  <  SHORT_WRITE)  {  if(text.length()  >  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputHead  =  0;  }	          if(room    <    SHORT_WRITE)    {    if(text.length()    >    room)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputHead    =    0;    }    	non-compiled	[CE]  ';'  expected	92	None	replace
422	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  if(text.length()  >=  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputHead  =  0;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  <  SHORT_WRITE)  {  if(text.length()  >=  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  <  SHORT_WRITE)  {  if(text.length()  >=  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputHead  =  0;  }	          if(room    <    SHORT_WRITE)    {    if(text.length()    >    room)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputHead    =    0;    }    	non-compiled	[CE]  ';'  expected	92	None	replace
423	[BUG]  [BUGGY]  if(room  >=  0)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]    IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  0)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  0)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }	  _writer.write(text);    if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _flushBuffer();    }    	non-compiled	[CE]  ';'  expected	84	None	replace
424	[BUG]  [BUGGY]  if(room  >=  0)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text.getChars(0,  room,  _outputBuffer,  0));  }  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  0)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text.getChars(0,  room,  _outputBuffer,  0));  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  0)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text.getChars(0,  room,  _outputBuffer,  0));  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text.getChars(0,    room,    _outputBuffer,    0));    }    	non-compiled	[CE]  ';'  expected	64	None	replace
425	[BUG]  [BUGGY]  _writer.write(text);    _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text.getChars(0,  room,  _outputBuffer,  _outputTail));  _writer.write(text);  _writer.write(text);  }  [CE]  cannot  assign  a  value  to  final  variable  _writer  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text.getChars(0,  room,  _outputBuffer,  _outputTail));  _writer.write(text);  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        _writer.write(text);    if(_writer!=  null)  {  _writer  =  new  SerializableString(text.getChars(0,  room,  _outputBuffer,  _outputTail));  _writer.write(text);  _writer.write(text);  }	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  _writer	39	None	add
426	[BUG]  [BUGGY]  _writer.write(text);    _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableString();  _writer.write(text);  _writer.write(text);  }  [CE]  cannot  assign  a  value  to  final  variable  _writer  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableString();  _writer.write(text);  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        _writer.write(text);    if(_writer!=  null)  {  _writer  =  new  SerializableString();  _writer.write(text);  _writer.write(text);  }	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  _writer	39	None	add
427	[BUG]  [BUGGY]  _writer.write(text);    _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text.getChars(0,  room,  _outputBuffer,  _outputTail));  text.getChars(0,  room,  _outputTail,  _outputTail);  _outputTail  +=  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text.getChars(0,  room,  _outputBuffer,  _outputTail));  text.getChars(0,  room,  _outputTail,  _outputTail);  _outputTail  +=  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        _writer.write(text);    if(_writer!=  null)  {  _writer  =  new  SerializableString(text.getChars(0,  room,  _outputBuffer,  _outputTail));  text.getChars(0,  room,  _outputTail,  _outputTail);  _outputTail  +=	  	non-compiled	[CE]  ';'  expected	39	None	add
428	[BUG]  [BUGGY]  _writer.write(text);    _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text.getChars(0,  room,  _outputBuffer,  _outputTail));  _writer  =  new  SerializableString(text.charAt(0));  }  [CE]  cannot  assign  a  value  to  final  variable  _writer  [FE]          AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text.getChars(0,  room,  _outputBuffer,  _outputTail));  _writer  =  new  SerializableString(text.charAt(0));  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        _writer.write(text);    if(_writer!=  null)  {  _writer  =  new  SerializableString(text.getChars(0,  room,  _outputBuffer,  _outputTail));  _writer  =  new  SerializableString(text.charAt(0));  }	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  _writer	39	None	add
429	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >    room)    {    writeRawLong(text);    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	33	1	add
430	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >    room)    {    writeRawLong(text);    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	33	1	add
431	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text.getChars(offset,  offset+room,  _outputBuffer,  0);  }  [CE]  ')'  expected  [FE]      StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text.getChars(offset,  offset+room,  _outputBuffer,  0);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >    room)    {    writeRawLong(text);    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text.getChars(offset,  offset+room,  _outputBuffer,  0);  }	  	non-compiled	[CE]  ')'  expected	33	None	add
432	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room    >    _outputEnd)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(room  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	10	1	add
433	[BUG]  [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    >    _outputEnd)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(room  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	10	1	add
434	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >  _outputEnd)  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room    >    _outputEnd)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(room  >  _outputEnd)  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	10	1	add
435	[BUG]  [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >  _outputEnd)  {  writeRawLong(text);  }  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >  _outputEnd)  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    >    _outputEnd)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(room  >  _outputEnd)  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	10	1	add
436	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  <  _outputEnd)  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room    >    _outputEnd)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(room  <  _outputEnd)  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	10	1	add
437	[BUG]  [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  <  _outputEnd)  {  writeRawLong(text);  }  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  <  _outputEnd)  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    >    _outputEnd)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(room  <  _outputEnd)  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	10	1	add
438	[BUG]  [BUGGY]  ||(room  >=  _outputEnd  &&  _outputHead!=  null))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  ||(room  >=  _outputEnd  &&  _outputHead!=  null))  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	||(room  >=  _outputEnd  &&  _outputHead!=  null))  {  _flushBuffer();  }	  ||(_outputTail    >    room    &&    _outputHead!=    null))    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
439	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  SHORT_WRITE)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  SHORT_WRITE)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text);  }	  _writer.write(text);    if(_writer!=    null)    {    if(_writer!=    null)    {    _writer    =    new    SerializableString(text);    }    	non-compiled	[CE]  ';'  expected	42	None	replace
440	[BUG]  [BUGGY]  if(room  >=  0)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  0)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  0)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text);  }	  _writer.write(text);    if(_writer!=    null)    {    if(_writer!=    null)    {    _writer    =    new    SerializableString(text);    }    	non-compiled	[CE]  ';'  expected	42	None	replace
441	[BUG]  [BUGGY]  if(room  >=  0)  {  _writer.writeLong(text);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  0)  {  _writer.writeLong(text);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  0)  {  _writer.writeLong(text);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text);  }	  _writer.write(text);    if(_writer!=    null)    {    if(_writer!=    null)    {    _writer    =    new    SerializableString(text);    }    	non-compiled	[CE]  ';'  expected	42	None	replace
442	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  _writer.write(text);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    _writer.write(text);	  	compilable	  [FE]  IndexOutOfBoundsException  	78	1	add
443	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  _writer.write(text);  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  _writer.write(text);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    _writer.write(text);	  	compilable	  [FE]  IndexOutOfBoundsException  	78	1	add
444	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]      IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }	  	compilable	  [FE]  IndexOutOfBoundsException  	78	1	add
445	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [FE]  IndexOutOfBoundsException  [FE]      IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }	  	compilable	  [FE]  IndexOutOfBoundsException  	78	1	add
446	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  if(_writer!=  null)  {  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [CE]  ';'  expected  [FE]        IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  if(_writer!=  null)  {  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    if(_writer!=  null)  {  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }	  	non-compiled	[CE]  ';'  expected	78	None	add
447	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]          IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  _verifyValueWrite( "write  text  value ");  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    _verifyValueWrite( "write  text  value ");	  	compilable	  [FE]  IndexOutOfBoundsException  	78	1	add
448	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  _verifyValueWrite( "write  text  value ");  [FE]  IndexOutOfBoundsException  [FE]          IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  _verifyValueWrite( "write  text  value ");  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    _verifyValueWrite( "write  text  value ");	  	compilable	  [FE]  IndexOutOfBoundsException  	78	1	add
449	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]            IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  =  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  =  text.length();  }	  	compilable	  [FE]  IndexOutOfBoundsException  	78	1	add
450	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  =  text.length();  }  [FE]  IndexOutOfBoundsException  [FE]            IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  =  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  =  text.length();  }	  	compilable	  [FE]  IndexOutOfBoundsException  	78	1	add
451	[BUG]  [BUGGY]  ||(room  >=  _outputEnd  &&  _outputTail  >  safeOutputEnd))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  ||(room  >=  _outputEnd  &&  _outputTail  >  safeOutputEnd))  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	||(room  >=  _outputEnd  &&  _outputTail  >  safeOutputEnd))  {  _flushBuffer();  }	  if(room    >=    _outputEnd)    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
452	[BUG]  [BUGGY]  ||(room  >=  _outputEnd  &&  _outputTail  >  safeOutputEnd))  {  _flushBuffer();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  ||(room  >=  _outputEnd  &&  _outputTail  >  safeOutputEnd))  {  _flushBuffer();  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	||(room  >=  _outputEnd  &&  _outputTail  >  safeOutputEnd))  {  _flushBuffer();	  if(room    >=    _outputEnd)    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
453	[BUG]  [BUGGY]  if(room  >  _outputTail)  {  _flushBuffer();  }  if(room  >  _outputTail)  {  _flushBuffer();  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputTail)  {  _flushBuffer();  }  if(room  >  _outputTail)  {  _flushBuffer();  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    >    _outputTail)    {    _flushBuffer();    }    if(room  >  _outputTail)  {  _flushBuffer();	  	non-compiled	[CE]  ';'  expected	12	None	add
454	[BUG]  [BUGGY]  ||(room  >=  _outputEnd  &&  _outputTail  >  0))  {  _flushBuffer();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  ||(room  >=  _outputEnd  &&  _outputTail  >  0))  {  _flushBuffer();  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	||(room  >=  _outputEnd  &&  _outputTail  >  0))  {  _flushBuffer();	  if(room    <    _outputEnd)    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
455	[BUG]  [BUGGY]  (_outputTail  +  room)  <  _outputEnd)  {  _flushBuffer();  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  (_outputTail  +  room)  <  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	(_outputTail  +  room)  <  _outputEnd)  {  _flushBuffer();  }	  if(room    <    _outputEnd)    {    _flushBuffer();    }    	non-compiled	[CE]  not  a  statement	63	None	replace
456	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ",  room);  [CE]  no  suitable  method  found  for  _verifyValueWrite(String,int)  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite( "write  text  value ",  room);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite( "write  text  value ",  room);	  _verifyValueWrite(   "write    text    value.   ");    	non-compiled	[CE]  no  suitable  method  found  for  _verifyValueWrite(String,int)	70	None	replace
457	[BUG]  [BUGGY]  if(room  <  _outputEnd)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  <  _outputEnd)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  <  _outputEnd)  {  if(_outputTail  >  room)  {  _flushBuffer();  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail    >    space)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	31	None	replace
458	[BUG]  [BUGGY]  if(room  <  _outputEnd)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  <  _outputEnd)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  <  _outputEnd)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail    >    space)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	31	None	replace
459	[BUG]  [BUGGY]  ||(room  >=  _outputEnd  &&  _outputTail  >  _outputEnd))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  ||(room  >=  _outputEnd  &&  _outputTail  >  _outputEnd))  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	||(room  >=  _outputEnd  &&  _outputTail  >  _outputEnd))  {  _flushBuffer();  }	  if(room    >    _outputEnd)    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
460	[BUG]  [BUGGY]  ||(room  >=  _outputEnd  &&  _buffer[_outputTail  +]!=  null))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  ||(room  >=  _outputEnd  &&  _buffer[_outputTail  +]!=  null))  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	||(room  >=  _outputEnd  &&  _buffer[_outputTail  +]!=  null))  {  _flushBuffer();  }	  if(room    >    _outputEnd)    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
461	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_writer!=  null)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(_writer!=  null)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  text.length();  }	  _writer.write(text);    _writer.write(text);    	compilable	  [FE]  AssertionFailedError  	40	1	replace
462	[BUG]  [BUGGY]  if(_writer!=  null)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  text.length();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_writer!=  null)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_writer!=  null)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  text.length();  }	  _writer.write(text);    _writer.write(text);    	compilable	  [FE]  AssertionFailedError  	40	1	replace
463	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  0)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room  >=  0)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  text.length();  }	  _writer.write(text);    _writer.write(text);    	compilable	  [FE]  AssertionFailedError  	40	1	replace
464	[BUG]  [BUGGY]  if(room  >=  0)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  text.length();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  0)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  0)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  text.length();  }	  _writer.write(text);    _writer.write(text);    	compilable	  [FE]  AssertionFailedError  	40	1	replace
465	[BUG]  [BUGGY]  if(room!=  SHORT_WRITE)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(offset,  offset+room,  _outputBuffer,  0);  _outputHead  =  0;  _flushBuffer();  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room!=  SHORT_WRITE)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(offset,  offset+room,  _outputBuffer,  0);  _outputHead  =  0;  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room!=  SHORT_WRITE)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(offset,  offset+room,  _outputBuffer,  0);  _outputHead  =  0;  _flushBuffer();  }	  _writer.write(text);    if(text!=    null)    {    text.getChars(offset,    offset+room,    _outputBuffer,    0);    _outputHead    =    0;    _flushBuffer();    }    	non-compiled	[CE]  ';'  expected	80	None	replace
466	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(offset,  offset+room,  _outputBuffer,  0);  _outputHead  =  0;  _  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(offset,  offset+room,  _outputBuffer,  0);  _outputHead  =  0;  _  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail  >=  _outputEnd)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(offset,  offset+room,  _outputBuffer,  0);  _outputHead  =  0;  _	  _writer.write(text);    if(text!=    null)    {    text.getChars(offset,    offset+room,    _outputBuffer,    0);    _outputHead    =    0;    _flushBuffer();    }    	non-compiled	[CE]  not  a  statement	80	None	replace
467	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(offset,  offset+room,  _outputBuffer,  0);  _outputHead  =  0;  _flu  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(offset,  offset+room,  _outputBuffer,  0);  _outputHead  =  0;  _flu  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail  >=  _outputEnd)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(offset,  offset+room,  _outputBuffer,  0);  _outputHead  =  0;  _flu	  _writer.write(text);    if(text!=    null)    {    text.getChars(offset,    offset+room,    _outputBuffer,    0);    _outputHead    =    0;    _flushBuffer();    }    	non-compiled	[CE]  not  a  statement	80	None	replace
468	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  _writer.write(text);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _writer.write(text);    }    _writer.write(text);	  	compilable	  [FE]  IndexOutOfBoundsException  	81	1	add
469	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  _writer.write(text);  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  _writer.write(text);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _writer.write(text);    }    _writer.write(text);	  	compilable	  [FE]  IndexOutOfBoundsException  	81	1	add
470	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]      IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  _verifyValueWrite( "write  text  value ");  if(_outputTail!=  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _writer.write(text);    }    _verifyValueWrite( "write  text  value ");  if(_outputTail!=  _outputEnd)  {  _flushBuffer();  }	  	compilable	  [FE]  IndexOutOfBoundsException  	81	1	add
471	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  _verifyValueWrite( "write  text  value ");  if(_outputTail!=  _outputEnd)  {  _flushBuffer();  }  [FE]  IndexOutOfBoundsException  [FE]      IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  _verifyValueWrite( "write  text  value ");  if(_outputTail!=  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _writer.write(text);    }    _verifyValueWrite( "write  text  value ");  if(_outputTail!=  _outputEnd)  {  _flushBuffer();  }	  	compilable	  [FE]  IndexOutOfBoundsException  	81	1	add
472	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]        IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  _verifyValueWrite( "write  text  value ");  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _writer.write(text);    }    _verifyValueWrite( "write  text  value ");	  	compilable	  [FE]  IndexOutOfBoundsException  	81	1	add
473	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  _verifyValueWrite( "write  text  value ");  [FE]  IndexOutOfBoundsException  [FE]        IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  _verifyValueWrite( "write  text  value ");  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _writer.write(text);    }    _verifyValueWrite( "write  text  value ");	  	compilable	  [FE]  IndexOutOfBoundsException  	81	1	add
474	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]          IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  _verifyValueWrite( "write  text  value ");  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _writer.write(text);    }    _verifyValueWrite( "write  text  value ");  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }	  	compilable	  [FE]  IndexOutOfBoundsException  	81	1	add
475	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  _verifyValueWrite( "write  text  value ");  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  [FE]  IndexOutOfBoundsException  [FE]          IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  _verifyValueWrite( "write  text  value ");  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _writer.write(text);    }    _verifyValueWrite( "write  text  value ");  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }	  	compilable	  [FE]  IndexOutOfBoundsException  	81	1	add
476	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]            IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  _flushBuffer();  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _writer.write(text);    }    _flushBuffer();	  	compilable	  [FE]  IndexOutOfBoundsException  	81	1	add
477	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  _flushBuffer();  [FE]  IndexOutOfBoundsException  [FE]            IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  _flushBuffer();  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _writer.write(text);    }    _flushBuffer();	  	compilable	  [FE]  IndexOutOfBoundsException  	81	1	add
478	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >=  _outputEnd)  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room    >=    _outputEnd)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(room  >=  _outputEnd)  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	45	1	add
479	[BUG]  [BUGGY]  if(room  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >=  _outputEnd)  {  writeRawLong(text);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >=  _outputEnd)  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    >=    _outputEnd)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(room  >=  _outputEnd)  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	45	1	add
480	[BUG]  [BUGGY]  if(room  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >=  _outputStart)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [CE]  cannot  find  symbol  _outputStart  [FE]      StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  >=  _outputStart)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    >=    _outputEnd)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(room  >=  _outputStart)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	non-compiled	[CE]  cannot  find  symbol  _outputStart	45	None	add
481	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  <  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room    >=    _outputEnd)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(room  <  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	45	1	add
482	[BUG]  [BUGGY]  if(room  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  <  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  <  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    >=    _outputEnd)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(room  <  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	45	1	add
483	[BUG]  [BUGGY]  _writer.write(text,  0,  null);  [CE]  no  suitable  method  found  for  write(String,int,<null>)  [FE]        AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text,  0,  null);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text,  0,  null);	  _writer.write(text,    null);    	non-compiled	[CE]  no  suitable  method  found  for  write(String,int,<null>)	25	None	replace
484	[BUG]  [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ",  room);  }  else  {  _writer.writeRawLong(text);  }  [CE]  no  suitable  method  found  for  _verifyValueWrite(String,int)  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ",  room);  }  else  {  _writer.writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ",  room);  }  else  {  _writer.writeRawLong(text);  }	  if(_writer!=    null)    {    _verifyValueWrite(   "write    text    value   ");    }    else    {    _writer.writeRawLong(text);    }    	non-compiled	[CE]  no  suitable  method  found  for  _verifyValueWrite(String,int)	37	None	replace
485	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  SHORT_WRITE)  {  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  SHORT_WRITE)  {  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }	  _writer.write(text);    if(_writer!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _writer.write(text);    }    	non-compiled	[CE]  ';'  expected	59	None	replace
486	[BUG]  [BUGGY]  if(room  >=  0)  {  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  0)  {  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  0)  {  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }	  _writer.write(text);    if(_writer!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _writer.write(text);    }    	non-compiled	[CE]  ';'  expected	59	None	replace
487	[BUG]  [BUGGY]  if(room!=  0)  {  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room!=  0)  {  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room!=  0)  {  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }	  _writer.write(text);    if(_writer!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _writer.write(text);    }    	non-compiled	[CE]  ';'  expected	59	None	replace
488	[BUG]  [BUGGY]  _writer.writeRaw(text,  _outputBuffer);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.writeRaw(text,  _outputBuffer);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.writeRaw(text,  _outputBuffer);	          _writer.writeRaw(text);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
489	[BUG]  [BUGGY]  _writer.writeRaw(text,  _outputTail);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.writeRaw(text,  _outputTail);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.writeRaw(text,  _outputTail);	          _writer.writeRaw(text);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
490	[BUG]  [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ",  room);  }  else  {  _writer.writeLong(text);  }  [CE]  no  suitable  method  found  for  _verifyValueWrite(String,int)  [FE]        AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ",  room);  }  else  {  _writer.writeLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ",  room);  }  else  {  _writer.writeLong(text);  }	  if(_writer!=    null)    {    _verifyValueWrite(   "write    text    value   ");    }    else    {    _writer.writeLong(text);    }    	non-compiled	[CE]  no  suitable  method  found  for  _verifyValueWrite(String,int)	56	None	replace
491	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text,  0,  room  -  _outputTail);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text,  0,  room  -  _outputTail);	          _writer.write(text,    0,    room);    	compilable	  [FE]  StringIndexOutOfBoundsException  	3	1	replace
492	[BUG]  [BUGGY]  _writer.write(text,  0,  room  -  _outputTail);  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text,  0,  room  -  _outputTail);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text,  0,  room  -  _outputTail);	          _writer.write(text,    0,    room);    	compilable	  [FE]  StringIndexOutOfBoundsException  	3	1	replace
493	[BUG]  [BUGGY]  if(room  >=  0)  {  _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  0)  {  _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  0)  {  _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  writeRawLong(text);  }	  _verifyValueWrite(   "write    text    value   ");    if(text!=    null)    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	87	None	replace
494	[BUG]  [BUGGY]  if(room!=  0)  {  _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]      StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room!=  0)  {  _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room!=  0)  {  _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  writeRawLong(text);  }	  _verifyValueWrite(   "write    text    value   ");    if(text!=    null)    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	87	None	replace
495	[BUG]  [BUGGY]  if(room  >=  0)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text.substring(1),  text.length());  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  0)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text.substring(1),  text.length());  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  0)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text.substring(1),  text.length());  }	  _writer.write(text);    if(_writer!=    null)    {    if(_writer!=    null)    {    _writer    =    new    SerializableString(text.substring(1),    text.length());    }    	non-compiled	[CE]  ';'  expected	44	None	replace
496	[BUG]  [BUGGY]  if(room  ==  0)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text.substring(1),  text.length());  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  ==  0)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text.substring(1),  text.length());  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  ==  0)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text.substring(1),  text.length());  }	  _writer.write(text);    if(_writer!=    null)    {    if(_writer!=    null)    {    _writer    =    new    SerializableString(text.substring(1),    text.length());    }    	non-compiled	[CE]  ';'  expected	44	None	replace
497	[BUG]  [BUGGY]  if(room  <  =  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [CE]  illegal  start  of  expression  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  <  =  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  <  =  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  if(room    >    _outputEnd)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
498	[BUG]  [BUGGY]  if(room  <  =  _outputMaxContiguous)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [CE]  illegal  start  of  expression  [FE]      StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  <  =  _outputMaxContiguous)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  <  =  _outputMaxContiguous)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  if(room    >    _outputEnd)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
499	[BUG]  [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(_writer!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _writer.write(text);    }    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }	  	non-compiled	[CE]  ';'  expected	58	None	add
500	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  0)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room  >  0)  {  _flushBuffer();  }	  if(room    >    _outputMaxContiguous)    {    _flushBuffer();    }    	compilable	  [FE]  AssertionFailedError  	73	1	replace
501	[BUG]  [BUGGY]  if(room  >  0)  {  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  0)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >  0)  {  _flushBuffer();  }	  if(room    >    _outputMaxContiguous)    {    _flushBuffer();    }    	compilable	  [FE]  AssertionFailedError  	73	1	replace
502	[BUG]  [BUGGY]  if(_writer!=  null)  {  _writeValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value "));  }  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_writer!=  null)  {  _writeValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value "));  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_writer!=  null)  {  _writeValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value "));  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value   "));    	non-compiled	[CE]  	16	None	replace
503	[BUG]  [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value "));  }  else  {  _writer.writeLong(text);  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value "));  }  else  {  _writer.writeLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value "));  }  else  {  _writer.writeLong(text);  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value   "));    	non-compiled	[CE]  	16	None	replace
504	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  <  SHORT_WRITE)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  <  SHORT_WRITE)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    If(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
505	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    _writer.write(text);  if(text!=  null)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text);        _writer.write(text);    if(text!=  null)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _writer.write(text);  }	  	compilable	  [FE]  AssertionFailedError  	39	1	add
506	[BUG]  [BUGGY]  _writer.write(text);    _writer.write(text);  if(text!=  null)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _writer.write(text);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    _writer.write(text);  if(text!=  null)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        _writer.write(text);    if(text!=  null)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _writer.write(text);  }	  	compilable	  [FE]  AssertionFailedError  	39	1	add
507	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    _writer.write(text);  if(text!=  null)  {  _writer.write(text);  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text);        _writer.write(text);    if(text!=  null)  {  _writer.write(text);  _writer.write(text);  }	  	compilable	  [FE]  AssertionFailedError  	39	1	add
508	[BUG]  [BUGGY]  _writer.write(text);    _writer.write(text);  if(text!=  null)  {  _writer.write(text);  _writer.write(text);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    _writer.write(text);  if(text!=  null)  {  _writer.write(text);  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        _writer.write(text);    if(text!=  null)  {  _writer.write(text);  _writer.write(text);  }	  	compilable	  [FE]  AssertionFailedError  	39	1	add
509	[BUG]  [BUGGY]  _writer.write(text);    _writer.write(text);  if(room  >=  0)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(offset,  offset+room,  _outputBuffer,  0);  _writer.write(text);  }  [CE]  cannot  find  symbol  offset  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    _writer.write(text);  if(room  >=  0)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(offset,  offset+room,  _outputBuffer,  0);  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        _writer.write(text);    if(room  >=  0)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(offset,  offset+room,  _outputBuffer,  0);  _writer.write(text);  }	  	non-compiled	[CE]  cannot  find  symbol  offset	39	None	add
510	[BUG]  [BUGGY]  _writer.write(text);    _writer.write(text);  if(text!=  null)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(offset,  offset+room,  _outputBuffer,  0);  _outputHead  =  0;  _flushBuffer();  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    _writer.write(text);  if(text!=  null)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(offset,  offset+room,  _outputBuffer,  0);  _outputHead  =  0;  _flushBuffer();  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        _writer.write(text);    if(text!=  null)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(offset,  offset+room,  _outputBuffer,  0);  _outputHead  =  0;  _flushBuffer();	  	non-compiled	[CE]  ';'  expected	39	None	add
511	[BUG]  [BUGGY]  ||(room  <  _outputEnd  &&  _outputBuffer[_outputTail  +]  >  0))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  ||(room  <  _outputEnd  &&  _outputBuffer[_outputTail  +]  >  0))  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	||(room  <  _outputEnd  &&  _outputBuffer[_outputTail  +]  >  0))  {  _flushBuffer();  }	  if(room    <    _outputEnd)    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
512	[BUG]  [BUGGY]  ||(room  >=  _outputEnd  &&  _outputBuffer[_outputTail  +]  >  0))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  ||(room  >=  _outputEnd  &&  _outputBuffer[_outputTail  +]  >  0))  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	||(room  >=  _outputEnd  &&  _outputBuffer[_outputTail  +]  >  0))  {  _flushBuffer();  }	  if(room    <    _outputEnd)    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
513	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }  if(room  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >    room)    {    writeRawLong(text);    }    else    {    writeRawLong(text);    }    if(room  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	33	1	add
514	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }  if(room  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }  if(room  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >    room)    {    writeRawLong(text);    }    else    {    writeRawLong(text);    }    if(room  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	33	1	add
515	[BUG]  [BUGGY]  _writer.writeRawLong(text,  null,  _outputBuffer);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.writeRawLong(text,  null,  _outputBuffer);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.writeRawLong(text,  null,  _outputBuffer);	  _writer.writeRawLong(text,    _outputBuffer);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
516	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [CE]  ';'  expected  [FE]    IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  <  SHORT_WRITE)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  <  SHORT_WRITE)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }	  _writer.write(text);    if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    	non-compiled	[CE]  ';'  expected	79	None	replace
517	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  <  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room  <  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail    >    space)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    	compilable	  [FE]  AssertionFailedError  	31	1	replace
518	[BUG]  [BUGGY]  if(room  <  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  <  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  <  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail    >    space)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    	compilable	  [FE]  AssertionFailedError  	31	1	replace
519	[BUG]  [BUGGY]          _writer.write(text,  0,  room);  if(_writer!=  null)  {  _writer  =  new  SerializableStringBuilder();  _writer.write(text,  0,  room);  }  else  {  _writer.write(text,  0,  room);  }  [CE]  cannot  assign  a  value  to  final  variable  _writer  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]          _writer.write(text,  0,  room);  if(_writer!=  null)  {  _writer  =  new  SerializableStringBuilder();  _writer.write(text,  0,  room);  }  else  {  _writer.write(text,  0,  room);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	                _writer.write(text,    0,    room);    if(_writer!=  null)  {  _writer  =  new  SerializableStringBuilder();  _writer.write(text,  0,  room);  }  else  {  _writer.write(text,  0,  room);  }	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  _writer	2	None	add
520	[BUG]  [BUGGY]          _writer.write(text,  0,  room);  if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text,  0,  room);  }  else  {  _writer.write(text,  0,  room);  }  [CE]  cannot  assign  a  value  to  final  variable  _writer  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]          _writer.write(text,  0,  room);  if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text,  0,  room);  }  else  {  _writer.write(text,  0,  room);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	                _writer.write(text,    0,    room);    if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text,  0,  room);  }  else  {  _writer.write(text,  0,  room);  }	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  _writer	2	None	add
521	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]          _writer.write(text,  0,  room);  if(_writer!=  null)  {  _writer.write(text,  0,  room);  }  else  {  _writer.write(text,  0,  room);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	                _writer.write(text,    0,    room);    if(_writer!=  null)  {  _writer.write(text,  0,  room);  }  else  {  _writer.write(text,  0,  room);  }	  	compilable	  [FE]  AssertionFailedError  	2	1	add
522	[BUG]  [BUGGY]          _writer.write(text,  0,  room);  if(_writer!=  null)  {  _writer.write(text,  0,  room);  }  else  {  _writer.write(text,  0,  room);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]          _writer.write(text,  0,  room);  if(_writer!=  null)  {  _writer.write(text,  0,  room);  }  else  {  _writer.write(text,  0,  room);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	                _writer.write(text,    0,    room);    if(_writer!=  null)  {  _writer.write(text,  0,  room);  }  else  {  _writer.write(text,  0,  room);  }	  	compilable	  [FE]  AssertionFailedError  	2	1	add
523	[BUG]  [BUGGY]          _writer.write(text,  0,  room);  if(_writer!=  null)  {  _writer  =  new  SerializableStringBuilder();  _writer.write(text,  0,  room);  }  [CE]  cannot  assign  a  value  to  final  variable  _writer  [FE]          AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]          _writer.write(text,  0,  room);  if(_writer!=  null)  {  _writer  =  new  SerializableStringBuilder();  _writer.write(text,  0,  room);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	                _writer.write(text,    0,    room);    if(_writer!=  null)  {  _writer  =  new  SerializableStringBuilder();  _writer.write(text,  0,  room);  }	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  _writer	2	None	add
524	[BUG]  [BUGGY]  _verifyValueWrite(   "write  text  length   ");  _verifyValueWrite(. "write  text  length   ");  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite(   "write  text  length   ");  _verifyValueWrite(. "write  text  length   ");  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite(   "write    text    length   ");    _verifyValueWrite(. "write  text  length   ");	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
525	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite(   "write  text  length   ");  _verifyValueWrite( ".write  text  length   ");  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_verifyValueWrite(   "write    text    length   ");    _verifyValueWrite( ".write  text  length   ");	  	compilable	  [FE]  AssertionFailedError  	26	1	add
526	[BUG]  [BUGGY]  _verifyValueWrite(   "write  text  length   ");  _verifyValueWrite( ".write  text  length   ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite(   "write  text  length   ");  _verifyValueWrite( ".write  text  length   ");  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite(   "write    text    length   ");    _verifyValueWrite( ".write  text  length   ");	  	compilable	  [FE]  AssertionFailedError  	26	1	add
527	[BUG]  [BUGGY]  ||(room  >=  _outputEnd  &&  _outputBuffer[_outputTail]!=  null))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  ||(room  >=  _outputEnd  &&  _outputBuffer[_outputTail]!=  null))  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	||(room  >=  _outputEnd  &&  _outputBuffer[_outputTail]!=  null))  {  _flushBuffer();  }	  if(room    >=    _outputEnd)    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
528	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ");  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite( "write  text  value ");  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite( "write  text  value ");  }	  if(_writer!=    null)    {    _verifyValueWrite(   "write    text    value   ");    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
529	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputHead);  _outputTail  =  0;  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _outputHead    =    0;    }    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputHead);  _outputTail  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	74	1	add
530	[BUG]  [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputHead);  _outputTail  =  0;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputHead);  _outputTail  =  0;  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _outputHead    =    0;    }    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputHead);  _outputTail  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	74	1	add
531	[BUG]  [BUGGY]  if(room  >  room)  {  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  writeRawLong(text.charAt(i));  }  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  room)  {  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  writeRawLong(text.charAt(i));  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >  room)  {  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  writeRawLong(text.charAt(i));  }	          if(room    <    SHORT_WRITE)    {    int    len    =    text.length();    for(int    i    =    start;    i    <    len;    ++i)    {    writeRawLong(text.charAt(i));    }    	non-compiled	[CE]  ';'  expected	89	None	replace
532	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  <  SHORT_WRITE)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  <  SHORT_WRITE)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text);  }	  _writer.write(text);    if(_writer!=    null)    {    if(_writer!=    null)    {    _writer    =    new    SerializableString(text);    }    	non-compiled	[CE]  ';'  expected	42	None	replace
533	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputTail)  {  _flushBuffer();  }  if(room  <  _outputTail)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room    >    _outputTail)    {    _flushBuffer();    }    if(room  <  _outputTail)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	12	1	add
534	[BUG]  [BUGGY]  if(room  >  _outputTail)  {  _flushBuffer();  }  if(room  <  _outputTail)  {  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  _outputTail)  {  _flushBuffer();  }  if(room  <  _outputTail)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    >    _outputTail)    {    _flushBuffer();    }    if(room  <  _outputTail)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	12	1	add
535	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer()  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer()  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        if(_outputTail    >    room)    {    _flushBuffer();    }    if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer()	  	non-compiled	[CE]  ';'  expected	21	None	add
536	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  <  SHORT_WRITE)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(room  <  SHORT_WRITE)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(room  <  SHORT_WRITE)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	non-compiled	[CE]  ';'  expected	29	None	add
537	[BUG]  [BUGGY]  if(room  <  =  _outputEnd)  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  <  =  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  <  =  _outputEnd)  {  _flushBuffer();  }	  if(room    >    _outputTail)    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
538	[BUG]  [BUGGY]  _writeRawLong(text,  room,  _outputHead);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writeRawLong(text,  room,  _outputHead);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writeRawLong(text,  room,  _outputHead);	  _writeRawLong(text,    room);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
539	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _flushBuffer();    }    _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }	  	compilable	  [FE]  IndexOutOfBoundsException  	83	1	add
540	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _flushBuffer();    }    _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }	  	compilable	  [FE]  IndexOutOfBoundsException  	83	1	add
541	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flush  [CE]  ';'  expected  [FE]      IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flush  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _flushBuffer();    }    _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flush	  	non-compiled	[CE]  ';'  expected	83	None	add
542	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [CE]  ';'  expected  [FE]        IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _flushBuffer();    }    _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }	  	non-compiled	[CE]  ';'  expected	83	None	add
543	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  if(_writer!=  null)  {  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]          IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  if(_writer!=  null)  {  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _flushBuffer();    }    if(_writer!=  null)  {  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }	  	non-compiled	[CE]  ';'  expected	83	None	add
544	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(1,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _flushBuffer();    }    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(1,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	76	1	add
545	[BUG]  [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(1,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(1,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _flushBuffer();    }    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(1,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	76	1	add
546	[BUG]  [BUGGY]  if(room  <  =  _outputMaxContiguous)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  <  =  _outputMaxContiguous)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  <  =  _outputMaxContiguous)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  if(room    >=    _outputMaxContiguous)    {    if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
547	[BUG]  [BUGGY]  if(room  <  =  _outputMaxContiguous)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  <  =  _outputMaxContiguous)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  <  =  _outputMaxContiguous)  {  if(_outputTail  >  room)  {  _flushBuffer();  }	  if(room    >=    _outputMaxContiguous)    {    if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
548	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  if(room  >=  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _writer.write(text);    }    if(room  >=  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }	  	compilable	  [FE]  IndexOutOfBoundsException  	81	1	add
549	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  if(room  >=  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  if(room  >=  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _writer.write(text);    }    if(room  >=  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }	  	compilable	  [FE]  IndexOutOfBoundsException  	81	1	add
550	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]      IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  if(room  >=  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _writer.write(text);    }    if(room  >=  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }	  	compilable	  [FE]  IndexOutOfBoundsException  	81	1	add
551	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  if(room  >=  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [FE]  IndexOutOfBoundsException  [FE]      IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  if(room  >=  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _writer.write(text);    }    if(room  >=  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }	  	compilable	  [FE]  IndexOutOfBoundsException  	81	1	add
552	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  if(room  >=  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.writeLong(text);  }  [CE]  cannot  find  symbol  [FE]        IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  if(room  >=  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.writeLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _writer.write(text);    }    if(room  >=  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.writeLong(text);  }	  	non-compiled	[CE]  cannot  find  symbol	81	None	add
553	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  if(room  >=  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  TextUtilities.writeRawLong(text);  }  [CE]  cannot  find  symbol  TextUtilities  [FE]          IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  if(room  >=  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  TextUtilities.writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _writer.write(text);    }    if(room  >=  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  TextUtilities.writeRawLong(text);  }	  	non-compiled	[CE]  cannot  find  symbol  TextUtilities	81	None	add
554	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  if(room  >=  0)  {  if(_outputEnd  <  SHORT_WRITE)  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]            IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  if(room  >=  0)  {  if(_outputEnd  <  SHORT_WRITE)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _writer.write(text);    }    if(room  >=  0)  {  if(_outputEnd  <  SHORT_WRITE)  {  _flushBuffer();  }	  	non-compiled	[CE]  ';'  expected	81	None	add
555	[BUG]  [BUGGY]  _writer.write(text,  start,  _outputBuffer,  _outputTail);  [CE]  cannot  find  symbol  start  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text,  start,  _outputBuffer,  _outputTail);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text,  start,  _outputBuffer,  _outputTail);	          if(room    <    SHORT_WRITE)    {    if(text.length()    >    room)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputHead    =    0;    }    	non-compiled	[CE]  cannot  find  symbol  start	92	None	replace
556	[BUG]  [BUGGY]  _writer.write(text,  start,  _outputBuffer,  _outputHead);  [CE]  cannot  find  symbol  start  [FE]                AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text,  start,  _outputBuffer,  _outputHead);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text,  start,  _outputBuffer,  _outputHead);	          if(room    <    SHORT_WRITE)    {    if(text.length()    >    room)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputHead    =    0;    }    	non-compiled	[CE]  cannot  find  symbol  start	92	None	replace
557	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(text!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(text!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	15	1	replace
558	[BUG]  [BUGGY]  if(text!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(text!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(text!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	15	1	replace
559	[BUG]  [BUGGY]  if(_writer!=  null)  {  _writeValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_writer!=  null)  {  _writeValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_writer!=  null)  {  _writeValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value       ");    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
560	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  if(text.length()  ==  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  }  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  <  SHORT_WRITE)  {  if(text.length()  ==  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  <  SHORT_WRITE)  {  if(text.length()  ==  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  }	  _writer.write(text);    if(_writer!=    null)    {    if(text.length()    ==    0)    {    text.getChars(0,    room,    _outputBuffer,    0);    }    	non-compiled	[CE]  ';'  expected	57	None	replace
561	[BUG]  [BUGGY]  if(_writer!=  null)  {  if(text.length()  ==  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_writer!=  null)  {  if(text.length()  ==  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_writer!=  null)  {  if(text.length()  ==  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  }	  _writer.write(text);    if(_writer!=    null)    {    if(text.length()    ==    0)    {    text.getChars(0,    room,    _outputBuffer,    0);    }    	non-compiled	[CE]  ';'  expected	57	None	replace
562	[BUG]  [BUGGY]  if(room  >=  0)  {  if(text.length()  ==  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  0)  {  if(text.length()  ==  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  0)  {  if(text.length()  ==  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  }	  _writer.write(text);    if(_writer!=    null)    {    if(text.length()    ==    0)    {    text.getChars(0,    room,    _outputBuffer,    0);    }    	non-compiled	[CE]  ';'  expected	57	None	replace
563	[BUG]  [BUGGY]  if(room  >=  0)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  0)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  0)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }	  _writer.write(text);    if(_writer!=    null)    {    if(!_writer.isEmpty())    {    _writer.write(text);    }    	non-compiled	[CE]  ';'  expected	41	None	replace
564	[BUG]  [BUGGY]  if(room  >=  0)  {  _writer.write(text);  if(_writer!=  null)  {  if(!_writer.isEmpty())  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  0)  {  _writer.write(text);  if(_writer!=  null)  {  if(!_writer.isEmpty())  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  0)  {  _writer.write(text);  if(_writer!=  null)  {  if(!_writer.isEmpty())  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  }	  _writer.write(text);    if(_writer!=    null)    {    if(!_writer.isEmpty())    {    _writer.write(text);    }    	non-compiled	[CE]  ';'  expected	41	None	replace
565	[BUG]  [BUGGY]  _writer.writeLong(text,  0,  room);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.writeLong(text,  0,  room);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.writeLong(text,  0,  room);	          _writer.writeLong(text);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
566	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  if(_outputTail  >  room)  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  <  SHORT_WRITE)  {  if(_outputTail  >  room)  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  <  SHORT_WRITE)  {  if(_outputTail  >  room)  {  writeRawLong(text);  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail    >    room)    {    writeRawLong(text);    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
567	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  for(int  i  =  start;  i  <  len;  ++i)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  <  SHORT_WRITE)  {  for(int  i  =  start;  i  <  len;  ++i)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  <  SHORT_WRITE)  {  for(int  i  =  start;  i  <  len;  ++i)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  }	          if(room    <    SHORT_WRITE)    {    int    len    =    text.length();    for(int    i    =    start;    i    <    len;    ++i)    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    }    	non-compiled	[CE]  ';'  expected	91	None	replace
568	[BUG]  [BUGGY]  _writer.writeRawLong(text,  null,  _outputHead);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.writeRawLong(text,  null,  _outputHead);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.writeRawLong(text,  null,  _outputHead);	  _writer.writeRawLong(text,    null);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
569	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  <  _outputEnd)  {  _flushBuffer();  }  if(room  >  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room    <    _outputEnd)    {    _flushBuffer();    }    if(room  >  _outputEnd)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	62	1	add
570	[BUG]  [BUGGY]  if(room  <  _outputEnd)  {  _flushBuffer();  }  if(room  >  _outputEnd)  {  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  <  _outputEnd)  {  _flushBuffer();  }  if(room  >  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room    <    _outputEnd)    {    _flushBuffer();    }    if(room  >  _outputEnd)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	62	1	add
571	[BUG]  [BUGGY]  _writer  =  _writer.createChildLong(text);  [CE]  cannot  assign  a  value  to  final  variable  _writer  [FE]        AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer  =  _writer.createChildLong(text);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer  =  _writer.createChildLong(text);	  if(_writer!=    null)    {    _verifyValueWrite(   "write    text    value   ");    }    else    {    _writer.writeLong(text);    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  _writer	56	None	replace
572	[BUG]  [BUGGY]  _writer  =  _writer.createInt(room,  _outputBuffer,  _outputTail);  [CE]  cannot  assign  a  value  to  final  variable  _writer  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer  =  _writer.createInt(room,  _outputBuffer,  _outputTail);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer  =  _writer.createInt(room,  _outputBuffer,  _outputTail);	  if(_writer!=    null)    {    _verifyValueWrite(   "write    text    value   ");    }    else    {    _writer.writeLong(text);    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  _writer	56	None	replace
573	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer  [CE]  not  a  statement  [FE]    IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  <  SHORT_WRITE)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  <  SHORT_WRITE)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer	  _writer.write(text);    if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _writer.write(text);    }    	non-compiled	[CE]  not  a  statement	82	None	replace
574	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.  [CE]  <identifier>  expected  [FE]      IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  <  SHORT_WRITE)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  <  SHORT_WRITE)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.	  _writer.write(text);    if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    else    {    _writer.write(text);    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
575	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  <  SHORT_WRITE)  {  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  <  SHORT_WRITE)  {  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }	  _writer.write(text);    if(_writer!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _writer.write(text);    }    	non-compiled	[CE]  ';'  expected	59	None	replace
576	[BUG]  [BUGGY]  ||(room  >  _outputEnd  &&  _outputHead!=  _outputEnd))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  ||(room  >  _outputEnd  &&  _outputHead!=  _outputEnd))  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	||(room  >  _outputEnd  &&  _outputHead!=  _outputEnd))  {  _flushBuffer();  }	  ||(_outputTail    >    room    &&    _outputHead!=    _outputEnd))    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
577	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  for(int  i  =  start;  i  <  len;  ++i)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  [CE]  '.class'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  <  SHORT_WRITE)  {  for(int  i  =  start;  i  <  len;  ++i)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  <  SHORT_WRITE)  {  for(int  i  =  start;  i  <  len;  ++i)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =	          if(room    <    SHORT_WRITE)    {    int    len    =    text.length();    for(int    i    =    start;    i    <    len;    ++i)    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _outputHead    =    	non-compiled	[CE]  '.class'  expected	90	None	replace
578	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  0)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room  >=  0)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }	  _writer.write(text);    _writer.write(text);    	compilable	  [FE]  AssertionFailedError  	40	1	replace
579	[BUG]  [BUGGY]  if(room  >=  0)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  0)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  0)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }	  _writer.write(text);    _writer.write(text);    	compilable	  [FE]  AssertionFailedError  	40	1	replace
580	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  0)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room  >=  0)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }	  _writer.write(text);    _writer.write(text);    	compilable	  [FE]  AssertionFailedError  	40	1	replace
581	[BUG]  [BUGGY]  if(room  >=  0)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  0)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  0)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }	  _writer.write(text);    _writer.write(text);    	compilable	  [FE]  AssertionFailedError  	40	1	replace
582	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  0)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room  >=  0)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  text.length();  }	  _writer.write(text);    _writer.write(text);    	compilable	  [FE]  AssertionFailedError  	40	1	replace
583	[BUG]  [BUGGY]  if(room  >=  0)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  text.length();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  0)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  0)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  text.length();  }	  _writer.write(text);    _writer.write(text);    	compilable	  [FE]  AssertionFailedError  	40	1	replace
584	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  0)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room  >  0)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  if(room    >    _outputMaxContiguous)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    	compilable	  [FE]  AssertionFailedError  	88	1	replace
585	[BUG]  [BUGGY]  if(room  >  0)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  0)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >  0)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  if(room    >    _outputMaxContiguous)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    	compilable	  [FE]  AssertionFailedError  	88	1	replace
586	[BUG]  [BUGGY]  if(room  >=  0)  {  _writeValueWrite( "write  text  value ");  if(text!=  null)  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  0)  {  _writeValueWrite( "write  text  value ");  if(text!=  null)  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  0)  {  _writeValueWrite( "write  text  value ");  if(text!=  null)  {  writeRawLong(text);  }	  _verifyValueWrite(   "write    text    value   ");    if(text!=    null)    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	87	None	replace
587	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite(   "write  text  value   ");  }  if(_writer!=  null)  {  _verifyValueWrite( ",write  text  value   ");  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(_writer!=    null)    {    _verifyValueWrite(   "write    text    value   ");    }    if(_writer!=  null)  {  _verifyValueWrite( ",write  text  value   ");  }	  	compilable	  [FE]  AssertionFailedError  	35	1	add
588	[BUG]  [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite(   "write  text  value   ");  }  if(_writer!=  null)  {  _verifyValueWrite( ",write  text  value   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite(   "write  text  value   ");  }  if(_writer!=  null)  {  _verifyValueWrite( ",write  text  value   ");  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_writer!=    null)    {    _verifyValueWrite(   "write    text    value   ");    }    if(_writer!=  null)  {  _verifyValueWrite( ",write  text  value   ");  }	  	compilable	  [FE]  AssertionFailedError  	35	1	add
589	[BUG]  [BUGGY]  _verifyValueWrite(   "write  text  value   ");  if(text!=  null)  {  writeRawLong(text);  }  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value   ");  if(text!=  null)  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite(   "write  text  value   ");  if(text!=  null)  {  writeRawLong(text);  }  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value   ");  if(text!=  null)  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite(   "write    text    value   ");    if(text!=    null)    {    writeRawLong(text);    }    if(_writer!=  null)  {  _verifyValueWrite( "write  text  value   ");  if(text!=  null)  {  writeRawLong(text);  }	  	non-compiled	[CE]  ';'  expected	86	None	add
590	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite(   "write  text  value   ");  if(text!=  null)  {  writeRawLong(text);  }  if(text!=  null)  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_verifyValueWrite(   "write    text    value   ");    if(text!=    null)    {    writeRawLong(text);    }    if(text!=  null)  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	86	1	add
591	[BUG]  [BUGGY]  _verifyValueWrite(   "write  text  value   ");  if(text!=  null)  {  writeRawLong(text);  }  if(text!=  null)  {  writeRawLong(text);  }  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite(   "write  text  value   ");  if(text!=  null)  {  writeRawLong(text);  }  if(text!=  null)  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite(   "write    text    value   ");    if(text!=    null)    {    writeRawLong(text);    }    if(text!=  null)  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	86	1	add
592	[BUG]  [BUGGY]  ||(room  >=  _outputEnd  &&  _outputBuffer[_outputTail  +]!=  null))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  ||(room  >=  _outputEnd  &&  _outputBuffer[_outputTail  +]!=  null))  {  _flushBuffer();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	||(room  >=  _outputEnd  &&  _outputBuffer[_outputTail  +]!=  null))  {  _flushBuffer();  }	  if(room    >    _outputEnd)    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
593	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(text!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(text!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ",write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	18	1	replace
594	[BUG]  [BUGGY]  if(text!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(text!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(text!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ",write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	18	1	replace
595	[BUG]  [BUGGY]  if(_writer!=  null)  {  _writeValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_writer!=  null)  {  _writeValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_writer!=  null)  {  _writeValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ",write    text    value       ");    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
596	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  _writeRawLong(text,  _outputBuffer);  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  _writeRawLong(text,  _outputBuffer);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite( "write  text  value ");  if(text!=  null)  {  _writeRawLong(text,  _outputBuffer);  }	  _writeRawLong(text,    _outputBuffer);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
597	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  _writeRawLong(text,  room);  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  _writeRawLong(text,  room);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite( "write  text  value ");  if(text!=  null)  {  _writeRawLong(text,  room);  }	  _writeRawLong(text,    _outputBuffer);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
598	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  if(text!=  null)  {  _writer.write(text);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  <  SHORT_WRITE)  {  if(text!=  null)  {  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  <  SHORT_WRITE)  {  if(text!=  null)  {  _writer.write(text);  }	  if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _flushBuffer();    }    	non-compiled	[CE]  ';'  expected	77	None	replace
599	[BUG]  [BUGGY]  if(room  >=  _outputEnd)  {  if(text!=  null)  {  _writer.write(text);  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >=  _outputEnd)  {  if(text!=  null)  {  _writer.write(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  _outputEnd)  {  if(text!=  null)  {  _writer.write(text);  }	  if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    room,    _outputBuffer,    _outputTail);    _flushBuffer();    }    	non-compiled	[CE]  ';'  expected	77	None	replace
600	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(room);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(room);	  if(room    >=    _outputEnd)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    	compilable	  [FE]  AssertionFailedError  	46	1	replace
601	[BUG]  [BUGGY]  _writer.write(room);  [FE]  AssertionFailedError  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(room);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(room);	  if(room    >=    _outputEnd)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    	compilable	  [FE]  AssertionFailedError  	46	1	replace
602	[BUG]  [BUGGY]  _writer.write(text,  0,  room  +  1,  _outputBuffer.length());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text,  0,  room  +  1,  _outputBuffer.length());  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text,  0,  room  +  1,  _outputBuffer.length());	          _writer.write(text,    0,    room);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
603	[BUG]  [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  }  else  {  TextUtilities.writeRawLong(text);  }  [CE]  cannot  find  symbol  TextUtilities  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  }  else  {  TextUtilities.writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  }  else  {  TextUtilities.writeRawLong(text);  }	  if(_writer!=    null)    {    _verifyValueWrite(   "write    text    value   ");    }    else    {    _writer.writeRawLong(text);    }    	non-compiled	[CE]  cannot  find  symbol  TextUtilities	37	None	replace
604	[BUG]  [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >=  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  _writeRawLong(text);  }  else  {  writeRawLong(text);  }  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >=  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  _writeRawLong(text);  }  else  {  writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail        >        room)        {        _flushBuffer();        }        else        {        writeRawLong(text);        }        if(_outputTail    >=    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  _writeRawLong(text);  }  else  {  writeRawLong(text);  }	  	non-compiled	[CE]  cannot  find  symbol	65	None	add
605	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text.getChars(0,  room,  _outputBuffer,  0));  }  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  <  SHORT_WRITE)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text.getChars(0,  room,  _outputBuffer,  0));  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  <  SHORT_WRITE)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text.getChars(0,  room,  _outputBuffer,  0));  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text.getChars(0,    room,    _outputBuffer,    0));    }    	non-compiled	[CE]  ';'  expected	64	None	replace
606	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text.substring(1),  text.length());  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  <  SHORT_WRITE)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text.substring(1),  text.length());  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  <  SHORT_WRITE)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text.substring(1),  text.length());  }	  _writer.write(text);    if(_writer!=    null)    {    if(_writer!=    null)    {    _writer    =    new    SerializableString(text.substring(1),    text.length());    }    	non-compiled	[CE]  ';'  expected	44	None	replace
607	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  if(_writer!=  null)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [CE]  ';'  expected  [FE]    IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  if(_writer!=  null)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    if(_writer!=  null)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }	  	non-compiled	[CE]  ';'  expected	78	None	add
608	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]      IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }	  	compilable	  [FE]  IndexOutOfBoundsException  	78	1	add
609	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [FE]  IndexOutOfBoundsException  [FE]      IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }	  	compilable	  [FE]  IndexOutOfBoundsException  	78	1	add
610	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]        IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  if(_writer!=  null)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    if(_writer!=  null)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  }	  	compilable	  [FE]  IndexOutOfBoundsException  	78	1	add
611	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  if(_writer!=  null)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  }  [FE]  IndexOutOfBoundsException  [FE]        IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  if(_writer!=  null)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    if(_writer!=  null)  {  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  }	  	compilable	  [FE]  IndexOutOfBoundsException  	78	1	add
612	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]          IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }	  	compilable	  [FE]  IndexOutOfBoundsException  	78	1	add
613	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [FE]  IndexOutOfBoundsException  [FE]          IndexOutOfBoundsException    [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);        if(text!=    null)    {    text.getChars(0,    room,    _outputBuffer,    0);    _outputTail    +=    text.length();    }    if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }	  	compilable	  [FE]  IndexOutOfBoundsException  	78	1	add
614	[BUG]  [BUGGY]  if(room  >  room)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableStringBuilder().append(text);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(room  >  room)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableStringBuilder().append(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >  room)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  SerializableStringBuilder().append(text);  }	  _writer.write(text);    if(_writer!=    null)    {    if(_writer!=    null)    {    _writer    =    new    SerializableStringBuilder().append(text);    }    	non-compiled	[CE]  ';'  expected	43	None	replace
615	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  _writeRawLong(text,  start,  _outputBuffer,  _outputTail);  }  [CE]  cannot  find  symbol  start  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  _writeRawLong(text,  start,  _outputBuffer,  _outputTail);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite( "write  text  value ");  if(text!=  null)  {  _writeRawLong(text,  start,  _outputBuffer,  _outputTail);  }	  _writeRawLong(text,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol  start	54	None	replace
616	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ", "[ "  +  text);  [CE]  no  suitable  method  found  for  _verifyValueWrite(String,String)  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite( "write  text  value ", "[ "  +  text);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite( "write  text  value ", "[ "  +  text);	  _verifyValueWrite(   "write    text    value   ",    text);    	non-compiled	[CE]  no  suitable  method  found  for  _verifyValueWrite(String,String)	38	None	replace
617	[BUG]  [BUGGY]  _writer.writeRawLong(text,  room,  _outputHead);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _writer.writeRawLong(text,  room,  _outputHead);  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.writeRawLong(text,  room,  _outputHead);	  _writer.writeRawLong(text,    room);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
618	[BUG]  [BUGGY]  if(_writer!=  null)  {  _writeRawLong(text);  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  if(_writer!=  null)  {  _writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_writer!=  null)  {  _writeRawLong(text);  }	  _verifyValueWrite(   "write    text    value   ");    if(text!=    null)    {    _writeRawLong(text);    }    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
619	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ",  text);  if(text!=  null)  {  _writeRawLong(text);  }  [CE]  no  suitable  method  found  for  _verifyValueWrite(String,String)  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;      [BUGGY]  _verifyValueWrite( "write  text  value ",  text);  if(text!=  null)  {  _writeRawLong(text);  }  [BUGGY]      int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite( "write  text  value ",  text);  if(text!=  null)  {  _writeRawLong(text);  }	  _verifyValueWrite(   "write    text    value   ");    if(text!=    null)    {    _writeRawLong(text);    }    	non-compiled	[CE]  no  suitable  method  found  for  _verifyValueWrite(String,String)	85	None	replace
