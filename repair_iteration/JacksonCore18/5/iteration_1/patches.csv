bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]      _writer.writeLong(text);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]      _writer.writeLong(text);  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	        _writer.writeLong(text);	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
2	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]      _writer.write(text,  0,  room);  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	        _writer.write(text,  0,  room);	  	compilable	  [FE]  AssertionFailedError  	7	1	add
3	[BUG]  [BUGGY]      _writer.write(text,  0,  room);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]      _writer.write(text,  0,  room);  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	        _writer.write(text,  0,  room);	  	compilable	  [FE]  AssertionFailedError  	7	1	add
4	[BUG]  [BUGGY]      _writer.writeRaw(text);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]      _writer.writeRaw(text);  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	        _writer.writeRaw(text);	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
5	[BUG]  [BUGGY]  _writer.writeRawLong(text,  room);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  _writer.writeRawLong(text,  room);  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.writeRawLong(text,  room);	  _writer.writeRawLong(text);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
6	[BUG]  [BUGGY]  _writer.writeRawLong(text,  null);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  _writer.writeRawLong(text,  null);  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.writeRawLong(text,  null);	  _writer.writeRawLong(text);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
7	[BUG]  [BUGGY]  _writer.writeRawLong(text,  _outputBuffer);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  _writer.writeRawLong(text,  _outputBuffer);  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.writeRawLong(text,  _outputBuffer);	  _writer.writeRawLong(text);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
8	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(room  >  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room  >  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    	compilable	  [FE]  StackOverflowError  	6	1	replace
9	[BUG]  [BUGGY]  if(room  >  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(room  >  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >  _outputTail)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    	compilable	  [FE]  StackOverflowError  	6	1	replace
10	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room  >  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    	compilable	  [FE]  StackOverflowError  	6	1	replace
11	[BUG]  [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [FE]  StackOverflowError  [FE]      AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    	compilable	  [FE]  StackOverflowError  	6	1	replace
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(room  >  _outputTail)  {  _flushBuffer();  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room  >  _outputTail)  {  _flushBuffer();  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    	compilable	  [FE]  AssertionFailedError  	6	1	replace
13	[BUG]  [BUGGY]  if(room  >  _outputTail)  {  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(room  >  _outputTail)  {  _flushBuffer();  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >  _outputTail)  {  _flushBuffer();  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    	compilable	  [FE]  AssertionFailedError  	6	1	replace
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  _verifyValueWrite(   "write  text  value   ");  _verifyValueWrite( "write  text  value   ");  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_verifyValueWrite(   "write    text    value   ");    _verifyValueWrite( "write  text  value   ");	  	compilable	  [FE]  AssertionFailedError  	1	1	add
15	[BUG]  [BUGGY]  _verifyValueWrite(   "write  text  value   ");  _verifyValueWrite( "write  text  value   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  _verifyValueWrite(   "write  text  value   ");  _verifyValueWrite( "write  text  value   ");  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite(   "write    text    value   ");    _verifyValueWrite( "write  text  value   ");	  	compilable	  [FE]  AssertionFailedError  	1	1	add
16	[BUG]  [BUGGY]  _verifyValueWrite(   "write  text  value   ");  _verifyValueWrite( "write  text  value "));  [CE]  [FE]      AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  _verifyValueWrite(   "write  text  value   ");  _verifyValueWrite( "write  text  value "));  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite(   "write    text    value   ");    _verifyValueWrite( "write  text  value "));	  	non-compiled	[CE]  	1	None	add
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  _verifyValueWrite(   "write  text  value   ");  _verifyValueWrite( ",write  text  value   ");  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_verifyValueWrite(   "write    text    value   ");    _verifyValueWrite( ",write  text  value   ");	  	compilable	  [FE]  AssertionFailedError  	1	1	add
18	[BUG]  [BUGGY]  _verifyValueWrite(   "write  text  value   ");  _verifyValueWrite( ",write  text  value   ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  _verifyValueWrite(   "write  text  value   ");  _verifyValueWrite( ",write  text  value   ");  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite(   "write    text    value   ");    _verifyValueWrite( ",write  text  value   ");	  	compilable	  [FE]  AssertionFailedError  	1	1	add
19	[BUG]  [BUGGY]  ||(_outputTail  >  room  &&  _outputHead!=  _outputEnd))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  ||(_outputTail  >  room  &&  _outputHead!=  _outputEnd))  {  _flushBuffer();  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	||(_outputTail  >  room  &&  _outputHead!=  _outputEnd))  {  _flushBuffer();  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
20	[BUG]  [BUGGY]  ||(_outputTail  >  room  &&  _outputHead!=  null))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  ||(_outputTail  >  room  &&  _outputHead!=  null))  {  _flushBuffer();  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	||(_outputTail  >  room  &&  _outputHead!=  null))  {  _flushBuffer();  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(_outputTail    >    room)    {    _flushBuffer();    }    if(_outputTail  >  room)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
22	[BUG]  [BUGGY]  if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  room)  {  _flushBuffer();  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail    >    room)    {    _flushBuffer();    }    if(_outputTail  >  room)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
23	[BUG]  [BUGGY]  if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  space)  {  _flushBuffer();  }  [CE]  cannot  find  symbol  space  [FE]      AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(_outputTail  >  room)  {  _flushBuffer();  }  if(_outputTail  >  space)  {  _flushBuffer();  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail    >    room)    {    _flushBuffer();    }    if(_outputTail  >  space)  {  _flushBuffer();  }	  	non-compiled	[CE]  cannot  find  symbol  space	3	None	add
24	[BUG]  [BUGGY]  if(_outputTail  >  room)  {  _flushBuffer();  }  If(_outputTail  >  room)  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(_outputTail  >  room)  {  _flushBuffer();  }  If(_outputTail  >  room)  {  _flushBuffer();  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail    >    room)    {    _flushBuffer();    }    If(_outputTail  >  room)  {  _flushBuffer();  }	  	non-compiled	[CE]  ';'  expected	3	None	add
25	[BUG]  [BUGGY]  _writer.write(text,  null);  [CE]  no  suitable  method  found  for  write(String,<null>)  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  _writer.write(text,  null);  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text,  null);	  _writer.write(text);    	non-compiled	[CE]  no  suitable  method  found  for  write(String,<null>)	12	None	replace
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  _verifyValueWrite( "write  text  length ");  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_verifyValueWrite( "write  text  length ");	  _writeRawLong(text);    	compilable	  [FE]  AssertionFailedError  	9	1	replace
27	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  length ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  _verifyValueWrite( "write  text  length ");  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite( "write  text  length ");	  _writeRawLong(text);    	compilable	  [FE]  AssertionFailedError  	9	1	replace
28	[BUG]  [BUGGY]  _writeRawLong(text,  room);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  _writeRawLong(text,  room);  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writeRawLong(text,  room);	  _writeRawLong(text);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
29	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	5	1	add
30	[BUG]  [BUGGY]  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	5	1	add
31	[BUG]  [BUGGY]  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >  space)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [CE]  cannot  find  symbol  space  [FE]      AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >  space)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  space)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	non-compiled	[CE]  cannot  find  symbol  space	5	None	add
32	[BUG]  [BUGGY]  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  If(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  If(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    If(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	non-compiled	[CE]  ';'  expected	5	None	add
33	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	5	1	add
34	[BUG]  [BUGGY]  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }  [FE]  StackOverflowError  [FE]          AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	5	1	add
35	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  }	  _verifyValueWrite(   "write    text    value   ");    	compilable	  [FE]  AssertionFailedError  	2	1	replace
36	[BUG]  [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  }	  _verifyValueWrite(   "write    text    value   ");    	compilable	  [FE]  AssertionFailedError  	2	1	replace
37	[BUG]  [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  }  else  {  _writer.writeRawLong(text);  }  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  }  else  {  _writer.writeRawLong(text);  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  }  else  {  _writer.writeRawLong(text);  }	  _verifyValueWrite(   "write    text    value   ");    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
38	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ",  text);  [CE]  no  suitable  method  found  for  _verifyValueWrite(String,String)  [FE]        AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  _verifyValueWrite( "write  text  value ",  text);  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite( "write  text  value ",  text);	  _verifyValueWrite(   "write    text    value   ");    	non-compiled	[CE]  no  suitable  method  found  for  _verifyValueWrite(String,String)	2	None	replace
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  _writer.write(text);  _writer.write(text);  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text);    _writer.write(text);	  	compilable	  [FE]  AssertionFailedError  	11	1	add
40	[BUG]  [BUGGY]  _writer.write(text);  _writer.write(text);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  _writer.write(text);  _writer.write(text);  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);    _writer.write(text);	  	compilable	  [FE]  AssertionFailedError  	11	1	add
41	[BUG]  [BUGGY]  _writer.write(text);  if(_writer!=  null)  {  if(!_writer.isEmpty())  {  _writer.write(text);  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  _writer.write(text);  if(_writer!=  null)  {  if(!_writer.isEmpty())  {  _writer.write(text);  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);    if(_writer!=  null)  {  if(!_writer.isEmpty())  {  _writer.write(text);  }	  	non-compiled	[CE]  ';'  expected	11	None	add
42	[BUG]  [BUGGY]  _writer.write(text);  if(_writer!=  null)  {  if(_writer!=  null)  {  _writer  =  new  SerializableString(text);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  _writer.write(text);  if(_writer!=  null)  {  if(_writer!=  null)  {  _writer  =  new  SerializableString(text);  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);    if(_writer!=  null)  {  if(_writer!=  null)  {  _writer  =  new  SerializableString(text);  }	  	non-compiled	[CE]  ';'  expected	11	None	add
43	[BUG]  [BUGGY]  _writer.write(text);  if(_writer!=  null)  {  if(_writer!=  null)  {  _writer  =  new  SerializableStringBuilder().append(text);  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  _writer.write(text);  if(_writer!=  null)  {  if(_writer!=  null)  {  _writer  =  new  SerializableStringBuilder().append(text);  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);    if(_writer!=  null)  {  if(_writer!=  null)  {  _writer  =  new  SerializableStringBuilder().append(text);  }	  	non-compiled	[CE]  ';'  expected	11	None	add
44	[BUG]  [BUGGY]  _writer.write(text);  if(_writer!=  null)  {  if(_writer!=  null)  {  _writer  =  new  SerializableString(text.substring(1),  text.length());  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  _writer.write(text);  if(_writer!=  null)  {  if(_writer!=  null)  {  _writer  =  new  SerializableString(text.substring(1),  text.length());  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);    if(_writer!=  null)  {  if(_writer!=  null)  {  _writer  =  new  SerializableString(text.substring(1),  text.length());  }	  	non-compiled	[CE]  ';'  expected	11	None	add
45	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(room  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    	compilable	  [FE]  StackOverflowError  	6	1	replace
46	[BUG]  [BUGGY]  if(room  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(room  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    	compilable	  [FE]  StackOverflowError  	6	1	replace
47	[BUG]  [BUGGY]  if(room  >=  _outputMaxContiguous)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(room  >=  _outputMaxContiguous)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  _outputMaxContiguous)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
48	[BUG]  [BUGGY]  if(room  >=  _outputMaxContiguous)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(room  >=  _outputMaxContiguous)  {  if(_outputTail  >  room)  {  _flushBuffer();  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  _outputMaxContiguous)  {  if(_outputTail  >  room)  {  _flushBuffer();  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
49	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(_outputTail  >  room)  {  _flushBuffer();  }  while(_outputTail  >  room)  {  _flushBuffer();  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(_outputTail    >    room)    {    _flushBuffer();    }    while(_outputTail  >  room)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
50	[BUG]  [BUGGY]  if(_outputTail  >  room)  {  _flushBuffer();  }  while(_outputTail  >  room)  {  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(_outputTail  >  room)  {  _flushBuffer();  }  while(_outputTail  >  room)  {  _flushBuffer();  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail    >    room)    {    _flushBuffer();    }    while(_outputTail  >  room)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
51	[BUG]  [BUGGY]  _writer.writeRawLong(text,  _outputTail);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  _writer.writeRawLong(text,  _outputTail);  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.writeRawLong(text,  _outputTail);	  _writer.writeRawLong(text);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
52	[BUG]  [BUGGY]  TextUtilities.writeRawLong(text,  _outputBuffer,  _outputTail);  [CE]  cannot  find  symbol  TextUtilities  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  TextUtilities.writeRawLong(text,  _outputBuffer,  _outputTail);  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	TextUtilities.writeRawLong(text,  _outputBuffer,  _outputTail);	      	non-compiled	[CE]  cannot  find  symbol  TextUtilities	8	None	replace
53	[BUG]  [BUGGY]  TextUtilities.writeRawLong(text);  [CE]  cannot  find  symbol  TextUtilities  [FE]      AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  TextUtilities.writeRawLong(text);  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	TextUtilities.writeRawLong(text);	      	non-compiled	[CE]  cannot  find  symbol  TextUtilities	8	None	replace
54	[BUG]  [BUGGY]  _writeRawLong(text,  _outputTail);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  _writeRawLong(text,  _outputTail);  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writeRawLong(text,  _outputTail);	  _writeRawLong(text);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
55	[BUG]  [BUGGY]  _writeRawLong(text,  _outputBuffer);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  _writeRawLong(text,  _outputBuffer);  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writeRawLong(text,  _outputBuffer);	  _writeRawLong(text);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
56	[BUG]  [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  }  else  {  _writer.writeLong(text);  }  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  }  else  {  _writer.writeLong(text);  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  }  else  {  _writer.writeLong(text);  }	  _verifyValueWrite(   "write    text    value   ");    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
57	[BUG]  [BUGGY]  _writer.write(text);  if(_writer!=  null)  {  if(text.length()  ==  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  _writer.write(text);  if(_writer!=  null)  {  if(text.length()  ==  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);    if(_writer!=  null)  {  if(text.length()  ==  0)  {  text.getChars(0,  room,  _outputBuffer,  0);  }	  	non-compiled	[CE]  ';'  expected	11	None	add
58	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text);    if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }	  	compilable	  [FE]  AssertionFailedError  	11	1	add
59	[BUG]  [BUGGY]  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  _writer.write(text);  if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);    if(_writer!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _writer.write(text);  }	  	compilable	  [FE]  AssertionFailedError  	11	1	add
60	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(room  >=  _outputEnd)  {  _flushBuffer();  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room  >=  _outputEnd)  {  _flushBuffer();  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    	compilable	  [FE]  AssertionFailedError  	4	1	replace
61	[BUG]  [BUGGY]  if(room  >=  _outputEnd)  {  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(room  >=  _outputEnd)  {  _flushBuffer();  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >=  _outputEnd)  {  _flushBuffer();  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    	compilable	  [FE]  AssertionFailedError  	4	1	replace
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(room  <  _outputEnd)  {  _flushBuffer();  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room  <  _outputEnd)  {  _flushBuffer();  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    	compilable	  [FE]  AssertionFailedError  	4	1	replace
63	[BUG]  [BUGGY]  if(room  <  _outputEnd)  {  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(room  <  _outputEnd)  {  _flushBuffer();  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  <  _outputEnd)  {  _flushBuffer();  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    	compilable	  [FE]  AssertionFailedError  	4	1	replace
64	[BUG]  [BUGGY]  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text.getChars(0,  room,  _outputBuffer,  0));  }  [CE]  'void'  type  not  allowed  here  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text.getChars(0,  room,  _outputBuffer,  0));  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text.getChars(0,  room,  _outputBuffer,  0));  }	  	non-compiled	[CE]  'void'  type  not  allowed  here	5	None	add
65	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >=  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >=  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	5	1	add
66	[BUG]  [BUGGY]  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >=  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [FE]  StackOverflowError  [FE]      AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >=  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >=  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  	compilable	  [FE]  StackOverflowError  	5	1	add
67	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  writeRawLong(text);  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
68	[BUG]  [BUGGY]  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  writeRawLong(text);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(_outputTail  >  room)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  if(_outputTail  >  room)  {  writeRawLong(text);  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    if(_outputTail  >  room)  {  writeRawLong(text);  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
69	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  _verifyValueWrite( "write  text  value. ");  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_verifyValueWrite( "write  text  value. ");	  _verifyValueWrite(   "write    text    value   ");    	compilable	  [FE]  AssertionFailedError  	2	1	replace
70	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value. ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  _verifyValueWrite( "write  text  value. ");  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite( "write  text  value. ");	  _verifyValueWrite(   "write    text    value   ");    	compilable	  [FE]  AssertionFailedError  	2	1	replace
71	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(room  >  _outputEnd)  {  _flushBuffer();  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    	compilable	  [FE]  AssertionFailedError  	4	1	replace
72	[BUG]  [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(room  >  _outputEnd)  {  _flushBuffer();  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >  _outputEnd)  {  _flushBuffer();  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    	compilable	  [FE]  AssertionFailedError  	4	1	replace
73	[BUG]  [BUGGY]  if(room  >  _outputMaxContiguous)  {  _flushBuffer();  }  [CE]  cannot  find  symbol  _outputMaxContiguous  [FE]      AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(room  >  _outputMaxContiguous)  {  _flushBuffer();  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >  _outputMaxContiguous)  {  _flushBuffer();  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    	non-compiled	[CE]  cannot  find  symbol  _outputMaxContiguous	4	None	replace
74	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }	  _writer.write(text);    	compilable	  [FE]  AssertionFailedError  	12	1	replace
75	[BUG]  [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  0;  }	  _writer.write(text);    	compilable	  [FE]  AssertionFailedError  	12	1	replace
76	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }	  _writer.write(text);    	compilable	  [FE]  AssertionFailedError  	12	1	replace
77	[BUG]  [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _flushBuffer();  }	  _writer.write(text);    	compilable	  [FE]  AssertionFailedError  	12	1	replace
78	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }	  	compilable	  [FE]  IndexOutOfBoundsException  	11	1	add
79	[BUG]  [BUGGY]  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [FE]  IndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }	  	compilable	  [FE]  IndexOutOfBoundsException  	11	1	add
80	[BUG]  [BUGGY]  _writer.write(text);  if(text!=  null)  {  text.getChars(offset,  offset+room,  _outputBuffer,  0);  _outputHead  =  0;  _flushBuffer();  }  [CE]  cannot  find  symbol  offset  [FE]      AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  _writer.write(text);  if(text!=  null)  {  text.getChars(offset,  offset+room,  _outputBuffer,  0);  _outputHead  =  0;  _flushBuffer();  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);    if(text!=  null)  {  text.getChars(offset,  offset+room,  _outputBuffer,  0);  _outputHead  =  0;  _flushBuffer();  }	  	non-compiled	[CE]  cannot  find  symbol  offset	11	None	add
81	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }	  	compilable	  [FE]  IndexOutOfBoundsException  	11	1	add
82	[BUG]  [BUGGY]  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  [FE]  IndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _writer.write(text);  }	  	compilable	  [FE]  IndexOutOfBoundsException  	11	1	add
83	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]          AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }	  	compilable	  [FE]  IndexOutOfBoundsException  	11	1	add
84	[BUG]  [BUGGY]  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  [FE]  IndexOutOfBoundsException  [FE]          AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  _writer.write(text);  if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_writer.write(text);    if(text!=  null)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputTail  +=  text.length();  }  else  {  _flushBuffer();  }	  	compilable	  [FE]  IndexOutOfBoundsException  	11	1	add
85	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  _writeRawLong(text);  }  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  _writeRawLong(text);  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite( "write  text  value ");  if(text!=  null)  {  _writeRawLong(text);  }	  _writeRawLong(text);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
86	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  writeRawLong(text);  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	_verifyValueWrite( "write  text  value ");  if(text!=  null)  {  writeRawLong(text);  }	  _writeRawLong(text);    	compilable	  [FE]  StackOverflowError  	9	1	replace
87	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  writeRawLong(text);  }  [FE]  StackOverflowError  [FE]          AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  _verifyValueWrite( "write  text  value ");  if(text!=  null)  {  writeRawLong(text);  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	_verifyValueWrite( "write  text  value ");  if(text!=  null)  {  writeRawLong(text);  }	  _writeRawLong(text);    	compilable	  [FE]  StackOverflowError  	9	1	replace
88	[BUG]  [BUGGY]  if(room  >  _outputMaxContiguous)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [CE]  cannot  find  symbol  _outputMaxContiguous  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]  if(room  >  _outputMaxContiguous)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	if(room  >  _outputMaxContiguous)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  if(_outputTail    >    room)    {    _flushBuffer();    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  cannot  find  symbol  _outputMaxContiguous	6	None	replace
89	[BUG]  [BUGGY]      if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  writeRawLong(text.charAt(i));  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]      if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  writeRawLong(text.charAt(i));  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	        if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  writeRawLong(text.charAt(i));  }	  	non-compiled	[CE]  ';'  expected	7	None	add
90	[BUG]  [BUGGY]      if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]      if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	        if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputHead  =	  	non-compiled	[CE]  ';'  expected	7	None	add
91	[BUG]  [BUGGY]      if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]      if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	        if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  start;  i  <  len;  ++i)  {  text.getChars(0,  room,  _outputBuffer,  _outputTail);  }	  	non-compiled	[CE]  ';'  expected	7	None	add
92	[BUG]  [BUGGY]      if(room  <  SHORT_WRITE)  {  if(text.length()  >  room)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputHead  =  0;  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  writeRawLong(String  text)  throws  IOException  {  int  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  room,  _outputBuffer,  _outputTail);  _outputTail  +=  room;    [BUGGY]      if(room  <  SHORT_WRITE)  {  if(text.length()  >  room)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]    int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;  _flushBuffer();  offset  +=  amount;  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	        if(room  <  SHORT_WRITE)  {  if(text.length()  >  room)  {  text.getChars(0,  room,  _outputBuffer,  0);  _outputHead  =  0;  }	  	non-compiled	[CE]  ';'  expected	7	None	add
