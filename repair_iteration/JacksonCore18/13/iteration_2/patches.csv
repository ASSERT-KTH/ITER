bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  _writer.writeRawLong(text,  offset  +  len);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.writeRawLong(text,  offset  +  len);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.writeRawLong(text,  offset  +  len);	  _writer.writeRawLong(text,    offset);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
2	[BUG]  [BUGGY]  _writer.writeRawLong(text,  offset,  len);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.writeRawLong(text,  offset,  len);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.writeRawLong(text,  offset,  len);	  _writer.writeRawLong(text,    offset);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
3	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ",  room,  _outputBuffer,  len);  [CE]  no  suitable  method  found  for  _verifyValueWrite(String,int,char[],int)  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite( "write  text  value ",  room,  _outputBuffer,  len);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_verifyValueWrite( "write  text  value ",  room,  _outputBuffer,  len);	  _verifyValueWrite(   "write    text    value   ",    _outputBuffer,    len);    	non-compiled	[CE]  no  suitable  method  found  for  _verifyValueWrite(String,int,char[],int)	52	None	replace
4	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ",  len,  _outputBuffer,  _outputTail);  [CE]  no  suitable  method  found  for  _verifyValueWrite(String,int,char[],int)  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite( "write  text  value ",  len,  _outputBuffer,  _outputTail);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_verifyValueWrite( "write  text  value ",  len,  _outputBuffer,  _outputTail);	  _verifyValueWrite(   "write    text    value   ",    _outputBuffer,    len);    	non-compiled	[CE]  no  suitable  method  found  for  _verifyValueWrite(String,int,char[],int)	52	None	replace
5	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ",  len,  _outputBuffer,  _outputHead);  [CE]  no  suitable  method  found  for  _verifyValueWrite(String,int,char[],int)  [FE]              AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite( "write  text  value ",  len,  _outputBuffer,  _outputHead);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_verifyValueWrite( "write  text  value ",  len,  _outputBuffer,  _outputHead);	  _verifyValueWrite(   "write    text    value   ",    _outputBuffer,    len);    	non-compiled	[CE]  no  suitable  method  found  for  _verifyValueWrite(String,int,char[],int)	52	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _outputTail  =  0;  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	_outputTail  =  0;	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    	compilable	  [FE]  AssertionFailedError  	40	1	replace
7	[BUG]  [BUGGY]  _outputTail  =  0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _outputTail  =  0;  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_outputTail  =  0;	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    	compilable	  [FE]  AssertionFailedError  	40	1	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text);  _writer.write(text);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	                _writer.write(text);    _writer.write(text);	  	compilable	  [FE]  AssertionFailedError  	48	1	add
9	[BUG]  [BUGGY]          _writer.write(text);  _writer.write(text);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text);  _writer.write(text);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	                _writer.write(text);    _writer.write(text);	  	compilable	  [FE]  AssertionFailedError  	48	1	add
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputTail  =  len;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	                _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputTail  =  len;  }	  	compilable	  [FE]  AssertionFailedError  	48	1	add
11	[BUG]  [BUGGY]          _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputTail  =  len;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputTail  =  len;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	                _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputTail  =  len;  }	  	compilable	  [FE]  AssertionFailedError  	48	1	add
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	                _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	48	1	add
13	[BUG]  [BUGGY]          _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	                _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	48	1	add
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputTail  +=  len;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	                _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputTail  +=  len;  }	  	compilable	  [FE]  AssertionFailedError  	48	1	add
15	[BUG]  [BUGGY]          _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputTail  +=  len;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputTail  +=  len;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	                _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputTail  +=  len;  }	  	compilable	  [FE]  AssertionFailedError  	48	1	add
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  len;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	                _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  len;  }	  	compilable	  [FE]  AssertionFailedError  	48	1	add
17	[BUG]  [BUGGY]          _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  len;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  len;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	                _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  len;  }	  	compilable	  [FE]  AssertionFailedError  	48	1	add
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputTail        =        0;        }        if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	41	1	add
19	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputTail        =        0;        }        if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	41	1	add
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputTail        =        0;        }        if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	41	1	add
21	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputTail        =        0;        }        if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	41	1	add
22	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputTail        =        0;        }        if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =	  	non-compiled	[CE]  ';'  expected	41	None	add
23	[BUG]  [BUGGY]  _flushBuffer(offset,  amount);  [CE]  method  _flushBuffer  in  class  WriterBasedJsonGenerator  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _flushBuffer(offset,  amount);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_flushBuffer(offset,  amount);	  _flushBuffer(offset);    	non-compiled	[CE]  method  _flushBuffer  in  class  WriterBasedJsonGenerator  cannot  be  applied  to  given  types;	57	None	replace
24	[BUG]  [BUGGY]  _flushBuffer(buffer,  offset);  [CE]  cannot  find  symbol  buffer  [FE]              AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _flushBuffer(buffer,  offset);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_flushBuffer(buffer,  offset);	  _flushBuffer(offset);    	non-compiled	[CE]  cannot  find  symbol  buffer	57	None	replace
25	[BUG]  [BUGGY]  _flushBuffer(offset,  len);  [CE]  method  _flushBuffer  in  class  WriterBasedJsonGenerator  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _flushBuffer(offset,  len);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_flushBuffer(offset,  len);	  _flushBuffer(offset);    	non-compiled	[CE]  method  _flushBuffer  in  class  WriterBasedJsonGenerator  cannot  be  applied  to  given  types;	57	None	replace
26	[BUG]  [BUGGY]  _writeRawLong(text.getChars(offset,  offset+amount,  _outputBuffer,  0,  len);  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writeRawLong(text.getChars(offset,  offset+amount,  _outputBuffer,  0,  len);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writeRawLong(text.getChars(offset,  offset+amount,  _outputBuffer,  0,  len);	  _writeRawLong(text.getChars(offset,    offset+amount,    _outputBuffer,    0);    	non-compiled	[CE]  ')'  expected	30	None	replace
27	[BUG]  [BUGGY]  _writeRawLong(text.getChars(offset,  offset+amount,  _outputBuffer,  0,  len));  [CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writeRawLong(text.getChars(offset,  offset+amount,  _outputBuffer,  0,  len));  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writeRawLong(text.getChars(offset,  offset+amount,  _outputBuffer,  0,  len));	  _writeRawLong(text.getChars(offset,    offset+amount,    _outputBuffer,    0);    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)	30	None	replace
28	[BUG]  [BUGGY]  _flushBuffer(buffer,  len);  [CE]  cannot  find  symbol  buffer  [FE]              AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _flushBuffer(buffer,  len);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_flushBuffer(buffer,  len);	  _flushBuffer(len);    	non-compiled	[CE]  cannot  find  symbol  buffer	12	None	replace
29	[BUG]  [BUGGY]  _flushBuffer(amount,  len);  [CE]  method  _flushBuffer  in  class  WriterBasedJsonGenerator  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _flushBuffer(amount,  len);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_flushBuffer(amount,  len);	  _flushBuffer(len);    	non-compiled	[CE]  method  _flushBuffer  in  class  WriterBasedJsonGenerator  cannot  be  applied  to  given  types;	12	None	replace
30	[BUG]  [BUGGY]  _flushBuffer(len,  _outputBuffer);  [CE]  method  _flushBuffer  in  class  WriterBasedJsonGenerator  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _flushBuffer(len,  _outputBuffer);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_flushBuffer(len,  _outputBuffer);	  _flushBuffer(len);    	non-compiled	[CE]  method  _flushBuffer  in  class  WriterBasedJsonGenerator  cannot  be  applied  to  given  types;	12	None	replace
31	[BUG]  [BUGGY]  if(amount  ==  0)  {  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  ==  0)  {  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount  ==  0)  {  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    If(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    	non-compiled	[CE]  ';'  expected	56	None	replace
32	[BUG]  [BUGGY]  if(amount  >=  0)  {  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >=  0)  {  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount  >=  0)  {  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    If(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    	non-compiled	[CE]  ';'  expected	56	None	replace
33	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text,  0,  len);  _writer.write(text,  0,  len);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	                _writer.write(text,    0,    len);    _writer.write(text,  0,  len);	  	compilable	  [FE]  AssertionFailedError  	26	1	add
34	[BUG]  [BUGGY]          _writer.write(text,  0,  len);  _writer.write(text,  0,  len);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text,  0,  len);  _writer.write(text,  0,  len);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	                _writer.write(text,    0,    len);    _writer.write(text,  0,  len);	  	compilable	  [FE]  AssertionFailedError  	26	1	add
35	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputTail  =  len;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	                _writer.write(text,    0,    len);    if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputTail  =  len;  }	  	compilable	  [FE]  AssertionFailedError  	26	1	add
36	[BUG]  [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputTail  =  len;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputTail  =  len;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	                _writer.write(text,    0,    len);    if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputTail  =  len;  }	  	compilable	  [FE]  AssertionFailedError  	26	1	add
37	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	                _writer.write(text,    0,    len);    if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	26	1	add
38	[BUG]  [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	                _writer.write(text,    0,    len);    if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	26	1	add
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputTail  +=  len;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	                _writer.write(text,    0,    len);    if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputTail  +=  len;  }	  	compilable	  [FE]  AssertionFailedError  	26	1	add
40	[BUG]  [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputTail  +=  len;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputTail  +=  len;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	                _writer.write(text,    0,    len);    if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputTail  +=  len;  }	  	compilable	  [FE]  AssertionFailedError  	26	1	add
41	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputTail  +=  amount;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	                _writer.write(text,    0,    len);    if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputTail  +=  amount;  }	  	compilable	  [FE]  AssertionFailedError  	26	1	add
42	[BUG]  [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputTail  +=  amount;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputTail  +=  amount;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	                _writer.write(text,    0,    len);    if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputTail  +=  amount;  }	  	compilable	  [FE]  AssertionFailedError  	26	1	add
43	[BUG]  [BUGGY]  _writer.getChars(offset,  offset+amount,  _outputBuffer,  0,  _outputHead);  _outputTail  =  0;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.getChars(offset,  offset+amount,  _outputBuffer,  0,  _outputHead);  _outputTail  =  0;  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.getChars(offset,  offset+amount,  _outputBuffer,  0,  _outputHead);  _outputTail  =  0;	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0,    _outputHead);    _outputTail    =    0;    }    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
44	[BUG]  [BUGGY]  _writer.getChars(offset,  offset+amount,  _outputBuffer,  0,  _outputTail);  _outputTail  =  0;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.getChars(offset,  offset+amount,  _outputBuffer,  0,  _outputTail);  _outputTail  =  0;  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.getChars(offset,  offset+amount,  _outputBuffer,  0,  _outputTail);  _outputTail  =  0;	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0,    _outputHead);    _outputTail    =    0;    }    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
45	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IndexOutOfBoundsException    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _outputTail  +=  amount;  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	_outputTail  +=  amount;	          if(len    >    room)    {    _outputTail    +=    amount;    }    	compilable	  [FE]  AssertionFailedError  	47	1	replace
46	[BUG]  [BUGGY]  _outputTail  +=  amount;  [FE]  AssertionFailedError  [FE]    IndexOutOfBoundsException    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _outputTail  +=  amount;  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_outputTail  +=  amount;	          if(len    >    room)    {    _outputTail    +=    amount;    }    	compilable	  [FE]  AssertionFailedError  	47	1	replace
47	[BUG]  [BUGGY]  ||(len  >  room  &&  _outputTail  >=  _outputEnd))  {  _outputTail  +=  amount;  }  [CE]  illegal  start  of  expression  [FE]      IndexOutOfBoundsException    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(len  >  room  &&  _outputTail  >=  _outputEnd))  {  _outputTail  +=  amount;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(len  >  room  &&  _outputTail  >=  _outputEnd))  {  _outputTail  +=  amount;  }	          if(len    >    room)    {    _outputTail    +=    amount;    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
48	[BUG]  [BUGGY]  ||(len  >  room  &&  _outputTail!=  _outputEnd))  {  _outputTail  +=  amount;  }  [CE]  illegal  start  of  expression  [FE]        IndexOutOfBoundsException    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(len  >  room  &&  _outputTail!=  _outputEnd))  {  _outputTail  +=  amount;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(len  >  room  &&  _outputTail!=  _outputEnd))  {  _outputTail  +=  amount;  }	          if(len    >    room)    {    _outputTail    +=    amount;    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
49	[BUG]  [BUGGY]  ||(len  >  room  &&  _outputTail  <  amount))  {  _outputTail  +=  amount;  }  [CE]  illegal  start  of  expression  [FE]          IndexOutOfBoundsException    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(len  >  room  &&  _outputTail  <  amount))  {  _outputTail  +=  amount;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(len  >  room  &&  _outputTail  <  amount))  {  _outputTail  +=  amount;  }	          if(len    >    room)    {    _outputTail    +=    amount;    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
50	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite( "write  text  value.n ");  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	_verifyValueWrite( "write  text  value.n ");	  _verifyValueWrite(   "write    text    value.   ");    	compilable	  [FE]  AssertionFailedError  	3	1	replace
51	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value.n ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite( "write  text  value.n ");  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_verifyValueWrite( "write  text  value.n ");	  _verifyValueWrite(   "write    text    value.   ");    	compilable	  [FE]  AssertionFailedError  	3	1	replace
52	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite(     "write    text    value     ");    _verifyValueWrite(   ".write  text  value     ");  _verifyValueWrite( "write  text  value   ");  _verifyValueWrite( ".write  text  value   ");  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	_verifyValueWrite(       "write        text        value       ");        _verifyValueWrite(   ".write    text    value       ");    _verifyValueWrite( "write  text  value   ");  _verifyValueWrite( ".write  text  value   ");	  	compilable	  [FE]  AssertionFailedError  	44	1	add
53	[BUG]  [BUGGY]  _verifyValueWrite(     "write    text    value     ");    _verifyValueWrite(   ".write  text  value     ");  _verifyValueWrite( "write  text  value   ");  _verifyValueWrite( ".write  text  value   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite(     "write    text    value     ");    _verifyValueWrite(   ".write  text  value     ");  _verifyValueWrite( "write  text  value   ");  _verifyValueWrite( ".write  text  value   ");  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_verifyValueWrite(       "write        text        value       ");        _verifyValueWrite(   ".write    text    value       ");    _verifyValueWrite( "write  text  value   ");  _verifyValueWrite( ".write  text  value   ");	  	compilable	  [FE]  AssertionFailedError  	44	1	add
54	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite(   "write  text  value.   ");  _verifyValueWrite( "write  text  value.   ");  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	_verifyValueWrite(   "write    text    value.   ");    _verifyValueWrite( "write  text  value.   ");	  	compilable	  [FE]  AssertionFailedError  	2	1	add
55	[BUG]  [BUGGY]  _verifyValueWrite(   "write  text  value.   ");  _verifyValueWrite( "write  text  value.   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite(   "write  text  value.   ");  _verifyValueWrite( "write  text  value.   ");  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_verifyValueWrite(   "write    text    value.   ");    _verifyValueWrite( "write  text  value.   ");	  	compilable	  [FE]  AssertionFailedError  	2	1	add
56	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite(   "write  text  value.   ");  _verifyValueWrite( ",write  text  value.   ");  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	_verifyValueWrite(   "write    text    value.   ");    _verifyValueWrite( ",write  text  value.   ");	  	compilable	  [FE]  AssertionFailedError  	2	1	add
57	[BUG]  [BUGGY]  _verifyValueWrite(   "write  text  value.   ");  _verifyValueWrite( ",write  text  value.   ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite(   "write  text  value.   ");  _verifyValueWrite( ",write  text  value.   ");  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_verifyValueWrite(   "write    text    value.   ");    _verifyValueWrite( ",write  text  value.   ");	  	compilable	  [FE]  AssertionFailedError  	2	1	add
58	[BUG]  [BUGGY]  _verifyValueWrite(   "write  text  value.   ");  _verifyValueWrite( "write  text  value. "));  [CE]  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite(   "write  text  value.   ");  _verifyValueWrite( "write  text  value. "));  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_verifyValueWrite(   "write    text    value.   ");    _verifyValueWrite( "write  text  value. "));	  	non-compiled	[CE]  	2	None	add
59	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite(   "write  text  value.   ");  _verifyValueWrite( ".write  text  value.   ");  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	_verifyValueWrite(   "write    text    value.   ");    _verifyValueWrite( ".write  text  value.   ");	  	compilable	  [FE]  AssertionFailedError  	2	1	add
60	[BUG]  [BUGGY]  _verifyValueWrite(   "write  text  value.   ");  _verifyValueWrite( ".write  text  value.   ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite(   "write  text  value.   ");  _verifyValueWrite( ".write  text  value.   ");  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_verifyValueWrite(   "write    text    value.   ");    _verifyValueWrite( ".write  text  value.   ");	  	compilable	  [FE]  AssertionFailedError  	2	1	add
61	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value "  +  text,  len);  [CE]  no  suitable  method  found  for  _verifyValueWrite(String,int)  [FE]        AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite( "write  text  value "  +  text,  len);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_verifyValueWrite( "write  text  value "  +  text,  len);	  _verifyValueWrite(   "write    text    value   ",    len);    	non-compiled	[CE]  no  suitable  method  found  for  _verifyValueWrite(String,int)	1	None	replace
62	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ",  amount);  [CE]  no  suitable  method  found  for  _verifyValueWrite(String,int)  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite( "write  text  value ",  amount);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_verifyValueWrite( "write  text  value ",  amount);	  _verifyValueWrite(   "write    text    value   ",    len);    	non-compiled	[CE]  no  suitable  method  found  for  _verifyValueWrite(String,int)	1	None	replace
63	[BUG]  [BUGGY]  _writer.write(text,  offset+len,  _outputBuffer,  0,  len);  [CE]  no  suitable  method  found  for  write(String,int,char[],int,int)  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.write(text,  offset+len,  _outputBuffer,  0,  len);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.write(text,  offset+len,  _outputBuffer,  0,  len);	          _writer.write(text,    offset+len,    _outputBuffer,    0);    	non-compiled	[CE]  no  suitable  method  found  for  write(String,int,char[],int,int)	28	None	replace
64	[BUG]  [BUGGY]  _writer.write(text,  offset+amount,  _outputBuffer,  0);  [CE]  no  suitable  method  found  for  write(String,int,char[],int)  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.write(text,  offset+amount,  _outputBuffer,  0);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.write(text,  offset+amount,  _outputBuffer,  0);	          _writer.write(text,    offset+len,    _outputBuffer,    0);    	non-compiled	[CE]  no  suitable  method  found  for  write(String,int,char[],int)	28	None	replace
65	[BUG]  [BUGGY]  _writer.write(text,  offset+offset,  len,  _outputBuffer,  0);  [CE]  no  suitable  method  found  for  write(String,int,int,char[],int)  [FE]              AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.write(text,  offset+offset,  len,  _outputBuffer,  0);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.write(text,  offset+offset,  len,  _outputBuffer,  0);	          _writer.write(text,    offset+len,    _outputBuffer,    0);    	non-compiled	[CE]  no  suitable  method  found  for  write(String,int,int,char[],int)	28	None	replace
66	[BUG]  [BUGGY]  _writer.writeRaw(text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.writeRaw(text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.writeRaw(text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;	  _writer.writeRawLong(text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    	non-compiled	[CE]  ')'  expected	9	None	replace
67	[BUG]  [BUGGY]  _writer.writeLong(text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.writeLong(text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.writeLong(text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;	  _writer.writeRawLong(text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    	non-compiled	[CE]  ')'  expected	9	None	replace
68	[BUG]  [BUGGY]  _writer.writeRaw(text.getChars(offset,  offset+amount,  _outputBuffer,  0));  _outputTail  =  0;  [CE]  'void'  type  not  allowed  here  [FE]              AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.writeRaw(text.getChars(offset,  offset+amount,  _outputBuffer,  0));  _outputTail  =  0;  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.writeRaw(text.getChars(offset,  offset+amount,  _outputBuffer,  0));  _outputTail  =  0;	  _writer.writeRawLong(text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    	non-compiled	[CE]  'void'  type  not  allowed  here	9	None	replace
69	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          if(len  >  room)  {  _outputTail  +=  amount;  }  if(len  >  room)  {  _outputTail  +=  amount;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	                if(len    >    room)    {    _outputTail    +=    amount;    }    if(len  >  room)  {  _outputTail  +=  amount;  }	  	compilable	  [FE]  IndexOutOfBoundsException  	46	1	add
70	[BUG]  [BUGGY]          if(len  >  room)  {  _outputTail  +=  amount;  }  if(len  >  room)  {  _outputTail  +=  amount;  }  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          if(len  >  room)  {  _outputTail  +=  amount;  }  if(len  >  room)  {  _outputTail  +=  amount;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	                if(len    >    room)    {    _outputTail    +=    amount;    }    if(len  >  room)  {  _outputTail  +=  amount;  }	  	compilable	  [FE]  IndexOutOfBoundsException  	46	1	add
71	[BUG]  [BUGGY]          if(len  >  room)  {  _outputTail  +=  amount;  }  if(len  >  space)  {  _outputTail  +=  amount;  }  [CE]  cannot  find  symbol  space  [FE]      IndexOutOfBoundsException    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          if(len  >  room)  {  _outputTail  +=  amount;  }  if(len  >  space)  {  _outputTail  +=  amount;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	                if(len    >    room)    {    _outputTail    +=    amount;    }    if(len  >  space)  {  _outputTail  +=  amount;  }	  	non-compiled	[CE]  cannot  find  symbol  space	46	None	add
72	[BUG]  [BUGGY]          if(len  >  room)  {  _outputTail  +=  amount;  }  If(len  >  room)  {  _outputTail  +=  amount;  }  [CE]  ';'  expected  [FE]        IndexOutOfBoundsException    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          if(len  >  room)  {  _outputTail  +=  amount;  }  If(len  >  room)  {  _outputTail  +=  amount;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	                if(len    >    room)    {    _outputTail    +=    amount;    }    If(len  >  room)  {  _outputTail  +=  amount;  }	  	non-compiled	[CE]  ';'  expected	46	None	add
73	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite(   "write  text  value   "  +  text);  _verifyValueWrite( "write  text  value   "  +  text);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	_verifyValueWrite(   "write    text    value   "    +    text);    _verifyValueWrite( "write  text  value   "  +  text);	  	compilable	  [FE]  AssertionFailedError  	4	1	add
74	[BUG]  [BUGGY]  _verifyValueWrite(   "write  text  value   "  +  text);  _verifyValueWrite( "write  text  value   "  +  text);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite(   "write  text  value   "  +  text);  _verifyValueWrite( "write  text  value   "  +  text);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_verifyValueWrite(   "write    text    value   "    +    text);    _verifyValueWrite( "write  text  value   "  +  text);	  	compilable	  [FE]  AssertionFailedError  	4	1	add
75	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite(   "write  text  value   "  +  text);  _verifyValueWrite( ",write  text  value   "  +  text);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	_verifyValueWrite(   "write    text    value   "    +    text);    _verifyValueWrite( ",write  text  value   "  +  text);	  	compilable	  [FE]  AssertionFailedError  	4	1	add
76	[BUG]  [BUGGY]  _verifyValueWrite(   "write  text  value   "  +  text);  _verifyValueWrite( ",write  text  value   "  +  text);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite(   "write  text  value   "  +  text);  _verifyValueWrite( ",write  text  value   "  +  text);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_verifyValueWrite(   "write    text    value   "    +    text);    _verifyValueWrite( ",write  text  value   "  +  text);	  	compilable	  [FE]  AssertionFailedError  	4	1	add
77	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite( "write  text  value: "  +  text);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	_verifyValueWrite( "write  text  value: "  +  text);	  _verifyValueWrite(   "write    text    value   "    +    text);    	compilable	  [FE]  AssertionFailedError  	5	1	replace
78	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value: "  +  text);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite( "write  text  value: "  +  text);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_verifyValueWrite( "write  text  value: "  +  text);	  _verifyValueWrite(   "write    text    value   "    +    text);    	compilable	  [FE]  AssertionFailedError  	5	1	replace
79	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ",  text);  [CE]  no  suitable  method  found  for  _verifyValueWrite(String,String)  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite( "write  text  value ",  text);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_verifyValueWrite( "write  text  value ",  text);	  _verifyValueWrite(   "write    text    value   "    +    text);    	non-compiled	[CE]  no  suitable  method  found  for  _verifyValueWrite(String,String)	5	None	replace
80	[BUG]  [BUGGY]  ||(amount  >=  SHORT_WRITE  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(amount  >=  SHORT_WRITE  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(amount  >=  SHORT_WRITE  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  _flushBuffer();  }	  ||(amount    <    SHORT_WRITE    &&    isEnabled(Feature.QUOTE_FIELD_NAMES)))    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
81	[BUG]  [BUGGY]  ||(amount  ==  SHORT_WRITE  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(amount  ==  SHORT_WRITE  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(amount  ==  SHORT_WRITE  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  _flushBuffer();  }	  ||(amount    <    SHORT_WRITE    &&    isEnabled(Feature.QUOTE_FIELD_NAMES)))    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
82	[BUG]  [BUGGY]  ||(amount  <  SHORT_WRITE  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(amount  <  SHORT_WRITE  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(amount  <  SHORT_WRITE  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  _flushBuffer();  }	  ||(amount    <    SHORT_WRITE    &&    isEnabled(Feature.QUOTE_FIELD_NAMES)))    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
83	[BUG]  [BUGGY]  ||(amount!=  SHORT_WRITE  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(amount!=  SHORT_WRITE  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(amount!=  SHORT_WRITE  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  _flushBuffer();  }	  ||(amount    <    SHORT_WRITE    &&    isEnabled(Feature.QUOTE_FIELD_NAMES)))    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
84	[BUG]  [BUGGY]  _writer.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;	  _writer.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
85	[BUG]  [BUGGY]  _writer.getChars(offset,  offset+amount,  _outputBuffer,  0);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.getChars(offset,  offset+amount,  _outputBuffer,  0);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.getChars(offset,  offset+amount,  _outputBuffer,  0);	  _writer.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
86	[BUG]  [BUGGY]  _writer.getChars(offset,  offset+amount,  _outputBuffer,  0,  len);  _outputHead  =  0;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.getChars(offset,  offset+amount,  _outputBuffer,  0,  len);  _outputHead  =  0;  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.getChars(offset,  offset+amount,  _outputBuffer,  0,  len);  _outputHead  =  0;	  _writer.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
87	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.write(_outputBuffer,  offset+amount,  _outputTail);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	_writer.write(_outputBuffer,  offset+amount,  _outputTail);	  if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    	compilable	  [FE]  IndexOutOfBoundsException  	62	1	replace
88	[BUG]  [BUGGY]  _writer.write(_outputBuffer,  offset+amount,  _outputTail);  [FE]  IndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.write(_outputBuffer,  offset+amount,  _outputTail);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.write(_outputBuffer,  offset+amount,  _outputTail);	  if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    	compilable	  [FE]  IndexOutOfBoundsException  	62	1	replace
89	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.write(_outputBuffer,  offset+amount,  _outputHead);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	_writer.write(_outputBuffer,  offset+amount,  _outputHead);	  if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    	compilable	  [FE]  IndexOutOfBoundsException  	62	1	replace
90	[BUG]  [BUGGY]  _writer.write(_outputBuffer,  offset+amount,  _outputHead);  [FE]  IndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.write(_outputBuffer,  offset+amount,  _outputHead);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.write(_outputBuffer,  offset+amount,  _outputHead);	  if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    	compilable	  [FE]  IndexOutOfBoundsException  	62	1	replace
91	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.write(_outputBuffer,  offset,  len);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	_writer.write(_outputBuffer,  offset,  len);	  if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    	compilable	  [FE]  IndexOutOfBoundsException  	62	1	replace
92	[BUG]  [BUGGY]  _writer.write(_outputBuffer,  offset,  len);  [FE]  IndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.write(_outputBuffer,  offset,  len);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.write(_outputBuffer,  offset,  len);	  if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    	compilable	  [FE]  IndexOutOfBoundsException  	62	1	replace
93	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite(     "write    text    value     ");    _verifyValueWrite(   ",write  text  value     ");  _verifyValueWrite( "write  text  value   ");  _verifyValueWrite(   ",write  text  value   ");  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	_verifyValueWrite(       "write        text        value       ");        _verifyValueWrite(   ",write    text    value       ");    _verifyValueWrite( "write  text  value   ");  _verifyValueWrite(   ",write  text  value   ");	  	compilable	  [FE]  AssertionFailedError  	36	1	add
94	[BUG]  [BUGGY]  _verifyValueWrite(     "write    text    value     ");    _verifyValueWrite(   ",write  text  value     ");  _verifyValueWrite( "write  text  value   ");  _verifyValueWrite(   ",write  text  value   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite(     "write    text    value     ");    _verifyValueWrite(   ",write  text  value     ");  _verifyValueWrite( "write  text  value   ");  _verifyValueWrite(   ",write  text  value   ");  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_verifyValueWrite(       "write        text        value       ");        _verifyValueWrite(   ",write    text    value       ");    _verifyValueWrite( "write  text  value   ");  _verifyValueWrite(   ",write  text  value   ");	  	compilable	  [FE]  AssertionFailedError  	36	1	add
95	[BUG]  [BUGGY]  _writer.getChars(offset,  offset+amount,  _outputBuffer,  0,  _outputTail);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.getChars(offset,  offset+amount,  _outputBuffer,  0,  _outputTail);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.getChars(offset,  offset+amount,  _outputBuffer,  0,  _outputTail);	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0,    _outputTail);    _outputTail    =    0;    }    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
96	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _outputTail  =  _outputEnd;  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	_outputTail  =  _outputEnd;	          if(len    >    room)    {    if(_outputEnd    <    SHORT_WRITE)    {    _flushBuffer();    }    	compilable	  [FE]  AssertionFailedError  	65	1	replace
97	[BUG]  [BUGGY]  _outputTail  =  _outputEnd;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _outputTail  =  _outputEnd;  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_outputTail  =  _outputEnd;	          if(len    >    room)    {    if(_outputEnd    <    SHORT_WRITE)    {    _flushBuffer();    }    	compilable	  [FE]  AssertionFailedError  	65	1	replace
98	[BUG]  [BUGGY]  _outputBuffer  =  _outputTail;  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _outputBuffer  =  _outputTail;  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_outputBuffer  =  _outputTail;	          if(len    >    room)    {    if(_outputEnd    <    SHORT_WRITE)    {    _flushBuffer();    }    	non-compiled	[CE]  incompatible  types	65	None	replace
99	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	58	1	add
100	[BUG]  [BUGGY]  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	58	1	add
101	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount!=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount!=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	58	1	add
102	[BUG]  [BUGGY]  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount!=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount!=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount!=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	58	1	add
103	[BUG]  [BUGGY]  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  >>  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  >>  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  >>  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }	  	non-compiled	[CE]  incompatible  types	58	None	add
104	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  ==  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  ==  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	58	1	add
105	[BUG]  [BUGGY]  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  ==  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  ==  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  ==  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	58	1	add
106	[BUG]  [BUGGY]  _writer.getChars(offset,  offset+anchor,  _outputBuffer,  0);  _outputHead  =  0;  [CE]  cannot  find  symbol  anchor  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.getChars(offset,  offset+anchor,  _outputBuffer,  0);  _outputHead  =  0;  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.getChars(offset,  offset+anchor,  _outputBuffer,  0);  _outputHead  =  0;	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+anchor,    _outputBuffer,    0);    _outputHead    =    0;    }    	non-compiled	[CE]  cannot  find  symbol  anchor	69	None	replace
107	[BUG]  [BUGGY]  _writer.getChars(offset,  offset+anchor,  _outputBuffer,  0);  [CE]  cannot  find  symbol  anchor  [FE]              AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.getChars(offset,  offset+anchor,  _outputBuffer,  0);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.getChars(offset,  offset+anchor,  _outputBuffer,  0);	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+anchor,    _outputBuffer,    0);    _outputHead    =    0;    }    	non-compiled	[CE]  cannot  find  symbol  anchor	69	None	replace
108	[BUG]  [BUGGY]  if(amount  <  0)  {  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  <  0)  {  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount  <  0)  {  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    If(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    	non-compiled	[CE]  ';'  expected	50	None	replace
109	[BUG]  [BUGGY]  ||(_outputTail  <  amount  &&  _outputHead)>  _outputEnd)  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(_outputTail  <  amount  &&  _outputHead)>  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(_outputTail  <  amount  &&  _outputHead)>  _outputEnd)  {  _flushBuffer();  }	  ||(amount    <    SHORT_WRITE    &&    _outputHead)>    _outputEnd)    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
110	[BUG]  [BUGGY]  ||(_outputTail  <  SHORT_WRITE  &&  _outputHead)>  _outputEnd)  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(_outputTail  <  SHORT_WRITE  &&  _outputHead)>  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(_outputTail  <  SHORT_WRITE  &&  _outputHead)>  _outputEnd)  {  _flushBuffer();  }	  ||(amount    <    SHORT_WRITE    &&    _outputHead)>    _outputEnd)    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
111	[BUG]  [BUGGY]  ||(amount  <  SHORT_WRITE  &&  _outputHead  >  0)||(amount  <  SHORT_WRITE  &&  _outputTail)>  _outputEnd)  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(amount  <  SHORT_WRITE  &&  _outputHead  >  0)||(amount  <  SHORT_WRITE  &&  _outputTail)>  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(amount  <  SHORT_WRITE  &&  _outputHead  >  0)||(amount  <  SHORT_WRITE  &&  _outputTail)>  _outputEnd)  {  _flushBuffer();  }	  ||(amount    <    SHORT_WRITE    &&    _outputHead)>    _outputEnd)    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
112	[BUG]  [BUGGY]  ||(amount  <  SHORT_WRITE  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  _flushBuffer();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(amount  <  SHORT_WRITE  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  _flushBuffer();  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(amount  <  SHORT_WRITE  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  _flushBuffer();	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    If(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
113	[BUG]  [BUGGY]  ||(amount  <  SHORT_WRITE  &&  isEnabled(Feature.QUOTE_FIELD_NAME)))  {  _flushBuffer();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(amount  <  SHORT_WRITE  &&  isEnabled(Feature.QUOTE_FIELD_NAME)))  {  _flushBuffer();  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(amount  <  SHORT_WRITE  &&  isEnabled(Feature.QUOTE_FIELD_NAME)))  {  _flushBuffer();	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    If(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
114	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputHead        =        0;        }        if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	23	1	add
115	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputHead        =        0;        }        if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	23	1	add
116	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  len;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputHead        =        0;        }        if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  len;  }	  	compilable	  [FE]  IndexOutOfBoundsException  	23	1	add
117	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  len;  }  [FE]  IndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  len;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputHead        =        0;        }        if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  len;  }	  	compilable	  [FE]  IndexOutOfBoundsException  	23	1	add
118	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputHead        =        0;        }        if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	23	1	add
119	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputHead        =        0;        }        if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	23	1	add
120	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	16	1	add
121	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	16	1	add
122	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	16	1	add
123	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	16	1	add
124	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  If(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  If(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    If(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }	  	non-compiled	[CE]  ';'  expected	16	None	add
125	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();	  	non-compiled	[CE]  ';'  expected	16	None	add
126	[BUG]  [BUGGY]  _writeRawLong();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writeRawLong();  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writeRawLong();	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
127	[BUG]  [BUGGY]  _writer.writeRawLong(text,  offset,  _outputBuffer);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.writeRawLong(text,  offset,  _outputBuffer);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.writeRawLong(text,  offset,  _outputBuffer);	  _writer.writeRawLong(text,    _outputBuffer);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
128	[BUG]  [BUGGY]  _writer.writeRawLong(text,  _outputBuffer,  len);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.writeRawLong(text,  _outputBuffer,  len);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.writeRawLong(text,  _outputBuffer,  len);	  _writer.writeRawLong(text,    _outputBuffer);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
129	[BUG]  [BUGGY]  _writeRaw( "write  text  value ",  len);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writeRaw( "write  text  value ",  len);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writeRaw( "write  text  value ",  len);	  _writeRaw(   "write    text    value   ");    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
130	[BUG]  [BUGGY]  _writer.writeRaw( "write  text  value ");  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.writeRaw( "write  text  value ");  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.writeRaw( "write  text  value ");	  _writeRaw(   "write    text    value   ");    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
131	[BUG]  [BUGGY]  _writer.writeRawLong(text,  _outputBuffer,  _outputTail);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.writeRawLong(text,  _outputBuffer,  _outputTail);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.writeRawLong(text,  _outputBuffer,  _outputTail);	  _writer.writeRawLong(text,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
132	[BUG]  [BUGGY]  _writer.writeRawLong(text,  offset,  _outputTail);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.writeRawLong(text,  offset,  _outputTail);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.writeRawLong(text,  offset,  _outputTail);	  _writer.writeRawLong(text,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
133	[BUG]  [BUGGY]  _outputBuffer();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _outputBuffer();  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_outputBuffer();	  if(amount    <    SHORT_WRITE)    {    _outputBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
134	[BUG]  [BUGGY]  _outputBuffer  =  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _outputBuffer  =  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_outputBuffer  =  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;	  if(amount    <    SHORT_WRITE)    {    _outputBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    	non-compiled	[CE]  incompatible  types	77	None	replace
135	[BUG]  [BUGGY]  if(amount  <  SHORT_WRITE)  {  _outputBuffer();  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputTail  =  0;  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  <  SHORT_WRITE)  {  _outputBuffer();  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputTail  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount  <  SHORT_WRITE)  {  _outputBuffer();  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputTail  =  0;  }	  if(amount    <    SHORT_WRITE)    {    _outputBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
136	[BUG]  [BUGGY]  ||(amount  <  SHORT_WRITE  &&  _outputTail  >=  safeOutputEnd))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(amount  <  SHORT_WRITE  &&  _outputTail  >=  safeOutputEnd))  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(amount  <  SHORT_WRITE  &&  _outputTail  >=  safeOutputEnd))  {  _flushBuffer();  }	  ||(amount    <    SHORT_WRITE    &&    _outputTail    >    safeOutputEnd))    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
137	[BUG]  [BUGGY]  ||(amount  >=  SHORT_WRITE  &&  _outputTail  >  safeOutputEnd))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(amount  >=  SHORT_WRITE  &&  _outputTail  >  safeOutputEnd))  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(amount  >=  SHORT_WRITE  &&  _outputTail  >  safeOutputEnd))  {  _flushBuffer();  }	  ||(amount    <    SHORT_WRITE    &&    _outputTail    >    safeOutputEnd))    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
138	[BUG]  [BUGGY]  ||(amount  <  0  &&  _outputTail  >  safeOutputEnd))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(amount  <  0  &&  _outputTail  >  safeOutputEnd))  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(amount  <  0  &&  _outputTail  >  safeOutputEnd))  {  _flushBuffer();  }	  ||(amount    <    SHORT_WRITE    &&    _outputTail    >    safeOutputEnd))    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
139	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ",  room,  _outputBuffer,  0);  [CE]  no  suitable  method  found  for  _verifyValueWrite(String,int,char[],int)  [FE]        AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite( "write  text  value ",  room,  _outputBuffer,  0);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_verifyValueWrite( "write  text  value ",  room,  _outputBuffer,  0);	  _verifyValueWrite(   "write    text    value   ",    _outputBuffer,    0);    	non-compiled	[CE]  no  suitable  method  found  for  _verifyValueWrite(String,int,char[],int)	51	None	replace
140	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value "  +  text,  _outputBuffer,  0);  [CE]  no  suitable  method  found  for  _verifyValueWrite(String,char[],int)  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite( "write  text  value "  +  text,  _outputBuffer,  0);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_verifyValueWrite( "write  text  value "  +  text,  _outputBuffer,  0);	  _verifyValueWrite(   "write    text    value   ",    _outputBuffer,    0);    	non-compiled	[CE]  no  suitable  method  found  for  _verifyValueWrite(String,char[],int)	51	None	replace
141	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ",  amount,  _outputBuffer,  0);  [CE]  no  suitable  method  found  for  _verifyValueWrite(String,int,char[],int)  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite( "write  text  value ",  amount,  _outputBuffer,  0);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_verifyValueWrite( "write  text  value ",  amount,  _outputBuffer,  0);	  _verifyValueWrite(   "write    text    value   ",    _outputBuffer,    0);    	non-compiled	[CE]  no  suitable  method  found  for  _verifyValueWrite(String,int,char[],int)	51	None	replace
142	[BUG]  [BUGGY]  _writeRawLong(text.getChars(offset,  offset+len,  _outputBuffer,  0));  [CE]  'void'  type  not  allowed  here  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writeRawLong(text.getChars(offset,  offset+len,  _outputBuffer,  0));  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writeRawLong(text.getChars(offset,  offset+len,  _outputBuffer,  0));	  _writeRawLong(text.getChars(offset,    offset+amount,    _outputBuffer,    0));    	non-compiled	[CE]  'void'  type  not  allowed  here	10	None	replace
143	[BUG]  [BUGGY]  _writer.writeRawLong(text.getChars(offset,  offset+amount,  _outputBuffer,  0));  [CE]  'void'  type  not  allowed  here  [FE]              AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.writeRawLong(text.getChars(offset,  offset+amount,  _outputBuffer,  0));  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.writeRawLong(text.getChars(offset,  offset+amount,  _outputBuffer,  0));	  _writeRawLong(text.getChars(offset,    offset+amount,    _outputBuffer,    0));    	non-compiled	[CE]  'void'  type  not  allowed  here	10	None	replace
144	[BUG]  [BUGGY]  ||  amount  <  SHORT_WRITE)  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||  amount  <  SHORT_WRITE)  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||  amount  <  SHORT_WRITE)  {  _flushBuffer();  }	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
145	[BUG]  [BUGGY]  _writeRawLong(text.substring(0,  len),  _outputBuffer);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writeRawLong(text.substring(0,  len),  _outputBuffer);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writeRawLong(text.substring(0,  len),  _outputBuffer);	  _writeRawLong(text.substring(0,    len));    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
146	[BUG]  [BUGGY]  _writeRawLong(text.substring(0,  len),  offset);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writeRawLong(text.substring(0,  len),  offset);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writeRawLong(text.substring(0,  len),  offset);	  _writeRawLong(text.substring(0,    len));    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
147	[BUG]  [BUGGY]  _writeRawLong(text.substring(0,  len),  _outputTail);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writeRawLong(text.substring(0,  len),  _outputTail);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writeRawLong(text.substring(0,  len),  _outputTail);	  _writeRawLong(text.substring(0,    len));    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
148	[BUG]  [BUGGY]  _writeRawLong(text,  offset,  len);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writeRawLong(text,  offset,  len);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writeRawLong(text,  offset,  len);	  _writeRawLong(text,    len);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
149	[BUG]  [BUGGY]  _writeRawLong(text,  len,  _outputBuffer);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writeRawLong(text,  len,  _outputBuffer);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writeRawLong(text,  len,  _outputBuffer);	  _writeRawLong(text,    len);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
150	[BUG]  [BUGGY]  _writeRawLong(text,  len,  _outputTail);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writeRawLong(text,  len,  _outputTail);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writeRawLong(text,  len,  _outputTail);	  _writeRawLong(text,    len);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
151	[BUG]  [BUGGY]  _writer.write(text,  offset);  [CE]  no  suitable  method  found  for  write(String,int)  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.write(text,  offset);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.write(text,  offset);	          _writer.write(text);    	non-compiled	[CE]  no  suitable  method  found  for  write(String,int)	49	None	replace
152	[BUG]  [BUGGY]  _writer.write(text,  offset  +  len);  [CE]  no  suitable  method  found  for  write(String,int)  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.write(text,  offset  +  len);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.write(text,  offset  +  len);	          _writer.write(text);    	non-compiled	[CE]  no  suitable  method  found  for  write(String,int)	49	None	replace
153	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite( ".write  text  value ");  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	_verifyValueWrite( ".write  text  value ");	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ".write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	45	1	replace
154	[BUG]  [BUGGY]  _verifyValueWrite( ".write  text  value ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite( ".write  text  value ");  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_verifyValueWrite( ".write  text  value ");	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ".write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	45	1	replace
155	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(len  >  room)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ".write  text  value ");  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(len  >  room)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ".write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ".write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	45	1	replace
156	[BUG]  [BUGGY]  if(len  >  room)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ".write  text  value ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(len  >  room)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ".write  text  value ");  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(len  >  room)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ".write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ".write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	45	1	replace
157	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(len  >  room)  {  _verifyValueWrite( "write  text  value ");  }  else  {  _verifyValueWrite( ".write  text  value ");  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(len  >  room)  {  _verifyValueWrite( "write  text  value ");  }  else  {  _verifyValueWrite( ".write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ".write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	45	1	replace
158	[BUG]  [BUGGY]  if(len  >  room)  {  _verifyValueWrite( "write  text  value ");  }  else  {  _verifyValueWrite( ".write  text  value ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(len  >  room)  {  _verifyValueWrite( "write  text  value ");  }  else  {  _verifyValueWrite( ".write  text  value ");  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(len  >  room)  {  _verifyValueWrite( "write  text  value ");  }  else  {  _verifyValueWrite( ".write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ".write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	45	1	replace
159	[BUG]  [BUGGY]  _writeRawLong(text,  offset  +  len);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writeRawLong(text,  offset  +  len);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writeRawLong(text,  offset  +  len);	  _writeRawLong(text,    offset);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
160	[BUG]  [BUGGY]  _writer.writeRawLong(text,  amount,  len);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.writeRawLong(text,  amount,  len);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.writeRawLong(text,  amount,  len);	  _writer.writeRawLong(text,    amount);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
161	[BUG]  [BUGGY]  _writer.writeRawLong(text,  amount  +  1);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.writeRawLong(text,  amount  +  1);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.writeRawLong(text,  amount  +  1);	  _writer.writeRawLong(text,    amount);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
162	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputHead        =        0;        }        if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	21	1	add
163	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputHead        =        0;        }        if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	21	1	add
164	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  len;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputHead        =        0;        }        if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  len;  }	  	compilable	  [FE]  IndexOutOfBoundsException  	21	1	add
165	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  len;  }  [FE]  IndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  len;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputHead        =        0;        }        if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  len;  }	  	compilable	  [FE]  IndexOutOfBoundsException  	21	1	add
166	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputHead        =        0;        }        if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	21	1	add
167	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputHead        =        0;        }        if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	21	1	add
168	[BUG]  [BUGGY]  if(amount  >=  SHORT_WRITE)  {  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >=  SHORT_WRITE)  {  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount  >=  SHORT_WRITE)  {  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    	non-compiled	[CE]  ';'  expected	43	None	replace
169	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite( ",write  text  value ");  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	_verifyValueWrite( ",write  text  value ");	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ",write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	37	1	replace
170	[BUG]  [BUGGY]  _verifyValueWrite( ",write  text  value ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite( ",write  text  value ");  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_verifyValueWrite( ",write  text  value ");	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ",write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	37	1	replace
171	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ",write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	37	1	replace
172	[BUG]  [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ",write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	37	1	replace
173	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(len  >  room)  {  _verifyValueWrite( "write  text  value ");  }  else  {  _verifyValueWrite( "write  text  value ");  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(len  >  room)  {  _verifyValueWrite( "write  text  value ");  }  else  {  _verifyValueWrite( "write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ",write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	37	1	replace
174	[BUG]  [BUGGY]  if(len  >  room)  {  _verifyValueWrite( "write  text  value ");  }  else  {  _verifyValueWrite( "write  text  value ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(len  >  room)  {  _verifyValueWrite( "write  text  value ");  }  else  {  _verifyValueWrite( "write  text  value ");  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(len  >  room)  {  _verifyValueWrite( "write  text  value ");  }  else  {  _verifyValueWrite( "write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ",write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	37	1	replace
175	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite(     "write    text    value     ");    _verifyValueWrite(   "write  text  value     ");  _verifyValueWrite( "write  text  value   ");  _verifyValueWrite( "write  text  value   ");  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	_verifyValueWrite(       "write        text        value       ");        _verifyValueWrite(   "write    text    value       ");    _verifyValueWrite( "write  text  value   ");  _verifyValueWrite( "write  text  value   ");	  	compilable	  [FE]  AssertionFailedError  	34	1	add
176	[BUG]  [BUGGY]  _verifyValueWrite(     "write    text    value     ");    _verifyValueWrite(   "write  text  value     ");  _verifyValueWrite( "write  text  value   ");  _verifyValueWrite( "write  text  value   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite(     "write    text    value     ");    _verifyValueWrite(   "write  text  value     ");  _verifyValueWrite( "write  text  value   ");  _verifyValueWrite( "write  text  value   ");  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_verifyValueWrite(       "write        text        value       ");        _verifyValueWrite(   "write    text    value       ");    _verifyValueWrite( "write  text  value   ");  _verifyValueWrite( "write  text  value   ");	  	compilable	  [FE]  AssertionFailedError  	34	1	add
177	[BUG]  [BUGGY]  ||(amount  <  SHORT_WRITE  &&!text.isEmpty()))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(amount  <  SHORT_WRITE  &&!text.isEmpty()))  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(amount  <  SHORT_WRITE  &&!text.isEmpty()))  {  _flushBuffer();  }	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
178	[BUG]  [BUGGY]  _flushBuffer(buffer,  amount);  [CE]  cannot  find  symbol  buffer  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _flushBuffer(buffer,  amount);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_flushBuffer(buffer,  amount);	  _flushBuffer(amount);    	non-compiled	[CE]  cannot  find  symbol  buffer	11	None	replace
179	[BUG]  [BUGGY]  _flushBuffer(amount,  _outputTail);  [CE]  method  _flushBuffer  in  class  WriterBasedJsonGenerator  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _flushBuffer(amount,  _outputTail);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_flushBuffer(amount,  _outputTail);	  _flushBuffer(amount);    	non-compiled	[CE]  method  _flushBuffer  in  class  WriterBasedJsonGenerator  cannot  be  applied  to  given  types;	11	None	replace
180	[BUG]  [BUGGY]  _flushBuffer(text,  amount);  [CE]  method  _flushBuffer  in  class  WriterBasedJsonGenerator  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _flushBuffer(text,  amount);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_flushBuffer(text,  amount);	  _flushBuffer(amount);    	non-compiled	[CE]  method  _flushBuffer  in  class  WriterBasedJsonGenerator  cannot  be  applied  to  given  types;	11	None	replace
181	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(len  >  room)  {  _verifyValueWrite( "write  text  value ");  }  else  if(len  >  room)  {  _verifyValueWrite( "write  text  value ");  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(len  >  room)  {  _verifyValueWrite( "write  text  value ");  }  else  if(len  >  room)  {  _verifyValueWrite( "write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	35	1	replace
182	[BUG]  [BUGGY]  if(len  >  room)  {  _verifyValueWrite( "write  text  value ");  }  else  if(len  >  room)  {  _verifyValueWrite( "write  text  value ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(len  >  room)  {  _verifyValueWrite( "write  text  value ");  }  else  if(len  >  room)  {  _verifyValueWrite( "write  text  value ");  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(len  >  room)  {  _verifyValueWrite( "write  text  value ");  }  else  if(len  >  room)  {  _verifyValueWrite( "write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	35	1	replace
183	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(len  >  room)  {  _verifyValueWrite( "write  text  value ");  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(len  >  room)  {  _verifyValueWrite( "write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	35	1	replace
184	[BUG]  [BUGGY]  if(len  >  room)  {  _verifyValueWrite( "write  text  value ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(len  >  room)  {  _verifyValueWrite( "write  text  value ");  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(len  >  room)  {  _verifyValueWrite( "write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	35	1	replace
185	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.write(   "write  text  value   ");  _writer.write( "write  text  value   ");  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	_writer.write(   "write    text    value   ");    _writer.write( "write  text  value   ");	  	compilable	  [FE]  AssertionFailedError  	73	1	add
186	[BUG]  [BUGGY]  _writer.write(   "write  text  value   ");  _writer.write( "write  text  value   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.write(   "write  text  value   ");  _writer.write( "write  text  value   ");  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.write(   "write    text    value   ");    _writer.write( "write  text  value   ");	  	compilable	  [FE]  AssertionFailedError  	73	1	add
187	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.write(   "write  text  value   ");  _writer.write( ",write  text  value   ");  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	_writer.write(   "write    text    value   ");    _writer.write( ",write  text  value   ");	  	compilable	  [FE]  AssertionFailedError  	73	1	add
188	[BUG]  [BUGGY]  _writer.write(   "write  text  value   ");  _writer.write( ",write  text  value   ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.write(   "write  text  value   ");  _writer.write( ",write  text  value   ");  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.write(   "write    text    value   ");    _writer.write( ",write  text  value   ");	  	compilable	  [FE]  AssertionFailedError  	73	1	add
189	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.write(   "write  text  value   ");  _writer.write( ".write  text  value   ");  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	_writer.write(   "write    text    value   ");    _writer.write( ".write  text  value   ");	  	compilable	  [FE]  AssertionFailedError  	73	1	add
190	[BUG]  [BUGGY]  _writer.write(   "write  text  value   ");  _writer.write( ".write  text  value   ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.write(   "write  text  value   ");  _writer.write( ".write  text  value   ");  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.write(   "write    text    value   ");    _writer.write( ".write  text  value   ");	  	compilable	  [FE]  AssertionFailedError  	73	1	add
191	[BUG]  [BUGGY]  ||(amount  <  SHORT_WRITE  &&  _outputHead  >=  0))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(amount  <  SHORT_WRITE  &&  _outputHead  >=  0))  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(amount  <  SHORT_WRITE  &&  _outputHead  >=  0))  {  _flushBuffer();  }	  ||(amount    <    SHORT_WRITE    &&    _outputHead    >    0))    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
192	[BUG]  [BUGGY]  ||(amount  >=  SHORT_WRITE  &&  _outputHead  >  0))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(amount  >=  SHORT_WRITE  &&  _outputHead  >  0))  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(amount  >=  SHORT_WRITE  &&  _outputHead  >  0))  {  _flushBuffer();  }	  ||(amount    <    SHORT_WRITE    &&    _outputHead    >    0))    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
193	[BUG]  [BUGGY]  ||(_outputTail  <  amount  &&  _outputHead  >  0))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(_outputTail  <  amount  &&  _outputHead  >  0))  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(_outputTail  <  amount  &&  _outputHead  >  0))  {  _flushBuffer();  }	  ||(amount    <    SHORT_WRITE    &&    _outputHead    >    0))    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
194	[BUG]  [BUGGY]  _outputBuffer  =  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _outputBuffer  =  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_outputBuffer  =  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;	  if(amount    <    SHORT_WRITE)    {    _outputBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    	non-compiled	[CE]  incompatible  types	67	None	replace
195	[BUG]  [BUGGY]  if(amount  <  SHORT_WRITE)  {  _outputBuffer();  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  <  SHORT_WRITE)  {  _outputBuffer();  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount  <  SHORT_WRITE)  {  _outputBuffer();  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  }	  if(amount    <    SHORT_WRITE)    {    _outputBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
196	[BUG]  [BUGGY]  ||(amount  >=  SHORT_WRITE  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(amount  >=  SHORT_WRITE  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))))  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(amount  >=  SHORT_WRITE  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))))  {  _flushBuffer();  }	  ||(amount    <    SHORT_WRITE    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))))    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
197	[BUG]  [BUGGY]  ||(amount  ==  SHORT_WRITE  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(amount  ==  SHORT_WRITE  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))))  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(amount  ==  SHORT_WRITE  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))))  {  _flushBuffer();  }	  ||(amount    <    SHORT_WRITE    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))))    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
198	[BUG]  [BUGGY]  ||(amount!=  SHORT_WRITE  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(amount!=  SHORT_WRITE  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))))  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(amount!=  SHORT_WRITE  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))))  {  _flushBuffer();  }	  ||(amount    <    SHORT_WRITE    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))))    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
199	[BUG]  [BUGGY]  if(amount  ==  0)  {  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  ==  0)  {  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount  ==  0)  {  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    	non-compiled	[CE]  ';'  expected	25	None	replace
200	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	18	1	add
201	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	18	1	add
202	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	18	1	add
203	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	18	1	add
204	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  >>  SHORT_WRITE)  {  _flushBuffer();  }  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  >>  SHORT_WRITE)  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  >>  SHORT_WRITE)  {  _flushBuffer();  }	  	non-compiled	[CE]  incompatible  types	18	None	add
205	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount!=  SHORT_WRITE)  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount!=  SHORT_WRITE)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	18	1	add
206	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount!=  SHORT_WRITE)  {  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount!=  SHORT_WRITE)  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount!=  SHORT_WRITE)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	18	1	add
207	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  ==  SHORT_WRITE)  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  ==  SHORT_WRITE)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	18	1	add
208	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  ==  SHORT_WRITE)  {  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  ==  SHORT_WRITE)  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  ==  SHORT_WRITE)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	18	1	add
209	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _outputTail  =  len;  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	_outputTail  =  len;	          if(len    >    room)    {    if(_outputTail    >=    _outputEnd)    {    _flushBuffer();    }    	compilable	  [FE]  AssertionFailedError  	64	1	replace
210	[BUG]  [BUGGY]  _outputTail  =  len;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _outputTail  =  len;  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_outputTail  =  len;	          if(len    >    room)    {    if(_outputTail    >=    _outputEnd)    {    _flushBuffer();    }    	compilable	  [FE]  AssertionFailedError  	64	1	replace
211	[BUG]  [BUGGY]  _flushBuffer(text,  offset);  [CE]  method  _flushBuffer  in  class  WriterBasedJsonGenerator  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _flushBuffer(text,  offset);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_flushBuffer(text,  offset);	  _flushBuffer(text);    	non-compiled	[CE]  method  _flushBuffer  in  class  WriterBasedJsonGenerator  cannot  be  applied  to  given  types;	66	None	replace
212	[BUG]  [BUGGY]  _flushBuffer(text,  _outputBuffer);  [CE]  method  _flushBuffer  in  class  WriterBasedJsonGenerator  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _flushBuffer(text,  _outputBuffer);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_flushBuffer(text,  _outputBuffer);	  _flushBuffer(text);    	non-compiled	[CE]  method  _flushBuffer  in  class  WriterBasedJsonGenerator  cannot  be  applied  to  given  types;	66	None	replace
213	[BUG]  [BUGGY]  _flushBuffer(text,  buffer);  [CE]  cannot  find  symbol  buffer  [FE]                AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _flushBuffer(text,  buffer);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_flushBuffer(text,  buffer);	  _flushBuffer(text);    	non-compiled	[CE]  cannot  find  symbol  buffer	66	None	replace
214	[BUG]  [BUGGY]  _flushBuffer(text,  _outputTail);  [CE]  method  _flushBuffer  in  class  WriterBasedJsonGenerator  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _flushBuffer(text,  _outputTail);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_flushBuffer(text,  _outputTail);	  _flushBuffer(text);    	non-compiled	[CE]  method  _flushBuffer  in  class  WriterBasedJsonGenerator  cannot  be  applied  to  given  types;	66	None	replace
215	[BUG]  [BUGGY]  _writer.write( "write  text  value ",  len);  [CE]  no  suitable  method  found  for  write(String,int)  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.write( "write  text  value ",  len);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.write( "write  text  value ",  len);	  _writer.write(   "write    text    value   ");    	non-compiled	[CE]  no  suitable  method  found  for  write(String,int)	74	None	replace
216	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.write( "write  text  value. ");  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	_writer.write( "write  text  value. ");	  _writer.write(   "write    text    value   ");    	compilable	  [FE]  AssertionFailedError  	74	1	replace
217	[BUG]  [BUGGY]  _writer.write( "write  text  value. ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.write( "write  text  value. ");  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.write( "write  text  value. ");	  _writer.write(   "write    text    value   ");    	compilable	  [FE]  AssertionFailedError  	74	1	replace
218	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.write( "write  text  value: ");  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	_writer.write( "write  text  value: ");	  _writer.write(   "write    text    value   ");    	compilable	  [FE]  AssertionFailedError  	74	1	replace
219	[BUG]  [BUGGY]  _writer.write( "write  text  value: ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.write( "write  text  value: ");  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.write( "write  text  value: ");	  _writer.write(   "write    text    value   ");    	compilable	  [FE]  AssertionFailedError  	74	1	replace
220	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value "));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite( "write  text  value "));  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_verifyValueWrite( "write  text  value "));	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value   "));    	non-compiled	[CE]  	38	None	replace
221	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value   "));    	compilable	  [FE]  AssertionFailedError  	38	1	replace
222	[BUG]  [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value   "));    	compilable	  [FE]  AssertionFailedError  	38	1	replace
223	[BUG]  [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value "));  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value "));  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value "));  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value   "));    	non-compiled	[CE]  	38	None	replace
224	[BUG]  [BUGGY]  ||(amount  >=  SHORT_WRITE  &&  _outputTail  >  0))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(amount  >=  SHORT_WRITE  &&  _outputTail  >  0))  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(amount  >=  SHORT_WRITE  &&  _outputTail  >  0))  {  _flushBuffer();  }	  ||(amount    <    SHORT_WRITE    &&    _outputTail    >    0))    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
225	[BUG]  [BUGGY]  ||(_outputTail  <  amount  &&  _outputEnd  >  0))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(_outputTail  <  amount  &&  _outputEnd  >  0))  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(_outputTail  <  amount  &&  _outputEnd  >  0))  {  _flushBuffer();  }	  ||(amount    <    SHORT_WRITE    &&    _outputTail    >    0))    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
226	[BUG]  [BUGGY]  ||(amount  <  SHORT_WRITE  &&  _outputTail  >  0)&&(_outputHead  >=  _outputEnd))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(amount  <  SHORT_WRITE  &&  _outputTail  >  0)&&(_outputHead  >=  _outputEnd))  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(amount  <  SHORT_WRITE  &&  _outputTail  >  0)&&(_outputHead  >=  _outputEnd))  {  _flushBuffer();  }	  ||(amount    <    SHORT_WRITE    &&    _outputTail    >    0))    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
227	[BUG]  [BUGGY]  _writer.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputTail  =  0;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputTail  =  0;  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputTail  =  0;	  _writer.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
228	[BUG]  [BUGGY]  _writer.writeRawLong(text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.writeRawLong(text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.writeRawLong(text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;	  _writeRawLong(text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    	non-compiled	[CE]  ')'  expected	29	None	replace
229	[BUG]  [BUGGY]  _writeRawLong(text.getChars(offset,  offset+amount,  _outputBuffer,  0,  len));  _outputHead  =  0;  [CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writeRawLong(text.getChars(offset,  offset+amount,  _outputBuffer,  0,  len));  _outputHead  =  0;  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writeRawLong(text.getChars(offset,  offset+amount,  _outputBuffer,  0,  len));  _outputHead  =  0;	  _writeRawLong(text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)	29	None	replace
230	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputTail        =        0;        }        if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	39	1	add
231	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputTail        =        0;        }        if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	39	1	add
232	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputTail        =        0;        }        if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	39	1	add
233	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputTail        =        0;        }        if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	39	1	add
234	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  len;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputTail        =        0;        }        if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  len;  }	  	compilable	  [FE]  IndexOutOfBoundsException  	39	1	add
235	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  len;  }  [FE]  IndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  len;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputTail        =        0;        }        if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  len;  }	  	compilable	  [FE]  IndexOutOfBoundsException  	39	1	add
236	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.write(text,  0,  len  +  1);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	_writer.write(text,  0,  len  +  1);	          _writer.write(text,    0,    len);    	compilable	  [FE]  AssertionFailedError  	27	1	replace
237	[BUG]  [BUGGY]  _writer.write(text,  0,  len  +  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.write(text,  0,  len  +  1);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.write(text,  0,  len  +  1);	          _writer.write(text,    0,    len);    	compilable	  [FE]  AssertionFailedError  	27	1	replace
238	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.write(text,  0,  len  -  1);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	_writer.write(text,  0,  len  -  1);	          _writer.write(text,    0,    len);    	compilable	  [FE]  AssertionFailedError  	27	1	replace
239	[BUG]  [BUGGY]  _writer.write(text,  0,  len  -  1);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.write(text,  0,  len  -  1);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.write(text,  0,  len  -  1);	          _writer.write(text,    0,    len);    	compilable	  [FE]  AssertionFailedError  	27	1	replace
240	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.write(text,  0,  amount);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	_writer.write(text,  0,  amount);	          _writer.write(text,    0,    len);    	compilable	  [FE]  AssertionFailedError  	27	1	replace
241	[BUG]  [BUGGY]  _writer.write(text,  0,  amount);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.write(text,  0,  amount);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.write(text,  0,  amount);	          _writer.write(text,    0,    len);    	compilable	  [FE]  AssertionFailedError  	27	1	replace
242	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	61	1	add
243	[BUG]  [BUGGY]  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	61	1	add
244	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount!=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount!=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	61	1	add
245	[BUG]  [BUGGY]  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount!=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount!=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount!=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	61	1	add
246	[BUG]  [BUGGY]  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  >>  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  >>  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  >>  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }	  	non-compiled	[CE]  incompatible  types	61	None	add
247	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  ==  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  ==  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	61	1	add
248	[BUG]  [BUGGY]  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  ==  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  ==  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  ==  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	61	1	add
249	[BUG]  [BUGGY]  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+anchor,  _outputBuffer,  0);  _outputHead  =  0;  }  [CE]  cannot  find  symbol  anchor  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+anchor,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+anchor,  _outputBuffer,  0);  _outputHead  =  0;  }	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+anchor,    _outputBuffer,    0);    _outputHead    =    0;    }    	non-compiled	[CE]  cannot  find  symbol  anchor	69	None	replace
250	[BUG]  [BUGGY]  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+answer,  _outputBuffer,  0);  _outputHead  =  0;  }  [CE]  cannot  find  symbol  answer  [FE]              AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+answer,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+answer,  _outputBuffer,  0);  _outputHead  =  0;  }	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+anchor,    _outputBuffer,    0);    _outputHead    =    0;    }    	non-compiled	[CE]  cannot  find  symbol  answer	69	None	replace
251	[BUG]  [BUGGY]  ||(amount  >  SHORT_WRITE  &&  _outputTail  >  0))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(amount  >  SHORT_WRITE  &&  _outputTail  >  0))  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(amount  >  SHORT_WRITE  &&  _outputTail  >  0))  {  _flushBuffer();  }	  ||(amount    <    SHORT_WRITE    &&    _outputTail    >    0))    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
252	[BUG]  [BUGGY]  ||(amount  <  0  &&  _outputTail  >  0))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(amount  <  0  &&  _outputTail  >  0))  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(amount  <  0  &&  _outputTail  >  0))  {  _flushBuffer();  }	  ||(amount    <    SHORT_WRITE    &&    _outputTail    >    0))    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
253	[BUG]  [BUGGY]  if(amount!=  0)  {  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount!=  0)  {  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount!=  0)  {  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    	non-compiled	[CE]  ';'  expected	25	None	replace
254	[BUG]  [BUGGY]  _writeRawLong(text.getChars(offset,  offset+1,  amount,  _outputBuffer,  0));  [CE]  no  suitable  method  found  for  getChars(int,int,int,char[],int)  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writeRawLong(text.getChars(offset,  offset+1,  amount,  _outputBuffer,  0));  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writeRawLong(text.getChars(offset,  offset+1,  amount,  _outputBuffer,  0));	  _writeRawLong(text.getChars(offset,    offset+amount,    _outputBuffer,    0));    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int,int,char[],int)	10	None	replace
255	[BUG]  [BUGGY]  ||(amount  <  SHORT_WRITE  &&  _outputTail  >=  len))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(amount  <  SHORT_WRITE  &&  _outputTail  >=  len))  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(amount  <  SHORT_WRITE  &&  _outputTail  >=  len))  {  _flushBuffer();  }	  ||(amount    <    SHORT_WRITE    &&    _outputTail    >    safeOutputEnd))    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
256	[BUG]  [BUGGY]  _flushBuffer(text,  len);  [CE]  method  _flushBuffer  in  class  WriterBasedJsonGenerator  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _flushBuffer(text,  len);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_flushBuffer(text,  len);	  _flushBuffer(len);    	non-compiled	[CE]  method  _flushBuffer  in  class  WriterBasedJsonGenerator  cannot  be  applied  to  given  types;	12	None	replace
257	[BUG]  [BUGGY]  _flushBuffer(text.length());  [CE]  method  _flushBuffer  in  class  WriterBasedJsonGenerator  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _flushBuffer(text.length());  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_flushBuffer(text.length());	  _flushBuffer(offset);    	non-compiled	[CE]  method  _flushBuffer  in  class  WriterBasedJsonGenerator  cannot  be  applied  to  given  types;	57	None	replace
258	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ".write  text  value ");  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ".write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ".write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	45	1	replace
259	[BUG]  [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ".write  text  value ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ".write  text  value ");  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ".write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ".write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	45	1	replace
260	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >  0)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ".write  text  value ");  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(amount  >  0)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ".write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ".write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	45	1	replace
261	[BUG]  [BUGGY]  if(amount  >  0)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ".write  text  value ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >  0)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ".write  text  value ");  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount  >  0)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ".write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ".write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	45	1	replace
262	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >  0)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ".write  text  value ");  }  else  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(amount  >  0)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ".write  text  value ");  }  else  {  _flushBuffer();  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ".write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	45	1	replace
263	[BUG]  [BUGGY]  if(amount  >  0)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ".write  text  value ");  }  else  {  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >  0)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ".write  text  value ");  }  else  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount  >  0)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ".write  text  value ");  }  else  {  _flushBuffer();  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ".write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	45	1	replace
264	[BUG]  [BUGGY]  if(amount!=  0)  {  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount!=  0)  {  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount!=  0)  {  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    If(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    	non-compiled	[CE]  ';'  expected	56	None	replace
265	[BUG]  [BUGGY]  _writer.writeRawLong(text.getChars(offset,  offset+amount,  _outputBuffer,  0);  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.writeRawLong(text.getChars(offset,  offset+amount,  _outputBuffer,  0);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.writeRawLong(text.getChars(offset,  offset+amount,  _outputBuffer,  0);	  _writer.writeRawLong(text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    	non-compiled	[CE]  ')'  expected	9	None	replace
266	[BUG]  [BUGGY]  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+room,  _outputBuffer,  0,  _outputHead);  _outputTail  =  0;  }  [CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+room,  _outputBuffer,  0,  _outputHead);  _outputTail  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+room,  _outputBuffer,  0,  _outputHead);  _outputTail  =  0;  }	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0,    _outputHead);    _outputTail    =    0;    }    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)	68	None	replace
267	[BUG]  [BUGGY]  ||(len  >  room  &&  _outputTail  >  0))  {  _outputTail  +=  amount;  }  [CE]  illegal  start  of  expression  [FE]    IndexOutOfBoundsException    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(len  >  room  &&  _outputTail  >  0))  {  _outputTail  +=  amount;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(len  >  room  &&  _outputTail  >  0))  {  _outputTail  +=  amount;  }	          if(len    >    room)    {    _outputTail    +=    amount;    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
268	[BUG]  [BUGGY]  ||(len  >  room  &&  _outputHead!=  null))  {  _outputTail  +=  amount;  }  [CE]  illegal  start  of  expression  [FE]      IndexOutOfBoundsException    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(len  >  room  &&  _outputHead!=  null))  {  _outputTail  +=  amount;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(len  >  room  &&  _outputHead!=  null))  {  _outputTail  +=  amount;  }	          if(len    >    room)    {    _outputTail    +=    amount;    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
269	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        IndexOutOfBoundsException    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(len  >  0)  {  _outputTail  +=  amount;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(len  >  0)  {  _outputTail  +=  amount;  }	          if(len    >    room)    {    _outputTail    +=    amount;    }    	compilable	  [FE]  AssertionFailedError  	47	1	replace
270	[BUG]  [BUGGY]  if(len  >  0)  {  _outputTail  +=  amount;  }  [FE]  AssertionFailedError  [FE]        IndexOutOfBoundsException    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(len  >  0)  {  _outputTail  +=  amount;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(len  >  0)  {  _outputTail  +=  amount;  }	          if(len    >    room)    {    _outputTail    +=    amount;    }    	compilable	  [FE]  AssertionFailedError  	47	1	replace
271	[BUG]  [BUGGY]  _writer.write(   "write  text  value   ");  _writer.write('write  text  value   ");  [CE]  unclosed  character  literal  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.write(   "write  text  value   ");  _writer.write('write  text  value   ");  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.write(   "write    text    value   ");    _writer.write('write  text  value   ");	  	non-compiled	[CE]  unclosed  character  literal	73	None	add
272	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	                _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	48	1	add
273	[BUG]  [BUGGY]          _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	                _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	48	1	add
274	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputTail  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	                _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputTail  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	48	1	add
275	[BUG]  [BUGGY]          _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputTail  =  0;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputTail  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	                _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputTail  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	48	1	add
276	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	                _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	48	1	add
277	[BUG]  [BUGGY]          _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	                _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	48	1	add
278	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  len;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	                _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  len;  }	  	compilable	  [FE]  AssertionFailedError  	48	1	add
279	[BUG]  [BUGGY]          _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  len;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  len;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	                _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  len;  }	  	compilable	  [FE]  AssertionFailedError  	48	1	add
280	[BUG]  [BUGGY]  _writeRawLong(text.substring(0,  amount));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writeRawLong(text.substring(0,  amount));  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writeRawLong(text.substring(0,  amount));	  _writeRawLong(text.substring(0,    len));    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
281	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputTail        =        0;        }        if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	41	1	add
282	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputTail        =        0;        }        if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	41	1	add
283	[BUG]  [BUGGY]  ||(amount  >  SHORT_WRITE  &&  _outputHead  >  0))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(amount  >  SHORT_WRITE  &&  _outputHead  >  0))  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(amount  >  SHORT_WRITE  &&  _outputHead  >  0))  {  _flushBuffer();  }	  ||(amount    <    SHORT_WRITE    &&    _outputHead    >    0))    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
284	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ".length());  [CE]  no  suitable  method  found  for  _verifyValueWrite(int)  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite( "write  text  value ".length());  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_verifyValueWrite( "write  text  value ".length());	  _verifyValueWrite(   "write    text    value.   ");    	non-compiled	[CE]  no  suitable  method  found  for  _verifyValueWrite(int)	3	None	replace
285	[BUG]  [BUGGY]  _writer.writeRawLong(text,  LONG_WRITE);  [CE]  cannot  find  symbol  LONG_WRITE  [FE]              AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.writeRawLong(text,  LONG_WRITE);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.writeRawLong(text,  LONG_WRITE);	  _writer.writeRawLong(text,    length);    	non-compiled	[CE]  cannot  find  symbol  LONG_WRITE	70	None	replace
286	[BUG]  [BUGGY]  if(amount  >=  SHORT_WRITE)  {  _outputBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >=  SHORT_WRITE)  {  _outputBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount  >=  SHORT_WRITE)  {  _outputBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }	  if(amount    <    SHORT_WRITE)    {    _outputBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
287	[BUG]  [BUGGY]  if(amount  >  0)  {  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >  0)  {  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount  >  0)  {  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    	non-compiled	[CE]  ';'  expected	17	None	replace
288	[BUG]  [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer  =  new  SerializableString();  _writer.write(text,  0,  len);  }  [CE]  cannot  assign  a  value  to  final  variable  _writer  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer  =  new  SerializableString();  _writer.write(text,  0,  len);  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	                _writer.write(text,    0,    len);    if(_writer!=  null)  {  _writer  =  new  SerializableString();  _writer.write(text,  0,  len);  }	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  _writer	26	None	add
289	[BUG]  [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text);  _writer.write(text,  0,  len);  }  [CE]  cannot  assign  a  value  to  final  variable  _writer  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer  =  new  SerializableString(text);  _writer.write(text,  0,  len);  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	                _writer.write(text,    0,    len);    if(_writer!=  null)  {  _writer  =  new  SerializableString(text);  _writer.write(text,  0,  len);  }	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  _writer	26	None	add
290	[BUG]  [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer  =  new  StringBuffer();  _writer.write(text,  0,  len);  }  [CE]  cannot  assign  a  value  to  final  variable  _writer  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer  =  new  StringBuffer();  _writer.write(text,  0,  len);  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	                _writer.write(text,    0,    len);    if(_writer!=  null)  {  _writer  =  new  StringBuffer();  _writer.write(text,  0,  len);  }	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  _writer	26	None	add
291	[BUG]  [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text,  0,  len);  }  [CE]  cannot  assign  a  value  to  final  variable  _writer  [FE]          AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text,  0,  len);  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	                _writer.write(text,    0,    len);    if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text,  0,  len);  }	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  _writer	26	None	add
292	[BUG]  [BUGGY]  _writeRawLong(text.getChars(offset,  offset+amount,  _outputBuffer,  0,  len);  _outputHead  =  0;  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writeRawLong(text.getChars(offset,  offset+amount,  _outputBuffer,  0,  len);  _outputHead  =  0;  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writeRawLong(text.getChars(offset,  offset+amount,  _outputBuffer,  0,  len);  _outputHead  =  0;	  _writeRawLong(text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    	non-compiled	[CE]  ')'  expected	29	None	replace
293	[BUG]  [BUGGY]  _flushBuffer(text.getChars(offset,  offset+amount,  _outputBuffer,  0));  [CE]  'void'  type  not  allowed  here  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _flushBuffer(text.getChars(offset,  offset+amount,  _outputBuffer,  0));  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_flushBuffer(text.getChars(offset,  offset+amount,  _outputBuffer,  0));	  _flushBuffer(amount);    	non-compiled	[CE]  'void'  type  not  allowed  here	11	None	replace
294	[BUG]  [BUGGY]  _flushBuffer(text.getChars(offset,  offset+amount,  _outputBuffer,  0);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _flushBuffer(text.getChars(offset,  offset+amount,  _outputBuffer,  0);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_flushBuffer(text.getChars(offset,  offset+amount,  _outputBuffer,  0);	  _flushBuffer(amount);    	non-compiled	[CE]  ')'  expected	11	None	replace
295	[BUG]  [BUGGY]  if(amount  >=  0)  {  if(alloc  <  SHORT_WRITE)  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >=  0)  {  if(alloc  <  SHORT_WRITE)  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount  >=  0)  {  if(alloc  <  SHORT_WRITE)  {  _flushBuffer();  }	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    	non-compiled	[CE]  ';'  expected	19	None	replace
296	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputHead        =        0;        }        if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	23	1	add
297	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputHead        =        0;        }        if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	23	1	add
298	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputHead        =        0;        }        if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;	  	non-compiled	[CE]  ';'  expected	23	None	add
299	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >  0)  {  _verifyValueWrite( "write  text  value ");  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(amount  >  0)  {  _verifyValueWrite( "write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	35	1	replace
300	[BUG]  [BUGGY]  if(amount  >  0)  {  _verifyValueWrite( "write  text  value ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >  0)  {  _verifyValueWrite( "write  text  value ");  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount  >  0)  {  _verifyValueWrite( "write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	35	1	replace
301	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >  0)  {  _verifyValueWrite( "write  text  value ");  }  else  {  _writeString( "write  text  value ");  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(amount  >  0)  {  _verifyValueWrite( "write  text  value ");  }  else  {  _writeString( "write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	35	1	replace
302	[BUG]  [BUGGY]  if(amount  >  0)  {  _verifyValueWrite( "write  text  value ");  }  else  {  _writeString( "write  text  value ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >  0)  {  _verifyValueWrite( "write  text  value ");  }  else  {  _writeString( "write  text  value ");  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount  >  0)  {  _verifyValueWrite( "write  text  value ");  }  else  {  _writeString( "write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	35	1	replace
303	[BUG]  [BUGGY]  ||(amount  >=  SHORT_WRITE  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))))  {  _flushBuffer();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(amount  >=  SHORT_WRITE  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))))  {  _flushBuffer();  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(amount  >=  SHORT_WRITE  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))))  {  _flushBuffer();	  ||(amount    <    SHORT_WRITE    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))))    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
304	[BUG]  [BUGGY]  _writer.writeRawLong(text,  _outputBuffer,  amount);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.writeRawLong(text,  _outputBuffer,  amount);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.writeRawLong(text,  _outputBuffer,  amount);	  _writer.writeRawLong(text,    amount);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
305	[BUG]  [BUGGY]  _writer.writeRawLong(text,  0,  amount);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.writeRawLong(text,  0,  amount);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.writeRawLong(text,  0,  amount);	  _writer.writeRawLong(text,    amount);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
306	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ",  len,  _outputBuffer,  0);  [CE]  no  suitable  method  found  for  _verifyValueWrite(String,int,char[],int)  [FE]        AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite( "write  text  value ",  len,  _outputBuffer,  0);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_verifyValueWrite( "write  text  value ",  len,  _outputBuffer,  0);	  _verifyValueWrite(   "write    text    value   ",    _outputBuffer,    0);    	non-compiled	[CE]  no  suitable  method  found  for  _verifyValueWrite(String,int,char[],int)	51	None	replace
307	[BUG]  [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value "));  }  else  {  _writer.flush();  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value "));  }  else  {  _writer.flush();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value "));  }  else  {  _writer.flush();  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value   "));    	non-compiled	[CE]  	38	None	replace
308	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >  0)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(amount  >  0)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ",write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	37	1	replace
309	[BUG]  [BUGGY]  if(amount  >  0)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >  0)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount  >  0)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ",write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	37	1	replace
310	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer	  	non-compiled	[CE]  ';'  expected	18	None	add
311	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flush  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flush  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flush	  	non-compiled	[CE]  ';'  expected	18	None	add
312	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer()  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer()  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer()	  	non-compiled	[CE]  ';'  expected	18	None	add
313	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBu  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBu  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBu	  	non-compiled	[CE]  ';'  expected	18	None	add
314	[BUG]  [BUGGY]  _writer.write(text,  offset+amount,  _outputBuffer,  0,  len);  [CE]  no  suitable  method  found  for  write(String,int,char[],int,int)  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.write(text,  offset+amount,  _outputBuffer,  0,  len);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.write(text,  offset+amount,  _outputBuffer,  0,  len);	          _writer.write(text,    offset+len,    _outputBuffer,    0);    	non-compiled	[CE]  no  suitable  method  found  for  write(String,int,char[],int,int)	28	None	replace
315	[BUG]  [BUGGY]  _writer.write(text,  offset+alloc,  _outputBuffer,  0);  [CE]  cannot  find  symbol  alloc  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.write(text,  offset+alloc,  _outputBuffer,  0);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.write(text,  offset+alloc,  _outputBuffer,  0);	          _writer.write(text,    offset+len,    _outputBuffer,    0);    	non-compiled	[CE]  cannot  find  symbol  alloc	28	None	replace
316	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >=  0)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(amount  >=  0)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }	  if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    	compilable	  [FE]  AssertionFailedError  	62	1	replace
317	[BUG]  [BUGGY]  if(amount  >=  0)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >=  0)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount  >=  0)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }	  if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    	compilable	  [FE]  AssertionFailedError  	62	1	replace
318	[BUG]  [BUGGY]  _writer.write(text,  offset+amount);  [CE]  no  suitable  method  found  for  write(String,int)  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.write(text,  offset+amount);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.write(text,  offset+amount);	          _writer.write(text);    	non-compiled	[CE]  no  suitable  method  found  for  write(String,int)	49	None	replace
319	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite(   "write  text  value   "  +  text);  _verifyValueWrite( ".write  text  value   "  +  text);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	_verifyValueWrite(   "write    text    value   "    +    text);    _verifyValueWrite( ".write  text  value   "  +  text);	  	compilable	  [FE]  AssertionFailedError  	4	1	add
320	[BUG]  [BUGGY]  _verifyValueWrite(   "write  text  value   "  +  text);  _verifyValueWrite( ".write  text  value   "  +  text);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite(   "write  text  value   "  +  text);  _verifyValueWrite( ".write  text  value   "  +  text);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_verifyValueWrite(   "write    text    value   "    +    text);    _verifyValueWrite( ".write  text  value   "  +  text);	  	compilable	  [FE]  AssertionFailedError  	4	1	add
321	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputTail        =        0;        }        if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	39	1	add
322	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputTail        =        0;        }        if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	39	1	add
323	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputTail        =        0;        }        if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =	  	non-compiled	[CE]  ';'  expected	39	None	add
324	[BUG]  [BUGGY]  _writeRawLong(text.getChars(offset,  offset+amount,  _outputBuffer,  0,  len));  _outputTail  =  0;  [CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)  [FE]        AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writeRawLong(text.getChars(offset,  offset+amount,  _outputBuffer,  0,  len));  _outputTail  =  0;  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writeRawLong(text.getChars(offset,  offset+amount,  _outputBuffer,  0,  len));  _outputTail  =  0;	  _writeRawLong(text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)	8	None	replace
325	[BUG]  [BUGGY]  _writeRawLong(text.getChars(offset,  offset+amount,  _outputBuffer,  0,  len);  _outputTail  =  0;  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writeRawLong(text.getChars(offset,  offset+amount,  _outputBuffer,  0,  len);  _outputTail  =  0;  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writeRawLong(text.getChars(offset,  offset+amount,  _outputBuffer,  0,  len);  _outputTail  =  0;	  _writeRawLong(text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    	non-compiled	[CE]  ')'  expected	8	None	replace
326	[BUG]  [BUGGY]  if(amount  >=  SHORT_WRITE)  {  _outputBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >=  SHORT_WRITE)  {  _outputBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount  >=  SHORT_WRITE)  {  _outputBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }	  if(amount    <    SHORT_WRITE)    {    _outputBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
327	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite( "write  text  value "  +  text.length());  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	_verifyValueWrite( "write  text  value "  +  text.length());	  _verifyValueWrite(   "write    text    value   "    +    text);    	compilable	  [FE]  AssertionFailedError  	5	1	replace
328	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value "  +  text.length());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite( "write  text  value "  +  text.length());  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_verifyValueWrite( "write  text  value "  +  text.length());	  _verifyValueWrite(   "write    text    value   "    +    text);    	compilable	  [FE]  AssertionFailedError  	5	1	replace
329	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite( "write  text  value "  +  text.toString());  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	_verifyValueWrite( "write  text  value "  +  text.toString());	  _verifyValueWrite(   "write    text    value   "    +    text);    	compilable	  [FE]  AssertionFailedError  	5	1	replace
330	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value "  +  text.toString());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite( "write  text  value "  +  text.toString());  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_verifyValueWrite( "write  text  value "  +  text.toString());	  _verifyValueWrite(   "write    text    value   "    +    text);    	compilable	  [FE]  AssertionFailedError  	5	1	replace
331	[BUG]  [BUGGY]  _writeRawLong(text,  offset+amount);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writeRawLong(text,  offset+amount);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writeRawLong(text,  offset+amount);	  _writeRawLong(text,    offset);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
332	[BUG]  [BUGGY]  _writeRawLong(text,  amount);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writeRawLong(text,  amount);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writeRawLong(text,  amount);	  _writeRawLong(text,    len);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
333	[BUG]  [BUGGY]  ||(amount  >=  SHORT_WRITE  &&  _outputHead)>  _outputEnd)  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(amount  >=  SHORT_WRITE  &&  _outputHead)>  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(amount  >=  SHORT_WRITE  &&  _outputHead)>  _outputEnd)  {  _flushBuffer();  }	  ||(amount    <    SHORT_WRITE    &&    _outputHead)>    _outputEnd)    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
334	[BUG]  [BUGGY]  ||(amount  <  0  &&  _outputHead)>  _outputEnd)  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(amount  <  0  &&  _outputHead)>  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(amount  <  0  &&  _outputHead)>  _outputEnd)  {  _flushBuffer();  }	  ||(amount    <    SHORT_WRITE    &&    _outputHead)>    _outputEnd)    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
335	[BUG]  [BUGGY]  ||(amount  <  SHORT_WRITE  &&  _outputHead  >  0)  <  _outputEnd)  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(amount  <  SHORT_WRITE  &&  _outputHead  >  0)  <  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(amount  <  SHORT_WRITE  &&  _outputHead  >  0)  <  _outputEnd)  {  _flushBuffer();  }	  ||(amount    <    SHORT_WRITE    &&    _outputHead)>    _outputEnd)    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
336	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputHead        =        0;        }        if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	21	1	add
337	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputHead        =        0;        }        if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	21	1	add
338	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  >  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputHead        =        0;        }        if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  >  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	21	1	add
339	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  >  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  >  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputHead        =        0;        }        if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  >  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	21	1	add
340	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >=  0)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(amount  >=  0)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }	  if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    	compilable	  [FE]  AssertionFailedError  	59	1	replace
341	[BUG]  [BUGGY]  if(amount  >=  0)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >=  0)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount  >=  0)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }	  if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    	compilable	  [FE]  AssertionFailedError  	59	1	replace
342	[BUG]  [BUGGY]  if(amount  >=  0)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0,  _outputTail);  _outputTail  =  0;  }  [CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >=  0)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0,  _outputTail);  _outputTail  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount  >=  0)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0,  _outputTail);  _outputTail  =  0;  }	  if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)	59	None	replace
343	[BUG]  [BUGGY]  _text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  [CE]  cannot  find  symbol  _text  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    	non-compiled	[CE]  cannot  find  symbol  _text	40	None	replace
344	[BUG]  [BUGGY]  _text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  [CE]  cannot  find  symbol  _text  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    	non-compiled	[CE]  cannot  find  symbol  _text	22	None	replace
345	[BUG]  [BUGGY]  _text.getChars(offset,  offset+amount,  _outputBuffer,  0);  [CE]  cannot  find  symbol  _text  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _text.getChars(offset,  offset+amount,  _outputBuffer,  0);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_text.getChars(offset,  offset+amount,  _outputBuffer,  0);	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    	non-compiled	[CE]  cannot  find  symbol  _text	22	None	replace
346	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer	  	non-compiled	[CE]  ';'  expected	16	None	add
347	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flush  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flush  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flush	  	non-compiled	[CE]  ';'  expected	16	None	add
348	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer()  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer()  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer()	  	non-compiled	[CE]  ';'  expected	16	None	add
349	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBu  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBu  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBu	  	non-compiled	[CE]  ';'  expected	16	None	add
350	[BUG]  [BUGGY]  _writer.getChars(offset,  offset+len,  _outputBuffer,  0);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.getChars(offset,  offset+len,  _outputBuffer,  0);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.getChars(offset,  offset+len,  _outputBuffer,  0);	  _writer.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
351	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ",  len,  _outputBuffer);  [CE]  no  suitable  method  found  for  _verifyValueWrite(String,int,char[])  [FE]        AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite( "write  text  value ",  len,  _outputBuffer);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_verifyValueWrite( "write  text  value ",  len,  _outputBuffer);	  _verifyValueWrite(   "write    text    value   ",    len);    	non-compiled	[CE]  no  suitable  method  found  for  _verifyValueWrite(String,int,char[])	1	None	replace
352	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ",  room,  len);  [CE]  no  suitable  method  found  for  _verifyValueWrite(String,int,int)  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite( "write  text  value ",  room,  len);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_verifyValueWrite( "write  text  value ",  room,  len);	  _verifyValueWrite(   "write    text    value   ",    len);    	non-compiled	[CE]  no  suitable  method  found  for  _verifyValueWrite(String,int,int)	1	None	replace
353	[BUG]  [BUGGY]  _writer.getChars(offset,  offset+amount,  _outputBuffer,  0,  _outputHead);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.getChars(offset,  offset+amount,  _outputBuffer,  0,  _outputHead);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.getChars(offset,  offset+amount,  _outputBuffer,  0,  _outputHead);	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0,    _outputHead);    _outputTail    =    0;    }    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
354	[BUG]  [BUGGY]  if(_writer!=  null)  {  _writeValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(_writer!=  null)  {  _writeValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(_writer!=  null)  {  _writeValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value       ");    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
355	[BUG]  [BUGGY]  if(_writer!=  null)  {  _writeValueWrite( "write  text  value ");  _writeValueWrite( "write  text  value ");  }  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(_writer!=  null)  {  _writeValueWrite( "write  text  value ");  _writeValueWrite( "write  text  value ");  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(_writer!=  null)  {  _writeValueWrite( "write  text  value ");  _writeValueWrite( "write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value       ");    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
356	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >=  0)  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(amount  >=  0)  {  _flushBuffer();  }	  if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    	compilable	  [FE]  AssertionFailedError  	59	1	replace
357	[BUG]  [BUGGY]  if(amount  >=  0)  {  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >=  0)  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount  >=  0)  {  _flushBuffer();  }	  if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    	compilable	  [FE]  AssertionFailedError  	59	1	replace
358	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	                _writer.write(text,    0,    len);    if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	26	1	add
359	[BUG]  [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	                _writer.write(text,    0,    len);    if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	26	1	add
360	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text,  0,  len);  if(text!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	                _writer.write(text,    0,    len);    if(text!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	26	1	add
361	[BUG]  [BUGGY]          _writer.write(text,  0,  len);  if(text!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text,  0,  len);  if(text!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	                _writer.write(text,    0,    len);    if(text!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	26	1	add
362	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	                _writer.write(text,    0,    len);    if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	26	1	add
363	[BUG]  [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  0;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	                _writer.write(text,    0,    len);    if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	26	1	add
364	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	                _writer.write(text,    0,    len);    if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	26	1	add
365	[BUG]  [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	                _writer.write(text,    0,    len);    if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	26	1	add
366	[BUG]  [BUGGY]  _writer.getChars(offset,  offset+1,  _outputBuffer,  0);  _outputHead  =  0;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.getChars(offset,  offset+1,  _outputBuffer,  0);  _outputHead  =  0;  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.getChars(offset,  offset+1,  _outputBuffer,  0);  _outputHead  =  0;	  _writer.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
367	[BUG]  [BUGGY]  _verifyValueWrite(   "write  text  value.   ");  _verifyValueWrite(. "write  text  value.   ");  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite(   "write  text  value.   ");  _verifyValueWrite(. "write  text  value.   ");  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_verifyValueWrite(   "write    text    value.   ");    _verifyValueWrite(. "write  text  value.   ");	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
368	[BUG]  [BUGGY]  _writeRawLong(text,  offset,  amount);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writeRawLong(text,  offset,  amount);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writeRawLong(text,  offset,  amount);	  _writeRawLong(text,    offset);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
369	[BUG]  [BUGGY]  if(amount  >  room)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >  room)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount  >  room)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }	          if(len    >    room)    {    if(_outputTail    >=    _outputEnd)    {    _flushBuffer();    }    	non-compiled	[CE]  ';'  expected	64	None	replace
370	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _outputHead  =  0;  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	_outputHead  =  0;	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    	compilable	  [FE]  AssertionFailedError  	42	1	replace
371	[BUG]  [BUGGY]  _outputHead  =  0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _outputHead  =  0;  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_outputHead  =  0;	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    	compilable	  [FE]  AssertionFailedError  	42	1	replace
372	[BUG]  [BUGGY]  ||(amount  >  SHORT_WRITE  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(amount  >  SHORT_WRITE  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))))  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(amount  >  SHORT_WRITE  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))))  {  _flushBuffer();  }	  ||(amount    <    SHORT_WRITE    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))))    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
373	[BUG]  [BUGGY]  _writer.writeRawLong(text,  offset+amount);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.writeRawLong(text,  offset+amount);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.writeRawLong(text,  offset+amount);	  _writer.writeRawLong(text,    offset);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
374	[BUG]  [BUGGY]  if(amount  >=  0)  {  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >=  0)  {  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount  >=  0)  {  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    If(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    	non-compiled	[CE]  ';'  expected	50	None	replace
375	[BUG]  [BUGGY]  _writeRawLong(text.getChars(offset,  offset+amount,  _outputBuffer,  0),  _outputTail);  [CE]  'void'  type  not  allowed  here  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writeRawLong(text.getChars(offset,  offset+amount,  _outputBuffer,  0),  _outputTail);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writeRawLong(text.getChars(offset,  offset+amount,  _outputBuffer,  0),  _outputTail);	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    If(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    	non-compiled	[CE]  'void'  type  not  allowed  here	50	None	replace
376	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ".write  text  value ");  }  else  {  _writer.flush();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ".write  text  value ");  }  else  {  _writer.flush();  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ".write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	45	1	replace
377	[BUG]  [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ".write  text  value ");  }  else  {  _writer.flush();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ".write  text  value ");  }  else  {  _writer.flush();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ".write  text  value ");  }  else  {  _writer.flush();  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ".write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	45	1	replace
378	[BUG]  [BUGGY]  ||(amount  <  SHORT_WRITE  &&  _outputHead  >  safeOutputEnd))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(amount  <  SHORT_WRITE  &&  _outputHead  >  safeOutputEnd))  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(amount  <  SHORT_WRITE  &&  _outputHead  >  safeOutputEnd))  {  _flushBuffer();  }	  ||(amount    <    SHORT_WRITE    &&    _outputTail    >    safeOutputEnd))    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
379	[BUG]  [BUGGY]  ||(_outputTail  <  SHORT_WRITE  &&  amount  >  safeOutputEnd))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(_outputTail  <  SHORT_WRITE  &&  amount  >  safeOutputEnd))  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(_outputTail  <  SHORT_WRITE  &&  amount  >  safeOutputEnd))  {  _flushBuffer();  }	  ||(amount    <    SHORT_WRITE    &&    _outputTail    >    safeOutputEnd))    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
380	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  <  0)  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(amount  <  0)  {  _flushBuffer();  }	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    	compilable	  [FE]  AssertionFailedError  	17	1	replace
381	[BUG]  [BUGGY]  if(amount  <  0)  {  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  <  0)  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount  <  0)  {  _flushBuffer();  }	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    	compilable	  [FE]  AssertionFailedError  	17	1	replace
382	[BUG]  [BUGGY]  _writer.writeRawLong(text,  start,  _outputTail);  [CE]  cannot  find  symbol  start  [FE]              AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.writeRawLong(text,  start,  _outputTail);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.writeRawLong(text,  start,  _outputTail);	  _writer.writeRawLong(text,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol  start	53	None	replace
383	[BUG]  [BUGGY]  ||(amount  >  SHORT_WRITE  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(amount  >  SHORT_WRITE  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(amount  >  SHORT_WRITE  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  _flushBuffer();  }	  ||(amount    <    SHORT_WRITE    &&    isEnabled(Feature.QUOTE_FIELD_NAMES)))    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
384	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          if(len  >  room)  {  _outputTail  +=  amount;  }  if(len  <  room)  {  _outputTail  +=  amount;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	                if(len    >    room)    {    _outputTail    +=    amount;    }    if(len  <  room)  {  _outputTail  +=  amount;  }	  	compilable	  [FE]  IndexOutOfBoundsException  	46	1	add
385	[BUG]  [BUGGY]          if(len  >  room)  {  _outputTail  +=  amount;  }  if(len  <  room)  {  _outputTail  +=  amount;  }  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          if(len  >  room)  {  _outputTail  +=  amount;  }  if(len  <  room)  {  _outputTail  +=  amount;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	                if(len    >    room)    {    _outputTail    +=    amount;    }    if(len  <  room)  {  _outputTail  +=  amount;  }	  	compilable	  [FE]  IndexOutOfBoundsException  	46	1	add
386	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flush  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flush  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputHead        =        0;        }        if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flush	  	non-compiled	[CE]  ';'  expected	23	None	add
387	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputHead        =        0;        }        if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT	  	non-compiled	[CE]  ')'  expected	23	None	add
388	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputHead        =        0;        }        if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _	  	non-compiled	[CE]  ';'  expected	23	None	add
389	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(len  <  SHORT_WRITE)  {  _flush  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(len  <  SHORT_WRITE)  {  _flush  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputHead        =        0;        }        if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(len  <  SHORT_WRITE)  {  _flush	  	non-compiled	[CE]  ';'  expected	23	None	add
390	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value "  +  TextUtilities.encodeAsString(text));  [CE]  cannot  find  symbol  TextUtilities  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite( "write  text  value "  +  TextUtilities.encodeAsString(text));  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_verifyValueWrite( "write  text  value "  +  TextUtilities.encodeAsString(text));	  _verifyValueWrite(   "write    text    value   "    +    text);    	non-compiled	[CE]  cannot  find  symbol  TextUtilities	5	None	replace
391	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value "  +  TextUtilities.writeRawLong(text));  [CE]  cannot  find  symbol  TextUtilities  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite( "write  text  value "  +  TextUtilities.writeRawLong(text));  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_verifyValueWrite( "write  text  value "  +  TextUtilities.writeRawLong(text));	  _verifyValueWrite(   "write    text    value   "    +    text);    	non-compiled	[CE]  cannot  find  symbol  TextUtilities	5	None	replace
392	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value "  +  TextUtilities.toString(text));  [CE]  cannot  find  symbol  TextUtilities  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite( "write  text  value "  +  TextUtilities.toString(text));  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_verifyValueWrite( "write  text  value "  +  TextUtilities.toString(text));	  _verifyValueWrite(   "write    text    value   "    +    text);    	non-compiled	[CE]  cannot  find  symbol  TextUtilities	5	None	replace
393	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite( "write  text  value ".trim());  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	_verifyValueWrite( "write  text  value ".trim());	  _verifyValueWrite(   "write    text    value.   ");    	compilable	  [FE]  AssertionFailedError  	3	1	replace
394	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ".trim());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite( "write  text  value ".trim());  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_verifyValueWrite( "write  text  value ".trim());	  _verifyValueWrite(   "write    text    value.   ");    	compilable	  [FE]  AssertionFailedError  	3	1	replace
395	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite(     "write    text    value     ");    _verifyValueWrite(   "write  text  value     ");  _verifyValueWrite( ",write  text  value   ");  _verifyValueWrite( "write  text  value   ");  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	_verifyValueWrite(       "write        text        value       ");        _verifyValueWrite(   "write    text    value       ");    _verifyValueWrite( ",write  text  value   ");  _verifyValueWrite( "write  text  value   ");	  	compilable	  [FE]  AssertionFailedError  	34	1	add
396	[BUG]  [BUGGY]  _verifyValueWrite(     "write    text    value     ");    _verifyValueWrite(   "write  text  value     ");  _verifyValueWrite( ",write  text  value   ");  _verifyValueWrite( "write  text  value   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite(     "write    text    value     ");    _verifyValueWrite(   "write  text  value     ");  _verifyValueWrite( ",write  text  value   ");  _verifyValueWrite( "write  text  value   ");  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_verifyValueWrite(       "write        text        value       ");        _verifyValueWrite(   "write    text    value       ");    _verifyValueWrite( ",write  text  value   ");  _verifyValueWrite( "write  text  value   ");	  	compilable	  [FE]  AssertionFailedError  	34	1	add
397	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flush  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flush  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputHead        =        0;        }        if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flush	  	non-compiled	[CE]  ';'  expected	21	None	add
398	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputHead        =        0;        }        if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT	  	non-compiled	[CE]  ')'  expected	21	None	add
399	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(len  <  SHORT  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(len  <  SHORT  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputHead        =        0;        }        if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(len  <  SHORT	  	non-compiled	[CE]  ')'  expected	21	None	add
400	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(len  <  SHORT_WRITE)  {  _flush  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(len  <  SHORT_WRITE)  {  _flush  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputHead        =        0;        }        if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  if(len  <  SHORT_WRITE)  {  _flush	  	non-compiled	[CE]  ';'  expected	21	None	add
401	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.write(   "write  text  value   ");  _writer.write( ")write  text  value   ");  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	_writer.write(   "write    text    value   ");    _writer.write( ")write  text  value   ");	  	compilable	  [FE]  AssertionFailedError  	73	1	add
402	[BUG]  [BUGGY]  _writer.write(   "write  text  value   ");  _writer.write( ")write  text  value   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.write(   "write  text  value   ");  _writer.write( ")write  text  value   ");  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.write(   "write    text    value   ");    _writer.write( ")write  text  value   ");	  	compilable	  [FE]  AssertionFailedError  	73	1	add
403	[BUG]  [BUGGY]  _writeLong(text.getChars(offset,  offset+amount,  _outputBuffer,  0));  [CE]  'void'  type  not  allowed  here  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writeLong(text.getChars(offset,  offset+amount,  _outputBuffer,  0));  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writeLong(text.getChars(offset,  offset+amount,  _outputBuffer,  0));	  _writeRawLong(text.getChars(offset,    offset+amount,    _outputBuffer,    0));    	non-compiled	[CE]  'void'  type  not  allowed  here	10	None	replace
404	[BUG]  [BUGGY]  _flushBuffer(text,  buf,  len);  [CE]  cannot  find  symbol  buf  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _flushBuffer(text,  buf,  len);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_flushBuffer(text,  buf,  len);	  _flushBuffer(text);    	non-compiled	[CE]  cannot  find  symbol  buf	66	None	replace
405	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IndexOutOfBoundsException    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >  room)  {  _outputTail  +=  len;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(amount  >  room)  {  _outputTail  +=  len;  }	          if(len    >    room)    {    _outputTail    +=    amount;    }    	compilable	  [FE]  AssertionFailedError  	47	1	replace
406	[BUG]  [BUGGY]  if(amount  >  room)  {  _outputTail  +=  len;  }  [FE]  AssertionFailedError  [FE]    IndexOutOfBoundsException    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >  room)  {  _outputTail  +=  len;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount  >  room)  {  _outputTail  +=  len;  }	          if(len    >    room)    {    _outputTail    +=    amount;    }    	compilable	  [FE]  AssertionFailedError  	47	1	replace
407	[BUG]  [BUGGY]  ||  len  <  SHORT_WRITE)  {  _outputTail  +=  amount;  }  [CE]  illegal  start  of  expression  [FE]      IndexOutOfBoundsException    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||  len  <  SHORT_WRITE)  {  _outputTail  +=  amount;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||  len  <  SHORT_WRITE)  {  _outputTail  +=  amount;  }	          if(len    >    room)    {    _outputTail    +=    amount;    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
408	[BUG]  [BUGGY]  _writer.write(text.getChars(offset,  offset+amount,  _outputBuffer,  0));  [CE]  'void'  type  not  allowed  here  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.write(text.getChars(offset,  offset+amount,  _outputBuffer,  0));  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.write(text.getChars(offset,  offset+amount,  _outputBuffer,  0));	  _writer.write(   "write    text    value   ");    	non-compiled	[CE]  'void'  type  not  allowed  here	74	None	replace
409	[BUG]  [BUGGY]  if(amount  >  0)  {  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >  0)  {  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount  >  0)  {  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    	non-compiled	[CE]  ';'  expected	40	None	replace
410	[BUG]  [BUGGY]  _writeLong(text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writeLong(text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writeLong(text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;	  _writeRawLong(text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    	non-compiled	[CE]  ')'  expected	29	None	replace
411	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flush  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flush  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputTail        =        0;        }        if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flush	  	non-compiled	[CE]  ';'  expected	39	None	add
412	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputTail        =        0;        }        if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT	  	non-compiled	[CE]  ')'  expected	39	None	add
413	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputTail        =        0;        }        if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _	  	non-compiled	[CE]  ';'  expected	39	None	add
414	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputTail        =        0;        }        if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  	  	non-compiled	[CE]  ';'  expected	39	None	add
415	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    If(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    	compilable	  [FE]  AssertionFailedError  	20	1	replace
416	[BUG]  [BUGGY]  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    If(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    	compilable	  [FE]  AssertionFailedError  	20	1	replace
417	[BUG]  [BUGGY]  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  _writer.write(text,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [CE]  no  suitable  method  found  for  write(String,int,char[],int)  [FE]              AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  _writer.write(text,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  _writer.write(text,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    If(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    	non-compiled	[CE]  no  suitable  method  found  for  write(String,int,char[],int)	20	None	replace
418	[BUG]  [BUGGY]  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  _writer.write(text,  offset+amount,  _outputBuffer,  0);  _outputTail  =  len;  }  [CE]  no  suitable  method  found  for  write(String,int,char[],int)  [FE]                AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  _writer.write(text,  offset+amount,  _outputBuffer,  0);  _outputTail  =  len;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  _writer.write(text,  offset+amount,  _outputBuffer,  0);  _outputTail  =  len;  }	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    If(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    	non-compiled	[CE]  no  suitable  method  found  for  write(String,int,char[],int)	20	None	replace
419	[BUG]  [BUGGY]  _writer.writeRawLong(text,  null);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.writeRawLong(text,  null);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.writeRawLong(text,  null);	  _writer.writeRawLong(text,    _outputBuffer);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
420	[BUG]  [BUGGY]  ||(_outputTail  <  SHORT_WRITE  &&  amount  >  0))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(_outputTail  <  SHORT_WRITE  &&  amount  >  0))  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(_outputTail  <  SHORT_WRITE  &&  amount  >  0))  {  _flushBuffer();  }	  ||(amount    <    SHORT_WRITE    &&    _outputTail    >    0))    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
421	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ",  text,  _outputBuffer,  0);  [CE]  no  suitable  method  found  for  _verifyValueWrite(String,String,char[],int)  [FE]        AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite( "write  text  value ",  text,  _outputBuffer,  0);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_verifyValueWrite( "write  text  value ",  text,  _outputBuffer,  0);	  _verifyValueWrite(   "write    text    value   ",    _outputBuffer,    0);    	non-compiled	[CE]  no  suitable  method  found  for  _verifyValueWrite(String,String,char[],int)	51	None	replace
422	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ", "write  text  value ",  _outputBuffer,  0);  [CE]  no  suitable  method  found  for  _verifyValueWrite(String,String,char[],int)  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite( "write  text  value ", "write  text  value ",  _outputBuffer,  0);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_verifyValueWrite( "write  text  value ", "write  text  value ",  _outputBuffer,  0);	  _verifyValueWrite(   "write    text    value   ",    _outputBuffer,    0);    	non-compiled	[CE]  no  suitable  method  found  for  _verifyValueWrite(String,String,char[],int)	51	None	replace
423	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	                _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	48	1	add
424	[BUG]  [BUGGY]          _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]          _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	                _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	48	1	add
425	[BUG]  [BUGGY]  if(amount  >=  0)  {  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  >=  0)  {  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount  >=  0)  {  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  }	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    }    if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputHead    =    0;    	non-compiled	[CE]  ';'  expected	25	None	replace
426	[BUG]  [BUGGY]  if(_writer!=  null)  {  _writeValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value "));  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(_writer!=  null)  {  _writeValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value "));  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(_writer!=  null)  {  _writeValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value "));  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value   "));    	non-compiled	[CE]  	38	None	replace
427	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	16	1	add
428	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	16	1	add
429	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();	  	non-compiled	[CE]  ';'  expected	16	None	add
430	[BUG]  [BUGGY]  _writer.write(text,  start,  len);  [CE]  cannot  find  symbol  start  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.write(text,  start,  len);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.write(text,  start,  len);	          _writer.write(text);    	non-compiled	[CE]  cannot  find  symbol  start	49	None	replace
431	[BUG]  [BUGGY]  _writer.getChars(offset,  offset+1,  _outputBuffer,  0);  _outputTail  =  0;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.getChars(offset,  offset+1,  _outputBuffer,  0);  _outputTail  =  0;  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.getChars(offset,  offset+1,  _outputBuffer,  0);  _outputTail  =  0;	  _writer.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
432	[BUG]  [BUGGY]  _writer.getChars(offset,  offset+alpha,  _outputBuffer,  0);  _outputTail  =  0;  [CE]  cannot  find  symbol  alpha  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.getChars(offset,  offset+alpha,  _outputBuffer,  0);  _outputTail  =  0;  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.getChars(offset,  offset+alpha,  _outputBuffer,  0);  _outputTail  =  0;	  _writer.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    	non-compiled	[CE]  cannot  find  symbol  alpha	60	None	replace
433	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flush  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flush  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputTail        =        0;        }        if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flush	  	non-compiled	[CE]  ';'  expected	41	None	add
434	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputTail        =        0;        }        if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT	  	non-compiled	[CE]  ')'  expected	41	None	add
435	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputTail        =        0;        }        if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _	  	non-compiled	[CE]  ';'  expected	41	None	add
436	[BUG]  [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  >=  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount        <        SHORT_WRITE)        {        _flushBuffer();        }        else        {        text.getChars(offset,        offset+amount,        _outputBuffer,        0);        _outputTail        =        0;        }        if(amount    >=    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+amount,    _outputBuffer,    0);    _outputTail    =    0;    }    if(amount  <  SHORT_WRITE)  {  _flushBuffer();  }  else  {  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputTail  =  0;  }  if(amount  <  SHORT_WRITE)  {  	  	non-compiled	[CE]  ';'  expected	41	None	add
437	[BUG]  [BUGGY]  _writer.write(text,  offset+anchor,  _outputBuffer,  0);  [CE]  cannot  find  symbol  anchor  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.write(text,  offset+anchor,  _outputBuffer,  0);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.write(text,  offset+anchor,  _outputBuffer,  0);	          _writer.write(text,    offset+len,    _outputBuffer,    0);    	non-compiled	[CE]  cannot  find  symbol  anchor	28	None	replace
438	[BUG]  [BUGGY]  _writer.write(text,  offset+amount,  _outputBuffer,  0,  _outputTail);  [CE]  no  suitable  method  found  for  write(String,int,char[],int,int)  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.write(text,  offset+amount,  _outputBuffer,  0,  _outputTail);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.write(text,  offset+amount,  _outputBuffer,  0,  _outputTail);	          _writer.write(text,    offset+len,    _outputBuffer,    0);    	non-compiled	[CE]  no  suitable  method  found  for  write(String,int,char[],int,int)	28	None	replace
439	[BUG]  [BUGGY]  _writer.write(text,  offset+amount,  _outputBuffer,  0,  _outputLen);  [CE]  cannot  find  symbol  _outputLen  [FE]              AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writer.write(text,  offset+amount,  _outputBuffer,  0,  _outputLen);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writer.write(text,  offset+amount,  _outputBuffer,  0,  _outputLen);	          _writer.write(text,    offset+len,    _outputBuffer,    0);    	non-compiled	[CE]  cannot  find  symbol  _outputLen	28	None	replace
440	[BUG]  [BUGGY]  ||(_outputTail  <  SHORT_WRITE  &&  amount  >  _outputEnd))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(_outputTail  <  SHORT_WRITE  &&  amount  >  _outputEnd))  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(_outputTail  <  SHORT_WRITE  &&  amount  >  _outputEnd))  {  _flushBuffer();  }	  ||(amount    <    SHORT_WRITE    &&    _outputHead)>    _outputEnd)    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
441	[BUG]  [BUGGY]  ||(_outputHead  <  SHORT_WRITE  &&  amount  >  _outputEnd))  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  ||(_outputHead  <  SHORT_WRITE  &&  amount  >  _outputEnd))  {  _flushBuffer();  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	||(_outputHead  <  SHORT_WRITE  &&  amount  >  _outputEnd))  {  _flushBuffer();  }	  ||(amount    <    SHORT_WRITE    &&    _outputHead)>    _outputEnd)    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
442	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value "  +  text,  _outputBuffer,  len);  [CE]  no  suitable  method  found  for  _verifyValueWrite(String,char[],int)  [FE]          AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite( "write  text  value "  +  text,  _outputBuffer,  len);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_verifyValueWrite( "write  text  value "  +  text,  _outputBuffer,  len);	  _verifyValueWrite(   "write    text    value   ",    _outputBuffer,    len);    	non-compiled	[CE]  no  suitable  method  found  for  _verifyValueWrite(String,char[],int)	52	None	replace
443	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ", "write  text  value ",  _outputBuffer,  len);  [CE]  no  suitable  method  found  for  _verifyValueWrite(String,String,char[],int)  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _verifyValueWrite( "write  text  value ", "write  text  value ",  _outputBuffer,  len);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_verifyValueWrite( "write  text  value ", "write  text  value ",  _outputBuffer,  len);	  _verifyValueWrite(   "write    text    value   ",    _outputBuffer,    len);    	non-compiled	[CE]  no  suitable  method  found  for  _verifyValueWrite(String,String,char[],int)	52	None	replace
444	[BUG]  [BUGGY]  if(_writer!=  null)  {  _writeValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(_writer!=  null)  {  _writeValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(_writer!=  null)  {  _writeValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ",write    text    value       ");    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
445	[BUG]  [BUGGY]  if(amount  <  SHORT_WRITE)  {  _outputBuffer();  }  else  {  text.getChars(offset,  offset+anchor,  _outputBuffer,  0);  _outputHead  =  0;  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  if(amount  <  SHORT_WRITE)  {  _outputBuffer();  }  else  {  text.getChars(offset,  offset+anchor,  _outputBuffer,  0);  _outputHead  =  0;  }  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	if(amount  <  SHORT_WRITE)  {  _outputBuffer();  }  else  {  text.getChars(offset,  offset+anchor,  _outputBuffer,  0);  _outputHead  =  0;  }	  if(amount    <    SHORT_WRITE)    {    _flushBuffer();    }    else    {    text.getChars(offset,    offset+anchor,    _outputBuffer,    0);    _outputHead    =    0;    }    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
446	[BUG]  [BUGGY]  _writeRawLong(text.substring(0,  len),  _outputHead);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      _outputTail  +=  room;  _flushBuffer();  int  offset  =  room;  int  len  =  text.length()  -  room;  while  (len  >  _outputEnd)  {  int  amount  =  _outputEnd;  text.getChars(offset,  offset+amount,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  amount;      [BUGGY]  _writeRawLong(text.substring(0,  len),  _outputHead);  [BUGGY]      offset  +=  amount;  len  -=  amount;  }  text.getChars(offset,  offset+len,  _outputBuffer,  0);  _outputHead  =  0;  _outputTail  =  len;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRawLong  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  features  len  length  offset  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	_writeRawLong(text.substring(0,  len),  _outputHead);	  _writeRawLong(text.substring(0,    len));    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
