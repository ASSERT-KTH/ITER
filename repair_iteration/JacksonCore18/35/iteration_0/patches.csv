bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';  [BUGGY]  c  =  ':';  [BUGGY]  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	c  =  ':';	break;  	compilable	  [FE]  AssertionFailedError  	69	2	replace
2	[BUG]  [BUGGY]  c  =  ':';  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';  [BUGGY]  c  =  ':';  [BUGGY]  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c  =  ':';	break;  	compilable	  [FE]  AssertionFailedError  	69	2	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	break;  	compilable	  [FE]  AssertionFailedError  	69	1	replace
4	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	break;  	compilable	  [FE]  AssertionFailedError  	69	1	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [BUGGY]  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }	break;  	compilable	  [FE]  AssertionFailedError  	69	2	replace
6	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [BUGGY]  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }	break;  	compilable	  [FE]  AssertionFailedError  	69	2	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	break;  	compilable	  [FE]  AssertionFailedError  	69	2	replace
8	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	break;  	compilable	  [FE]  AssertionFailedError  	69	2	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';  [BUGGY]    [BUGGY]  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	  	break;  	compilable	  [FE]  AssertionFailedError  	69	2	replace
10	[BUG]  [BUGGY]    [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';  [BUGGY]    [BUGGY]  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	  	break;  	compilable	  [FE]  AssertionFailedError  	69	2	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [BUGGY]  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }	break;  	compilable	  [FE]  AssertionFailedError  	69	2	replace
12	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [BUGGY]  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }	break;  	compilable	  [FE]  AssertionFailedError  	69	2	replace
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';  [BUGGY]  if(c  ==  ':')  {  break;  }  [BUGGY]  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  ':')  {  break;  }	break;  	compilable	  [FE]  AssertionFailedError  	69	2	replace
14	[BUG]  [BUGGY]  if(c  ==  ':')  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';  [BUGGY]  if(c  ==  ':')  {  break;  }  [BUGGY]  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':')  {  break;  }	break;  	compilable	  [FE]  AssertionFailedError  	69	2	replace
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';  [BUGGY]  if(c  ==  ':')break;  [BUGGY]  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  ':')break;	break;  	compilable	  [FE]  AssertionFailedError  	69	2	replace
16	[BUG]  [BUGGY]  if(c  ==  ':')break;  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';  [BUGGY]  if(c  ==  ':')break;  [BUGGY]  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':')break;	break;  	compilable	  [FE]  AssertionFailedError  	69	2	replace
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';  [BUGGY]  c  =  ':';  break;  [BUGGY]  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	c  =  ':';  break;	break;  	compilable	  [FE]  AssertionFailedError  	69	2	replace
18	[BUG]  [BUGGY]  c  =  ':';  break;  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';  [BUGGY]  c  =  ':';  break;  [BUGGY]  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c  =  ':';  break;	break;  	compilable	  [FE]  AssertionFailedError  	69	2	replace
