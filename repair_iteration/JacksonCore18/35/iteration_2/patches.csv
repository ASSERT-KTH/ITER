bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
2	[BUG]  [BUGGY]  if(c  ==  ':')  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [CE]  orphaned  case  [FE]          AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':')  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':')  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    	non-compiled	[CE]  orphaned  case	115	None	replace
3	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  If(c  ==  ':')break;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  If(c  ==  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  If(c  ==  ':')break;	  if(c    ==    ':')break;    If(c    ==    ':')break;    	non-compiled	[CE]  ';'  expected	40	None	replace
4	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(c  ==  ':')break;  If(c  ==  ':')break;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(c  ==  ':')break;  If(c  ==  ':')break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(c  ==  ':')break;  If(c  ==  ':')break;  }	  if(c    ==    ':')break;    If(c    ==    ':')break;    	non-compiled	[CE]  ';'  expected	40	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c    =    ':';    c  =  ':';  c  =  ':';  c  =  ':';  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	c        =        ':';        c    =    ':';    c  =  ':';  c  =  ':';	  	compilable	  [FE]  AssertionFailedError  	1	2	add
6	[BUG]  [BUGGY]  c    =    ':';    c  =  ':';  c  =  ':';  c  =  ':';  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c    =    ':';    c  =  ':';  c  =  ':';  c  =  ':';  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c        =        ':';        c    =    ':';    c  =  ':';  c  =  ':';	  	compilable	  [FE]  AssertionFailedError  	1	2	add
7	[BUG]  [BUGGY]  c    =    ':';    c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  c  =  ':';  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c    =    ':';    c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  c  =  ':';  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c        =        ':';        c    =    ':';    ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  c  =  ':';	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
8	[BUG]  [BUGGY]  c    =    ':';    c  =  ':';  c  =  ':';  c  =  ':';  case  JsonWriteContext.STATUS_EXPECT_NAME:  [CE]  variable  c  might  not  have  been  initialized  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c    =    ':';    c  =  ':';  c  =  ':';  c  =  ':';  case  JsonWriteContext.STATUS_EXPECT_NAME:  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c        =        ':';        c    =    ':';    c  =  ':';  c  =  ':';  case  JsonWriteContext.STATUS_EXPECT_NAME:	  	non-compiled	[CE]  variable  c  might  not  have  been  initialized	1	None	add
9	[BUG]  [BUGGY]  c    =    ':';    c  =  ':';  c  =  ':';  c  =  ':';  case  JsonWriteContext.STATUS_CANCEL_ERROR:  [CE]  cannot  find  symbol  STATUS_CANCEL_ERROR  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c    =    ':';    c  =  ':';  c  =  ':';  c  =  ':';  case  JsonWriteContext.STATUS_CANCEL_ERROR:  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c        =        ':';        c    =    ':';    c  =  ':';  c  =  ':';  case  JsonWriteContext.STATUS_CANCEL_ERROR:	  	non-compiled	[CE]  cannot  find  symbol  STATUS_CANCEL_ERROR	1	None	add
10	[BUG]  [BUGGY]  c    =    ':';    c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  c  =  ':';  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c    =    ':';    c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c        =        ':';        c    =    ':';    ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  c  =  ':';  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
11	[BUG]  [BUGGY]  if(c  ==  ':')  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':')  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':')  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status!=    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    	non-compiled	[CE]  orphaned  case	31	None	replace
12	[BUG]  [BUGGY]  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status!=    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(c  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(c  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
14	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(c  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(c  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(c  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(c!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(c!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
16	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(c!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(c!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(c!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(c  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(c  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
18	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(c  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(c  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(c  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
19	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  If(c  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  If(c  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    If(c  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }	  	non-compiled	[CE]  ';'  expected	63	None	add
20	[BUG]  [BUGGY]  if(c  ==  ':')  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [CE]  orphaned  case  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':')  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':')  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    	non-compiled	[CE]  orphaned  case	87	None	replace
21	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
22	[BUG]  [BUGGY]  if(c!=  ':')  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c!=  ':')  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c!=  ':')  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    	non-compiled	[CE]  orphaned  case	87	None	replace
23	[BUG]  [BUGGY]  ((  JsonWriteContext)_writeContext.getCurrentNodePointer()).setValue(c);  break;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ((  JsonWriteContext)_writeContext.getCurrentNodePointer()).setValue(c);  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	((  JsonWriteContext)_writeContext.getCurrentNodePointer()).setValue(c);  break;	  c    =    ':';    ((    JsonWriteContext)_writeContext.getCurrentNodePointer()).setValue(c);    break;    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
24	[BUG]  [BUGGY]  ((  JsonWriteContext)_writeContext.getCurrentNodePointer()).setValue(c,  status);  break;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ((  JsonWriteContext)_writeContext.getCurrentNodePointer()).setValue(c,  status);  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	((  JsonWriteContext)_writeContext.getCurrentNodePointer()).setValue(c,  status);  break;	  c    =    ':';    ((    JsonWriteContext)_writeContext.getCurrentNodePointer()).setValue(c);    break;    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
25	[BUG]  [BUGGY]  c  =  ':';  _writeContext.getCurrentNodePointer().setValue(c);  break;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c  =  ':';  _writeContext.getCurrentNodePointer().setValue(c);  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c  =  ':';  _writeContext.getCurrentNodePointer().setValue(c);  break;	  c    =    ':';    ((    JsonWriteContext)_writeContext.getCurrentNodePointer()).setValue(c);    break;    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
26	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(c  ==  ':'  ||  c  ==  ',')  {  break;  }  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(c  ==  ':'  ||  c  ==  ',')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(c  ==  ':'  ||  c  ==  ',')  {  break;  }	  if(c    ==    ':'    ||    c    ==    ',')    {    break;    }    	non-compiled	[CE]  orphaned  case	131	None	replace
27	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(c  ==  ':'  ||  c  ==  ',')  {  break;  }  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(c  ==  ':'  ||  c  ==  ',')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(c  ==  ':'  ||  c  ==  ',')  {  break;  }	  if(c    ==    ':'    ||    c    ==    ',')    {    break;    }    	non-compiled	[CE]  orphaned  case	131	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  &&  c  ==  ',')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  ':'  &&  c  ==  ',')  {  break;  }	  if(c    ==    ':'    ||    c    ==    ',')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	131	2	replace
29	[BUG]  [BUGGY]  if(c  ==  ':'  &&  c  ==  ',')  {  break;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  &&  c  ==  ',')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':'  &&  c  ==  ',')  {  break;  }	  if(c    ==    ':'    ||    c    ==    ',')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	131	2	replace
30	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    else    {    writeRaw(typeMsg);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
31	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    else    {    writeRaw(typeMsg);    }    	compilable	  [FE]  AssertionFailedError  	11	2	replace
32	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    else    {    writeRaw(typeMsg);    }    	compilable	  [FE]  AssertionFailedError  	11	2	replace
33	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    	compilable	  [FE]  AssertionFailedError  	117	1	replace
34	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    	compilable	  [FE]  AssertionFailedError  	117	1	replace
35	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    	compilable	  [FE]  AssertionFailedError  	117	2	replace
36	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    	compilable	  [FE]  AssertionFailedError  	117	2	replace
37	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c!=  ':'  ||  c  ==  'n'  ||  c  ==  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c!=  ':'  ||  c  ==  'n'  ||  c  ==  't')break;	  if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    't')break;    	compilable	  [FE]  AssertionFailedError  	137	1	replace
38	[BUG]  [BUGGY]  if(c!=  ':'  ||  c  ==  'n'  ||  c  ==  't')break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c!=  ':'  ||  c  ==  'n'  ||  c  ==  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c!=  ':'  ||  c  ==  'n'  ||  c  ==  't')break;	  if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    't')break;    	compilable	  [FE]  AssertionFailedError  	137	1	replace
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c!=  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  ':'  ||  c  ==  'n'  ||  c!=  't')break;	  if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    't')break;    	compilable	  [FE]  AssertionFailedError  	137	1	replace
40	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c!=  't')break;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c!=  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':'  ||  c  ==  'n'  ||  c!=  't')break;	  if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    't')break;    	compilable	  [FE]  AssertionFailedError  	137	1	replace
41	[BUG]  [BUGGY]  ((  JsonWriteContext)_writeContext).writeValue(c);  c  =  ':';  break;  [CE]  method  writeValue  in  class  JsonWriteContext  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ((  JsonWriteContext)_writeContext).writeValue(c);  c  =  ':';  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	((  JsonWriteContext)_writeContext).writeValue(c);  c  =  ':';  break;	  c    =    ':';    break;    ((    JsonWriteContext)_writeContext).writeValue(c);    c    =    ':';    break;    	non-compiled	[CE]  method  writeValue  in  class  JsonWriteContext  cannot  be  applied  to  given  types;	121	None	replace
42	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    break;    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
43	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    c    =    ':';    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	54	1	add
44	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    c    =    ':';    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	54	1	add
45	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  }  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    c    =    ':';    break;    }    if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	54	2	add
46	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  }  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  }  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    c    =    ':';    break;    }    if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	54	2	add
47	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  }  if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    c    =    ':';    break;    }    if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	54	1	add
48	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  }  if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  }  if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    c    =    ':';    break;    }    if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	54	1	add
49	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    c    =    ':';    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';	  	non-compiled	[CE]  orphaned  case	54	None	add
50	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.ST  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.ST  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COMMA)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.ST	  	non-compiled	[CE]  ')'  expected	75	None	add
51	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.ST  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.ST  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COMMA)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.ST	  	non-compiled	[CE]  ')'  expected	75	None	add
52	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.ST  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.ST  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COMMA)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.ST	  	non-compiled	[CE]  ')'  expected	75	None	add
53	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.ST  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.ST  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COMMA)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.ST	  	non-compiled	[CE]  ')'  expected	75	None	add
54	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COMMA)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.	  	non-compiled	[CE]  <identifier>  expected	75	None	add
55	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    c    =    ':';    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	103	1	add
56	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    c    =    ':';    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	103	1	add
57	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    c    =    ':';    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	103	1	add
58	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    c    =    ':';    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	103	1	add
59	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    c    =    ':';    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	103	1	add
60	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  break;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    c    =    ':';    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	103	1	add
61	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    c    =    ':';    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';	  	non-compiled	[CE]  orphaned  case	103	None	add
62	[BUG]  [BUGGY]  c  =  ':'  +  typeMsg;  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c  =  ':'  +  typeMsg;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c  =  ':'  +  typeMsg;	  c    =    ':'    +    status;    	non-compiled	[CE]  incompatible  types	105	None	replace
63	[BUG]  [BUGGY]  c  =  ':'  +  _outputBuffer.length;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c  =  ':'  +  _outputBuffer.length;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c  =  ':'  +  _outputBuffer.length;	  c    =    ':'    +    status;    	non-compiled	[CE]  possible  loss  of  precision	105	None	replace
64	[BUG]  [BUGGY]  c  =  ':'  +  c;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c  =  ':'  +  c;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c  =  ':'  +  c;	  c    =    ':'    +    status;    	non-compiled	[CE]  possible  loss  of  precision	105	None	replace
65	[BUG]  [BUGGY]  if(c  ==  ':')  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':')  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':')  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status    >=    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	83	None	replace
66	[BUG]  [BUGGY]  if(c!=  ':')  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c!=  ':')  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c!=  ':')  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status    >=    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	83	None	replace
67	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	26	1	add
68	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	26	1	add
69	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(c!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(c!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	26	1	add
70	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(c!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(c!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(c!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	26	1	add
71	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(c  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(c  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	26	1	add
72	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(c  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(c  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(c  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	26	1	add
73	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  If(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  If(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    If(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  	non-compiled	[CE]  ';'  expected	26	None	add
74	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)break;    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;	  	compilable	  [FE]  AssertionFailedError  	16	1	add
75	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)break;    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;	  	compilable	  [FE]  AssertionFailedError  	16	1	add
76	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)break;    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)break;	  	compilable	  [FE]  AssertionFailedError  	16	1	add
77	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)break;    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)break;	  	compilable	  [FE]  AssertionFailedError  	16	1	add
78	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)break;    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)break;	  	compilable	  [FE]  AssertionFailedError  	16	1	add
79	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)break;    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)break;	  	compilable	  [FE]  AssertionFailedError  	16	1	add
80	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  If(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  If(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)break;    If(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;	  	non-compiled	[CE]  ';'  expected	16	None	add
81	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_EXPECT_NAME)        {        break;        }        if(status!=    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.	  	non-compiled	[CE]  <identifier>  expected	80	None	add
82	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.STAT  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.STAT  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_EXPECT_NAME)        {        break;        }        if(status!=    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.STAT	  	non-compiled	[CE]  ')'  expected	80	None	add
83	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.ST  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.ST  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_EXPECT_NAME)        {        break;        }        if(status!=    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.ST	  	non-compiled	[CE]  ')'  expected	80	None	add
84	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_EXPECT_NAME)        {        break;        }        if(status!=    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext	  	non-compiled	[CE]  ')'  expected	80	None	add
85	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_EXPECT_NAME)        {        break;        }        if(status!=    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.	  	non-compiled	[CE]  <identifier>  expected	80	None	add
86	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);	  c    =    ':';    break;    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
87	[BUG]  [BUGGY]  c  =  ':';  break;  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  writeRaw(typeMsg);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c  =  ':';  break;  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  writeRaw(typeMsg);  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c  =  ':';  break;  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  writeRaw(typeMsg);	  c    =    ':';    break;    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
88	[BUG]  [BUGGY]  c  =  ':';  break;  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c  =  ':';  break;  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg);  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c  =  ':';  break;  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg);	  c    =    ':';    break;    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
89	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c!=  ':'  ||  c  ==  '-')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c!=  ':'  ||  c  ==  '-')break;	  if(c    ==    ':'    ||    c    ==    '-')break;    	compilable	  [FE]  AssertionFailedError  	99	1	replace
90	[BUG]  [BUGGY]  if(c!=  ':'  ||  c  ==  '-')break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c!=  ':'  ||  c  ==  '-')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c!=  ':'  ||  c  ==  '-')break;	  if(c    ==    ':'    ||    c    ==    '-')break;    	compilable	  [FE]  AssertionFailedError  	99	1	replace
91	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  &&  c  ==  '-')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  ':'  &&  c  ==  '-')break;	  if(c    ==    ':'    ||    c    ==    '-')break;    	compilable	  [FE]  AssertionFailedError  	99	2	replace
92	[BUG]  [BUGGY]  if(c  ==  ':'  &&  c  ==  '-')break;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  &&  c  ==  '-')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':'  &&  c  ==  '-')break;	  if(c    ==    ':'    ||    c    ==    '-')break;    	compilable	  [FE]  AssertionFailedError  	99	2	replace
93	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }	  	compilable	  [FE]  AssertionFailedError  	7	2	add
94	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }	  	compilable	  [FE]  AssertionFailedError  	7	2	add
95	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }	  	compilable	  [FE]  AssertionFailedError  	7	2	add
96	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }	  	compilable	  [FE]  AssertionFailedError  	7	2	add
97	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }	  	compilable	  [FE]  AssertionFailedError  	7	2	add
98	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }	  	compilable	  [FE]  AssertionFailedError  	7	2	add
99	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	116	1	add
100	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	116	1	add
101	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	116	1	add
102	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	116	1	add
103	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	116	1	add
104	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	116	1	add
105	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	116	1	add
106	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	116	1	add
107	[BUG]  [BUGGY]  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status!=    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
108	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  (c  =  ':';  }  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  (c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  (c  =  ':';  }	  c    =    ':';    (c    =    ':';    	non-compiled	[CE]  ')'  expected	94	None	replace
109	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  (c  =  ':';  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  (c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  (c  =  ':';  }	  c    =    ':';    (c    =    ':';    	non-compiled	[CE]  ')'  expected	94	None	replace
110	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  (c  =  ':';  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  (c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  (c  =  ':';  }	  c    =    ':';    (c    =    ':';    	non-compiled	[CE]  ')'  expected	94	None	replace
111	[BUG]  [BUGGY]  char  c  =  ':';  [CE]  variable  c  is  already  defined  in  method  _verifyValueWrite(String)  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  char  c  =  ':';  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	char  c  =  ':';	  c    =    ':';    int    c    =    ':';    	non-compiled	[CE]  variable  c  is  already  defined  in  method  _verifyValueWrite(String)	93	None	replace
112	[BUG]  [BUGGY]  int  c  =  ':';  [CE]  variable  c  is  already  defined  in  method  _verifyValueWrite(String)  [FE]          AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  int  c  =  ':';  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	int  c  =  ':';	  c    =    ':';    int    c    =    ':';    	non-compiled	[CE]  variable  c  is  already  defined  in  method  _verifyValueWrite(String)	93	None	replace
113	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA;	  c    =    ':';    int    c    =    ':';    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
114	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.ST  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.ST  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_NAME)        {        break;        }        if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.ST	  	non-compiled	[CE]  ')'  expected	48	None	add
115	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STAT  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STAT  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_NAME)        {        break;        }        if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STAT	  	non-compiled	[CE]  ')'  expected	48	None	add
116	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_NAME)        {        break;        }        if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.	  	non-compiled	[CE]  <identifier>  expected	48	None	add
117	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_NAME)        {        break;        }        if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext	  	non-compiled	[CE]  ')'  expected	48	None	add
118	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_NAME)        {        break;        }        if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	48	1	add
119	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_NAME)        {        break;        }        if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	48	1	add
120	[BUG]  [BUGGY]  if(c!=  ':')  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c!=  ':')  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c!=  ':')  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    	non-compiled	[CE]  orphaned  case	29	None	replace
121	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  }	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    c    =    ':';    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
122	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  }	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    c    =    ':';    }    	compilable	  [FE]  AssertionFailedError  	107	2	replace
123	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  }	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    c    =    ':';    }    	compilable	  [FE]  AssertionFailedError  	107	2	replace
124	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')break;    if(c  ==  ':')break;  if(c  ==  ':')break;  if(c  ==  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c        ==        ':')break;        if(c    ==    ':')break;    if(c  ==  ':')break;  if(c  ==  ':')break;	  	compilable	  [FE]  AssertionFailedError  	34	1	add
125	[BUG]  [BUGGY]  if(c    ==    ':')break;    if(c  ==  ':')break;  if(c  ==  ':')break;  if(c  ==  ':')break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')break;    if(c  ==  ':')break;  if(c  ==  ':')break;  if(c  ==  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c        ==        ':')break;        if(c    ==    ':')break;    if(c  ==  ':')break;  if(c  ==  ':')break;	  	compilable	  [FE]  AssertionFailedError  	34	1	add
126	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')break;    if(c  ==  ':')break;  if(c!=  ':')break;  if(c  ==  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c        ==        ':')break;        if(c    ==    ':')break;    if(c!=  ':')break;  if(c  ==  ':')break;	  	compilable	  [FE]  AssertionFailedError  	34	1	add
127	[BUG]  [BUGGY]  if(c    ==    ':')break;    if(c  ==  ':')break;  if(c!=  ':')break;  if(c  ==  ':')break;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')break;    if(c  ==  ':')break;  if(c!=  ':')break;  if(c  ==  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c        ==        ':')break;        if(c    ==    ':')break;    if(c!=  ':')break;  if(c  ==  ':')break;	  	compilable	  [FE]  AssertionFailedError  	34	1	add
128	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')break;    if(c  ==  ':')break;  if(c  ==  ':')break;  if(c!=  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c        ==        ':')break;        if(c    ==    ':')break;    if(c  ==  ':')break;  if(c!=  ':')break;	  	compilable	  [FE]  AssertionFailedError  	34	1	add
129	[BUG]  [BUGGY]  if(c    ==    ':')break;    if(c  ==  ':')break;  if(c  ==  ':')break;  if(c!=  ':')break;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')break;    if(c  ==  ':')break;  if(c  ==  ':')break;  if(c!=  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c        ==        ':')break;        if(c    ==    ':')break;    if(c  ==  ':')break;  if(c!=  ':')break;	  	compilable	  [FE]  AssertionFailedError  	34	1	add
130	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')break;    if(c  ==  ':')break;  if(c  >=  ':')break;  if(c  ==  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c        ==        ':')break;        if(c    ==    ':')break;    if(c  >=  ':')break;  if(c  ==  ':')break;	  	compilable	  [FE]  AssertionFailedError  	34	1	add
131	[BUG]  [BUGGY]  if(c    ==    ':')break;    if(c  ==  ':')break;  if(c  >=  ':')break;  if(c  ==  ':')break;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')break;    if(c  ==  ':')break;  if(c  >=  ':')break;  if(c  ==  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c        ==        ':')break;        if(c    ==    ':')break;    if(c  >=  ':')break;  if(c  ==  ':')break;	  	compilable	  [FE]  AssertionFailedError  	34	1	add
132	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  if(c  >=  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  if(c  >=  ':')break;	  if(c    ==    ':')break;    if(c    >=    ':')break;    	compilable	  [FE]  AssertionFailedError  	39	2	replace
133	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  if(c  >=  ':')break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  if(c  >=  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  if(c  >=  ':')break;	  if(c    ==    ':')break;    if(c    >=    ':')break;    	compilable	  [FE]  AssertionFailedError  	39	2	replace
134	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  if(c!=  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  if(c!=  ':')break;	  if(c    ==    ':')break;    if(c    >=    ':')break;    	compilable	  [FE]  AssertionFailedError  	39	1	replace
135	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  if(c!=  ':')break;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  if(c!=  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  if(c!=  ':')break;	  if(c    ==    ':')break;    if(c    >=    ':')break;    	compilable	  [FE]  AssertionFailedError  	39	1	replace
136	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  if(c  ==  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  if(c  ==  ':')break;	  if(c    ==    ':')break;    if(c    >=    ':')break;    	compilable	  [FE]  AssertionFailedError  	39	2	replace
137	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  if(c  ==  ':')break;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  if(c  ==  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  if(c  ==  ':')break;	  if(c    ==    ':')break;    if(c    >=    ':')break;    	compilable	  [FE]  AssertionFailedError  	39	2	replace
138	[BUG]  [BUGGY]  ||  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }	  ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
139	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_ERROR)  {  break;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_ERROR)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_ERROR)  {  break;  }	  ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
140	[BUG]  [BUGGY]  ||  status!=  JsonWriteContext.STATUS_EXPECT_NAME);  break;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status!=  JsonWriteContext.STATUS_EXPECT_NAME);  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status!=  JsonWriteContext.STATUS_EXPECT_NAME);  break;	          ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME);    break;    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
141	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON);  break;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON);  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON);  break;	          ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME);    break;    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
142	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME,  c);  break;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME,  c);  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME,  c);  break;	          ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME);    break;    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
143	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.ST  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.ST  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_NAME)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.ST	  	non-compiled	[CE]  ')'  expected	52	None	add
144	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.STAT  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.STAT  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_NAME)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.STAT	  	non-compiled	[CE]  ')'  expected	52	None	add
145	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext.ST  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext.ST  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_NAME)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext.ST	  	non-compiled	[CE]  ')'  expected	52	None	add
146	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_NAME)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.	  	non-compiled	[CE]  <identifier>  expected	52	None	add
147	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STAT  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STAT  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_NAME)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STAT	  	non-compiled	[CE]  ')'  expected	52	None	add
148	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    c    =    ':';    break;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
149	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  >=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c        ==        ':')        {        break;        }        if(c    >=    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	45	1	add
150	[BUG]  [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  >=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  >=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c        ==        ':')        {        break;        }        if(c    >=    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	45	1	add
151	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  >=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c        ==        ':')        {        break;        }        if(c    >=    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c!=  ':')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	45	1	add
152	[BUG]  [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  >=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  >=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c        ==        ':')        {        break;        }        if(c    >=    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c!=  ':')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	45	1	add
153	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  >=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c        ==        ':')        {        break;        }        if(c    >=    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c!=  ':')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	45	1	add
154	[BUG]  [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  >=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  >=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c        ==        ':')        {        break;        }        if(c    >=    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c!=  ':')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	45	1	add
155	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  >=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c        ==        ':')        {        break;        }        if(c    >=    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	45	1	add
156	[BUG]  [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  >=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  >=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c        ==        ':')        {        break;        }        if(c    >=    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	45	1	add
157	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  >=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c        ==        ':')        {        break;        }        if(c    >=    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	45	1	add
158	[BUG]  [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  >=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  >=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c        ==        ':')        {        break;        }        if(c    >=    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	45	1	add
159	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(status);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(status);  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(status);  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    else    {    writeRaw(status);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
160	[BUG]  [BUGGY]  c  =  ':';  }  else  {  writeRaw(status);  }  [CE]  'else'  without  'if'  [FE]            AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c  =  ':';  }  else  {  writeRaw(status);  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c  =  ':';  }  else  {  writeRaw(status);  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    else    {    writeRaw(status);    }    	non-compiled	[CE]  'else'  without  'if'	9	None	replace
161	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(':';  }  else  {  writeRaw(status);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(':';  }  else  {  writeRaw(status);  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(':';  }  else  {  writeRaw(status);  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    else    {    writeRaw(status);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
162	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(c  ==  ':')  {  break;  }  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(c  ==  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(c  ==  ':')  {  break;  }	  if(c    ==    ':')    {    break;    }    if(c    >=    ':')    {    break;    }    	non-compiled	[CE]  orphaned  case	46	None	replace
163	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(c  ==  ':')  {  break;  }  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(c  ==  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(c  ==  ':')  {  break;  }	  if(c    ==    ':')    {    break;    }    if(c    >=    ':')    {    break;    }    	non-compiled	[CE]  orphaned  case	46	None	replace
164	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(c  ==  ':')  {  break;  }  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(c  ==  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(c  ==  ':')  {  break;  }	  if(c    ==    ':')    {    break;    }    if(c    >=    ':')    {    break;    }    	non-compiled	[CE]  orphaned  case	46	None	replace
165	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_CONTINUATION)  {  if(c  ==  ':')  {  break;  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_CONTINUATION)  {  if(c  ==  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_CONTINUATION)  {  if(c  ==  ':')  {  break;  }	  if(c    ==    ':')    {    break;    }    if(c    >=    ':')    {    break;    }    	non-compiled	[CE]  orphaned  case	46	None	replace
166	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)break;  if(c  ==  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)break;  if(c  ==  ':')break;	  if(c    ==    ':')break;    if(c    {    ':')break;    	compilable	  [FE]  AssertionFailedError  	100	1	replace
167	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)break;  if(c  ==  ':')break;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)break;  if(c  ==  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)break;  if(c  ==  ':')break;	  if(c    ==    ':')break;    if(c    {    ':')break;    	compilable	  [FE]  AssertionFailedError  	100	1	replace
168	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(c  ==  ':')break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(c  ==  ':')break;  }	  if(c    ==    ':')break;    if(c    {    ':')break;    	compilable	  [FE]  AssertionFailedError  	100	2	replace
169	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(c  ==  ':')break;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(c  ==  ':')break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(c  ==  ':')break;  }	  if(c    ==    ':')break;    if(c    {    ':')break;    	compilable	  [FE]  AssertionFailedError  	100	2	replace
170	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  writeRaw(typeMsg);  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	writeRaw(typeMsg);	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg);    }    	compilable	  [FE]  AssertionFailedError  	57	2	replace
171	[BUG]  [BUGGY]  writeRaw(typeMsg);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  writeRaw(typeMsg);  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	writeRaw(typeMsg);	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg);    }    	compilable	  [FE]  AssertionFailedError  	57	2	replace
172	[BUG]  [BUGGY]  _writeRaw(typeMsg);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  _writeRaw(typeMsg);  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	_writeRaw(typeMsg);	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg);    }    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
173	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)break;    	compilable	  [FE]  AssertionFailedError  	17	2	replace
174	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)break;    	compilable	  [FE]  AssertionFailedError  	17	2	replace
175	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)break;	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)break;    	compilable	  [FE]  AssertionFailedError  	17	2	replace
176	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)break;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)break;	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)break;    	compilable	  [FE]  AssertionFailedError  	17	2	replace
177	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)break;	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)break;    	compilable	  [FE]  AssertionFailedError  	17	1	replace
178	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)break;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)break;	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)break;    	compilable	  [FE]  AssertionFailedError  	17	1	replace
179	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  if(status!=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    	compilable	  [FE]  AssertionFailedError  	119	1	replace
180	[BUG]  [BUGGY]  if(c!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  if(status!=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    	compilable	  [FE]  AssertionFailedError  	119	1	replace
181	[BUG]  [BUGGY]  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  if(status!=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
182	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)break;    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;	  	compilable	  [FE]  AssertionFailedError  	18	1	add
183	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)break;    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;	  	compilable	  [FE]  AssertionFailedError  	18	1	add
184	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)break;    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)break;	  	compilable	  [FE]  AssertionFailedError  	18	1	add
185	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)break;    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)break;	  	compilable	  [FE]  AssertionFailedError  	18	1	add
186	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)break;    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)break;	  	compilable	  [FE]  AssertionFailedError  	18	1	add
187	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)break;    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)break;	  	compilable	  [FE]  AssertionFailedError  	18	1	add
188	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)break;    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;	  	compilable	  [FE]  AssertionFailedError  	18	1	add
189	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)break;    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;	  	compilable	  [FE]  AssertionFailedError  	18	1	add
190	[BUG]  [BUGGY]  ((  JsonWriteContext)_writeContext.getCurrentContext()).writeString(c);  break;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ((  JsonWriteContext)_writeContext.getCurrentContext()).writeString(c);  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	((  JsonWriteContext)_writeContext.getCurrentContext()).writeString(c);  break;	  c    =    ':';    ((    JsonWriteContext)_writeContext.getCurrentContext()).writeString(typeMsg);    break;    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
191	[BUG]  [BUGGY]  ((  JsonWriteContext)_writeContext.getCurrentContext()).writeString(typeMsg);  break;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ((  JsonWriteContext)_writeContext.getCurrentContext()).writeString(typeMsg);  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	((  JsonWriteContext)_writeContext.getCurrentContext()).writeString(typeMsg);  break;	  c    =    ':';    ((    JsonWriteContext)_writeContext.getCurrentContext()).writeString(typeMsg);    break;    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
192	[BUG]  [BUGGY]  c  =  ':';  ((  JsonWriteContext)_writeContext.getCurrentContext()).writeString(typeMsg,  status);  break;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c  =  ':';  ((  JsonWriteContext)_writeContext.getCurrentContext()).writeString(typeMsg,  status);  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c  =  ':';  ((  JsonWriteContext)_writeContext.getCurrentContext()).writeString(typeMsg,  status);  break;	  c    =    ':';    ((    JsonWriteContext)_writeContext.getCurrentContext()).writeString(typeMsg);    break;    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
193	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ',';  break;  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ',';  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ',';  break;	  if(c    ==    ':')break;    if(c    ==    ':')break;    	non-compiled	[CE]  ')'  expected	35	None	replace
194	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  ':')break;  if(c  ==  ':'  ||  c  ==  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    ':')break;    if(c  ==  ':'  ||  c  ==  ':')break;	  	compilable	  [FE]  AssertionFailedError  	134	1	add
195	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  ':')break;  if(c  ==  ':'  ||  c  ==  ':')break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  ':')break;  if(c  ==  ':'  ||  c  ==  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    ':')break;    if(c  ==  ':'  ||  c  ==  ':')break;	  	compilable	  [FE]  AssertionFailedError  	134	1	add
196	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  ':')break;  if(c!=  ':'  ||  c  ==  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    ':')break;    if(c!=  ':'  ||  c  ==  ':')break;	  	compilable	  [FE]  AssertionFailedError  	134	1	add
197	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  ':')break;  if(c!=  ':'  ||  c  ==  ':')break;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  ':')break;  if(c!=  ':'  ||  c  ==  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    ':')break;    if(c!=  ':'  ||  c  ==  ':')break;	  	compilable	  [FE]  AssertionFailedError  	134	1	add
198	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  ':')break;  if(c  ==  ':'  ||  c!=  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    ':')break;    if(c  ==  ':'  ||  c!=  ':')break;	  	compilable	  [FE]  AssertionFailedError  	134	1	add
199	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  ':')break;  if(c  ==  ':'  ||  c!=  ':')break;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  ':')break;  if(c  ==  ':'  ||  c!=  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    ':')break;    if(c  ==  ':'  ||  c!=  ':')break;	  	compilable	  [FE]  AssertionFailedError  	134	1	add
200	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  ':')break;  if(c  >=  ':'  ||  c  ==  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    ':')break;    if(c  >=  ':'  ||  c  ==  ':')break;	  	compilable	  [FE]  AssertionFailedError  	134	1	add
201	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  ':')break;  if(c  >=  ':'  ||  c  ==  ':')break;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  ':')break;  if(c  >=  ':'  ||  c  ==  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    ':')break;    if(c  >=  ':'  ||  c  ==  ':')break;	  	compilable	  [FE]  AssertionFailedError  	134	1	add
202	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)break;    	compilable	  [FE]  AssertionFailedError  	19	1	replace
203	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)break;    	compilable	  [FE]  AssertionFailedError  	19	1	replace
204	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)break;    	compilable	  [FE]  AssertionFailedError  	19	2	replace
205	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)break;    	compilable	  [FE]  AssertionFailedError  	19	2	replace
206	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
207	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')break;  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')break;    if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')break;	  	compilable	  [FE]  AssertionFailedError  	138	1	add
208	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')break;  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')break;  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')break;    if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')break;	  	compilable	  [FE]  AssertionFailedError  	138	1	add
209	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')break;  if(c  ==  ':'  ||  c!=  'n'  ||  c  ==  'r'  ||  c  ==  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')break;    if(c  ==  ':'  ||  c!=  'n'  ||  c  ==  'r'  ||  c  ==  't')break;	  	compilable	  [FE]  AssertionFailedError  	138	1	add
210	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')break;  if(c  ==  ':'  ||  c!=  'n'  ||  c  ==  'r'  ||  c  ==  't')break;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')break;  if(c  ==  ':'  ||  c!=  'n'  ||  c  ==  'r'  ||  c  ==  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')break;    if(c  ==  ':'  ||  c!=  'n'  ||  c  ==  'r'  ||  c  ==  't')break;	  	compilable	  [FE]  AssertionFailedError  	138	1	add
211	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')break;  if(c  ==  ':'  ||  c  ==  'n'  ||  c!=  'r'  ||  c  ==  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')break;    if(c  ==  ':'  ||  c  ==  'n'  ||  c!=  'r'  ||  c  ==  't')break;	  	compilable	  [FE]  AssertionFailedError  	138	1	add
212	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')break;  if(c  ==  ':'  ||  c  ==  'n'  ||  c!=  'r'  ||  c  ==  't')break;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')break;  if(c  ==  ':'  ||  c  ==  'n'  ||  c!=  'r'  ||  c  ==  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')break;    if(c  ==  ':'  ||  c  ==  'n'  ||  c!=  'r'  ||  c  ==  't')break;	  	compilable	  [FE]  AssertionFailedError  	138	1	add
213	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')break;  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')break;    if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  't')break;	  	compilable	  [FE]  AssertionFailedError  	138	1	add
214	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')break;  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  't')break;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')break;  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')break;    if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  't')break;	  	compilable	  [FE]  AssertionFailedError  	138	1	add
215	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)    {    c    =    ':';    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	69	1	add
216	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)    {    c    =    ':';    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	69	1	add
217	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)    {    c    =    ':';    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	69	1	add
218	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)    {    c    =    ':';    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	69	1	add
219	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)    {    c    =    ':';    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	69	1	add
220	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  break;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)    {    c    =    ':';    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	69	1	add
221	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)    {    c    =    ':';    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';	  	non-compiled	[CE]  orphaned  case	69	None	add
222	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c        ==        ':')        {        break;        }        if(c    ==    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	41	1	add
223	[BUG]  [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c        ==        ':')        {        break;        }        if(c    ==    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	41	1	add
224	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c        ==        ':')        {        break;        }        if(c    ==    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	41	1	add
225	[BUG]  [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c        ==        ':')        {        break;        }        if(c    ==    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	41	1	add
226	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c        ==        ':')        {        break;        }        if(c    ==    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	41	1	add
227	[BUG]  [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c        ==        ':')        {        break;        }        if(c    ==    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	41	1	add
228	[BUG]  [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c        ==        ':')        {        break;        }        if(c    ==    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;	  	non-compiled	[CE]  orphaned  case	41	None	add
229	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c        ==        ':')        {        break;        }        if(c    ==    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	41	1	add
230	[BUG]  [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c        ==        ':')        {        break;        }        if(c    ==    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	41	1	add
231	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  if(c  ==  ':')  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  if(c  ==  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  if(c  ==  ':')  {  break;  }	  if(c    ==    ':')    {    break;    }    If(c    ==    ':')    {    break;    }    	non-compiled	[CE]  orphaned  case	47	None	replace
232	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COLON)  {  if(c  ==  ':')  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COLON)  {  if(c  ==  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_COLON)  {  if(c  ==  ':')  {  break;  }	  if(c    ==    ':')    {    break;    }    If(c    ==    ':')    {    break;    }    	non-compiled	[CE]  orphaned  case	47	None	replace
233	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(c!=  ':')  {  break;  }  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(c!=  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(c!=  ':')  {  break;  }	  if(c    ==    ':')    {    break;    }    if(c!=    ':')    {    break;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
234	[BUG]  [BUGGY]  if(c!=  ':')  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c!=  ':')  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c!=  ':')  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    	non-compiled	[CE]  orphaned  case	72	None	replace
235	[BUG]  [BUGGY]  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ':';  break;  [CE]  duplicate  case  label  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ':';  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ':';  break;	          case    JsonWriteContext.STATUS_UNKNOWN:    c    =    ':';    break;    	non-compiled	[CE]  duplicate  case  label	110	None	replace
236	[BUG]  [BUGGY]  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  [CE]  duplicate  case  label  [FE]          AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;	          case    JsonWriteContext.STATUS_UNKNOWN:    c    =    ':';    break;    	non-compiled	[CE]  duplicate  case  label	110	None	replace
237	[BUG]  [BUGGY]  c  =  ':';  break;  ((  JsonWriteContext)_writeContext).writeString(typeMsg);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c  =  ':';  break;  ((  JsonWriteContext)_writeContext).writeString(typeMsg);  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c  =  ':';  break;  ((  JsonWriteContext)_writeContext).writeString(typeMsg);	  c    =    ':';    break;    ((    JsonWriteContext)_writeContext).writeString(typeMsg);    c    =    ':';    break;    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
238	[BUG]  [BUGGY]  ((  JsonWriteContext)_writeContext).writeString(typeMsg);  c  =  ':';  break;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ((  JsonWriteContext)_writeContext).writeString(typeMsg);  c  =  ':';  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	((  JsonWriteContext)_writeContext).writeString(typeMsg);  c  =  ':';  break;	  c    =    ':';    break;    ((    JsonWriteContext)_writeContext).writeString(typeMsg);    c    =    ':';    break;    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
239	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  ',')  {  break;  }  if(c  ==  ':'  ||  c  ==  ',')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    ',')    {    break;    }    if(c  ==  ':'  ||  c  ==  ',')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	130	1	add
240	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  ',')  {  break;  }  if(c  ==  ':'  ||  c  ==  ',')  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  ',')  {  break;  }  if(c  ==  ':'  ||  c  ==  ',')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    ',')    {    break;    }    if(c  ==  ':'  ||  c  ==  ',')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	130	1	add
241	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  ',')  {  break;  }  if(c!=  ':'  ||  c  ==  ',')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    ',')    {    break;    }    if(c!=  ':'  ||  c  ==  ',')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	130	1	add
242	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  ',')  {  break;  }  if(c!=  ':'  ||  c  ==  ',')  {  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  ',')  {  break;  }  if(c!=  ':'  ||  c  ==  ',')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    ',')    {    break;    }    if(c!=  ':'  ||  c  ==  ',')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	130	1	add
243	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  ',')  {  break;  }  if(c  ==  ':'  ||  c  ==  ',')  {  break;  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  ',')  {  break;  }  if(c  ==  ':'  ||  c  ==  ',')  {  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    ',')    {    break;    }    if(c  ==  ':'  ||  c  ==  ',')  {  break;	  	non-compiled	[CE]  orphaned  case	130	None	add
244	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  ',')  {  break;  }  if(c  ==  ':'  ||  c!=  ',')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    ',')    {    break;    }    if(c  ==  ':'  ||  c!=  ',')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	130	1	add
245	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  ',')  {  break;  }  if(c  ==  ':'  ||  c!=  ',')  {  break;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  ',')  {  break;  }  if(c  ==  ':'  ||  c!=  ',')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    ',')    {    break;    }    if(c  ==  ':'  ||  c!=  ',')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	130	1	add
246	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c!=  ':'  ||  c  ==  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c!=  ':'  ||  c  ==  ':')break;	  if(c    ==    ':'    ||    c    ==    ':')break;    	compilable	  [FE]  AssertionFailedError  	135	1	replace
247	[BUG]  [BUGGY]  if(c!=  ':'  ||  c  ==  ':')break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c!=  ':'  ||  c  ==  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c!=  ':'  ||  c  ==  ':')break;	  if(c    ==    ':'    ||    c    ==    ':')break;    	compilable	  [FE]  AssertionFailedError  	135	1	replace
248	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  &&  c  ==  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  ':'  &&  c  ==  ':')break;	  if(c    ==    ':'    ||    c    ==    ':')break;    	compilable	  [FE]  AssertionFailedError  	135	2	replace
249	[BUG]  [BUGGY]  if(c  ==  ':'  &&  c  ==  ':')break;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  &&  c  ==  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':'  &&  c  ==  ':')break;	  if(c    ==    ':'    ||    c    ==    ':')break;    	compilable	  [FE]  AssertionFailedError  	135	2	replace
250	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  writeRaw(c);  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	writeRaw(c);	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(c);    }    	compilable	  [FE]  AssertionFailedError  	59	2	replace
251	[BUG]  [BUGGY]  writeRaw(c);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  writeRaw(c);  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	writeRaw(c);	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(c);    }    	compilable	  [FE]  AssertionFailedError  	59	2	replace
252	[BUG]  [BUGGY]  _writeRaw(c);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  _writeRaw(c);  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	_writeRaw(c);	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(c);    }    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
253	[BUG]  [BUGGY]  Writer  w  =  _writeContext.getWriter();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  Writer  w  =  _writeContext.getWriter();  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	Writer  w  =  _writeContext.getWriter();	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(c);    }    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
254	[BUG]  [BUGGY]  Writer  writer  =  _writeContext.getWriter();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  Writer  writer  =  _writeContext.getWriter();  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	Writer  writer  =  _writeContext.getWriter();	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(c);    }    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
255	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.ST  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.ST  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COLON)        {        break;        }        if(status!=    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.ST	  	non-compiled	[CE]  ')'  expected	30	None	add
256	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.ST  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.ST  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COLON)        {        break;        }        if(status!=    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.ST	  	non-compiled	[CE]  ')'  expected	30	None	add
257	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.STAT  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.STAT  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COLON)        {        break;        }        if(status!=    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.STAT	  	non-compiled	[CE]  ')'  expected	30	None	add
258	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COLON)        {        break;        }        if(status!=    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext	  	non-compiled	[CE]  ')'  expected	30	None	add
259	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COLON)        {        break;        }        if(status!=    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.	  	non-compiled	[CE]  <identifier>  expected	30	None	add
260	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')break;    if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;	  	compilable	  [FE]  AssertionFailedError  	20	1	add
261	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')break;    if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;	  	compilable	  [FE]  AssertionFailedError  	20	1	add
262	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;  if(c  ==  ':'  ||  c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')break;    if(c  ==  ':'  ||  c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;	  	compilable	  [FE]  AssertionFailedError  	20	1	add
263	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;  if(c  ==  ':'  ||  c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;  if(c  ==  ':'  ||  c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')break;    if(c  ==  ':'  ||  c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;	  	compilable	  [FE]  AssertionFailedError  	20	1	add
264	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;  if(c  ==  ':'  ||  c  ==  'n'  ||  c!=  'r'  ||  c  ==  'n'  ||  c  ==  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')break;    if(c  ==  ':'  ||  c  ==  'n'  ||  c!=  'r'  ||  c  ==  'n'  ||  c  ==  't')break;	  	compilable	  [FE]  AssertionFailedError  	20	1	add
265	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;  if(c  ==  ':'  ||  c  ==  'n'  ||  c!=  'r'  ||  c  ==  'n'  ||  c  ==  't')break;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;  if(c  ==  ':'  ||  c  ==  'n'  ||  c!=  'r'  ||  c  ==  'n'  ||  c  ==  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')break;    if(c  ==  ':'  ||  c  ==  'n'  ||  c!=  'r'  ||  c  ==  'n'  ||  c  ==  't')break;	  	compilable	  [FE]  AssertionFailedError  	20	1	add
266	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')break;    if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  't')break;	  	compilable	  [FE]  AssertionFailedError  	20	1	add
267	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  't')break;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')break;    if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  't')break;	  	compilable	  [FE]  AssertionFailedError  	20	1	add
268	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  }	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    c    =    ':';    break;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
269	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    c    =    ':';    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	67	1	add
270	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    c    =    ':';    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	67	1	add
271	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    c    =    ':';    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	67	2	add
272	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    c    =    ':';    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	67	2	add
273	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    c    =    ':';    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	67	1	add
274	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    c    =    ':';    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	67	1	add
275	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    c    =    ':';    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';	  	non-compiled	[CE]  orphaned  case	67	None	add
276	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '+')  {  break;  }  if(c  ==  ':'  ||  c  ==  '+')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    '+')    {    break;    }    if(c  ==  ':'  ||  c  ==  '+')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
277	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '+')  {  break;  }  if(c  ==  ':'  ||  c  ==  '+')  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '+')  {  break;  }  if(c  ==  ':'  ||  c  ==  '+')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    '+')    {    break;    }    if(c  ==  ':'  ||  c  ==  '+')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
278	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '+')  {  break;  }  if(c!=  ':'  ||  c  ==  '+')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    '+')    {    break;    }    if(c!=  ':'  ||  c  ==  '+')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
279	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '+')  {  break;  }  if(c!=  ':'  ||  c  ==  '+')  {  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '+')  {  break;  }  if(c!=  ':'  ||  c  ==  '+')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    '+')    {    break;    }    if(c!=  ':'  ||  c  ==  '+')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
280	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '+')  {  break;  }  if(c  ==  ':'  ||  c!=  '+')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    '+')    {    break;    }    if(c  ==  ':'  ||  c!=  '+')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
281	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '+')  {  break;  }  if(c  ==  ':'  ||  c!=  '+')  {  break;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '+')  {  break;  }  if(c  ==  ':'  ||  c!=  '+')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    '+')    {    break;    }    if(c  ==  ':'  ||  c!=  '+')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
282	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '+')  {  break;  }  if(c  >=  ':'  ||  c  ==  '+')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    '+')    {    break;    }    if(c  >=  ':'  ||  c  ==  '+')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
283	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '+')  {  break;  }  if(c  >=  ':'  ||  c  ==  '+')  {  break;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '+')  {  break;  }  if(c  >=  ':'  ||  c  ==  '+')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    '+')    {    break;    }    if(c  >=  ':'  ||  c  ==  '+')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
284	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')break;  if(c  ==  ':'  ||  c  ==  '-')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    '-')break;    if(c  ==  ':'  ||  c  ==  '-')break;	  	compilable	  [FE]  AssertionFailedError  	98	1	add
285	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')break;  if(c  ==  ':'  ||  c  ==  '-')break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')break;  if(c  ==  ':'  ||  c  ==  '-')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    '-')break;    if(c  ==  ':'  ||  c  ==  '-')break;	  	compilable	  [FE]  AssertionFailedError  	98	1	add
286	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')break;  if(c!=  ':'  ||  c  ==  '-')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    '-')break;    if(c!=  ':'  ||  c  ==  '-')break;	  	compilable	  [FE]  AssertionFailedError  	98	1	add
287	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')break;  if(c!=  ':'  ||  c  ==  '-')break;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')break;  if(c!=  ':'  ||  c  ==  '-')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    '-')break;    if(c!=  ':'  ||  c  ==  '-')break;	  	compilable	  [FE]  AssertionFailedError  	98	1	add
288	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')break;  if(c  ==  ':'  ||  c!=  '-')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    '-')break;    if(c  ==  ':'  ||  c!=  '-')break;	  	compilable	  [FE]  AssertionFailedError  	98	1	add
289	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')break;  if(c  ==  ':'  ||  c!=  '-')break;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')break;  if(c  ==  ':'  ||  c!=  '-')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    '-')break;    if(c  ==  ':'  ||  c!=  '-')break;	  	compilable	  [FE]  AssertionFailedError  	98	1	add
290	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')break;  If(c  ==  ':'  ||  c  ==  '-')break;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')break;  If(c  ==  ':'  ||  c  ==  '-')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    '-')break;    If(c  ==  ':'  ||  c  ==  '-')break;	  	non-compiled	[CE]  ';'  expected	98	None	add
291	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  writeRaw(typeMsg);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  writeRaw(typeMsg);  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  writeRaw(typeMsg);	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
292	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg);  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg);	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
293	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(':');  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(':');  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(':');	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
294	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c!=  ':'  ||  c  ==  'n'  ||  c  ==  'r')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c!=  ':'  ||  c  ==  'n'  ||  c  ==  'r')break;	  if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r')break;    	compilable	  [FE]  AssertionFailedError  	97	1	replace
295	[BUG]  [BUGGY]  if(c!=  ':'  ||  c  ==  'n'  ||  c  ==  'r')break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c!=  ':'  ||  c  ==  'n'  ||  c  ==  'r')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c!=  ':'  ||  c  ==  'n'  ||  c  ==  'r')break;	  if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r')break;    	compilable	  [FE]  AssertionFailedError  	97	1	replace
296	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c!=  'r')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  ':'  ||  c  ==  'n'  ||  c!=  'r')break;	  if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r')break;    	compilable	  [FE]  AssertionFailedError  	97	1	replace
297	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c!=  'r')break;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c!=  'r')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':'  ||  c  ==  'n'  ||  c!=  'r')break;	  if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r')break;    	compilable	  [FE]  AssertionFailedError  	97	1	replace
298	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	85	1	add
299	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	85	1	add
300	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(c!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(c!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	85	1	add
301	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(c!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(c!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(c!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	85	1	add
302	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(c  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(c  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	85	1	add
303	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(c  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(c  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(c  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	85	1	add
304	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  If(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  If(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    If(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  	non-compiled	[CE]  ';'  expected	85	None	add
305	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.ST  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.ST  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_NAME)        {        break;        }        if(status!=    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.ST	  	non-compiled	[CE]  ')'  expected	50	None	add
306	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.ST  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.ST  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_NAME)        {        break;        }        if(status!=    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.ST	  	non-compiled	[CE]  ')'  expected	50	None	add
307	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.STAT  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.STAT  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_NAME)        {        break;        }        if(status!=    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.STAT	  	non-compiled	[CE]  ')'  expected	50	None	add
308	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.STAT  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.STAT  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_NAME)        {        break;        }        if(status!=    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.STAT	  	non-compiled	[CE]  ')'  expected	50	None	add
309	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_NAME)        {        break;        }        if(status!=    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.	  	non-compiled	[CE]  <identifier>  expected	50	None	add
310	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c!=  ':'  ||  c  ==  'n'  ||  c  ==  'r')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c!=  ':'  ||  c  ==  'n'  ||  c  ==  'r')  {  break;  }	  if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	89	1	replace
311	[BUG]  [BUGGY]  if(c!=  ':'  ||  c  ==  'n'  ||  c  ==  'r')  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c!=  ':'  ||  c  ==  'n'  ||  c  ==  'r')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c!=  ':'  ||  c  ==  'n'  ||  c  ==  'r')  {  break;  }	  if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	89	1	replace
312	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c!=  'r')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  ':'  ||  c  ==  'n'  ||  c!=  'r')  {  break;  }	  if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	89	1	replace
313	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c!=  'r')  {  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c!=  'r')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':'  ||  c  ==  'n'  ||  c!=  'r')  {  break;  }	  if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	89	1	replace
314	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.ST  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.ST  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COLON)        {        break;        }        if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.ST	  	non-compiled	[CE]  ')'  expected	28	None	add
315	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STAT  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STAT  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COLON)        {        break;        }        if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STAT	  	non-compiled	[CE]  ')'  expected	28	None	add
316	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COLON)        {        break;        }        if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext	  	non-compiled	[CE]  ')'  expected	28	None	add
317	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COLON)        {        break;        }        if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.	  	non-compiled	[CE]  <identifier>  expected	28	None	add
318	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWrite  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWrite  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COLON)        {        break;        }        if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWrite	  	non-compiled	[CE]  ')'  expected	28	None	add
319	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;	  c    =    ':';    break;    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    c    =    ':';    break;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
320	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  break;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)    {    c    =    ':';    break;    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
321	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c!=  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c!=  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;	  if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')break;    	compilable	  [FE]  AssertionFailedError  	21	1	replace
322	[BUG]  [BUGGY]  if(c!=  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c!=  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c!=  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;	  if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')break;    	compilable	  [FE]  AssertionFailedError  	21	1	replace
323	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  't')break;	  if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')break;    	compilable	  [FE]  AssertionFailedError  	21	1	replace
324	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  't')break;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  't')break;	  if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')break;    	compilable	  [FE]  AssertionFailedError  	21	1	replace
325	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  't')break;	  if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')break;    	compilable	  [FE]  AssertionFailedError  	21	1	replace
326	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  't')break;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  't')break;	  if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')break;    	compilable	  [FE]  AssertionFailedError  	21	1	replace
327	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_EXPECT_NAME)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.	  	non-compiled	[CE]  <identifier>  expected	82	None	add
328	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.STAT  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.STAT  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_EXPECT_NAME)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.STAT	  	non-compiled	[CE]  ')'  expected	82	None	add
329	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  >=  JsonWriteContext.  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  >=  JsonWriteContext.  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_EXPECT_NAME)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  >=  JsonWriteContext.	  	non-compiled	[CE]  <identifier>  expected	82	None	add
330	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.ST  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.ST  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_EXPECT_NAME)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.ST	  	non-compiled	[CE]  ')'  expected	82	None	add
331	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status        ==        JsonWriteContext.STATUS_EXPECT_NAME)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	82	1	add
332	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_EXPECT_NAME)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	82	1	add
333	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.ST  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.ST  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COMMA)        {        break;        }        if(status!=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.ST	  	non-compiled	[CE]  ')'  expected	73	None	add
334	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COMMA)        {        break;        }        if(status!=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.	  	non-compiled	[CE]  <identifier>  expected	73	None	add
335	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COMMA)        {        break;        }        if(status!=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext	  	non-compiled	[CE]  ')'  expected	73	None	add
336	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.ST  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.ST  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COMMA)        {        break;        }        if(status!=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.ST	  	non-compiled	[CE]  ')'  expected	73	None	add
337	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.STAT  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.STAT  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COMMA)        {        break;        }        if(status!=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.STAT	  	non-compiled	[CE]  ')'  expected	73	None	add
338	[BUG]  [BUGGY]  ||(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA))  {  break;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA))  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA))  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
339	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    c    =    ':';    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
340	[BUG]  [BUGGY]  ||  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    c    =    ':';    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
341	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  't')break;  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    't')break;    if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  't')break;	  	compilable	  [FE]  AssertionFailedError  	136	1	add
342	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  't')break;  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  't')break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  't')break;  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    't')break;    if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  't')break;	  	compilable	  [FE]  AssertionFailedError  	136	1	add
343	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  't')break;  if(c  ==  ':'  ||  c!=  'n'  ||  c  ==  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    't')break;    if(c  ==  ':'  ||  c!=  'n'  ||  c  ==  't')break;	  	compilable	  [FE]  AssertionFailedError  	136	1	add
344	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  't')break;  if(c  ==  ':'  ||  c!=  'n'  ||  c  ==  't')break;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  't')break;  if(c  ==  ':'  ||  c!=  'n'  ||  c  ==  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    't')break;    if(c  ==  ':'  ||  c!=  'n'  ||  c  ==  't')break;	  	compilable	  [FE]  AssertionFailedError  	136	1	add
345	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  't')break;  if(c  ==  ':'  ||  c  ==  'n'  ||  c!=  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    't')break;    if(c  ==  ':'  ||  c  ==  'n'  ||  c!=  't')break;	  	compilable	  [FE]  AssertionFailedError  	136	1	add
346	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  't')break;  if(c  ==  ':'  ||  c  ==  'n'  ||  c!=  't')break;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  't')break;  if(c  ==  ':'  ||  c  ==  'n'  ||  c!=  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    't')break;    if(c  ==  ':'  ||  c  ==  'n'  ||  c!=  't')break;	  	compilable	  [FE]  AssertionFailedError  	136	1	add
347	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  't')break;  if(c!=  ':'  ||  c  ==  'n'  ||  c  ==  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    't')break;    if(c!=  ':'  ||  c  ==  'n'  ||  c  ==  't')break;	  	compilable	  [FE]  AssertionFailedError  	136	1	add
348	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  't')break;  if(c!=  ':'  ||  c  ==  'n'  ||  c  ==  't')break;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  't')break;  if(c!=  ':'  ||  c  ==  'n'  ||  c  ==  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    't')break;    if(c!=  ':'  ||  c  ==  'n'  ||  c  ==  't')break;	  	compilable	  [FE]  AssertionFailedError  	136	1	add
349	[BUG]  [BUGGY]  ((  JsonWriteContext)_writeContext).writeString(c);  break;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ((  JsonWriteContext)_writeContext).writeString(c);  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	((  JsonWriteContext)_writeContext).writeString(c);  break;	  c    =    ':';    ((    JsonWriteContext)_writeContext).writeString(typeMsg);    break;    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
350	[BUG]  [BUGGY]  c  =  ':';  _writeContext.writeString(typeMsg);  break;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c  =  ':';  _writeContext.writeString(typeMsg);  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c  =  ':';  _writeContext.writeString(typeMsg);  break;	  c    =    ':';    ((    JsonWriteContext)_writeContext).writeString(typeMsg);    break;    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
351	[BUG]  [BUGGY]  ((  JsonWriteContext)_writeContext).writeString(typeMsg);  break;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ((  JsonWriteContext)_writeContext).writeString(typeMsg);  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	((  JsonWriteContext)_writeContext).writeString(typeMsg);  break;	  c    =    ':';    ((    JsonWriteContext)_writeContext).writeString(typeMsg);    break;    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
352	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg+ ": ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg+ ": ");  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg+ ": ");	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg+   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
353	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  writeRaw(typeMsg+ ": ");  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  writeRaw(typeMsg+ ": ");  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  writeRaw(typeMsg+ ": ");	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg+   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
354	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg+ ": ");  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg+ ": ");  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg+ ": ");	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg+   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
355	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    else    {    writeRaw(typeMsg);    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }	  	compilable	  [FE]  AssertionFailedError  	10	2	add
356	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    else    {    writeRaw(typeMsg);    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }	  	compilable	  [FE]  AssertionFailedError  	10	2	add
357	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    else    {    writeRaw(typeMsg);    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }	  	compilable	  [FE]  AssertionFailedError  	10	2	add
358	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    else    {    writeRaw(typeMsg);    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }	  	compilable	  [FE]  AssertionFailedError  	10	2	add
359	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    else    {    writeRaw(typeMsg);    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }	  	compilable	  [FE]  AssertionFailedError  	10	2	add
360	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    else    {    writeRaw(typeMsg);    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }	  	compilable	  [FE]  AssertionFailedError  	10	2	add
361	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')break;  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r')break;    if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')break;	  	compilable	  [FE]  AssertionFailedError  	96	1	add
362	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')break;  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')break;  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r')break;    if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')break;	  	compilable	  [FE]  AssertionFailedError  	96	1	add
363	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')break;  if(c  ==  ':'  ||  c!=  'n'  ||  c  ==  'r')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r')break;    if(c  ==  ':'  ||  c!=  'n'  ||  c  ==  'r')break;	  	compilable	  [FE]  AssertionFailedError  	96	1	add
364	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')break;  if(c  ==  ':'  ||  c!=  'n'  ||  c  ==  'r')break;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')break;  if(c  ==  ':'  ||  c!=  'n'  ||  c  ==  'r')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r')break;    if(c  ==  ':'  ||  c!=  'n'  ||  c  ==  'r')break;	  	compilable	  [FE]  AssertionFailedError  	96	1	add
365	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')break;  if(c  ==  ':'  ||  c  ==  'n'  ||  c!=  'r')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r')break;    if(c  ==  ':'  ||  c  ==  'n'  ||  c!=  'r')break;	  	compilable	  [FE]  AssertionFailedError  	96	1	add
366	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')break;  if(c  ==  ':'  ||  c  ==  'n'  ||  c!=  'r')break;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')break;  if(c  ==  ':'  ||  c  ==  'n'  ||  c!=  'r')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r')break;    if(c  ==  ':'  ||  c  ==  'n'  ||  c!=  'r')break;	  	compilable	  [FE]  AssertionFailedError  	96	1	add
367	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')break;  if(c!=  ':'  ||  c  ==  'n'  ||  c  ==  'r')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r')break;    if(c!=  ':'  ||  c  ==  'n'  ||  c  ==  'r')break;	  	compilable	  [FE]  AssertionFailedError  	96	1	add
368	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')break;  if(c!=  ':'  ||  c  ==  'n'  ||  c  ==  'r')break;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')break;  if(c!=  ':'  ||  c  ==  'n'  ||  c  ==  'r')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r')break;    if(c!=  ':'  ||  c  ==  'n'  ||  c  ==  'r')break;	  	compilable	  [FE]  AssertionFailedError  	96	1	add
369	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    c    =    ':';    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  }	  	compilable	  [FE]  AssertionFailedError  	106	1	add
370	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    c    =    ':';    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  }	  	compilable	  [FE]  AssertionFailedError  	106	1	add
371	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  }  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    c    =    ':';    }    if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  }	  	compilable	  [FE]  AssertionFailedError  	106	2	add
372	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  }  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  }  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    c    =    ':';    }    if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  }	  	compilable	  [FE]  AssertionFailedError  	106	2	add
373	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  }  if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    c    =    ':';    }    if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  }	  	compilable	  [FE]  AssertionFailedError  	106	1	add
374	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  }  if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  }  if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    c    =    ':';    }    if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  }	  	compilable	  [FE]  AssertionFailedError  	106	1	add
375	[BUG]  [BUGGY]  case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  break;  case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  break;  [CE]  duplicate  case  label  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  break;  case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	case    JsonWriteContext.STATUS_EXPECT_NAME:    c    =    ':';    break;    case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  break;	  	non-compiled	[CE]  duplicate  case  label	108	None	add
376	[BUG]  [BUGGY]  case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  break;  Case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  break;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  break;  Case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	case    JsonWriteContext.STATUS_EXPECT_NAME:    c    =    ':';    break;    Case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  break;	  	non-compiled	[CE]  ';'  expected	108	None	add
377	[BUG]  [BUGGY]  case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  break;  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  break;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  break;  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	case    JsonWriteContext.STATUS_EXPECT_NAME:    c    =    ':';    break;    ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  break;	  	non-compiled	[CE]  illegal  start  of  expression	108	None	add
378	[BUG]  [BUGGY]  case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  break;  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME;  c  =  ':';  break;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  break;  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME;  c  =  ':';  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	case    JsonWriteContext.STATUS_EXPECT_NAME:    c    =    ':';    break;    ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME;  c  =  ':';  break;	  	non-compiled	[CE]  illegal  start  of  expression	108	None	add
379	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status!=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	118	1	add
380	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status!=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	118	1	add
381	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status!=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	118	1	add
382	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status!=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	118	1	add
383	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status!=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	118	1	add
384	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status!=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	118	1	add
385	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >>  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >>  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status!=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  >>  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  	non-compiled	[CE]  incompatible  types	118	None	add
386	[BUG]  [BUGGY]  ((  JsonWriteContext)_writeContext.getCurrentContext()).writeString(c);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ((  JsonWriteContext)_writeContext.getCurrentContext()).writeString(c);  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	((  JsonWriteContext)_writeContext.getCurrentContext()).writeString(c);	  c    =    ':';    ((    JsonWriteContext)_writeContext.getCurrentContext()).writeString(typeMsg);    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
387	[BUG]  [BUGGY]  ((  JsonWriteContext)_writeContext.getCurrentContext()).writeString(typeMsg);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ((  JsonWriteContext)_writeContext.getCurrentContext()).writeString(typeMsg);  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	((  JsonWriteContext)_writeContext.getCurrentContext()).writeString(typeMsg);	  c    =    ':';    ((    JsonWriteContext)_writeContext.getCurrentContext()).writeString(typeMsg);    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
388	[BUG]  [BUGGY]  c  =  ':';  ((  JsonWriteContext)_writeContext.getCurrentContext()).writeString(typeMsg,  status);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c  =  ':';  ((  JsonWriteContext)_writeContext.getCurrentContext()).writeString(typeMsg,  status);  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c  =  ':';  ((  JsonWriteContext)_writeContext.getCurrentContext()).writeString(typeMsg,  status);	  c    =    ':';    ((    JsonWriteContext)_writeContext.getCurrentContext()).writeString(typeMsg);    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
389	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)    {    c    =    ':';    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
390	[BUG]  [BUGGY]  c  =  ':';  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';  [CE]  duplicate  case  label  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c  =  ':';  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c  =  ':';  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)    {    c    =    ':';    }    	non-compiled	[CE]  duplicate  case  label	125	None	replace
391	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)    {    c    =    ':';    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
392	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)    {    c    =    ':';    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	101	1	add
393	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)    {    c    =    ':';    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	101	1	add
394	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)    {    c    =    ':';    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	101	1	add
395	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)    {    c    =    ':';    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	101	1	add
396	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)    {    c    =    ':';    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	101	1	add
397	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  break;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)    {    c    =    ':';    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	101	1	add
398	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)    {    c    =    ':';    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';	  	non-compiled	[CE]  orphaned  case	101	None	add
399	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '@')  {  break;  }  if(c  ==  ':'  ||  c  ==  '@')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    '@')    {    break;    }    if(c  ==  ':'  ||  c  ==  '@')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	132	1	add
400	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '@')  {  break;  }  if(c  ==  ':'  ||  c  ==  '@')  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '@')  {  break;  }  if(c  ==  ':'  ||  c  ==  '@')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    '@')    {    break;    }    if(c  ==  ':'  ||  c  ==  '@')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	132	1	add
401	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '@')  {  break;  }  if(c!=  ':'  ||  c  ==  '@')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    '@')    {    break;    }    if(c!=  ':'  ||  c  ==  '@')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	132	1	add
402	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '@')  {  break;  }  if(c!=  ':'  ||  c  ==  '@')  {  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '@')  {  break;  }  if(c!=  ':'  ||  c  ==  '@')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    '@')    {    break;    }    if(c!=  ':'  ||  c  ==  '@')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	132	1	add
403	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '@')  {  break;  }  if(c  ==  ':'  ||  c!=  '@')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    '@')    {    break;    }    if(c  ==  ':'  ||  c!=  '@')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	132	1	add
404	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '@')  {  break;  }  if(c  ==  ':'  ||  c!=  '@')  {  break;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '@')  {  break;  }  if(c  ==  ':'  ||  c!=  '@')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    '@')    {    break;    }    if(c  ==  ':'  ||  c!=  '@')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	132	1	add
405	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '@')  {  break;  }  if(c  >=  ':'  ||  c  ==  '@')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    '@')    {    break;    }    if(c  >=  ':'  ||  c  ==  '@')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	132	1	add
406	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '@')  {  break;  }  if(c  >=  ':'  ||  c  ==  '@')  {  break;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '@')  {  break;  }  if(c  >=  ':'  ||  c  ==  '@')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    '@')    {    break;    }    if(c  >=  ':'  ||  c  ==  '@')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	132	1	add
407	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')  {  break;  }  if(c  ==  ':'  ||  c  ==  '-')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    '-')    {    break;    }    if(c  ==  ':'  ||  c  ==  '-')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	90	1	add
408	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')  {  break;  }  if(c  ==  ':'  ||  c  ==  '-')  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')  {  break;  }  if(c  ==  ':'  ||  c  ==  '-')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    '-')    {    break;    }    if(c  ==  ':'  ||  c  ==  '-')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	90	1	add
409	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')  {  break;  }  if(c!=  ':'  ||  c  ==  '-')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    '-')    {    break;    }    if(c!=  ':'  ||  c  ==  '-')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	90	1	add
410	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')  {  break;  }  if(c!=  ':'  ||  c  ==  '-')  {  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')  {  break;  }  if(c!=  ':'  ||  c  ==  '-')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    '-')    {    break;    }    if(c!=  ':'  ||  c  ==  '-')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	90	1	add
411	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')  {  break;  }  if(c  ==  ':'  ||  c!=  '-')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    '-')    {    break;    }    if(c  ==  ':'  ||  c!=  '-')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	90	1	add
412	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')  {  break;  }  if(c  ==  ':'  ||  c!=  '-')  {  break;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')  {  break;  }  if(c  ==  ':'  ||  c!=  '-')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    '-')    {    break;    }    if(c  ==  ':'  ||  c!=  '-')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	90	1	add
413	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')  {  break;  }  if(c  >=  ':'  ||  c  ==  '-')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    '-')    {    break;    }    if(c  >=  ':'  ||  c  ==  '-')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	90	1	add
414	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')  {  break;  }  if(c  >=  ':'  ||  c  ==  '-')  {  break;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')  {  break;  }  if(c  >=  ':'  ||  c  ==  '-')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    '-')    {    break;    }    if(c  >=  ':'  ||  c  ==  '-')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	90	1	add
415	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.ST  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.ST  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COLON)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.ST	  	non-compiled	[CE]  ')'  expected	32	None	add
416	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.STAT  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.STAT  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COLON)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.STAT	  	non-compiled	[CE]  ')'  expected	32	None	add
417	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  >=  JsonWriteContext.ST  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  >=  JsonWriteContext.ST  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COLON)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  >=  JsonWriteContext.ST	  	non-compiled	[CE]  ')'  expected	32	None	add
418	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COLON)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext	  	non-compiled	[CE]  ')'  expected	32	None	add
419	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COLON)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.	  	non-compiled	[CE]  <identifier>  expected	32	None	add
420	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c!=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c        ==        ':')        {        break;        }        if(c!=    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	43	1	add
421	[BUG]  [BUGGY]  if(c    ==    ':')    {    break;    }    if(c!=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c!=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c        ==        ':')        {        break;        }        if(c!=    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	43	1	add
422	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c!=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c        ==        ':')        {        break;        }        if(c!=    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	43	1	add
423	[BUG]  [BUGGY]  if(c    ==    ':')    {    break;    }    if(c!=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c!=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c        ==        ':')        {        break;        }        if(c!=    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	43	1	add
424	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c!=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c        ==        ':')        {        break;        }        if(c!=    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	43	1	add
425	[BUG]  [BUGGY]  if(c    ==    ':')    {    break;    }    if(c!=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c!=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c        ==        ':')        {        break;        }        if(c!=    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	43	1	add
426	[BUG]  [BUGGY]  if(c    ==    ':')    {    break;    }    if(c!=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c!=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c        ==        ':')        {        break;        }        if(c!=    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;	  	non-compiled	[CE]  orphaned  case	43	None	add
427	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c!=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c        ==        ':')        {        break;        }        if(c!=    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')	  	compilable	  [FE]  AssertionFailedError  	43	1	add
428	[BUG]  [BUGGY]  if(c    ==    ':')    {    break;    }    if(c!=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c!=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c        ==        ':')        {        break;        }        if(c!=    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')	  	compilable	  [FE]  AssertionFailedError  	43	1	add
429	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  break;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    c    =    ':';    break;    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
430	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')break;    if(c!=  ':')break;  if(c  ==  ':')break;  if(c!=  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c        ==        ':')break;        if(c!=    ':')break;    if(c  ==  ':')break;  if(c!=  ':')break;	  	compilable	  [FE]  AssertionFailedError  	36	1	add
431	[BUG]  [BUGGY]  if(c    ==    ':')break;    if(c!=  ':')break;  if(c  ==  ':')break;  if(c!=  ':')break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')break;    if(c!=  ':')break;  if(c  ==  ':')break;  if(c!=  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c        ==        ':')break;        if(c!=    ':')break;    if(c  ==  ':')break;  if(c!=  ':')break;	  	compilable	  [FE]  AssertionFailedError  	36	1	add
432	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')break;    if(c!=  ':')break;  if(c  ==  ':')break;  if(c  >=  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c        ==        ':')break;        if(c!=    ':')break;    if(c  ==  ':')break;  if(c  >=  ':')break;	  	compilable	  [FE]  AssertionFailedError  	36	1	add
433	[BUG]  [BUGGY]  if(c    ==    ':')break;    if(c!=  ':')break;  if(c  ==  ':')break;  if(c  >=  ':')break;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')break;    if(c!=  ':')break;  if(c  ==  ':')break;  if(c  >=  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c        ==        ':')break;        if(c!=    ':')break;    if(c  ==  ':')break;  if(c  >=  ':')break;	  	compilable	  [FE]  AssertionFailedError  	36	1	add
434	[BUG]  [BUGGY]  if(c    ==    ':')break;    if(c!=  ':')break;  if(c  ==  ':')break;  if(c  >>  ':')break;  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')break;    if(c!=  ':')break;  if(c  ==  ':')break;  if(c  >>  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c        ==        ':')break;        if(c!=    ':')break;    if(c  ==  ':')break;  if(c  >>  ':')break;	  	non-compiled	[CE]  incompatible  types	36	None	add
435	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')break;    if(c!=  ':')break;  if(c!=  ':')break;  if(c!=  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c        ==        ':')break;        if(c!=    ':')break;    if(c!=  ':')break;  if(c!=  ':')break;	  	compilable	  [FE]  AssertionFailedError  	36	1	add
436	[BUG]  [BUGGY]  if(c    ==    ':')break;    if(c!=  ':')break;  if(c!=  ':')break;  if(c!=  ':')break;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')break;    if(c!=  ':')break;  if(c!=  ':')break;  if(c!=  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c        ==        ':')break;        if(c!=    ':')break;    if(c!=  ':')break;  if(c!=  ':')break;	  	compilable	  [FE]  AssertionFailedError  	36	1	add
437	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)    {    c    =    ':';    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  }	  	compilable	  [FE]  AssertionFailedError  	124	1	add
438	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)    {    c    =    ':';    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  }	  	compilable	  [FE]  AssertionFailedError  	124	1	add
439	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)    {    c    =    ':';    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  }	  	compilable	  [FE]  AssertionFailedError  	124	1	add
440	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)    {    c    =    ':';    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  }	  	compilable	  [FE]  AssertionFailedError  	124	1	add
441	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)    {    c    =    ':';    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  }	  	compilable	  [FE]  AssertionFailedError  	124	1	add
442	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)    {    c    =    ':';    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  }	  	compilable	  [FE]  AssertionFailedError  	124	1	add
443	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ',';  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ',';  break;	  case    JsonWriteContext.STATUS_EXPECT_NAME:    c    =    ':';    break;    	compilable	  [FE]  AssertionFailedError  	109	1	replace
444	[BUG]  [BUGGY]  case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ',';  break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ',';  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ',';  break;	  case    JsonWriteContext.STATUS_EXPECT_NAME:    c    =    ':';    break;    	compilable	  [FE]  AssertionFailedError  	109	1	replace
445	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  '/';  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  '/';  break;	  case    JsonWriteContext.STATUS_EXPECT_NAME:    c    =    ':';    break;    	compilable	  [FE]  AssertionFailedError  	109	2	replace
446	[BUG]  [BUGGY]  case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  '/';  break;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  '/';  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  '/';  break;	  case    JsonWriteContext.STATUS_EXPECT_NAME:    c    =    ':';    break;    	compilable	  [FE]  AssertionFailedError  	109	2	replace
447	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
448	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  if(c    ==    ':'    ||    c    ==    '+')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	61	2	replace
449	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  if(c    ==    ':'    ||    c    ==    '+')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	61	2	replace
450	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  &&  c  ==  '+')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  ':'  &&  c  ==  '+')  {  break;  }	  if(c    ==    ':'    ||    c    ==    '+')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	61	2	replace
451	[BUG]  [BUGGY]  if(c  ==  ':'  &&  c  ==  '+')  {  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  &&  c  ==  '+')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':'  &&  c  ==  '+')  {  break;  }	  if(c    ==    ':'    ||    c    ==    '+')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	61	2	replace
452	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c!=  ':'  ||  c  ==  '+')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c!=  ':'  ||  c  ==  '+')  {  break;  }	  if(c    ==    ':'    ||    c    ==    '+')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	61	1	replace
453	[BUG]  [BUGGY]  if(c!=  ':'  ||  c  ==  '+')  {  break;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c!=  ':'  ||  c  ==  '+')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c!=  ':'  ||  c  ==  '+')  {  break;  }	  if(c    ==    ':'    ||    c    ==    '+')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	61	1	replace
454	[BUG]  [BUGGY]  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  [CE]  duplicate  case  label  [FE]          AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';	  c    =    ':';    c    =    ':';    case    JsonWriteContext.STATUS_OK_AFTER_COLON:    c    =    ':';    	non-compiled	[CE]  duplicate  case  label	3	None	replace
455	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  else  {  writeRaw(c);  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  else  {  writeRaw(c);  }	  c    =    ':';    break;    Character.isWhitespace(c);    c    =    ':';    break;    	compilable	  [FE]  AssertionFailedError  	123	2	replace
456	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  else  {  writeRaw(c);  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  else  {  writeRaw(c);  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  else  {  writeRaw(c);  }	  c    =    ':';    break;    Character.isWhitespace(c);    c    =    ':';    break;    	compilable	  [FE]  AssertionFailedError  	123	2	replace
457	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  &&  c  ==  '@')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  ':'  &&  c  ==  '@')  {  break;  }	  if(c    ==    ':'    ||    c    ==    '@')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	133	2	replace
458	[BUG]  [BUGGY]  if(c  ==  ':'  &&  c  ==  '@')  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  &&  c  ==  '@')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':'  &&  c  ==  '@')  {  break;  }	  if(c    ==    ':'    ||    c    ==    '@')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	133	2	replace
459	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  '@'  ||  c  ==  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  '@'  ||  c  ==  ':')  {  break;  }	  if(c    ==    ':'    ||    c    ==    '@')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	133	2	replace
460	[BUG]  [BUGGY]  if(c  ==  '@'  ||  c  ==  ':')  {  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  '@'  ||  c  ==  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  '@'  ||  c  ==  ':')  {  break;  }	  if(c    ==    ':'    ||    c    ==    '@')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	133	2	replace
461	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c!=  ':'  ||  c  ==  '@')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c!=  ':'  ||  c  ==  '@')  {  break;  }	  if(c    ==    ':'    ||    c    ==    '@')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	133	1	replace
462	[BUG]  [BUGGY]  if(c!=  ':'  ||  c  ==  '@')  {  break;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c!=  ':'  ||  c  ==  '@')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c!=  ':'  ||  c  ==  '@')  {  break;  }	  if(c    ==    ':'    ||    c    ==    '@')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	133	1	replace
463	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  else  {  _writer.writeString(typeMsg);  c  =  ':';  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  else  {  _writer.writeString(typeMsg);  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  else  {  _writer.writeString(typeMsg);  c  =  ':';  }	  c    =    ':';    break;    ((    JsonWriteContext)_writer).writeString(typeMsg);    c    =    ':';    break;    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
464	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(c  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	23	1	add
465	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(c  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	23	1	add
466	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(c!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(c!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	23	1	add
467	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(c!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(c!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(c!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	23	1	add
468	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(c  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(c  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	23	1	add
469	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(c  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(c  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(c  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	23	1	add
470	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  If(c  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  If(c  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    If(c  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }	  	non-compiled	[CE]  ';'  expected	23	None	add
471	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  break;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)    {    c    =    ':';    break;    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
472	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg);    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  }	  	compilable	  [FE]  AssertionFailedError  	56	1	add
473	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg);    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  }	  	compilable	  [FE]  AssertionFailedError  	56	1	add
474	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  }  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg);    }    if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  }	  	compilable	  [FE]  AssertionFailedError  	56	2	add
475	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  }  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  }  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg);    }    if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  }	  	compilable	  [FE]  AssertionFailedError  	56	2	add
476	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  }  if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg);    }    if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  }	  	compilable	  [FE]  AssertionFailedError  	56	1	add
477	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  }  if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  }  if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg);    }    if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  }	  	compilable	  [FE]  AssertionFailedError  	56	1	add
478	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  }  If(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  }  If(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg);    }    If(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  }	  	non-compiled	[CE]  ';'  expected	56	None	add
479	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg+ ",  expecting  field  name ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg+ ",  expecting  field  name ");  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg+ ",  expecting  field  name ");	  c    =    ':';    break;    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg+   ",    expecting    field    name   ");    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
480	[BUG]  [BUGGY]  c  =  ':';  break;  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  writeRaw(typeMsg+ ",  expecting  field  name   ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c  =  ':';  break;  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  writeRaw(typeMsg+ ",  expecting  field  name   ");  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c  =  ':';  break;  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  writeRaw(typeMsg+ ",  expecting  field  name   ");	  c    =    ':';    break;    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg+   ",    expecting    field    name   ");    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
481	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c!=  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c!=  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')break;	  if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')break;    	compilable	  [FE]  AssertionFailedError  	139	1	replace
482	[BUG]  [BUGGY]  if(c!=  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c!=  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c!=  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')break;	  if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')break;    	compilable	  [FE]  AssertionFailedError  	139	1	replace
483	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  >=  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  >=  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')break;	  if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')break;    	compilable	  [FE]  AssertionFailedError  	139	2	replace
484	[BUG]  [BUGGY]  if(c  >=  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')break;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  >=  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  >=  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')break;	  if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')break;    	compilable	  [FE]  AssertionFailedError  	139	2	replace
485	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.ST  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.ST  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COMMA)        {        break;        }        if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.ST	  	non-compiled	[CE]  ')'  expected	71	None	add
486	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COMMA)        {        break;        }        if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext	  	non-compiled	[CE]  ')'  expected	71	None	add
487	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COMMA)        {        break;        }        if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.	  	non-compiled	[CE]  <identifier>  expected	71	None	add
488	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STAT  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STAT  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COMMA)        {        break;        }        if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STAT	  	non-compiled	[CE]  ')'  expected	71	None	add
489	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWrite  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWrite  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COMMA)        {        break;        }        if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWrite	  	non-compiled	[CE]  ')'  expected	71	None	add
490	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')break;    if(c  >=  ':')break;  if(c  ==  ':')break;  if(c  >=  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c        ==        ':')break;        if(c    >=    ':')break;    if(c  ==  ':')break;  if(c  >=  ':')break;	  	compilable	  [FE]  AssertionFailedError  	38	1	add
491	[BUG]  [BUGGY]  if(c    ==    ':')break;    if(c  >=  ':')break;  if(c  ==  ':')break;  if(c  >=  ':')break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')break;    if(c  >=  ':')break;  if(c  ==  ':')break;  if(c  >=  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c        ==        ':')break;        if(c    >=    ':')break;    if(c  ==  ':')break;  if(c  >=  ':')break;	  	compilable	  [FE]  AssertionFailedError  	38	1	add
492	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')break;    if(c  >=  ':')break;  if(c  ==  ':')break;  if(c!=  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c        ==        ':')break;        if(c    >=    ':')break;    if(c  ==  ':')break;  if(c!=  ':')break;	  	compilable	  [FE]  AssertionFailedError  	38	1	add
493	[BUG]  [BUGGY]  if(c    ==    ':')break;    if(c  >=  ':')break;  if(c  ==  ':')break;  if(c!=  ':')break;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')break;    if(c  >=  ':')break;  if(c  ==  ':')break;  if(c!=  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c        ==        ':')break;        if(c    >=    ':')break;    if(c  ==  ':')break;  if(c!=  ':')break;	  	compilable	  [FE]  AssertionFailedError  	38	1	add
494	[BUG]  [BUGGY]  if(c    ==    ':')break;    if(c  >=  ':')break;  if(c  ==  ':')break;  if(c  >>  ':')break;  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')break;    if(c  >=  ':')break;  if(c  ==  ':')break;  if(c  >>  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c        ==        ':')break;        if(c    >=    ':')break;    if(c  ==  ':')break;  if(c  >>  ':')break;	  	non-compiled	[CE]  incompatible  types	38	None	add
495	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  &&  c  ==  '-')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  ':'  &&  c  ==  '-')  {  break;  }	  if(c    ==    ':'    ||    c    ==    '-')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	91	2	replace
496	[BUG]  [BUGGY]  if(c  ==  ':'  &&  c  ==  '-')  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  &&  c  ==  '-')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':'  &&  c  ==  '-')  {  break;  }	  if(c    ==    ':'    ||    c    ==    '-')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	91	2	replace
497	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_EXPECT_NAME)        {        break;        }        if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.	  	non-compiled	[CE]  <identifier>  expected	78	None	add
498	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STAT  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STAT  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_EXPECT_NAME)        {        break;        }        if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STAT	  	non-compiled	[CE]  ')'  expected	78	None	add
499	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_EXPECT_NAME)        {        break;        }        if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext	  	non-compiled	[CE]  ')'  expected	78	None	add
500	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.ST  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.ST  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_EXPECT_NAME)        {        break;        }        if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.ST	  	non-compiled	[CE]  ')'  expected	78	None	add
501	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status        ==        JsonWriteContext.STATUS_EXPECT_NAME)        {        break;        }        if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	78	1	add
502	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_EXPECT_NAME)        {        break;        }        if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	78	1	add
503	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.ST  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.ST  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COLON)        {        break;        }        if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.ST	  	non-compiled	[CE]  ')'  expected	111	None	add
504	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COLON)        {        break;        }        if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.	  	non-compiled	[CE]  <identifier>  expected	111	None	add
505	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COLON)        {        break;        }        if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext	  	non-compiled	[CE]  ')'  expected	111	None	add
506	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STAT  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STAT  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COLON)        {        break;        }        if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STAT	  	non-compiled	[CE]  ')'  expected	111	None	add
507	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWrite  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWrite  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COLON)        {        break;        }        if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWrite	  	non-compiled	[CE]  ')'  expected	111	None	add
508	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(c);  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(c);  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(c);    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(c);  }	  	compilable	  [FE]  AssertionFailedError  	58	1	add
509	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(c);  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(c);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(c);  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(c);  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(c);    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(c);  }	  	compilable	  [FE]  AssertionFailedError  	58	1	add
510	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(c);  }  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(c);  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(c);    }    if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(c);  }	  	compilable	  [FE]  AssertionFailedError  	58	2	add
511	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(c);  }  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(c);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(c);  }  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(c);  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(c);    }    if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(c);  }	  	compilable	  [FE]  AssertionFailedError  	58	2	add
512	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(c);  }  if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(c);  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(c);    }    if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(c);  }	  	compilable	  [FE]  AssertionFailedError  	58	1	add
513	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(c);  }  if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(c);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(c);  }  if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(c);  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(c);    }    if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(c);  }	  	compilable	  [FE]  AssertionFailedError  	58	1	add
514	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(c);  }  If(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(c);  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(c);  }  If(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(c);  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(c);    }    If(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(c);  }	  	non-compiled	[CE]  ';'  expected	58	None	add
515	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  }	  c    =    ':';    break;    c    =    ':';    break;    	compilable	  [FE]  AssertionFailedError  	12	1	replace
516	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  }	  c    =    ':';    break;    c    =    ':';    break;    	compilable	  [FE]  AssertionFailedError  	12	1	replace
517	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	65	2	add
518	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	65	2	add
519	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	65	2	add
520	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	65	2	add
521	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	65	2	add
522	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	65	2	add
523	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';	  	non-compiled	[CE]  orphaned  case	65	None	add
524	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg  +  ':';  break;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg  +  ':';  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg  +  ':';  break;	  c    =    ':';    break;    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg    +    ':';    break;    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
525	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg  +  ':';  break;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg  +  ':';  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg  +  ':';  break;	  c    =    ':';    break;    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg    +    ':';    break;    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
526	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg  +  ':';  break;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg  +  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg  +  ':';  break;  }	  c    =    ':';    break;    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg    +    ':';    break;    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
527	[BUG]  [BUGGY]  c  =  ':';  break;  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  writeRaw(typeMsg  +  ':';  break;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c  =  ':';  break;  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  writeRaw(typeMsg  +  ':';  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c  =  ':';  break;  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  writeRaw(typeMsg  +  ':';  break;	  c    =    ':';    break;    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg    +    ':';    break;    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
528	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  C  =  ':';  }  [CE]  cannot  find  symbol  C  [FE]            AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  C  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  C  =  ':';  }	  c    =    ':';    C    =    ':';    	non-compiled	[CE]  cannot  find  symbol  C	95	None	replace
529	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  C  =  ':';  }  [CE]  cannot  find  symbol  C  [FE]              AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  C  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  C  =  ':';  }	  c    =    ':';    C    =    ':';    	non-compiled	[CE]  cannot  find  symbol  C	95	None	replace
530	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  C  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  C  =  ':';  }	  c    =    ':';    C    =    ':';    	compilable	  [FE]  AssertionFailedError  	95	2	replace
531	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  C  =  ':';  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  C  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  C  =  ':';  }	  c    =    ':';    C    =    ':';    	compilable	  [FE]  AssertionFailedError  	95	2	replace
532	[BUG]  [BUGGY]  ||(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  &&  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON))  {  break;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  &&  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON))  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  &&  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON))  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
533	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')  {  break;  }  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r')    {    break;    }    if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	88	1	add
534	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')  {  break;  }  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')  {  break;  }  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r')    {    break;    }    if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	88	1	add
535	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')  {  break;  }  if(c  ==  ':'  ||  c!=  'n'  ||  c  ==  'r')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r')    {    break;    }    if(c  ==  ':'  ||  c!=  'n'  ||  c  ==  'r')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	88	1	add
536	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')  {  break;  }  if(c  ==  ':'  ||  c!=  'n'  ||  c  ==  'r')  {  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')  {  break;  }  if(c  ==  ':'  ||  c!=  'n'  ||  c  ==  'r')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r')    {    break;    }    if(c  ==  ':'  ||  c!=  'n'  ||  c  ==  'r')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	88	1	add
537	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')  {  break;  }  if(c  ==  ':'  ||  c  ==  'n'  ||  c!=  'r')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r')    {    break;    }    if(c  ==  ':'  ||  c  ==  'n'  ||  c!=  'r')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	88	1	add
538	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')  {  break;  }  if(c  ==  ':'  ||  c  ==  'n'  ||  c!=  'r')  {  break;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')  {  break;  }  if(c  ==  ':'  ||  c  ==  'n'  ||  c!=  'r')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r')    {    break;    }    if(c  ==  ':'  ||  c  ==  'n'  ||  c!=  'r')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	88	1	add
539	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')  {  break;  }  if(c!=  ':'  ||  c  ==  'n'  ||  c  ==  'r')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r')    {    break;    }    if(c!=  ':'  ||  c  ==  'n'  ||  c  ==  'r')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	88	1	add
540	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')  {  break;  }  if(c!=  ':'  ||  c  ==  'n'  ||  c  ==  'r')  {  break;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')  {  break;  }  if(c!=  ':'  ||  c  ==  'n'  ||  c  ==  'r')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r')    {    break;    }    if(c!=  ':'  ||  c  ==  'n'  ||  c  ==  'r')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	88	1	add
541	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  c  =  ':';  }	  c    =    ':';    c    =    ':';    	compilable	  [FE]  AssertionFailedError  	2	2	replace
542	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  c  =  ':';  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  c  =  ':';  }	  c    =    ':';    c    =    ':';    	compilable	  [FE]  AssertionFailedError  	2	2	replace
543	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  c  =  ':';  }	  c    =    ':';    c    =    ':';    	compilable	  [FE]  AssertionFailedError  	2	2	replace
544	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  c  =  ':';  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  c  =  ':';  }	  c    =    ':';    c    =    ':';    	compilable	  [FE]  AssertionFailedError  	2	2	replace
545	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  c  =  ':';  }	  c    =    ':';    c    =    ':';    	compilable	  [FE]  AssertionFailedError  	2	2	replace
546	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  c  =  ':';  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  c  =  ':';  }	  c    =    ':';    c    =    ':';    	compilable	  [FE]  AssertionFailedError  	2	2	replace
547	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_CANCEL_ERROR)  {  if(c  ==  ':')  {  break;  }  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_CANCEL_ERROR)  {  if(c  ==  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_CANCEL_ERROR)  {  if(c  ==  ':')  {  break;  }	  if(c    ==    ':')    {    break;    }    if(c    ==    ':')    {    break;    }    	non-compiled	[CE]  orphaned  case	42	None	replace
548	[BUG]  [BUGGY]  c  =  ':';  break;  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg+ ",  expecting  field  name   ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c  =  ':';  break;  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg+ ",  expecting  field  name   ");  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c  =  ':';  break;  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg+ ",  expecting  field  name   ");	  c    =    ':';    break;    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg+   ",    expecting    field    name   ");    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
549	[BUG]  [BUGGY]  c  =  ':';  ((  JsonWriteContext)_writeContext).writeString(typeMsg,  status);  break;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c  =  ':';  ((  JsonWriteContext)_writeContext).writeString(typeMsg,  status);  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c  =  ':';  ((  JsonWriteContext)_writeContext).writeString(typeMsg,  status);  break;	  c    =    ':';    ((    JsonWriteContext)_writeContext).writeString(typeMsg);    break;    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
550	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '@')  {  break;  }  if(c  ==  ':'  ||  c  ==  '@')  {  break;  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '@')  {  break;  }  if(c  ==  ':'  ||  c  ==  '@')  {  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    '@')    {    break;    }    if(c  ==  ':'  ||  c  ==  '@')  {  break;	  	non-compiled	[CE]  orphaned  case	132	None	add
551	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COMMA)        {        break;        }        if(status!=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	73	1	add
552	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COMMA)        {        break;        }        if(status!=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	73	1	add
553	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWrite  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWrite  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COMMA)        {        break;        }        if(status!=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWrite	  	non-compiled	[CE]  ')'  expected	73	None	add
554	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  If(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  If(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    If(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }	  	non-compiled	[CE]  ';'  expected	7	None	add
555	[BUG]  [BUGGY]  if(c  ==  '@')  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [CE]  orphaned  case  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  '@')  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  '@')  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    	non-compiled	[CE]  orphaned  case	87	None	replace
556	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COLON)        {        break;        }        if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	28	1	add
557	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COLON)        {        break;        }        if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	28	1	add
558	[BUG]  [BUGGY]  c  =  ':';  break;  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg  +  ':';  break;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c  =  ':';  break;  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg  +  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c  =  ':';  break;  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg  +  ':';  break;  }	  c    =    ':';    break;    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg    +    ':';    break;    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
559	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c!=  ':'  ||  c  ==  '-')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c!=  ':'  ||  c  ==  '-')  {  break;  }	  if(c    ==    ':'    ||    c    ==    '-')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	91	1	replace
560	[BUG]  [BUGGY]  if(c!=  ':'  ||  c  ==  '-')  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c!=  ':'  ||  c  ==  '-')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c!=  ':'  ||  c  ==  '-')  {  break;  }	  if(c    ==    ':'    ||    c    ==    '-')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	91	1	replace
561	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COMMA)        {        break;        }        if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	71	1	add
562	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COMMA)        {        break;        }        if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	71	1	add
563	[BUG]  [BUGGY]  ((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)!=  0)  {  c  =  ':';  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)!=  0)  {  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)!=  0)  {  c  =  ':';  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    	non-compiled	[CE]  not  a  statement	8	None	replace
564	[BUG]  [BUGGY]  ((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  ==  0)  {  c  =  ':';  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  ==  0)  {  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  ==  0)  {  c  =  ':';  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    	non-compiled	[CE]  not  a  statement	8	None	replace
565	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    	compilable	  [FE]  AssertionFailedError  	117	2	replace
566	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    	compilable	  [FE]  AssertionFailedError  	117	2	replace
567	[BUG]  [BUGGY]  ||  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
568	[BUG]  [BUGGY]  ||  status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
569	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)    {    c    =    ':';    break;    }    	compilable	  [FE]  AssertionFailedError  	70	2	replace
570	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)    {    c    =    ':';    break;    }    	compilable	  [FE]  AssertionFailedError  	70	2	replace
571	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '+')  {  break;  }  if(c  ==  ':'  ||  c  ==  '+')  {  break;  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '+')  {  break;  }  if(c  ==  ':'  ||  c  ==  '+')  {  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    '+')    {    break;    }    if(c  ==  ':'  ||  c  ==  '+')  {  break;	  	non-compiled	[CE]  orphaned  case	60	None	add
572	[BUG]  [BUGGY]  ||  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg+ ": ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg+ ": ");  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg+ ": ");	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg+   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
573	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  >=  ':'  ||  c  ==  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  >=  ':'  ||  c  ==  ':')break;	  if(c    ==    ':'    ||    c    ==    ':')break;    	compilable	  [FE]  AssertionFailedError  	135	2	replace
574	[BUG]  [BUGGY]  if(c  >=  ':'  ||  c  ==  ':')break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  >=  ':'  ||  c  ==  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  >=  ':'  ||  c  ==  ':')break;	  if(c    ==    ':'    ||    c    ==    ':')break;    	compilable	  [FE]  AssertionFailedError  	135	2	replace
575	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  >=  JsonWriteContext  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  >=  JsonWriteContext  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COLON)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  >=  JsonWriteContext	  	non-compiled	[CE]  ')'  expected	32	None	add
576	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  >=  JsonWriteContext  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  >=  JsonWriteContext  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COLON)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  >=  JsonWriteContext	  	non-compiled	[CE]  ')'  expected	32	None	add
577	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  >=  JsonWriteContext.  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  >=  JsonWriteContext.  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COLON)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  >=  JsonWriteContext.	  	non-compiled	[CE]  <identifier>  expected	32	None	add
578	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  >=  ':'  ||  c  ==  'n'  ||  c  ==  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  >=  ':'  ||  c  ==  'n'  ||  c  ==  't')break;	  if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    't')break;    	compilable	  [FE]  AssertionFailedError  	137	2	replace
579	[BUG]  [BUGGY]  if(c  >=  ':'  ||  c  ==  'n'  ||  c  ==  't')break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  >=  ':'  ||  c  ==  'n'  ||  c  ==  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  >=  ':'  ||  c  ==  'n'  ||  c  ==  't')break;	  if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    't')break;    	compilable	  [FE]  AssertionFailedError  	137	2	replace
580	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  int  c  =  ':';  }  [CE]  variable  c  is  already  defined  in  method  _verifyValueWrite(String)  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  int  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  int  c  =  ':';  }	  c    =    ':';    int    c    =    ':';    	non-compiled	[CE]  variable  c  is  already  defined  in  method  _verifyValueWrite(String)	93	None	replace
581	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  int  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  int  c  =  ':';  }	  c    =    ':';    int    c    =    ':';    	compilable	  [FE]  AssertionFailedError  	93	2	replace
582	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  int  c  =  ':';  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  int  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  int  c  =  ':';  }	  c    =    ':';    int    c    =    ':';    	compilable	  [FE]  AssertionFailedError  	93	2	replace
583	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  int  c  =  ':';  }  [CE]  variable  c  is  already  defined  in  method  _verifyValueWrite(String)  [FE]            AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  int  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  int  c  =  ':';  }	  c    =    ':';    int    c    =    ':';    	non-compiled	[CE]  variable  c  is  already  defined  in  method  _verifyValueWrite(String)	93	None	replace
584	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  c  =  ':';  break;  }  [CE]  unreachable  statement  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  c  =  ':';  break;  }	  c    =    ':';    break;    c    =    ':';    break;    	non-compiled	[CE]  unreachable  statement	12	None	replace
585	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(c  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;	  	non-compiled	[CE]  orphaned  case	23	None	add
586	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')  {  break;  }  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')  {  break;  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')  {  break;  }  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')  {  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r')    {    break;    }    if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')  {  break;	  	non-compiled	[CE]  orphaned  case	88	None	add
587	[BUG]  [BUGGY]  ((  status  &  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)!=  0)  {  c  =  ':';  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ((  status  &  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)!=  0)  {  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	((  status  &  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)!=  0)  {  c  =  ':';  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)    {    c    =    ':';    }    	non-compiled	[CE]  not  a  statement	125	None	replace
588	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  }	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    c    =    ':';    break;    }    	compilable	  [FE]  AssertionFailedError  	55	2	replace
589	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  }	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    c    =    ':';    break;    }    	compilable	  [FE]  AssertionFailedError  	55	2	replace
590	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  ((  JsonWriteContext)_writer).writeString(typeMsg);  c  =  ':';  break;  }  [CE]  inconvertible  types  [FE]            AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  ((  JsonWriteContext)_writer).writeString(typeMsg);  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  ((  JsonWriteContext)_writer).writeString(typeMsg);  c  =  ':';  break;  }	  c    =    ':';    break;    ((    JsonWriteContext)_writer).writeString(typeMsg);    c    =    ':';    break;    	non-compiled	[CE]  inconvertible  types	122	None	replace
591	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  else  {  _writer.writeString(typeMsg);  c  =  ':';  break;  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  else  {  _writer.writeString(typeMsg);  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  else  {  _writer.writeString(typeMsg);  c  =  ':';  break;  }	  c    =    ':';    break;    ((    JsonWriteContext)_writer).writeString(typeMsg);    c    =    ':';    break;    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
592	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  ':'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;	  if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')break;    	compilable	  [FE]  AssertionFailedError  	21	2	replace
593	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;	  if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')break;    	compilable	  [FE]  AssertionFailedError  	21	2	replace
594	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  >=  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  >=  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;	  if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')break;    	compilable	  [FE]  AssertionFailedError  	21	2	replace
595	[BUG]  [BUGGY]  if(c  >=  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  >=  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  >=  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;	  if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')break;    	compilable	  [FE]  AssertionFailedError  	21	2	replace
596	[BUG]  [BUGGY]  Case  JsonWriteContext.STATUS_UNKNOWN:  c  =  ':';  break;  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  Case  JsonWriteContext.STATUS_UNKNOWN:  c  =  ':';  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	Case  JsonWriteContext.STATUS_UNKNOWN:  c  =  ':';  break;	          case    JsonWriteContext.STATUS_UNKNOWN:    c    =    ':';    break;    	non-compiled	[CE]  ';'  expected	110	None	replace
597	[BUG]  [BUGGY]  case  JsonWriteContext.STATUS_NOT_IMPLEMENTED:  c  =  ':';  break;  [CE]  cannot  find  symbol  STATUS_NOT_IMPLEMENTED  [FE]          AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  case  JsonWriteContext.STATUS_NOT_IMPLEMENTED:  c  =  ':';  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	case  JsonWriteContext.STATUS_NOT_IMPLEMENTED:  c  =  ':';  break;	          case    JsonWriteContext.STATUS_UNKNOWN:    c    =    ':';    break;    	non-compiled	[CE]  cannot  find  symbol  STATUS_NOT_IMPLEMENTED	110	None	replace
598	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')break;    if(c!=  ':')break;  if(c  >=  ':')break;  if(c!=  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c        ==        ':')break;        if(c!=    ':')break;    if(c  >=  ':')break;  if(c!=  ':')break;	  	compilable	  [FE]  AssertionFailedError  	36	1	add
599	[BUG]  [BUGGY]  if(c    ==    ':')break;    if(c!=  ':')break;  if(c  >=  ':')break;  if(c!=  ':')break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')break;    if(c!=  ':')break;  if(c  >=  ':')break;  if(c!=  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c        ==        ':')break;        if(c!=    ':')break;    if(c  >=  ':')break;  if(c!=  ':')break;	  	compilable	  [FE]  AssertionFailedError  	36	1	add
600	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(c  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(c  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(c  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;	  	non-compiled	[CE]  orphaned  case	63	None	add
601	[BUG]  [BUGGY]  if(typeMsg  ==  null)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(typeMsg  ==  null)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(typeMsg  ==  null)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status!=    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	81	None	replace
602	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  't')break;	  if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')break;    	compilable	  [FE]  AssertionFailedError  	139	1	replace
603	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  't')break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  't')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  't')break;	  if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')break;    	compilable	  [FE]  AssertionFailedError  	139	1	replace
604	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  >>  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  >>  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)break;    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  >>  JsonWriteContext.STATUS_OK_AFTER_COLON)break;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	18	None	add
605	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  C  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  C  =  ':';  }	  c    =    ':';    C    =    ':';    	compilable	  [FE]  AssertionFailedError  	95	1	replace
606	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  C  =  ':';  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  C  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  C  =  ':';  }	  c    =    ':';    C    =    ':';    	compilable	  [FE]  AssertionFailedError  	95	1	replace
607	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_NAME)        {        break;        }        if(status!=    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext	  	non-compiled	[CE]  ')'  expected	50	None	add
608	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_NAME)        {        break;        }        if(status!=    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext	  	non-compiled	[CE]  ')'  expected	50	None	add
609	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_NAME)        {        break;        }        if(status!=    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.	  	non-compiled	[CE]  <identifier>  expected	50	None	add
610	[BUG]  [BUGGY]  ||  status  >>  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  >>  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  >>  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    c    =    ':';    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
611	[BUG]  [BUGGY]  ||  status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    c    =    ':';    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
612	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  if(c  ==  ':')  {  break;  }  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  if(c  ==  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  if(c  ==  ':')  {  break;  }	  if(c    ==    ':')    {    break;    }    if(c    >=    ':')    {    break;    }    	non-compiled	[CE]  orphaned  case	46	None	replace
613	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  if(c  ==  ':')  {  break;  }  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  if(c  ==  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  if(c  ==  ':')  {  break;  }	  if(c    ==    ':')    {    break;    }    if(c    >=    ':')    {    break;    }    	non-compiled	[CE]  orphaned  case	46	None	replace
614	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	_reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg);    }    	compilable	  [FE]  JsonGenerationException  	57	2	replace
615	[BUG]  [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  [FE]  JsonGenerationException  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	_reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg);    }    	compilable	  [FE]  JsonGenerationException  	57	2	replace
616	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status!=    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    	compilable	  [FE]  AssertionFailedError  	51	1	replace
617	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status!=    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    	compilable	  [FE]  AssertionFailedError  	51	1	replace
618	[BUG]  [BUGGY]  c  =  ':';  ((  JsonWriteContext)_writeContext.getCurrentNodePointer()).setValue(c,  status);  break;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c  =  ':';  ((  JsonWriteContext)_writeContext.getCurrentNodePointer()).setValue(c,  status);  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c  =  ':';  ((  JsonWriteContext)_writeContext.getCurrentNodePointer()).setValue(c,  status);  break;	  c    =    ':';    ((    JsonWriteContext)_writeContext.getCurrentNodePointer()).setValue(c);    break;    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
619	[BUG]  [BUGGY]  ||  status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }	  ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
620	[BUG]  [BUGGY]  ||  status  >>  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  >>  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  >>  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }	  ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
621	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  }  If(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  }  If(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    c    =    ':';    }    If(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  }	  	non-compiled	[CE]  ';'  expected	106	None	add
622	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  (c  =  ':';  }  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  (c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  (c  =  ':';  }	  c    =    ':';    (c    =    ':';    	non-compiled	[CE]  ')'  expected	94	None	replace
623	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  (c  =  ':';  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  (c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  (c  =  ':';  }	  c    =    ':';    (c    =    ':';    	non-compiled	[CE]  ')'  expected	94	None	replace
624	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  ((  JsonWriteContext)_writeContext).writeString(typeMsg);  c  =  ':';  break;  }  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  ((  JsonWriteContext)_writeContext).writeString(typeMsg);  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  ((  JsonWriteContext)_writeContext).writeString(typeMsg);  c  =  ':';  break;  }	  c    =    ':';    break;    ((    JsonWriteContext)_writeContext).writeString(typeMsg);    c    =    ':';    break;    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
625	[BUG]  [BUGGY]  c  =  ':';  break;  ((  JsonWriteContext)_writeContext).writeString(typeMsg,  c);  c  =  ':';  break;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c  =  ':';  break;  ((  JsonWriteContext)_writeContext).writeString(typeMsg,  c);  c  =  ':';  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c  =  ':';  break;  ((  JsonWriteContext)_writeContext).writeString(typeMsg,  c);  c  =  ':';  break;	  c    =    ':';    break;    ((    JsonWriteContext)_writeContext).writeString(typeMsg);    c    =    ':';    break;    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
626	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')  {  break;  }  if(c  ==  ':'  ||  c  ==  '-')  {  break;  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')  {  break;  }  if(c  ==  ':'  ||  c  ==  '-')  {  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    '-')    {    break;    }    if(c  ==  ':'  ||  c  ==  '-')  {  break;	  	non-compiled	[CE]  orphaned  case	90	None	add
627	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(':')  {  break;  }  [CE]  orphaned  case  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(':')  {  break;  }	  if(c    ==    ':')    {    break;    }    if(c    {    ':')    {    break;    }    	non-compiled	[CE]  orphaned  case	113	None	replace
628	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c!=  ':')break;  if(c  ==  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c!=  ':')break;  if(c  ==  ':')break;	  if(c    ==    ':')break;    if(c!=    ':')break;    	compilable	  [FE]  AssertionFailedError  	37	1	replace
629	[BUG]  [BUGGY]  if(c!=  ':')break;  if(c  ==  ':')break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c!=  ':')break;  if(c  ==  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c!=  ':')break;  if(c  ==  ':')break;	  if(c    ==    ':')break;    if(c!=    ':')break;    	compilable	  [FE]  AssertionFailedError  	37	1	replace
630	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  >=  ':'  ||  c  ==  '-')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  >=  ':'  ||  c  ==  '-')break;	  if(c    ==    ':'    ||    c    ==    '-')break;    	compilable	  [FE]  AssertionFailedError  	99	2	replace
631	[BUG]  [BUGGY]  if(c  >=  ':'  ||  c  ==  '-')break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  >=  ':'  ||  c  ==  '-')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  >=  ':'  ||  c  ==  '-')break;	  if(c    ==    ':'    ||    c    ==    '-')break;    	compilable	  [FE]  AssertionFailedError  	99	2	replace
632	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c!=  '-')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  ':'  ||  c!=  '-')break;	  if(c    ==    ':'    ||    c    ==    '-')break;    	compilable	  [FE]  AssertionFailedError  	99	1	replace
633	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c!=  '-')break;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c!=  '-')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':'  ||  c!=  '-')break;	  if(c    ==    ':'    ||    c    ==    '-')break;    	compilable	  [FE]  AssertionFailedError  	99	1	replace
634	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  ':')break;  If(c  ==  ':'  ||  c  ==  ':')break;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  ':')break;  If(c  ==  ':'  ||  c  ==  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':'    ||    c    ==    ':')break;    If(c  ==  ':'  ||  c  ==  ':')break;	  	non-compiled	[CE]  ';'  expected	134	None	add
635	[BUG]  [BUGGY]  c    =    ':';    c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME  &&  typeMsg  ==  null)  {  c  =  ':';  c  =  ':';  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c    =    ':';    c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME  &&  typeMsg  ==  null)  {  c  =  ':';  c  =  ':';  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c        =        ':';        c    =    ':';    ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME  &&  typeMsg  ==  null)  {  c  =  ':';  c  =  ':';	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
636	[BUG]  [BUGGY]  c    =    ':';    c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME  &&  typeMsg!=  null)  {  c  =  ':';  c  =  ':';  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c    =    ':';    c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME  &&  typeMsg!=  null)  {  c  =  ':';  c  =  ':';  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c        =        ':';        c    =    ':';    ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME  &&  typeMsg!=  null)  {  c  =  ':';  c  =  ':';	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
637	[BUG]  [BUGGY]  c    =    ':';    c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME  &&  typeMsg  ==  null)  {  c  =  ':';  c  =  ':';  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c    =    ':';    c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME  &&  typeMsg  ==  null)  {  c  =  ':';  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c        =        ':';        c    =    ':';    ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME  &&  typeMsg  ==  null)  {  c  =  ':';  c  =  ':';  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
638	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWrite  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWrite  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_EXPECT_NAME)        {        break;        }        if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWrite	  	non-compiled	[CE]  ')'  expected	78	None	add
639	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteCon  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteCon  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_EXPECT_NAME)        {        break;        }        if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteCon	  	non-compiled	[CE]  ')'  expected	78	None	add
640	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  >=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c        ==        ':')        {        break;        }        if(c    >=    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	45	1	add
641	[BUG]  [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  >=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  >=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c        ==        ':')        {        break;        }        if(c    >=    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	45	1	add
642	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  >=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c        ==        ':')        {        break;        }        if(c    >=    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	45	1	add
643	[BUG]  [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  >=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  >=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c        ==        ':')        {        break;        }        if(c    >=    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	45	1	add
644	[BUG]  [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  >=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c  >>  ':')  {  break;  }  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  >=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c  >>  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c        ==        ':')        {        break;        }        if(c    >=    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c  >>  ':')  {  break;  }	  	non-compiled	[CE]  incompatible  types	45	None	add
645	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  >=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c        ==        ':')        {        break;        }        if(c    >=    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	45	1	add
646	[BUG]  [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  >=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  >=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c        ==        ':')        {        break;        }        if(c    >=    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	45	1	add
647	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;	  	non-compiled	[CE]  orphaned  case	26	None	add
648	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  c  =  ':';  }	  c    =    ':';    c    =    ':';    	compilable	  [FE]  AssertionFailedError  	2	1	replace
649	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  c  =  ':';  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  c  =  ':';  }	  c    =    ':';    c    =    ':';    	compilable	  [FE]  AssertionFailedError  	2	1	replace
650	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    c    =    ':';    break;    }    	compilable	  [FE]  AssertionFailedError  	104	1	replace
651	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    c    =    ':';    break;    }    	compilable	  [FE]  AssertionFailedError  	104	1	replace
652	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  ((  JsonWriteContext)_writeContext).writeValue(c);  c  =  ':';  break;  }  [CE]  method  writeValue  in  class  JsonWriteContext  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  ((  JsonWriteContext)_writeContext).writeValue(c);  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  ((  JsonWriteContext)_writeContext).writeValue(c);  c  =  ':';  break;  }	  c    =    ':';    break;    ((    JsonWriteContext)_writeContext).writeValue(c);    c    =    ':';    break;    	non-compiled	[CE]  method  writeValue  in  class  JsonWriteContext  cannot  be  applied  to  given  types;	121	None	replace
653	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  ((  JsonWriteContext)_writeContext).writeValue(c);  c  =  ':';  break;  }  [CE]  method  writeValue  in  class  JsonWriteContext  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  ((  JsonWriteContext)_writeContext).writeValue(c);  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  ((  JsonWriteContext)_writeContext).writeValue(c);  c  =  ':';  break;  }	  c    =    ':';    break;    ((    JsonWriteContext)_writeContext).writeValue(c);    c    =    ':';    break;    	non-compiled	[CE]  method  writeValue  in  class  JsonWriteContext  cannot  be  applied  to  given  types;	121	None	replace
654	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    else    {    writeRaw(status);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
655	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(status);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(status);  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(status);	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    else    {    writeRaw(status);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
656	[BUG]  [BUGGY]  c  =  ':'  +  _outputBuffer;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c  =  ':'  +  _outputBuffer;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c  =  ':'  +  _outputBuffer;	  c    =    ':'    +    status;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	105	None	replace
657	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COMMA)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext	  	non-compiled	[CE]  ')'  expected	75	None	add
658	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.ST  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.ST  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COMMA)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.ST	  	non-compiled	[CE]  ')'  expected	75	None	add
659	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COMMA)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	75	1	add
660	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COMMA)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	75	1	add
661	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COMMA)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext	  	non-compiled	[CE]  ')'  expected	75	None	add
662	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')break;    if(c  >=  ':')break;  if(c  >=  ':')break;  if(c  >=  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c        ==        ':')break;        if(c    >=    ':')break;    if(c  >=  ':')break;  if(c  >=  ':')break;	  	compilable	  [FE]  AssertionFailedError  	38	1	add
663	[BUG]  [BUGGY]  if(c    ==    ':')break;    if(c  >=  ':')break;  if(c  >=  ':')break;  if(c  >=  ':')break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')break;    if(c  >=  ':')break;  if(c  >=  ':')break;  if(c  >=  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c        ==        ':')break;        if(c    >=    ':')break;    if(c  >=  ':')break;  if(c  >=  ':')break;	  	compilable	  [FE]  AssertionFailedError  	38	1	add
664	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    break;    }    	compilable	  [FE]  AssertionFailedError  	66	2	replace
665	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    break;    }    	compilable	  [FE]  AssertionFailedError  	66	2	replace
666	[BUG]  [BUGGY]  ((  status  &  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)!=  0)  {  c  =  ':';  break;  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ((  status  &  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)!=  0)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	((  status  &  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)!=  0)  {  c  =  ':';  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)    {    c    =    ':';    break;    }    	non-compiled	[CE]  not  a  statement	102	None	replace
667	[BUG]  [BUGGY]  ((  status  &  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  ==  0)  {  c  =  ':';  break;  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ((  status  &  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  ==  0)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	((  status  &  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  ==  0)  {  c  =  ':';  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)    {    c    =    ':';    break;    }    	non-compiled	[CE]  not  a  statement	102	None	replace
668	[BUG]  [BUGGY]  ||  status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }	  ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
669	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)break;	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)break;    	compilable	  [FE]  AssertionFailedError  	19	1	replace
670	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)break;	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)break;    	compilable	  [FE]  AssertionFailedError  	19	1	replace
671	[BUG]  [BUGGY]  case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  break;  case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  [CE]  duplicate  case  label  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  break;  case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	case    JsonWriteContext.STATUS_EXPECT_NAME:    c    =    ':';    break;    case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';	  	non-compiled	[CE]  duplicate  case  label	108	None	add
672	[BUG]  [BUGGY]  case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  break;  cases  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  break;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  break;  cases  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	case    JsonWriteContext.STATUS_EXPECT_NAME:    c    =    ':';    break;    cases  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  break;	  	non-compiled	[CE]  ';'  expected	108	None	add
673	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_EXPECT_NAME)        {        break;        }        if(status!=    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext	  	non-compiled	[CE]  ')'  expected	80	None	add
674	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status        ==        JsonWriteContext.STATUS_EXPECT_NAME)        {        break;        }        if(status!=    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	80	1	add
675	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_EXPECT_NAME)        {        break;        }        if(status!=    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	80	1	add
676	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  >=  JsonWriteContext  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  >=  JsonWriteContext  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_EXPECT_NAME)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  >=  JsonWriteContext	  	non-compiled	[CE]  ')'  expected	82	None	add
677	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_EXPECT_NAME)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext	  	non-compiled	[CE]  ')'  expected	82	None	add
678	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status        ==        JsonWriteContext.STATUS_EXPECT_NAME)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	82	1	add
679	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_EXPECT_NAME)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	82	1	add
680	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    else    {    writeRaw(typeMsg);    }    	compilable	  [FE]  AssertionFailedError  	11	2	replace
681	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    else    {    writeRaw(typeMsg);    }    	compilable	  [FE]  AssertionFailedError  	11	2	replace
682	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)    {    c    =    ':';    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';	  	non-compiled	[CE]  orphaned  case	124	None	add
683	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  If(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  If(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    else    {    writeRaw(typeMsg);    }    If(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }	  	non-compiled	[CE]  ';'  expected	10	None	add
684	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COLON)        {        break;        }        if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	111	1	add
685	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COLON)        {        break;        }        if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	111	1	add
686	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;	  	non-compiled	[CE]  orphaned  case	85	None	add
687	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)break;	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)break;    	compilable	  [FE]  AssertionFailedError  	17	1	replace
688	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)break;	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)break;    	compilable	  [FE]  AssertionFailedError  	17	1	replace
689	[BUG]  [BUGGY]  ||  status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
690	[BUG]  [BUGGY]  ||  status  >>  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  >>  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  >>  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
691	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  >=  ':'  ||  c  ==  'n'  ||  c  ==  'r')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  >=  ':'  ||  c  ==  'n'  ||  c  ==  'r')break;	  if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r')break;    	compilable	  [FE]  AssertionFailedError  	97	2	replace
692	[BUG]  [BUGGY]  if(c  >=  ':'  ||  c  ==  'n'  ||  c  ==  'r')break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  >=  ':'  ||  c  ==  'n'  ||  c  ==  'r')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  >=  ':'  ||  c  ==  'n'  ||  c  ==  'r')break;	  if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r')break;    	compilable	  [FE]  AssertionFailedError  	97	2	replace
693	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    c    =    ':';    break;    }    	compilable	  [FE]  AssertionFailedError  	68	2	replace
694	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    c    =    ':';    break;    }    	compilable	  [FE]  AssertionFailedError  	68	2	replace
695	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COLON)        {        break;        }        if(status!=    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext	  	non-compiled	[CE]  ')'  expected	30	None	add
696	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  c  ==  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  c  ==  ':')  {  break;  }	  if(c    ==    ':'    ||    c    ==    ',')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	131	1	replace
697	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  c  ==  ':')  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  c  ==  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  c  ==  ':')  {  break;  }	  if(c    ==    ':'    ||    c    ==    ',')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	131	1	replace
698	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)break;  If(c  ==  ':')break;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)break;  If(c  ==  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)break;  If(c  ==  ':')break;	  if(c    ==    ':')break;    If(c    ==    ':')break;    	non-compiled	[CE]  ';'  expected	40	None	replace
699	[BUG]  [BUGGY]  ||  status  >=  JsonWriteContext.STATUS_EXPECT_NAME);  break;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  >=  JsonWriteContext.STATUS_EXPECT_NAME);  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  >=  JsonWriteContext.STATUS_EXPECT_NAME);  break;	          ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME);    break;    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
700	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME,  typeMsg);  break;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME,  typeMsg);  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME,  typeMsg);  break;	          ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME);    break;    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
701	[BUG]  [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c        ==        ':')        {        break;        }        if(c    ==    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;	  	non-compiled	[CE]  orphaned  case	41	None	add
702	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_NAME)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext	  	non-compiled	[CE]  ')'  expected	52	None	add
703	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_NAME)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	52	1	add
704	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_NAME)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	52	1	add
705	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_NAME)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext	  	non-compiled	[CE]  ')'  expected	52	None	add
706	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_NAME)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	52	1	add
707	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_NAME)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	52	1	add
708	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c!=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c        ==        ':')        {        break;        }        if(c!=    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	43	1	add
709	[BUG]  [BUGGY]  if(c    ==    ':')    {    break;    }    if(c!=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c!=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c        ==        ':')        {        break;        }        if(c!=    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	43	1	add
710	[BUG]  [BUGGY]  if(c    ==    ':')    {    break;    }    if(c!=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c!=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c        ==        ':')        {        break;        }        if(c!=    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c!=  ':')  {  break	  	non-compiled	[CE]  ';'  expected	43	None	add
711	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    c    =    ':';    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	67	2	add
712	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    c    =    ':';    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	67	2	add
713	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  >=  JsonWriteContext.  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  >=  JsonWriteContext.  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_EXPECT_NAME)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  >=  JsonWriteContext.	  	non-compiled	[CE]  <identifier>  expected	82	None	add
714	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  >=  JsonWriteContext  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  >=  JsonWriteContext  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_EXPECT_NAME)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  >=  JsonWriteContext	  	non-compiled	[CE]  ')'  expected	82	None	add
715	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  >=  JsonWriteContext.ST  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  >=  JsonWriteContext.ST  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_EXPECT_NAME)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  >=  JsonWriteContext.ST	  	non-compiled	[CE]  ')'  expected	82	None	add
716	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_EXPECT_NAME)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.	  	non-compiled	[CE]  <identifier>  expected	82	None	add
717	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  C  =  ':';  }  else  {  writeRaw(typeMsg);  }  [CE]  cannot  find  symbol  C  [FE]            AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  C  =  ':';  }  else  {  writeRaw(typeMsg);  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  C  =  ':';  }  else  {  writeRaw(typeMsg);  }	  c    =    ':';    C    =    ':';    	non-compiled	[CE]  cannot  find  symbol  C	95	None	replace
718	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  C  =  ':';  }  [CE]  cannot  find  symbol  C  [FE]              AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  C  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  C  =  ':';  }	  c    =    ':';    C    =    ':';    	non-compiled	[CE]  cannot  find  symbol  C	95	None	replace
719	[BUG]  [BUGGY]  c  =  ':';  ((  JsonWriteContext)_writeContext.getCurrentContext()).writeString(c);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c  =  ':';  ((  JsonWriteContext)_writeContext.getCurrentContext()).writeString(c);  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c  =  ':';  ((  JsonWriteContext)_writeContext.getCurrentContext()).writeString(c);	  c    =    ':';    ((    JsonWriteContext)_writeContext.getCurrentContext()).writeString(typeMsg);    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
720	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    	compilable	  [FE]  AssertionFailedError  	8	2	replace
721	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    	compilable	  [FE]  AssertionFailedError  	8	2	replace
722	[BUG]  [BUGGY]  case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  break;  switch(typeMsg)  {  case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  break;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  break;  switch(typeMsg)  {  case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	case    JsonWriteContext.STATUS_EXPECT_NAME:    c    =    ':';    break;    switch(typeMsg)  {  case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  break;	  	non-compiled	[CE]  illegal  start  of  expression	108	None	add
723	[BUG]  [BUGGY]  case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  break;  switch(typeMsg)  {  case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  break;  }  [CE]  strings  in  switch  are  not  supported  in  -source  1.6  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  break;  switch(typeMsg)  {  case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	case    JsonWriteContext.STATUS_EXPECT_NAME:    c    =    ':';    break;    switch(typeMsg)  {  case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  break;  }	  	non-compiled	[CE]  strings  in  switch  are  not  supported  in  -source  1.6	108	None	add
724	[BUG]  [BUGGY]  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';  [CE]  duplicate  case  label  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)    {    c    =    ':';    break;    }    	non-compiled	[CE]  duplicate  case  label	102	None	replace
725	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME:  c  =  ',';  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME:  c  =  ',';	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)    {    c    =    ':';    break;    }    	compilable	  [FE]  AssertionFailedError  	102	2	replace
726	[BUG]  [BUGGY]  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME:  c  =  ',';  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME:  c  =  ',';  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME:  c  =  ',';	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)    {    c    =    ':';    break;    }    	compilable	  [FE]  AssertionFailedError  	102	2	replace
727	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  if(status  ==  JsonWriteContext.STATUS_OK_ATER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    else    {    writeRaw(typeMsg);    }    if(status  ==  JsonWriteContext.STATUS_OK_ATER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }	  	compilable	  [FE]  AssertionFailedError  	10	2	add
728	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  if(status  ==  JsonWriteContext.STATUS_OK_ATER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  if(status  ==  JsonWriteContext.STATUS_OK_ATER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    else    {    writeRaw(typeMsg);    }    if(status  ==  JsonWriteContext.STATUS_OK_ATER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }	  	compilable	  [FE]  AssertionFailedError  	10	2	add
729	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext.  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext.  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_NAME)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext.	  	non-compiled	[CE]  <identifier>  expected	52	None	add
730	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_NAME)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext	  	non-compiled	[CE]  ')'  expected	52	None	add
731	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext.ST  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext.ST  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_NAME)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext.ST	  	non-compiled	[CE]  ')'  expected	52	None	add
732	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STAT  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STAT  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_NAME)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STAT	  	non-compiled	[CE]  ')'  expected	52	None	add
733	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  if(status  ==  JsonWriteContext.STATUS_OK_ATER_COMMA)  {  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    if(status  ==  JsonWriteContext.STATUS_OK_ATER_COMMA)  {  c  =  ':';  }	  	compilable	  [FE]  AssertionFailedError  	7	2	add
734	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  if(status  ==  JsonWriteContext.STATUS_OK_ATER_COMMA)  {  c  =  ':';  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  if(status  ==  JsonWriteContext.STATUS_OK_ATER_COMMA)  {  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    if(status  ==  JsonWriteContext.STATUS_OK_ATER_COMMA)  {  c  =  ':';  }	  	compilable	  [FE]  AssertionFailedError  	7	2	add
735	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)    {    c    =    ':';    }    	compilable	  [FE]  AssertionFailedError  	125	2	replace
736	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)    {    c    =    ':';    }    	compilable	  [FE]  AssertionFailedError  	125	2	replace
737	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(c  ==  JsonWriteContext.STATUS_OK_ATER_COMMA)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(c  ==  JsonWriteContext.STATUS_OK_ATER_COMMA)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	85	2	add
738	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(c  ==  JsonWriteContext.STATUS_OK_ATER_COMMA)  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(c  ==  JsonWriteContext.STATUS_OK_ATER_COMMA)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(c  ==  JsonWriteContext.STATUS_OK_ATER_COMMA)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	85	2	add
739	[BUG]  [BUGGY]  ||  status  >>  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  >>  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  >>  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
740	[BUG]  [BUGGY]  ||  status  [Delete]  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  [Delete]  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  [Delete]  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
741	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  '@')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  '@')  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    	compilable	  [FE]  AssertionFailedError  	115	2	replace
742	[BUG]  [BUGGY]  if(c  ==  '@')  {  break;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  '@')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  '@')  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    	compilable	  [FE]  AssertionFailedError  	115	2	replace
743	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COMMA)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.	  	non-compiled	[CE]  <identifier>  expected	75	None	add
744	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COMMA)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.	  	non-compiled	[CE]  <identifier>  expected	75	None	add
745	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  =='<  ')  {  break;  }  [CE]  unclosed  character  literal  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  =='<  ')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':'  ||  c  =='<  ')  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    	non-compiled	[CE]  unclosed  character  literal	79	None	replace
746	[BUG]  [BUGGY]  ||  status(1)  ==  JsonWriteContext.STATUS_EXPECT_NAME);  break;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status(1)  ==  JsonWriteContext.STATUS_EXPECT_NAME);  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status(1)  ==  JsonWriteContext.STATUS_EXPECT_NAME);  break;	          ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME);    break;    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
747	[BUG]  [BUGGY]  c  =  ':';  ((  JsonWriteContext)_writeContext.getCurrentContext()).writeString(typeMsg,  _outputBuffer,  status);  break;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c  =  ':';  ((  JsonWriteContext)_writeContext.getCurrentContext()).writeString(typeMsg,  _outputBuffer,  status);  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c  =  ':';  ((  JsonWriteContext)_writeContext.getCurrentContext()).writeString(typeMsg,  _outputBuffer,  status);  break;	  c    =    ':';    ((    JsonWriteContext)_writeContext.getCurrentContext()).writeString(typeMsg);    break;    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
748	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  '@')break;  if(c  ==  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  '@')break;  if(c  ==  ':')break;	  if(c    ==    ':')break;    if(c    ==    ':')break;    	compilable	  [FE]  AssertionFailedError  	35	2	replace
749	[BUG]  [BUGGY]  if(c  ==  '@')break;  if(c  ==  ':')break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  '@')break;  if(c  ==  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  '@')break;  if(c  ==  ':')break;	  if(c    ==    ':')break;    if(c    ==    ':')break;    	compilable	  [FE]  AssertionFailedError  	35	2	replace
750	[BUG]  [BUGGY]  c    =    ':';    c  =  ':';  if(c  ==  ':';  c  =  ':';  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c    =    ':';    c  =  ':';  if(c  ==  ':';  c  =  ':';  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c        =        ':';        c    =    ':';    if(c  ==  ':';  c  =  ':';	  	non-compiled	[CE]  ')'  expected	1	None	add
751	[BUG]  [BUGGY]  c    =    ':';    c  =  ':';  if(c!=  ':';  c  =  ':';  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c    =    ':';    c  =  ':';  if(c!=  ':';  c  =  ':';  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c        =        ':';        c    =    ':';    if(c!=  ':';  c  =  ':';	  	non-compiled	[CE]  ')'  expected	1	None	add
752	[BUG]  [BUGGY]  c    =    ':';    c  =  ':';  int  c  =  ':';  c  =  ':';  [CE]  variable  c  is  already  defined  in  method  _verifyValueWrite(String)  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c    =    ':';    c  =  ':';  int  c  =  ':';  c  =  ':';  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c        =        ':';        c    =    ':';    int  c  =  ':';  c  =  ':';	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  _verifyValueWrite(String)	1	None	add
753	[BUG]  [BUGGY]  c    =    ':';    c  =  ':';  c  =  ':';  c  =  ':';  break;  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c    =    ':';    c  =  ':';  c  =  ':';  c  =  ':';  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c        =        ':';        c    =    ':';    c  =  ':';  c  =  ':';  break;	  	non-compiled	[CE]  unreachable  statement	1	None	add
754	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':')  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  ':')  {  c  =  ':';  break;  }	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    c    =    ':';    break;    }    	compilable	  [FE]  AssertionFailedError  	55	2	replace
755	[BUG]  [BUGGY]  if(c  ==  ':')  {  c  =  ':';  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':')  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':')  {  c  =  ':';  break;  }	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    c    =    ':';    break;    }    	compilable	  [FE]  AssertionFailedError  	55	2	replace
756	[BUG]  [BUGGY]  ||  status  >>  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  >>  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  >>  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }	  ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
757	[BUG]  [BUGGY]  ||  status  <  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  <  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  <  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
758	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(_writeContext!=  null)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(_writeContext!=  null)  {  c  =  ':';  break;  }	  c    =    ':';    break;    ((    JsonWriteContext)_writeContext).writeValue(c);    c    =    ':';    break;    	compilable	  [FE]  AssertionFailedError  	121	2	replace
759	[BUG]  [BUGGY]  if(_writeContext!=  null)  {  c  =  ':';  break;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(_writeContext!=  null)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(_writeContext!=  null)  {  c  =  ':';  break;  }	  c    =    ':';    break;    ((    JsonWriteContext)_writeContext).writeValue(c);    c    =    ':';    break;    	compilable	  [FE]  AssertionFailedError  	121	2	replace
760	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_ATER_COMMA)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_ATER_COMMA)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	65	2	add
761	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_ATER_COMMA)  {  c  =  ':';  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_ATER_COMMA)  {  c  =  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_ATER_COMMA)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	65	2	add
762	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)c  =  ':';  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)c  =  ':';  break;	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)break;    	compilable	  [FE]  AssertionFailedError  	17	1	replace
763	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)c  =  ':';  break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)c  =  ':';  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)c  =  ':';  break;	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)break;    	compilable	  [FE]  AssertionFailedError  	17	1	replace
764	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)c  =  ':';  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)c  =  ':';	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)break;    	compilable	  [FE]  AssertionFailedError  	17	2	replace
765	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)c  =  ':';  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)c  =  ':';  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)c  =  ':';	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)break;    	compilable	  [FE]  AssertionFailedError  	17	2	replace
766	[BUG]  [BUGGY]  if(c  ==  ':')  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':')  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':')  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    else    {    writeRaw(typeMsg);    }    	non-compiled	[CE]  orphaned  case	11	None	replace
767	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')break;  }  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':'  ||  c  ==  '-')break;  }	  if(c    ==    ':'    ||    c    ==    '-')    {    break;    }    	non-compiled	[CE]  orphaned  case	91	None	replace
768	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  '[';  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  '[';  break;	  case    JsonWriteContext.STATUS_EXPECT_NAME:    c    =    ':';    break;    	compilable	  [FE]  AssertionFailedError  	109	2	replace
769	[BUG]  [BUGGY]  case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  '[';  break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  '[';  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  '[';  break;	  case    JsonWriteContext.STATUS_EXPECT_NAME:    c    =    ':';    break;    	compilable	  [FE]  AssertionFailedError  	109	2	replace
770	[BUG]  [BUGGY]  c  =  ':';  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ',';  [CE]  duplicate  case  label  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c  =  ':';  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ',';  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c  =  ':';  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ',';	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    c    =    ':';    }    	non-compiled	[CE]  duplicate  case  label	107	None	replace
771	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c  =  ':'  +  JsonWriteContext.STATUS_OK_AFTER_COMMA;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	c  =  ':'  +  JsonWriteContext.STATUS_OK_AFTER_COMMA;	  c    =    ':'    +    status;    	compilable	  [FE]  AssertionFailedError  	105	2	replace
772	[BUG]  [BUGGY]  c  =  ':'  +  JsonWriteContext.STATUS_OK_AFTER_COMMA;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c  =  ':'  +  JsonWriteContext.STATUS_OK_AFTER_COMMA;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c  =  ':'  +  JsonWriteContext.STATUS_OK_AFTER_COMMA;	  c    =    ':'    +    status;    	compilable	  [FE]  AssertionFailedError  	105	2	replace
773	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COLON)        {        break;        }        if(status!=    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.	  	non-compiled	[CE]  <identifier>  expected	30	None	add
774	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COLON)        {        break;        }        if(status!=    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	30	1	add
775	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COLON)        {        break;        }        if(status!=    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	30	1	add
776	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteCon  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteCon  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COLON)        {        break;        }        if(status!=    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteCon	  	non-compiled	[CE]  ')'  expected	30	None	add
777	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '+'  ||  c  ==  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  ':'  ||  c  ==  '+'  ||  c  ==  ':')  {  break;  }	  if(c    ==    ':'    ||    c    ==    '+')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	61	2	replace
778	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '+'  ||  c  ==  ':')  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '+'  ||  c  ==  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':'  ||  c  ==  '+'  ||  c  ==  ':')  {  break;  }	  if(c    ==    ':'    ||    c    ==    '+')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	61	2	replace
779	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '+'  ||  c  ==  '-')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  ':'  ||  c  ==  '+'  ||  c  ==  '-')  {  break;  }	  if(c    ==    ':'    ||    c    ==    '+')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	61	2	replace
780	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '+'  ||  c  ==  '-')  {  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '+'  ||  c  ==  '-')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':'  ||  c  ==  '+'  ||  c  ==  '-')  {  break;  }	  if(c    ==    ':'    ||    c    ==    '+')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	61	2	replace
781	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '+'  ||  c  ==  'n')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  ':'  ||  c  ==  '+'  ||  c  ==  'n')  {  break;  }	  if(c    ==    ':'    ||    c    ==    '+')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	61	2	replace
782	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '+'  ||  c  ==  'n')  {  break;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '+'  ||  c  ==  'n')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':'  ||  c  ==  '+'  ||  c  ==  'n')  {  break;  }	  if(c    ==    ':'    ||    c    ==    '+')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	61	2	replace
783	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  <  ':'  ||  c  >  '-')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  <  ':'  ||  c  >  '-')break;	  if(c    ==    ':'    ||    c    ==    '-')break;    	compilable	  [FE]  AssertionFailedError  	99	1	replace
784	[BUG]  [BUGGY]  if(c  <  ':'  ||  c  >  '-')break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  <  ':'  ||  c  >  '-')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  <  ':'  ||  c  >  '-')break;	  if(c    ==    ':'    ||    c    ==    '-')break;    	compilable	  [FE]  AssertionFailedError  	99	1	replace
785	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')break;  }  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')break;  }	  if(c    ==    ':'    ||    c    ==    'n'    ||    c    ==    'r')    {    break;    }    	non-compiled	[CE]  orphaned  case	89	None	replace
786	[BUG]  [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  >=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c  >>  ':')  {  break;  }  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  >=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c  >>  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c        ==        ':')        {        break;        }        if(c    >=    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c  >>  ':')  {  break;  }	  	non-compiled	[CE]  incompatible  types	45	None	add
787	[BUG]  [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  >=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c  >>  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  >=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c  >>  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c        ==        ':')        {        break;        }        if(c    >=    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  if(c  >>  ':')  {  break;  }  if(c  >=  ':')  {  break;  }	  	non-compiled	[CE]  incompatible  types	45	None	add
788	[BUG]  [BUGGY]  if(c    ==    ':')    {    break;    }    if(c!=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c  >>  ':')  {  break;  }  if(c!=  ':')  {  break;  }  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c!=  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c  >>  ':')  {  break;  }  if(c!=  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c        ==        ':')        {        break;        }        if(c!=    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  if(c  >>  ':')  {  break;  }  if(c!=  ':')  {  break;  }	  	non-compiled	[CE]  incompatible  types	43	None	add
789	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteCon  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteCon  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COLON)        {        break;        }        if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteCon	  	non-compiled	[CE]  ')'  expected	28	None	add
790	[BUG]  [BUGGY]  if(_writeContext!=  null)  {  c  =  ':';  ((  JsonWriteContext)_writeContext).writeString(typeMsg);  break;  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(_writeContext!=  null)  {  c  =  ':';  ((  JsonWriteContext)_writeContext).writeString(typeMsg);  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(_writeContext!=  null)  {  c  =  ':';  ((  JsonWriteContext)_writeContext).writeString(typeMsg);  break;  }	  c    =    ':';    ((    JsonWriteContext)_writeContext).writeString(typeMsg);    break;    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
791	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg  +  ':';  break;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg  +  ':';  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg  +  ':';  break;  }	  c    =    ':';    break;    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg    +    ':';    break;    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
792	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(c  ==  JsonWriteContext.STATUS_OK_ATER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(c  ==  JsonWriteContext.STATUS_OK_ATER_COLON)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	26	1	add
793	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(c  ==  JsonWriteContext.STATUS_OK_ATER_COLON)  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(c  ==  JsonWriteContext.STATUS_OK_ATER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(c  ==  JsonWriteContext.STATUS_OK_ATER_COLON)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	26	1	add
794	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '@'  ||  c  ==  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  ':'  ||  c  ==  '@'  ||  c  ==  ':')  {  break;  }	  if(c    ==    ':'    ||    c    ==    '@')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	133	2	replace
795	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '@'  ||  c  ==  ':')  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '@'  ||  c  ==  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':'  ||  c  ==  '@'  ||  c  ==  ':')  {  break;  }	  if(c    ==    ':'    ||    c    ==    '@')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	133	2	replace
796	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '@'  ||  c  ==  '-')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  ':'  ||  c  ==  '@'  ||  c  ==  '-')  {  break;  }	  if(c    ==    ':'    ||    c    ==    '@')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	133	2	replace
797	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '@'  ||  c  ==  '-')  {  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':'  ||  c  ==  '@'  ||  c  ==  '-')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':'  ||  c  ==  '@'  ||  c  ==  '-')  {  break;  }	  if(c    ==    ':'    ||    c    ==    '@')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	133	2	replace
798	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  case  JsonWriteContext.STATUS_OK_AFTER_NAME:  c  =  ':';  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	case  JsonWriteContext.STATUS_OK_AFTER_NAME:  c  =  ':';  break;	          case    JsonWriteContext.STATUS_UNKNOWN:    c    =    ':';    break;    	compilable	  [FE]  AssertionFailedError  	110	2	replace
799	[BUG]  [BUGGY]  case  JsonWriteContext.STATUS_OK_AFTER_NAME:  c  =  ':';  break;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  case  JsonWriteContext.STATUS_OK_AFTER_NAME:  c  =  ':';  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	case  JsonWriteContext.STATUS_OK_AFTER_NAME:  c  =  ':';  break;	          case    JsonWriteContext.STATUS_UNKNOWN:    c    =    ':';    break;    	compilable	  [FE]  AssertionFailedError  	110	2	replace
800	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(c  ==  JsonWriteContext.STATUS_OK_ATER_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(c  ==  JsonWriteContext.STATUS_OK_ATER_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	23	2	add
801	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(c  ==  JsonWriteContext.STATUS_OK_ATER_NAME)  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(c  ==  JsonWriteContext.STATUS_OK_ATER_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(c  ==  JsonWriteContext.STATUS_OK_ATER_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	23	2	add
802	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_ATER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_ATER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	116	2	add
803	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_ATER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_ATER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_ATER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	116	2	add
804	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES:  c  =  ',';  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES:  c  =  ',';	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)    {    c    =    ':';    break;    }    	compilable	  [FE]  AssertionFailedError  	70	2	replace
805	[BUG]  [BUGGY]  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES:  c  =  ',';  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES:  c  =  ',';  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES:  c  =  ',';	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)    {    c    =    ':';    break;    }    	compilable	  [FE]  AssertionFailedError  	70	2	replace
806	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES:  c  =  ':';  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES:  c  =  ':';  break;	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)    {    c    =    ':';    break;    }    	compilable	  [FE]  AssertionFailedError  	70	2	replace
807	[BUG]  [BUGGY]  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES:  c  =  ':';  break;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES:  c  =  ':';  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES:  c  =  ':';  break;	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)    {    c    =    ':';    break;    }    	compilable	  [FE]  AssertionFailedError  	70	2	replace
808	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':')break;  if(c  ==  '-')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  ':')break;  if(c  ==  '-')break;	  if(c    ==    ':')break;    if(c    {    ':')break;    	compilable	  [FE]  AssertionFailedError  	100	2	replace
809	[BUG]  [BUGGY]  if(c  ==  ':')break;  if(c  ==  '-')break;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  ':')break;  if(c  ==  '-')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':')break;  if(c  ==  '-')break;	  if(c    ==    ':')break;    if(c    {    ':')break;    	compilable	  [FE]  AssertionFailedError  	100	2	replace
810	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(status);  }  [CE]  no  suitable  method  found  for  writeRaw(int)  [FE]          AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(status);  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(status);  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    else    {    writeRaw(status);    }    	non-compiled	[CE]  no  suitable  method  found  for  writeRaw(int)	9	None	replace
811	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  >=  JsonWriteContext.  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  >=  JsonWriteContext.  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COLON)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  >=  JsonWriteContext.	  	non-compiled	[CE]  <identifier>  expected	32	None	add
812	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  >=  JsonWriteContext.ST  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  >=  JsonWriteContext.ST  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COLON)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  >=  JsonWriteContext.ST	  	non-compiled	[CE]  ')'  expected	32	None	add
813	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COLON)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	32	1	add
814	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COLON)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	32	1	add
815	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COLON)        {        break;        }        if(status    >=    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.	  	non-compiled	[CE]  <identifier>  expected	32	None	add
816	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c!=  ':'  ||  c  ==  ',')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c!=  ':'  ||  c  ==  ',')  {  break;  }	  if(c    ==    ':'    ||    c    ==    ',')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	131	1	replace
817	[BUG]  [BUGGY]  if(c!=  ':'  ||  c  ==  ',')  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c!=  ':'  ||  c  ==  ',')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c!=  ':'  ||  c  ==  ',')  {  break;  }	  if(c    ==    ':'    ||    c    ==    ',')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	131	1	replace
818	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.ST  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.ST  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_EXPECT_NAME)        {        break;        }        if(status!=    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.ST	  	non-compiled	[CE]  ')'  expected	80	None	add
819	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status        ==        JsonWriteContext.STATUS_EXPECT_NAME)        {        break;        }        if(status!=    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	80	1	add
820	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_EXPECT_NAME)        {        break;        }        if(status!=    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	80	1	add
821	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.STAT  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.STAT  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_EXPECT_NAME)        {        break;        }        if(status!=    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.STAT	  	non-compiled	[CE]  ')'  expected	80	None	add
822	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c!=  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c!=  ':')  {  break;  }	  if(c    ==    ':')    {    break;    }    if(c!=    ':')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	44	1	replace
823	[BUG]  [BUGGY]  if(c!=  ':')  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c!=  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c!=  ':')  {  break;  }	  if(c    ==    ':')    {    break;    }    if(c!=    ':')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	44	1	replace
824	[BUG]  [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  break;  }  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c        ==        ':')        {        break;        }        if(c    ==    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  break;  }	  	non-compiled	[CE]  orphaned  case	41	None	add
825	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c        ==        ':')        {        break;        }        if(c    ==    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	41	1	add
826	[BUG]  [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c    ==    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c        ==        ':')        {        break;        }        if(c    ==    ':')    {    break;    }    if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	41	1	add
827	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_NAME)        {        break;        }        if(status!=    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	50	1	add
828	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_NAME)        {        break;        }        if(status!=    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	50	1	add
829	[BUG]  [BUGGY]  ||  status  >>  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  >>  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  >>  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
830	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c!=  ':')break;  if(c!=  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c!=  ':')break;  if(c!=  ':')break;	  if(c    ==    ':')break;    if(c!=    ':')break;    	compilable	  [FE]  AssertionFailedError  	37	1	replace
831	[BUG]  [BUGGY]  if(c!=  ':')break;  if(c!=  ':')break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c!=  ':')break;  if(c!=  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c!=  ':')break;  if(c!=  ':')break;	  if(c    ==    ':')break;    if(c!=    ':')break;    	compilable	  [FE]  AssertionFailedError  	37	1	replace
832	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteCon  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteCon  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COMMA)        {        break;        }        if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteCon	  	non-compiled	[CE]  ')'  expected	71	None	add
833	[BUG]  [BUGGY]  ||  status  ||  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status  ||  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ||  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    c    =    ':';    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
834	[BUG]  [BUGGY]  ||  status(1)  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  ||  status(1)  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status(1)  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    c    =    ':';    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
835	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  if(c    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    	compilable	  [FE]  AssertionFailedError  	27	1	replace
836	[BUG]  [BUGGY]  if(c!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  if(c    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    	compilable	  [FE]  AssertionFailedError  	27	1	replace
837	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteCon  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteCon  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COMMA)        {        break;        }        if(status!=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteCon	  	non-compiled	[CE]  ')'  expected	73	None	add
838	[BUG]  [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteCon  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteCon  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status        ==        JsonWriteContext.STATUS_OK_AFTER_COLON)        {        break;        }        if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteCon	  	non-compiled	[CE]  ')'  expected	111	None	add
839	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  &&  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  &&  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    	compilable	  [FE]  AssertionFailedError  	117	2	replace
840	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  &&  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  &&  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  &&  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    	compilable	  [FE]  AssertionFailedError  	117	2	replace
841	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  <  ':'  ||  c  >  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  <  ':'  ||  c  >  ':')break;	  if(c    ==    ':'    ||    c    ==    ':')break;    	compilable	  [FE]  AssertionFailedError  	135	1	replace
842	[BUG]  [BUGGY]  if(c  <  ':'  ||  c  >  ':')break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(c  <  ':'  ||  c  >  ':')break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  <  ':'  ||  c  >  ':')break;	  if(c    ==    ':'    ||    c    ==    ':')break;    	compilable	  [FE]  AssertionFailedError  	135	1	replace
843	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  else  {  writeRaw(typeMsg);  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  else  {  writeRaw(typeMsg);  }	  c    =    ':';    break;    c    =    ':';    break;    	compilable	  [FE]  AssertionFailedError  	12	2	replace
844	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  else  {  writeRaw(typeMsg);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  else  {  writeRaw(typeMsg);  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  else  {  writeRaw(typeMsg);  }	  c    =    ':';    break;    c    =    ':';    break;    	compilable	  [FE]  AssertionFailedError  	12	2	replace
