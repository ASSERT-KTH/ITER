bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  c  =  ':';  c  =  ':';  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	c    =    ':';    c  =  ':';	  	compilable	  [FE]  AssertionFailedError  	1	2	add
2	[BUG]  [BUGGY]  c  =  ':';  c  =  ':';  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  c  =  ':';  c  =  ':';  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c    =    ':';    c  =  ':';	  	compilable	  [FE]  AssertionFailedError  	1	2	add
3	[BUG]  [BUGGY]  c  =  ':';  c  =  ':';  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  [CE]  duplicate  case  label  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  c  =  ':';  c  =  ':';  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c    =    ':';    c  =  ':';  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';	  	non-compiled	[CE]  duplicate  case  label	1	None	add
4	[BUG]  [BUGGY]  c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c    =    ':';    ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
5	[BUG]  [BUGGY]  c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c    =    ':';    ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
6	[BUG]  [BUGGY]  c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg+ ": ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg+ ": ");  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c    =    ':';    ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg+ ": ");	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }	  c    =    ':';    	compilable	  [FE]  AssertionFailedError  	2	2	replace
8	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }	  c    =    ':';    	compilable	  [FE]  AssertionFailedError  	2	2	replace
9	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(status);  }  [CE]  no  suitable  method  found  for  writeRaw(int)  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(status);  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(status);  }	  c    =    ':';    	non-compiled	[CE]  no  suitable  method  found  for  writeRaw(int)	2	None	replace
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }	  c    =    ':';    	compilable	  [FE]  AssertionFailedError  	2	2	replace
11	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }	  c    =    ':';    	compilable	  [FE]  AssertionFailedError  	2	2	replace
12	[BUG]  [BUGGY]  c  =  ':';  break;  c  =  ':';  break;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  c  =  ':';  break;  c  =  ':';  break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c    =    ':';    break;    c  =  ':';  break;	  	non-compiled	[CE]  unreachable  statement	17	None	add
13	[BUG]  [BUGGY]  c  =  ':';  break;  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  c  =  ':';  break;  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c    =    ':';    break;    ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
14	[BUG]  [BUGGY]  c  =  ':';  break;  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  c  =  ':';  break;  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c    =    ':';    break;    ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
15	[BUG]  [BUGGY]  c  =  ':';  break;  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg+ ",  expecting  field  name ");  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  c  =  ':';  break;  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg+ ",  expecting  field  name ");  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c    =    ':';    break;    ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg+ ",  expecting  field  name ");	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;	  if(c    ==    ':')break;    	compilable	  [FE]  AssertionFailedError  	16	2	replace
17	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;	  if(c    ==    ':')break;    	compilable	  [FE]  AssertionFailedError  	16	2	replace
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;	  if(c    ==    ':')break;    	compilable	  [FE]  AssertionFailedError  	16	2	replace
19	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)break;	  if(c    ==    ':')break;    	compilable	  [FE]  AssertionFailedError  	16	2	replace
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;	  if(c    ==    ':')break;    	compilable	  [FE]  AssertionFailedError  	16	2	replace
21	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')break;	  if(c    ==    ':')break;    	compilable	  [FE]  AssertionFailedError  	16	2	replace
22	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    	compilable	  [FE]  AssertionFailedError  	12	2	replace
24	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    	compilable	  [FE]  AssertionFailedError  	12	2	replace
25	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    	compilable	  [FE]  AssertionFailedError  	8	2	replace
27	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    	compilable	  [FE]  AssertionFailedError  	8	2	replace
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	7	1	add
29	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	7	1	add
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	7	1	add
31	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	7	1	add
32	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	7	1	add
33	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	7	1	add
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  ':')break;  if(c  ==  ':')break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':')break;    if(c  ==  ':')break;	  	compilable	  [FE]  AssertionFailedError  	15	1	add
35	[BUG]  [BUGGY]  if(c  ==  ':')break;  if(c  ==  ':')break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  ':')break;  if(c  ==  ':')break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':')break;    if(c  ==  ':')break;	  	compilable	  [FE]  AssertionFailedError  	15	1	add
36	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  ':')break;  if(c!=  ':')break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':')break;    if(c!=  ':')break;	  	compilable	  [FE]  AssertionFailedError  	15	1	add
37	[BUG]  [BUGGY]  if(c  ==  ':')break;  if(c!=  ':')break;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  ':')break;  if(c!=  ':')break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':')break;    if(c!=  ':')break;	  	compilable	  [FE]  AssertionFailedError  	15	1	add
38	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  ':')break;  if(c  >=  ':')break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':')break;    if(c  >=  ':')break;	  	compilable	  [FE]  AssertionFailedError  	15	1	add
39	[BUG]  [BUGGY]  if(c  ==  ':')break;  if(c  >=  ':')break;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  ':')break;  if(c  >=  ':')break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':')break;    if(c  >=  ':')break;	  	compilable	  [FE]  AssertionFailedError  	15	1	add
40	[BUG]  [BUGGY]  if(c  ==  ':')break;  If(c  ==  ':')break;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  ':')break;  If(c  ==  ':')break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':')break;    If(c  ==  ':')break;	  	non-compiled	[CE]  ';'  expected	15	None	add
41	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':')    {    break;    }    if(c  ==  ':')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	13	1	add
42	[BUG]  [BUGGY]  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  ':')  {  break;  }  if(c  ==  ':')  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':')    {    break;    }    if(c  ==  ':')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	13	1	add
43	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':')    {    break;    }    if(c!=  ':')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	13	1	add
44	[BUG]  [BUGGY]  if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  ':')  {  break;  }  if(c!=  ':')  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':')    {    break;    }    if(c!=  ':')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	13	1	add
45	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c    ==    ':')    {    break;    }    if(c  >=  ':')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	13	1	add
46	[BUG]  [BUGGY]  if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  ':')  {  break;  }  if(c  >=  ':')  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':')    {    break;    }    if(c  >=  ':')  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	13	1	add
47	[BUG]  [BUGGY]  if(c  ==  ':')  {  break;  }  If(c  ==  ':')  {  break;  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  ':')  {  break;  }  If(c  ==  ':')  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':')    {    break;    }    If(c  ==  ':')  {  break;  }	  	non-compiled	[CE]  ';'  expected	13	None	add
48	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	11	1	add
49	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	11	1	add
50	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	11	1	add
51	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	11	1	add
52	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	11	1	add
53	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	11	1	add
54	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  }	      	compilable	  [FE]  AssertionFailedError  	10	2	replace
55	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  break;  }	      	compilable	  [FE]  AssertionFailedError  	10	2	replace
56	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  }	      	compilable	  [FE]  AssertionFailedError  	10	2	replace
57	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  }	      	compilable	  [FE]  AssertionFailedError  	10	2	replace
58	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(c);  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(c);  }	      	compilable	  [FE]  AssertionFailedError  	10	2	replace
59	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(c);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(c);  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(c);  }	      	compilable	  [FE]  AssertionFailedError  	10	2	replace
60	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  ':'  ||  c  ==  '+')  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  ':'  ||  c  ==  '+')  {  break;  }	  if(c    ==    ':')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	14	2	replace
61	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '+')  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  ':'  ||  c  ==  '+')  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':'  ||  c  ==  '+')  {  break;  }	  if(c    ==    ':')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	14	2	replace
62	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
63	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    	compilable	  [FE]  AssertionFailedError  	6	2	replace
64	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    	compilable	  [FE]  AssertionFailedError  	6	2	replace
65	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }	  c    =    ':';    break;    	compilable	  [FE]  AssertionFailedError  	18	2	replace
66	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }	  c    =    ':';    break;    	compilable	  [FE]  AssertionFailedError  	18	2	replace
67	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }	  c    =    ':';    break;    	compilable	  [FE]  AssertionFailedError  	18	2	replace
68	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  c  =  ':';  break;  }	  c    =    ':';    break;    	compilable	  [FE]  AssertionFailedError  	18	2	replace
69	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  break;  }	  c    =    ':';    break;    	compilable	  [FE]  AssertionFailedError  	18	2	replace
70	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  break;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_FIELD_NAMES)  {  c  =  ':';  break;  }	  c    =    ':';    break;    	compilable	  [FE]  AssertionFailedError  	18	2	replace
71	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
72	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
73	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
74	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
75	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
76	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
77	[BUG]  [BUGGY]      ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME);  break;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]      ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME);  break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	        ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME);  break;	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
78	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
79	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
80	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
81	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
82	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
83	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
84	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
85	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    	compilable	  [FE]  AssertionFailedError  	4	2	replace
86	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    	compilable	  [FE]  AssertionFailedError  	4	2	replace
87	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  break;	  	non-compiled	[CE]  orphaned  case	11	None	add
88	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')  {  break;  }	  if(c    ==    ':')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	14	2	replace
89	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')  {  break;  }	  if(c    ==    ':')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	14	2	replace
90	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  ':'  ||  c  ==  '-')  {  break;  }	  if(c    ==    ':')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	14	2	replace
91	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')  {  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':'  ||  c  ==  '-')  {  break;  }	  if(c    ==    ':')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	14	2	replace
92	[BUG]  [BUGGY]  c  =  ':';  break;  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg  +  ':';  break;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  c  =  ':';  break;  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg  +  ':';  break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c    =    ':';    break;    ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg  +  ':';  break;	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
93	[BUG]  [BUGGY]  c  =  ':';  int  c  =  ':';  [CE]  variable  c  is  already  defined  in  method  _verifyValueWrite(String)  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  c  =  ':';  int  c  =  ':';  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c    =    ':';    int  c  =  ':';	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  _verifyValueWrite(String)	1	None	add
94	[BUG]  [BUGGY]  c  =  ':';  (c  =  ':';  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  c  =  ':';  (c  =  ':';  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c    =    ':';    (c  =  ':';	  	non-compiled	[CE]  ')'  expected	1	None	add
95	[BUG]  [BUGGY]  c  =  ':';  C  =  ':';  [CE]  cannot  find  symbol  C  [FE]        AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  c  =  ':';  C  =  ':';  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c    =    ':';    C  =  ':';	  	non-compiled	[CE]  cannot  find  symbol  C	1	None	add
96	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')break;	  if(c    ==    ':')break;    	compilable	  [FE]  AssertionFailedError  	16	2	replace
97	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r')break;	  if(c    ==    ':')break;    	compilable	  [FE]  AssertionFailedError  	16	2	replace
98	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  ':'  ||  c  ==  '-')break;	  if(c    ==    ':')break;    	compilable	  [FE]  AssertionFailedError  	16	2	replace
99	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')break;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':'  ||  c  ==  '-')break;	  if(c    ==    ':')break;    	compilable	  [FE]  AssertionFailedError  	16	2	replace
100	[BUG]  [BUGGY]  if(c  ==  ':')break;  if(c  {  ':')break;  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  ':')break;  if(c  {  ':')break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':')break;    if(c  {  ':')break;	  	non-compiled	[CE]  ')'  expected	15	None	add
101	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  break;  }	  c    =    ':';    break;    	compilable	  [FE]  AssertionFailedError  	18	2	replace
102	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  break;  }	  c    =    ':';    break;    	compilable	  [FE]  AssertionFailedError  	18	2	replace
103	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  break;  }	  c    =    ':';    break;    	compilable	  [FE]  AssertionFailedError  	18	2	replace
104	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_NAME)  {  c  =  ':';  break;  }	  c    =    ':';    break;    	compilable	  [FE]  AssertionFailedError  	18	2	replace
105	[BUG]  [BUGGY]  c  =  ':'  +  status;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  c  =  ':'  +  status;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c  =  ':'  +  status;	  c    =    ':';    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
106	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  }	  c    =    ':';    	compilable	  [FE]  AssertionFailedError  	2	2	replace
107	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  }	  c    =    ':';    	compilable	  [FE]  AssertionFailedError  	2	2	replace
108	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  break;	      	compilable	  [FE]  AssertionFailedError  	10	2	replace
109	[BUG]  [BUGGY]  case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	case  JsonWriteContext.STATUS_EXPECT_NAME:  c  =  ':';  break;	      	compilable	  [FE]  AssertionFailedError  	10	2	replace
110	[BUG]  [BUGGY]      case  JsonWriteContext.STATUS_UNKNOWN:  c  =  ':';  break;  [CE]  cannot  find  symbol  STATUS_UNKNOWN  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]      case  JsonWriteContext.STATUS_UNKNOWN:  c  =  ':';  break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	        case  JsonWriteContext.STATUS_UNKNOWN:  c  =  ':';  break;	  	non-compiled	[CE]  cannot  find  symbol  STATUS_UNKNOWN	9	None	add
111	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	7	1	add
112	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  	compilable	  [FE]  AssertionFailedError  	7	1	add
113	[BUG]  [BUGGY]  if(c  ==  ':')  {  break;  }  if(c  {  ':')  {  break;  }  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  ':')  {  break;  }  if(c  {  ':')  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c    ==    ':')    {    break;    }    if(c  {  ':')  {  break;  }	  	non-compiled	[CE]  ')'  expected	13	None	add
114	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;	  	non-compiled	[CE]  orphaned  case	5	None	add
115	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;	  	non-compiled	[CE]  orphaned  case	3	None	add
116	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    	compilable	  [FE]  AssertionFailedError  	4	1	replace
117	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    	compilable	  [FE]  AssertionFailedError  	4	1	replace
118	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    	compilable	  [FE]  AssertionFailedError  	4	2	replace
119	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    	compilable	  [FE]  AssertionFailedError  	4	2	replace
120	[BUG]  [BUGGY]  c  =  ':';  break;  ((  JsonWriteContext)_writeContext).writeString(typeMsg);  c  =  ':';  break;  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  c  =  ':';  break;  ((  JsonWriteContext)_writeContext).writeString(typeMsg);  c  =  ':';  break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c    =    ':';    break;    ((  JsonWriteContext)_writeContext).writeString(typeMsg);  c  =  ':';  break;	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
121	[BUG]  [BUGGY]  c  =  ':';  break;  ((  JsonWriteContext)_writeContext).writeValue(c);  c  =  ':';  break;  [CE]  method  writeValue  in  class  JsonWriteContext  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  c  =  ':';  break;  ((  JsonWriteContext)_writeContext).writeValue(c);  c  =  ':';  break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c    =    ':';    break;    ((  JsonWriteContext)_writeContext).writeValue(c);  c  =  ':';  break;	  	non-compiled	[CE]  method  writeValue  in  class  JsonWriteContext  cannot  be  applied  to  given  types;	17	None	add
122	[BUG]  [BUGGY]  c  =  ':';  break;  ((  JsonWriteContext)_writer).writeString(typeMsg);  c  =  ':';  break;  [CE]  inconvertible  types  [FE]        AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  c  =  ':';  break;  ((  JsonWriteContext)_writer).writeString(typeMsg);  c  =  ':';  break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c    =    ':';    break;    ((  JsonWriteContext)_writer).writeString(typeMsg);  c  =  ':';  break;	  	non-compiled	[CE]  inconvertible  types	17	None	add
123	[BUG]  [BUGGY]  c  =  ':';  break;  Character.isWhitespace(c);  c  =  ':';  break;  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  c  =  ':';  break;  Character.isWhitespace(c);  c  =  ':';  break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c    =    ':';    break;    Character.isWhitespace(c);  c  =  ':';  break;	  	non-compiled	[CE]  unreachable  statement	17	None	add
124	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  }	  c    =    ':';    	compilable	  [FE]  AssertionFailedError  	2	2	replace
125	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_EXPECT_NAME)  {  c  =  ':';  }	  c    =    ':';    	compilable	  [FE]  AssertionFailedError  	2	2	replace
126	[BUG]  [BUGGY]  c  =  ':';  ((  JsonWriteContext)_writeContext.getCurrentContext()).writeString(typeMsg);  break;  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  c  =  ':';  ((  JsonWriteContext)_writeContext.getCurrentContext()).writeString(typeMsg);  break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c    =    ':';    ((  JsonWriteContext)_writeContext.getCurrentContext()).writeString(typeMsg);  break;	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
127	[BUG]  [BUGGY]  c  =  ':';  ((  JsonWriteContext)_writeContext).writeString(typeMsg);  break;  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  c  =  ':';  ((  JsonWriteContext)_writeContext).writeString(typeMsg);  break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c    =    ':';    ((  JsonWriteContext)_writeContext).writeString(typeMsg);  break;	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
128	[BUG]  [BUGGY]  c  =  ':';  ((  JsonWriteContext)_writeContext.getCurrentNodePointer()).setValue(c);  break;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  c  =  ':';  ((  JsonWriteContext)_writeContext.getCurrentNodePointer()).setValue(c);  break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c    =    ':';    ((  JsonWriteContext)_writeContext.getCurrentNodePointer()).setValue(c);  break;	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
129	[BUG]  [BUGGY]  c  =  ':';  ((  JsonWriteContext)_writeContext.getCurrentContext()).writeString(typeMsg);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  c  =  ':';  ((  JsonWriteContext)_writeContext.getCurrentContext()).writeString(typeMsg);  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	c    =    ':';    ((  JsonWriteContext)_writeContext.getCurrentContext()).writeString(typeMsg);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
130	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  ':'  ||  c  ==  ',')  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  ':'  ||  c  ==  ',')  {  break;  }	  if(c    ==    ':')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	14	1	replace
131	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  ',')  {  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  ':'  ||  c  ==  ',')  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':'  ||  c  ==  ',')  {  break;  }	  if(c    ==    ':')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	14	1	replace
132	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  ':'  ||  c  ==  '@')  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  ':'  ||  c  ==  '@')  {  break;  }	  if(c    ==    ':')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	14	2	replace
133	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '@')  {  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  ':'  ||  c  ==  '@')  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':'  ||  c  ==  '@')  {  break;  }	  if(c    ==    ':')    {    break;    }    	compilable	  [FE]  AssertionFailedError  	14	2	replace
134	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  ':'  ||  c  ==  ':')break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  ':'  ||  c  ==  ':')break;	  if(c    ==    ':')break;    	compilable	  [FE]  AssertionFailedError  	16	2	replace
135	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  ':')break;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  ':'  ||  c  ==  ':')break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':'  ||  c  ==  ':')break;	  if(c    ==    ':')break;    	compilable	  [FE]  AssertionFailedError  	16	2	replace
136	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  't')break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  't')break;	  if(c    ==    ':')break;    	compilable	  [FE]  AssertionFailedError  	16	2	replace
137	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  't')break;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  't')break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  't')break;	  if(c    ==    ':')break;    	compilable	  [FE]  AssertionFailedError  	16	2	replace
138	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')break;	  if(c    ==    ':')break;    	compilable	  [FE]  AssertionFailedError  	16	2	replace
139	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')break;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';    [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')break;	  if(c    ==    ':')break;    	compilable	  [FE]  AssertionFailedError  	16	2	replace
