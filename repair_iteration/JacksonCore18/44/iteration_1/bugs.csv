bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError  [CONTEXT]  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }    [BUGGY]  if(len  >=  room)  {  [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(len  >=  room)  {	if  (room  >=  len)  {  	compilable	  [FE]  StringIndexOutOfBoundsException  	87	5	replace
2	[BUG]  [BUGGY]  if(len  >=  room)  {  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError  [CONTEXT]  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }    [BUGGY]  if(len  >=  room)  {  [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  >=  room)  {	if  (room  >=  len)  {  	compilable	  [FE]  StringIndexOutOfBoundsException  	87	5	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }    [BUGGY]  if(len  <  SHORT_WRITE)  {  [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(len  <  SHORT_WRITE)  {	if  (room  >=  len)  {  	compilable	  [FE]  AssertionFailedError  	87	1	replace
4	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }    [BUGGY]  if(len  <  SHORT_WRITE)  {  [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  SHORT_WRITE)  {	if  (room  >=  len)  {  	compilable	  [FE]  AssertionFailedError  	87	1	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }    [BUGGY]  if(room  >  len)  {  [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(room  >  len)  {	if  (room  >=  len)  {  	compilable	  [FE]  AssertionFailedError  	87	1	replace
6	[BUG]  [BUGGY]  if(room  >  len)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }    [BUGGY]  if(room  >  len)  {  [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  >  len)  {	if  (room  >=  len)  {  	compilable	  [FE]  AssertionFailedError  	87	1	replace
7	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]          AssertionFailedError  [CONTEXT]  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }    [BUGGY]    [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	  	if  (room  >=  len)  {  	non-compiled	[CE]  illegal  start  of  type	87	None	replace
8	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError  [CONTEXT]  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }    [BUGGY]  if(room  <  len)  {  [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(room  <  len)  {	if  (room  >=  len)  {  	compilable	  [FE]  StringIndexOutOfBoundsException  	87	5	replace
9	[BUG]  [BUGGY]  if(room  <  len)  {  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError  [CONTEXT]  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }    [BUGGY]  if(room  <  len)  {  [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  <  len)  {	if  (room  >=  len)  {  	compilable	  [FE]  StringIndexOutOfBoundsException  	87	5	replace
10	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError  [CONTEXT]  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }    [BUGGY]  if(len  >  room)  {  [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(len  >  room)  {	if  (room  >=  len)  {  	compilable	  [FE]  StringIndexOutOfBoundsException  	87	5	replace
11	[BUG]  [BUGGY]  if(len  >  room)  {  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError  [CONTEXT]  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }    [BUGGY]  if(len  >  room)  {  [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  >  room)  {	if  (room  >=  len)  {  	compilable	  [FE]  StringIndexOutOfBoundsException  	87	5	replace
