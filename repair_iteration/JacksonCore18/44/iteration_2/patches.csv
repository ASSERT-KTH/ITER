bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >=  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(len  <  SHORT_WRITE  ||  room  >=  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	26	1	replace
2	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >=  SHORT_WRITE)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >=  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  SHORT_WRITE  ||  room  >=  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	26	1	replace
3	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  ||  len  >  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(len  <  SHORT_WRITE  ||  len  >  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	26	1	replace
4	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  ||  len  >  SHORT_WRITE)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  ||  len  >  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  SHORT_WRITE  ||  len  >  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	26	1	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(len  <  SHORT_WRITE  &&  room  >  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	26	1	replace
6	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >  SHORT_WRITE)  {  [FE]  AssertionFailedError  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  SHORT_WRITE  &&  room  >  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	26	1	replace
7	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE)  {  int  len  =  text.length();  if(len  >  room)  {  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE)  {  int  len  =  text.length();  if(len  >  room)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  SHORT_WRITE)  {  int  len  =  text.length();  if(len  >  room)  {	  if(len    >    room)    {    int    len    =    text.length();    if(len    >    room)    {    	non-compiled	[CE]  ';'  expected	52	None	replace
8	[BUG]  [BUGGY]  if(len  <  =  room)  {  int  len  =  text.length();  if(len  >  room)  {  [CE]  illegal  start  of  expression  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  =  room)  {  int  len  =  text.length();  if(len  >  room)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  =  room)  {  int  len  =  text.length();  if(len  >  room)  {	  if(len    >    room)    {    int    len    =    text.length();    if(len    >    room)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
9	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  int  len  =  text.length();  if(len  >  room)  {  [CE]  ';'  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(_outputTail  >=  _outputEnd)  {  int  len  =  text.length();  if(len  >  room)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(_outputTail  >=  _outputEnd)  {  int  len  =  text.length();  if(len  >  room)  {	  if(len    >    room)    {    int    len    =    text.length();    if(len    >    room)    {    	non-compiled	[CE]  ';'  expected	52	None	replace
10	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE)  {  int  len  =  text.length();  if(len  >=  room)  {  [CE]  ';'  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE)  {  int  len  =  text.length();  if(len  >=  room)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  SHORT_WRITE)  {  int  len  =  text.length();  if(len  >=  room)  {	  if(len    >    room)    {    int    len    =    text.length();    if(len    >    room)    {    	non-compiled	[CE]  ';'  expected	52	None	replace
11	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                        AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(room  >=  SHORT_WRITE)  {  if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    <    SHORT_WRITE)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    =    len;    }    else    {    writeRawLong(text);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	67	1	replace
12	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]                        AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  >=  SHORT_WRITE)  {  if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    <    SHORT_WRITE)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    =    len;    }    else    {    writeRawLong(text);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	67	1	replace
13	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  >=  SHORT_WRITE)  {  if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong	  if(room    <    SHORT_WRITE)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    =    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	67	None	replace
14	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }  else  {  writeRawLong  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }  else  {  writeRawLong  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  >=  SHORT_WRITE)  {  if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }  else  {  writeRawLong	  if(room    <    SHORT_WRITE)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    =    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	67	None	replace
15	[BUG]  [BUGGY]  if(len  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  =  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  =  0)  {	  if(len    <    SHORT_WRITE)    {    if(len    >=    SHORT_WRITE)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
16	[BUG]  [BUGGY]  _writer.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  _writer.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	_writer.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;	  if(room    <    SHORT_WRITE)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
17	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]                      AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(room  <  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    <    SHORT_WRITE)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	compilable	  [FE]  StringIndexOutOfBoundsException  	64	5	replace
18	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [FE]  StringIndexOutOfBoundsException  [FE]                      AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  <  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    <    SHORT_WRITE)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	compilable	  [FE]  StringIndexOutOfBoundsException  	64	5	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  +  room  +  1)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(len  <  SHORT_WRITE  +  room  +  1)  {	  if(len    >    room    +    1)    {    	compilable	  [FE]  AssertionFailedError  	30	1	replace
20	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  +  room  +  1)  {  [FE]  AssertionFailedError  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  +  room  +  1)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  SHORT_WRITE  +  room  +  1)  {	  if(len    >    room    +    1)    {    	compilable	  [FE]  AssertionFailedError  	30	1	replace
21	[BUG]  [BUGGY]  if(len  <  =  room  +  1)  {  [CE]  illegal  start  of  expression  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  =  room  +  1)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  =  room  +  1)  {	  if(len    >    room    +    1)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
22	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >=  room  +  1)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(len  >=  room  +  1)  {	  if(len    >    room    +    1)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	30	5	replace
23	[BUG]  [BUGGY]  if(len  >=  room  +  1)  {  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >=  room  +  1)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  >=  room  +  1)  {	  if(len    >    room    +    1)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	30	5	replace
24	[BUG]  [BUGGY]  If(len  <  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  If(len  <  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	If(len  <  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE)    {    If(len    <    SHORT_WRITE)    {    	non-compiled	[CE]  ';'  expected	9	None	replace
25	[BUG]  [BUGGY]  If(len  <  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  If(len  <  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	If(len  <  0)  {	  if(len    <    SHORT_WRITE)    {    If(len    <    SHORT_WRITE)    {    	non-compiled	[CE]  ';'  expected	9	None	replace
26	[BUG]  [BUGGY]  If(len  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  If(len  <  =  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	If(len  <  =  0)  {	  if(len    <    SHORT_WRITE)    {    If(len    <    SHORT_WRITE)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
27	[BUG]  [BUGGY]  if(len  <  =  room  &&  room  <  SHORT_WRITE)  {  [CE]  illegal  start  of  expression  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  =  room  &&  room  <  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  =  room  &&  room  <  SHORT_WRITE)  {	  if(len    <    =    room)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
28	[BUG]  [BUGGY]  if(len  <  =  room  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  =  room  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  =  room  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(len    <    =    room)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
29	[BUG]  [BUGGY]  if(len  <  =  room  &&  room  >=  SHORT_WRITE)  {  [CE]  illegal  start  of  expression  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  =  room  &&  room  >=  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  =  room  &&  room  >=  SHORT_WRITE)  {	  if(len    <    =    room)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
30	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  ==  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(len  ==  SHORT_WRITE)  {	  if(len    >=    room)    {    if(len    ==    room)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	3	5	replace
31	[BUG]  [BUGGY]  if(len  ==  SHORT_WRITE)  {  [FE]  StringIndexOutOfBoundsException  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  ==  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  ==  SHORT_WRITE)  {	  if(len    >=    room)    {    if(len    ==    room)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	3	5	replace
32	[BUG]  [BUGGY]  if(room  >  room)  {  if(room  >  room)  {  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >  room)  {  if(room  >  room)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    >    room)    {    if(room  >  room)  {	  	non-compiled	[CE]  ';'  expected	45	None	add
33	[BUG]  [BUGGY]  if(room  >  room)  {  If(room  >  room)  {  [CE]  ';'  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >  room)  {  If(room  >  room)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    >    room)    {    If(room  >  room)  {	  	non-compiled	[CE]  ';'  expected	45	None	add
34	[BUG]  [BUGGY]  if(room  >  room)  {  if(room  >  space)  {  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >  room)  {  if(room  >  space)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    >    room)    {    if(room  >  space)  {	  	non-compiled	[CE]  ';'  expected	45	None	add
35	[BUG]  [BUGGY]  Integer  len  =  text.length();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  Integer  len  =  text.length();  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	Integer  len  =  text.length();	  if(room    >    len)    {    int    len    =    text.length();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
36	[BUG]  [BUGGY]  if(room  >=  len)  {  int  len  =  text.length();  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >=  len)  {  int  len  =  text.length();  }  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  >=  len)  {  int  len  =  text.length();  }	  if(room    >    len)    {    int    len    =    text.length();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
37	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    >=    SHORT_WRITE)    {    if(room  >=  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	39	None	add
38	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  >>  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  >>  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    >=    SHORT_WRITE)    {    if(room  >>  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	39	None	add
39	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room!=  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room!=  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    >=    SHORT_WRITE)    {    if(room!=  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	39	None	add
40	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  ==  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  ==  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    >=    SHORT_WRITE)    {    if(room  ==  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	39	None	add
41	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  If(room  >=  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >=  SHORT_WRITE)  {  If(room  >=  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    >=    SHORT_WRITE)    {    If(room  >=  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	39	None	add
42	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  if(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  if(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    <    SHORT_WRITE    &&    room    >=    SHORT_WRITE)    {    if(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	56	None	add
43	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  if(len  <  SHORT_WRITE  &&  room!=  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  if(len  <  SHORT_WRITE  &&  room!=  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    <    SHORT_WRITE    &&    room    >=    SHORT_WRITE)    {    if(len  <  SHORT_WRITE  &&  room!=  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	56	None	add
44	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  if(len  <  SHORT_WRITE  &&  room  >>  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  if(len  <  SHORT_WRITE  &&  room  >>  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    <    SHORT_WRITE    &&    room    >=    SHORT_WRITE)    {    if(len  <  SHORT_WRITE  &&  room  >>  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	56	None	add
45	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  if(len  <  SHORT_WRITE  &&  room  ==  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  if(len  <  SHORT_WRITE  &&  room  ==  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    <    SHORT_WRITE    &&    room    >=    SHORT_WRITE)    {    if(len  <  SHORT_WRITE  &&  room  ==  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	56	None	add
46	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE)  {  If(room  <  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE)  {  If(room  <  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  SHORT_WRITE)  {  If(room  <  SHORT_WRITE)  {	  if(room    <    len)    {    If(room    <    len)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
47	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE)  {  If(room  >=  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE)  {  If(room  >=  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  SHORT_WRITE)  {  If(room  >=  SHORT_WRITE)  {	  if(room    <    len)    {    If(room    <    len)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
48	[BUG]  [BUGGY]  if(room  <  len)  {  If(room  >  len)  {  [CE]  ';'  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  len)  {  If(room  >  len)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  <  len)  {  If(room  >  len)  {	  if(room    <    len)    {    If(room    <    len)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
49	[BUG]  [BUGGY]  if(len  <  =  _outputMaxContiguous)  {  If(room  <  len)  {  [CE]  illegal  start  of  expression  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  =  _outputMaxContiguous)  {  If(room  <  len)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  =  _outputMaxContiguous)  {  If(room  <  len)  {	  if(room    <    len)    {    If(room    <    len)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
50	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  ==  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(room  ==  SHORT_WRITE)  {	  if(room    <    SHORT_WRITE)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	38	5	replace
51	[BUG]  [BUGGY]  if(room  ==  SHORT_WRITE)  {  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  ==  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  ==  SHORT_WRITE)  {	  if(room    <    SHORT_WRITE)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	38	5	replace
52	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(room  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {	  if(room    <    SHORT_WRITE)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	38	1	replace
53	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {	  if(room    <    SHORT_WRITE)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	38	1	replace
54	[BUG]  [BUGGY]  if(len  >  room)  {  int  len  =  text.length();  }  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >  room)  {  int  len  =  text.length();  }  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  >  room)  {  int  len  =  text.length();  }	  if(len    >    room)    {    int    len    =    text.length();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
55	[BUG]  [BUGGY]  _writer.write(text,  0,  room);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  _writer.write(text,  0,  room);  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	_writer.write(text,  0,  room);	  _writer.write(text,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
56	[BUG]  [BUGGY]  _writer.write(text,  0,  len,  _outputBuffer,  _outputTail);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  _writer.write(text,  0,  len,  _outputBuffer,  _outputTail);  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	_writer.write(text,  0,  len,  _outputBuffer,  _outputTail);	  _writer.write(text,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
57	[BUG]  [BUGGY]  _writer.write(text,  0,  len,  _outputBuffer);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  _writer.write(text,  0,  len,  _outputBuffer);  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	_writer.write(text,  0,  len,  _outputBuffer);	  _writer.write(text,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
58	[BUG]  [BUGGY]  _writer.write(text,  0,  len,  _outputTail);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  _writer.write(text,  0,  len,  _outputTail);  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	_writer.write(text,  0,  len,  _outputTail);	  _writer.write(text,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
59	[BUG]  [BUGGY]  if(len  <  =  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  =  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  =  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    &&    room    >=    SHORT_WRITE)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
60	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(room  >  SHORT_WRITE)  {	  if(room    >=    SHORT_WRITE)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	40	1	replace
61	[BUG]  [BUGGY]  if(room  >  SHORT_WRITE)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  >  SHORT_WRITE)  {	  if(room    >=    SHORT_WRITE)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	40	1	replace
62	[BUG]  [BUGGY]  int  len  =  room.length();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  int  len  =  room.length();  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	int  len  =  room.length();	  int    len    =    text.length();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
63	[BUG]  [BUGGY]  int  len  =  _outputBuffer.length();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  int  len  =  _outputBuffer.length();  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	int  len  =  _outputBuffer.length();	  int    len    =    text.length();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
64	[BUG]  [BUGGY]  int  len  =  _outputHead.length();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  int  len  =  _outputHead.length();  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	int  len  =  _outputHead.length();	  int    len    =    text.length();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
65	[BUG]  [BUGGY]  int  len  =  text.length()  -  room;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  int  len  =  text.length()  -  room;  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	int  len  =  text.length()  -  room;	  int    len    =    text.length();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
66	[BUG]  [BUGGY]  If(len  <  =  room)  {  [CE]  illegal  start  of  expression  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  If(len  <  =  room)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	If(len  <  =  room)  {	  if(len    >    room)    {    If(len    >    room)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
67	[BUG]  [BUGGY]  if(len  <  =  room)  {  If(len  >  room)  {  [CE]  illegal  start  of  expression  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  =  room)  {  If(len  >  room)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  =  room)  {  If(len  >  room)  {	  if(len    >    room)    {    If(len    >    room)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
68	[BUG]  [BUGGY]  If(len  >  0)  {  [CE]  ';'  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  If(len  >  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	If(len  >  0)  {	  if(len    >    room)    {    If(len    >    room)    {    	non-compiled	[CE]  ';'  expected	22	None	replace
69	[BUG]  [BUGGY]  If(len  >  room)  {  [CE]  ';'  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  If(len  >  room)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	If(len  >  room)  {	  if(len    >    room)    {    If(len    >    room)    {    	non-compiled	[CE]  ';'  expected	22	None	replace
70	[BUG]  [BUGGY]  if(len  <  room)  {  if(len  <  room)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  room)  {  if(len  <  room)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    <    room)    {    if(len  <  room)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
71	[BUG]  [BUGGY]  if(len  <  room)  {  if(len  <  space)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  room)  {  if(len  <  space)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    <    room)    {    if(len  <  space)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
72	[BUG]  [BUGGY]  if(len  <  room)  {  If(len  <  room)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  room)  {  If(len  <  room)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    <    room)    {    If(len  <  room)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
73	[BUG]  [BUGGY]  if(len  <  room)  {  if(len  <  len)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  room)  {  if(len  <  len)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    <    room)    {    if(len  <  len)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
74	[BUG]  [BUGGY]  _writer.write(text,  room);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  _writer.write(text,  room);  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	_writer.write(text,  room);	  _writer.write(text);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
75	[BUG]  [BUGGY]  _writer.write(text,  null);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  _writer.write(text,  null);  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	_writer.write(text,  null);	  _writer.write(text);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
76	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  if(room  <  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  SHORT_WRITE)  {  if(room  <  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    <    SHORT_WRITE)    {    if(room  <  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	37	None	add
77	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    <    SHORT_WRITE)    {    if(room  >=  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	37	None	add
78	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  If(room  <  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  SHORT_WRITE)  {  If(room  <  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    <    SHORT_WRITE)    {    If(room  <  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	37	None	add
79	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(len  >  SHORT_WRITE)  {	  if(len    >=    SHORT_WRITE)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	19	5	replace
80	[BUG]  [BUGGY]  if(len  >  SHORT_WRITE)  {  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  >  SHORT_WRITE)  {	  if(len    >=    SHORT_WRITE)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	19	5	replace
81	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE)  {	  if(room    <    len)    {    if(room    >=    len)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
82	[BUG]  [BUGGY]  if(len  <  =  _outputEnd)  {  if(room  >=  len)  {  [CE]  illegal  start  of  expression  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  =  _outputEnd)  {  if(room  >=  len)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  =  _outputEnd)  {  if(room  >=  len)  {	  if(room    <    len)    {    if(room    >=    len)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
83	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE)  {  if(room  ==  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE)  {  if(room  ==  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  SHORT_WRITE)  {  if(room  ==  SHORT_WRITE)  {	  if(room    <    len)    {    if(room    >=    len)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
84	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  ==  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(len  ==  0)  {	  if(len    >=    0)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	50	5	replace
85	[BUG]  [BUGGY]  if(len  ==  0)  {  [FE]  StringIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  ==  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  ==  0)  {	  if(len    >=    0)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	50	5	replace
86	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE)  {  int  len  =  text.length();  if(room  >  len)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE)  {  int  len  =  text.length();  if(room  >  len)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  SHORT_WRITE)  {  int  len  =  text.length();  if(room  >  len)  {	  if(room    >    len)    {    int    len    =    text.length();    if(room    >    len)    {    	non-compiled	[CE]  ';'  expected	47	None	replace
87	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]          AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(_outputTail  >=  _outputEnd)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(_outputTail  >=  _outputEnd)  {	  if(room    >    len)    {    int    len    =    text.length();    if(room    >    len)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	47	5	replace
88	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  [FE]  StringIndexOutOfBoundsException  [FE]          AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(_outputTail  >=  _outputEnd)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(_outputTail  >=  _outputEnd)  {	  if(room    >    len)    {    int    len    =    text.length();    if(room    >    len)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	47	5	replace
89	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE)  {  int  len  =  text.length();  if(room  >=  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE)  {  int  len  =  text.length();  if(room  >=  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  SHORT_WRITE)  {  int  len  =  text.length();  if(room  >=  SHORT_WRITE)  {	  if(room    >    len)    {    int    len    =    text.length();    if(room    >    len)    {    	non-compiled	[CE]  ';'  expected	47	None	replace
90	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  int  len  =  text.length();  if(room  >  len)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(_outputTail  >=  _outputEnd)  {  int  len  =  text.length();  if(room  >  len)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(_outputTail  >=  _outputEnd)  {  int  len  =  text.length();  if(room  >  len)  {	  if(room    >    len)    {    int    len    =    text.length();    if(room    >    len)    {    	non-compiled	[CE]  ';'  expected	47	None	replace
91	[BUG]  [BUGGY]  if(len  <  space)  {  [CE]  cannot  find  symbol  space  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  space)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  space)  {	  if(len    >    room)    {    if(len    >    space)    {    	non-compiled	[CE]  cannot  find  symbol  space	23	None	replace
92	[BUG]  [BUGGY]  if(len  >  room  +  1)  {  if(len  >  room  +  1)  {  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >  room  +  1)  {  if(len  >  room  +  1)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    >    room    +    1)    {    if(len  >  room  +  1)  {	  	non-compiled	[CE]  ';'  expected	29	None	add
93	[BUG]  [BUGGY]  if(len  >  room  +  1)  {  If(len  >  room  +  1)  {  [CE]  ';'  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >  room  +  1)  {  If(len  >  room  +  1)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    >    room    +    1)    {    If(len  >  room  +  1)  {	  	non-compiled	[CE]  ';'  expected	29	None	add
94	[BUG]  [BUGGY]  if(len  >  room  +  1)  {  int  len  =  text.length();  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >  room  +  1)  {  int  len  =  text.length();  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    >    room    +    1)    {    int  len  =  text.length();	  	non-compiled	[CE]  ';'  expected	29	None	add
95	[BUG]  [BUGGY]  writer.writeRaw(text);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  writer.writeRaw(text);  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	writer.writeRaw(text);	  writer.writeRaw(room);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
96	[BUG]  [BUGGY]  writer.writeRaw(_outputBuffer,  room);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  writer.writeRaw(_outputBuffer,  room);  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	writer.writeRaw(_outputBuffer,  room);	  writer.writeRaw(room);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
97	[BUG]  [BUGGY]  writer.writeRawLong(text);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  writer.writeRawLong(text);  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	writer.writeRawLong(text);	  writer.writeRaw(room);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
98	[BUG]  [BUGGY]  _writer.writeRaw(text,  room);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  _writer.writeRaw(text,  room);  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	_writer.writeRaw(text,  room);	  _writer.writeRaw(text);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
99	[BUG]  [BUGGY]  _writer.writeRaw(room);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  _writer.writeRaw(room);  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	_writer.writeRaw(room);	  _writer.writeRaw(text);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
100	[BUG]  [BUGGY]  _writer.writeRawLong(text);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  _writer.writeRawLong(text);  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	_writer.writeRawLong(text);	  _writer.writeRaw(text);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
101	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >  0)  {  if(len  <  SHORT_WRITE  &&  room  >  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >  0)  {  if(len  <  SHORT_WRITE  &&  room  >  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    <    SHORT_WRITE    &&    room    >    0)    {    if(len  <  SHORT_WRITE  &&  room  >  0)  {	  	non-compiled	[CE]  ';'  expected	54	None	add
102	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >  0)  {  If(len  <  SHORT_WRITE  &&  room  >  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >  0)  {  If(len  <  SHORT_WRITE  &&  room  >  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    <    SHORT_WRITE    &&    room    >    0)    {    If(len  <  SHORT_WRITE  &&  room  >  0)  {	  	non-compiled	[CE]  ';'  expected	54	None	add
103	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >  0)  {  if(len  >=  SHORT_WRITE  &&  room  >  0)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >  0)  {  if(len  >=  SHORT_WRITE  &&  room  >  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    <    SHORT_WRITE    &&    room    >    0)    {    if(len  >=  SHORT_WRITE  &&  room  >  0)  {	  	non-compiled	[CE]  ';'  expected	54	None	add
104	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >=  room)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(room  >=  room)  {	  if(room    >    room)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	46	1	replace
105	[BUG]  [BUGGY]  if(room  >=  room)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >=  room)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  >=  room)  {	  if(room    >    room)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	46	1	replace
106	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE)  {  writeRawLong(text);  }  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(len  <  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE)  {  writeRawLong(text);  }	  if(room    <    SHORT_WRITE)    {    if(len    >    room)    {    writeRawLong(text);    }    	compilable	  [FE]  StringIndexOutOfBoundsException  	66	5	replace
107	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE)  {  writeRawLong(text);  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE)  {  writeRawLong(text);  }  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE)  {  writeRawLong(text);  }	  if(room    <    SHORT_WRITE)    {    if(len    >    room)    {    writeRawLong(text);    }    	compilable	  [FE]  StringIndexOutOfBoundsException  	66	5	replace
108	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE)  {  if(room  >  0)  {  writeRawLong(text);  }  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(len  <  SHORT_WRITE)  {  if(room  >  0)  {  writeRawLong(text);  }	  if(room    <    SHORT_WRITE)    {    if(len    >    room)    {    writeRawLong(text);    }    	compilable	  [FE]  StringIndexOutOfBoundsException  	66	5	replace
109	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE)  {  if(room  >  0)  {  writeRawLong(text);  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE)  {  if(room  >  0)  {  writeRawLong(text);  }  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  SHORT_WRITE)  {  if(room  >  0)  {  writeRawLong(text);  }	  if(room    <    SHORT_WRITE)    {    if(len    >    room)    {    writeRawLong(text);    }    	compilable	  [FE]  StringIndexOutOfBoundsException  	66	5	replace
110	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE)  {  if(room  >  room)  {  writeRawLong(text);  }  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(len  <  SHORT_WRITE)  {  if(room  >  room)  {  writeRawLong(text);  }	  if(room    <    SHORT_WRITE)    {    if(len    >    room)    {    writeRawLong(text);    }    	compilable	  [FE]  AssertionFailedError  	66	1	replace
111	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE)  {  if(room  >  room)  {  writeRawLong(text);  }  [FE]  AssertionFailedError  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE)  {  if(room  >  room)  {  writeRawLong(text);  }  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  SHORT_WRITE)  {  if(room  >  room)  {  writeRawLong(text);  }	  if(room    <    SHORT_WRITE)    {    if(len    >    room)    {    writeRawLong(text);    }    	compilable	  [FE]  AssertionFailedError  	66	1	replace
112	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE)  {  if(room  ==  SHORT_WRITE)  {  writeRawLong(text);  }  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(len  <  SHORT_WRITE)  {  if(room  ==  SHORT_WRITE)  {  writeRawLong(text);  }	  if(room    <    SHORT_WRITE)    {    if(len    >    room)    {    writeRawLong(text);    }    	compilable	  [FE]  AssertionFailedError  	66	1	replace
113	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE)  {  if(room  ==  SHORT_WRITE)  {  writeRawLong(text);  }  [FE]  AssertionFailedError  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE)  {  if(room  ==  SHORT_WRITE)  {  writeRawLong(text);  }  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  SHORT_WRITE)  {  if(room  ==  SHORT_WRITE)  {  writeRawLong(text);  }	  if(room    <    SHORT_WRITE)    {    if(len    >    room)    {    writeRawLong(text);    }    	compilable	  [FE]  AssertionFailedError  	66	1	replace
114	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  if(len  >  room)  {  writeRawLong(text);  }  if(room  <  SHORT_WRITE)  {  if(len  >  room)  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  SHORT_WRITE)  {  if(len  >  room)  {  writeRawLong(text);  }  if(room  <  SHORT_WRITE)  {  if(len  >  room)  {  writeRawLong(text);  }  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    <    SHORT_WRITE)    {    if(len    >    room)    {    writeRawLong(text);    }    if(room  <  SHORT_WRITE)  {  if(len  >  room)  {  writeRawLong(text);  }	  	non-compiled	[CE]  ';'  expected	65	None	add
115	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  if(len  >  room)  {  writeRawLong(text);  }  if(len  <  SHORT_WRITE)  {  if(len  >  room)  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  SHORT_WRITE)  {  if(len  >  room)  {  writeRawLong(text);  }  if(len  <  SHORT_WRITE)  {  if(len  >  room)  {  writeRawLong(text);  }  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    <    SHORT_WRITE)    {    if(len    >    room)    {    writeRawLong(text);    }    if(len  <  SHORT_WRITE)  {  if(len  >  room)  {  writeRawLong(text);  }	  	non-compiled	[CE]  ';'  expected	65	None	add
116	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  if(len  >  room)  {  writeRawLong(text);  }  if(room  >=  SHORT_WRITE)  {  if(len  >  room)  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  SHORT_WRITE)  {  if(len  >  room)  {  writeRawLong(text);  }  if(room  >=  SHORT_WRITE)  {  if(len  >  room)  {  writeRawLong(text);  }  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    <    SHORT_WRITE)    {    if(len    >    room)    {    writeRawLong(text);    }    if(room  >=  SHORT_WRITE)  {  if(len  >  room)  {  writeRawLong(text);  }	  	non-compiled	[CE]  ';'  expected	65	None	add
117	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  if(len  >  room)  {  writeRawLong(text);  }  If(room  <  SHORT_WRITE)  {  if(len  >  room)  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  SHORT_WRITE)  {  if(len  >  room)  {  writeRawLong(text);  }  If(room  <  SHORT_WRITE)  {  if(len  >  room)  {  writeRawLong(text);  }  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    <    SHORT_WRITE)    {    if(len    >    room)    {    writeRawLong(text);    }    If(room  <  SHORT_WRITE)  {  if(len  >  room)  {  writeRawLong(text);  }	  	non-compiled	[CE]  ';'  expected	65	None	add
118	[BUG]  [BUGGY]  if(len  >  room  &&  room  <  SHORT_WRITE)  {  if(len  >  room  &&  room  <  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >  room  &&  room  <  SHORT_WRITE)  {  if(len  >  room  &&  room  <  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    >    room    &&    room    <    SHORT_WRITE)    {    if(len  >  room  &&  room  <  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	27	None	add
119	[BUG]  [BUGGY]  if(len  >  room  &&  room  <  SHORT_WRITE)  {  if(len  >  room  &&  room  >=  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >  room  &&  room  <  SHORT_WRITE)  {  if(len  >  room  &&  room  >=  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    >    room    &&    room    <    SHORT_WRITE)    {    if(len  >  room  &&  room  >=  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	27	None	add
120	[BUG]  [BUGGY]  if(len  >  room  &&  room  <  SHORT_WRITE)  {  If(len  >  room  &&  room  <  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >  room  &&  room  <  SHORT_WRITE)  {  If(len  >  room  &&  room  <  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    >    room    &&    room    <    SHORT_WRITE)    {    If(len  >  room  &&  room  <  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	27	None	add
121	[BUG]  [BUGGY]  if(len  >  room  &&  room  <  SHORT_WRITE)  {  if(len  >  space  &&  room  <  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >  room  &&  room  <  SHORT_WRITE)  {  if(len  >  space  &&  room  <  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    >    room    &&    room    <    SHORT_WRITE)    {    if(len  >  space  &&  room  <  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	27	None	add
122	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(len  <  0)  {	  if(len    <    SHORT_WRITE)    {    if(len    <    SHORT_WRITE)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	8	5	replace
123	[BUG]  [BUGGY]  if(len  <  0)  {  [FE]  StringIndexOutOfBoundsException  [FE]        AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  0)  {	  if(len    <    SHORT_WRITE)    {    if(len    <    SHORT_WRITE)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	8	5	replace
124	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  ||  len  >  room  +  1)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(len  <  SHORT_WRITE  ||  len  >  room  +  1)  {	  if(len    <    SHORT_WRITE    ||    len    >    room)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	59	1	replace
125	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  ||  len  >  room  +  1)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  ||  len  >  room  +  1)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  SHORT_WRITE  ||  len  >  room  +  1)  {	  if(len    <    SHORT_WRITE    ||    len    >    room)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	59	1	replace
126	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  ||  len  >  _outputEnd)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(len  <  SHORT_WRITE  ||  len  >  _outputEnd)  {	  if(len    <    SHORT_WRITE    ||    len    >    room)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	59	1	replace
127	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  ||  len  >  _outputEnd)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  ||  len  >  _outputEnd)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  SHORT_WRITE  ||  len  >  _outputEnd)  {	  if(len    <    SHORT_WRITE    ||    len    >    room)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	59	1	replace
128	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  &&  len  >  room)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(len  <  SHORT_WRITE  &&  len  >  room)  {	  if(len    <    SHORT_WRITE    ||    len    >    room)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	59	5	replace
129	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  &&  len  >  room)  {  [FE]  StringIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  &&  len  >  room)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  SHORT_WRITE  &&  len  >  room)  {	  if(len    <    SHORT_WRITE    ||    len    >    room)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	59	5	replace
130	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  &&  room  <  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(len  <  SHORT_WRITE  &&  room  <  SHORT_WRITE)  {	  if(len    >    room    &&    room    <    SHORT_WRITE)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	28	5	replace
131	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  &&  room  <  SHORT_WRITE)  {  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  &&  room  <  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  SHORT_WRITE  &&  room  <  SHORT_WRITE)  {	  if(len    >    room    &&    room    <    SHORT_WRITE)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	28	5	replace
132	[BUG]  [BUGGY]  if(len  >  room  &&  room  <  =  SHORT_WRITE)  {  [CE]  illegal  start  of  expression  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >  room  &&  room  <  =  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  >  room  &&  room  <  =  SHORT_WRITE)  {	  if(len    >    room    &&    room    <    SHORT_WRITE)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
133	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >  0  &&  room  <  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(len  >  0  &&  room  <  SHORT_WRITE)  {	  if(len    >    room    &&    room    <    SHORT_WRITE)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	28	5	replace
134	[BUG]  [BUGGY]  if(len  >  0  &&  room  <  SHORT_WRITE)  {  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >  0  &&  room  <  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  >  0  &&  room  <  SHORT_WRITE)  {	  if(len    >    room    &&    room    <    SHORT_WRITE)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	28	5	replace
135	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(len  <  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(len  <  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(_outputTail  >=  _outputEnd)  {  if(len  <  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE)    {    int    len    =    text.length();    if(len    <    SHORT_WRITE)    {    	non-compiled	[CE]  ';'  expected	51	None	replace
136	[BUG]  [BUGGY]  if(len  >  room)  {  int  len  =  text.length();  if(len  <  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >  room)  {  int  len  =  text.length();  if(len  <  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  >  room)  {  int  len  =  text.length();  if(len  <  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE)    {    int    len    =    text.length();    if(len    <    SHORT_WRITE)    {    	non-compiled	[CE]  ';'  expected	51	None	replace
137	[BUG]  [BUGGY]  if(room  ==  0)  {  if(len  <  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  ==  0)  {  if(len  <  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  ==  0)  {  if(len  <  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE)    {    int    len    =    text.length();    if(len    <    SHORT_WRITE)    {    	non-compiled	[CE]  ';'  expected	51	None	replace
138	[BUG]  [BUGGY]  if(_outputTail!=  _outputEnd)  {  if(len  <  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(_outputTail!=  _outputEnd)  {  if(len  <  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(_outputTail!=  _outputEnd)  {  if(len  <  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE)    {    int    len    =    text.length();    if(len    <    SHORT_WRITE)    {    	non-compiled	[CE]  ';'  expected	51	None	replace
139	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  ||  len  >  room)  {  if(len  <  SHORT_WRITE  ||  len  >  room)  {  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  ||  len  >  room)  {  if(len  <  SHORT_WRITE  ||  len  >  room)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    <    SHORT_WRITE    ||    len    >    room)    {    if(len  <  SHORT_WRITE  ||  len  >  room)  {	  	non-compiled	[CE]  ';'  expected	58	None	add
140	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  ||  len  >  room)  {  If(len  <  SHORT_WRITE  ||  len  >  room)  {  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  ||  len  >  room)  {  If(len  <  SHORT_WRITE  ||  len  >  room)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    <    SHORT_WRITE    ||    len    >    room)    {    If(len  <  SHORT_WRITE  ||  len  >  room)  {	  	non-compiled	[CE]  ';'  expected	58	None	add
141	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  ||  len  >  room)  {  if(len  <  SHORT_WRITE  ||  len  >  space)  {  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  ||  len  >  room)  {  if(len  <  SHORT_WRITE  ||  len  >  space)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    <    SHORT_WRITE    ||    len    >    room)    {    if(len  <  SHORT_WRITE  ||  len  >  space)  {	  	non-compiled	[CE]  ';'  expected	58	None	add
142	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  ||  len  >  room)  {  if(len  >=  SHORT_WRITE  ||  len  >  room)  {  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  ||  len  >  room)  {  if(len  >=  SHORT_WRITE  ||  len  >  room)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    <    SHORT_WRITE    ||    len    >    room)    {    if(len  >=  SHORT_WRITE  ||  len  >  room)  {	  	non-compiled	[CE]  ';'  expected	58	None	add
143	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE)  {  if(room  <  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE)  {  if(room  <  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  SHORT_WRITE)  {  if(room  <  SHORT_WRITE)  {	  if(room    <    len)    {    if(room    <    len)    {    	non-compiled	[CE]  ';'  expected	5	None	replace
144	[BUG]  [BUGGY]  if(len  >  room)  {  If(len  >=  room)  {  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >  room)  {  If(len  >=  room)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  >  room)  {  If(len  >=  room)  {	  if(len    >=    room)    {    If(len    >=    room)    {    	non-compiled	[CE]  ';'  expected	48	None	replace
145	[BUG]  [BUGGY]  if(len  <  =  room)  {  If(len  >=  room)  {  [CE]  illegal  start  of  expression  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  =  room)  {  If(len  >=  room)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  =  room)  {  If(len  >=  room)  {	  if(len    >=    room)    {    If(len    >=    room)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
146	[BUG]  [BUGGY]  if(len  >=  SHORT_WRITE)  {  If(len  >=  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >=  SHORT_WRITE)  {  If(len  >=  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  >=  SHORT_WRITE)  {  If(len  >=  SHORT_WRITE)  {	  if(len    >=    room)    {    If(len    >=    room)    {    	non-compiled	[CE]  ';'  expected	48	None	replace
147	[BUG]  [BUGGY]  if(len  >=  SHORT_WRITE)  {  If(len  ==  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >=  SHORT_WRITE)  {  If(len  ==  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  >=  SHORT_WRITE)  {  If(len  ==  SHORT_WRITE)  {	  if(len    >=    room)    {    If(len    >=    room)    {    	non-compiled	[CE]  ';'  expected	48	None	replace
148	[BUG]  [BUGGY]  if(len  >  0)  {  if(len  >  0)  {  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >  0)  {  if(len  >  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    >    0)    {    if(len  >  0)  {	  	non-compiled	[CE]  ';'  expected	31	None	add
149	[BUG]  [BUGGY]  if(len  >  0)  {  If(len  >  0)  {  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >  0)  {  If(len  >  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    >    0)    {    If(len  >  0)  {	  	non-compiled	[CE]  ';'  expected	31	None	add
150	[BUG]  [BUGGY]  if(len  >  0)  {  int  len  >  0)  {  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >  0)  {  int  len  >  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    >    0)    {    int  len  >  0)  {	  	non-compiled	[CE]  ';'  expected	31	None	add
151	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  if(len  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  if(len  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    if(len  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
152	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  if(len  >=  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  if(len  >=  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    if(len  >=  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
153	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  if(len  <  SHORT_WRITE  ||  space  >  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  if(len  <  SHORT_WRITE  ||  space  >  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    if(len  <  SHORT_WRITE  ||  space  >  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
154	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  If(len  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  If(len  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    If(len  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
155	[BUG]  [BUGGY]  if(len  >=  SHORT_WRITE)  {  if(len  >=  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >=  SHORT_WRITE)  {  if(len  >=  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    >=    SHORT_WRITE)    {    if(len  >=  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
156	[BUG]  [BUGGY]  if(len  >=  SHORT_WRITE)  {  if(len!=  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >=  SHORT_WRITE)  {  if(len!=  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    >=    SHORT_WRITE)    {    if(len!=  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
157	[BUG]  [BUGGY]  if(len  >=  SHORT_WRITE)  {  if(len  ==  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >=  SHORT_WRITE)  {  if(len  ==  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    >=    SHORT_WRITE)    {    if(len  ==  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
158	[BUG]  [BUGGY]  if(len  >=  SHORT_WRITE)  {  if(len  >>  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >=  SHORT_WRITE)  {  if(len  >>  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    >=    SHORT_WRITE)    {    if(len  >>  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
159	[BUG]  [BUGGY]  if(len  >=  0)  {  if(len  >=  0)  {  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >=  0)  {  if(len  >=  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    >=    0)    {    if(len  >=  0)  {	  	non-compiled	[CE]  ';'  expected	49	None	add
160	[BUG]  [BUGGY]  if(len  >=  0)  {  if(len!=  0)  {  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >=  0)  {  if(len!=  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    >=    0)    {    if(len!=  0)  {	  	non-compiled	[CE]  ';'  expected	49	None	add
161	[BUG]  [BUGGY]  if(len  >=  0)  {  if(len  >>  0)  {  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >=  0)  {  if(len  >>  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    >=    0)    {    if(len  >>  0)  {	  	non-compiled	[CE]  ';'  expected	49	None	add
162	[BUG]  [BUGGY]  if(len  >=  0)  {  if(len  ==  0)  {  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >=  0)  {  if(len  ==  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    >=    0)    {    if(len  ==  0)  {	  	non-compiled	[CE]  ';'  expected	49	None	add
163	[BUG]  [BUGGY]  if(room  >  0)  {  if(room  >  0)  {  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >  0)  {  if(room  >  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    >    0)    {    if(room  >  0)  {	  	non-compiled	[CE]  ';'  expected	13	None	add
164	[BUG]  [BUGGY]  if(room  >  0)  {  If(room  >  0)  {  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >  0)  {  If(room  >  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    >    0)    {    If(room  >  0)  {	  	non-compiled	[CE]  ';'  expected	13	None	add
165	[BUG]  [BUGGY]  if(room  >  0)  {  int  len  =  text.length();  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >  0)  {  int  len  =  text.length();  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    >    0)    {    int  len  =  text.length();	  	non-compiled	[CE]  ';'  expected	13	None	add
166	[BUG]  [BUGGY]  if(len  <  =  _outputMaxContiguous)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  =  _outputMaxContiguous)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  =  _outputMaxContiguous)  {	  if(room    >    len)    {    if(room    >    len)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
167	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >  room  &&  room  <  _outputEnd)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(len  >  room  &&  room  <  _outputEnd)  {	  if(len    >    room    &&    room    <    =    _outputEnd)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	60	5	replace
168	[BUG]  [BUGGY]  if(len  >  room  &&  room  <  _outputEnd)  {  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >  room  &&  room  <  _outputEnd)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  >  room  &&  room  <  _outputEnd)  {	  if(len    >    room    &&    room    <    =    _outputEnd)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	60	5	replace
169	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  &&  room  <  =  _outputEnd)  {  [CE]  illegal  start  of  expression  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  &&  room  <  =  _outputEnd)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  SHORT_WRITE  &&  room  <  =  _outputEnd)  {	  if(len    >    room    &&    room    <    =    _outputEnd)    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
170	[BUG]  [BUGGY]  if(room  >  len  &&  room  <  =  _outputEnd)  {  [CE]  illegal  start  of  expression  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >  len  &&  room  <  =  _outputEnd)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  >  len  &&  room  <  =  _outputEnd)  {	  if(len    >    room    &&    room    <    =    _outputEnd)    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
171	[BUG]  [BUGGY]  if(room  <  len  ||  room  >  _outputEnd)  {  if(room  <  len  ||  room  >  _outputEnd)  {  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  len  ||  room  >  _outputEnd)  {  if(room  <  len  ||  room  >  _outputEnd)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    <    len    ||    room    >    _outputEnd)    {    if(room  <  len  ||  room  >  _outputEnd)  {	  	non-compiled	[CE]  ';'  expected	61	None	add
172	[BUG]  [BUGGY]  if(room  <  len  ||  room  >  _outputEnd)  {  If(room  <  len  ||  room  >  _outputEnd)  {  [CE]  ';'  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  len  ||  room  >  _outputEnd)  {  If(room  <  len  ||  room  >  _outputEnd)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    <    len    ||    room    >    _outputEnd)    {    If(room  <  len  ||  room  >  _outputEnd)  {	  	non-compiled	[CE]  ';'  expected	61	None	add
173	[BUG]  [BUGGY]  if(room  <  len  ||  room  >  _outputEnd)  {  if(room  >=  len  ||  room  >  _outputEnd)  {  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  len  ||  room  >  _outputEnd)  {  if(room  >=  len  ||  room  >  _outputEnd)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    <    len    ||    room    >    _outputEnd)    {    if(room  >=  len  ||  room  >  _outputEnd)  {	  	non-compiled	[CE]  ';'  expected	61	None	add
174	[BUG]  [BUGGY]  If(room  <  len)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  If(room  <  len)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	If(room  <  len)  {	  if(room    >    len)    {    If(room    >    len)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
175	[BUG]  [BUGGY]  if(len  >  room)  {  If(room  <  =  len)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >  room)  {  If(room  <  =  len)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  >  room)  {  If(room  <  =  len)  {	  if(room    >    len)    {    If(room    >    len)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
176	[BUG]  [BUGGY]  If(room  >=  len)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  If(room  >=  len)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	If(room  >=  len)  {	  if(room    >    len)    {    If(room    >    len)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
177	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ");  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  _verifyValueWrite( "write  text  value ");  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	_verifyValueWrite( "write  text  value ");	  writeRawLong(text);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
178	[BUG]  [BUGGY]  writeRaw(room);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  writeRaw(room);  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	writeRaw(room);	  writeRawLong(text);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
179	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  _outputEnd)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(len  <  SHORT_WRITE  ||  room  >  _outputEnd)  {	  if(room    <    len    ||    room    >    _outputEnd)    {    	compilable	  [FE]  AssertionFailedError  	62	1	replace
180	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  _outputEnd)  {  [FE]  AssertionFailedError  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  _outputEnd)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  SHORT_WRITE  ||  room  >  _outputEnd)  {	  if(room    <    len    ||    room    >    _outputEnd)    {    	compilable	  [FE]  AssertionFailedError  	62	1	replace
181	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  len  ||  room  >=  _outputEnd)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(room  <  len  ||  room  >=  _outputEnd)  {	  if(room    <    len    ||    room    >    _outputEnd)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	62	4	replace
182	[BUG]  [BUGGY]  if(room  <  len  ||  room  >=  _outputEnd)  {  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  len  ||  room  >=  _outputEnd)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  <  len  ||  room  >=  _outputEnd)  {	  if(room    <    len    ||    room    >    _outputEnd)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	62	4	replace
183	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  SHORT_WRITE  ||  room  >  _outputEnd)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(room  <  SHORT_WRITE  ||  room  >  _outputEnd)  {	  if(room    <    len    ||    room    >    _outputEnd)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	62	5	replace
184	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE  ||  room  >  _outputEnd)  {  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  SHORT_WRITE  ||  room  >  _outputEnd)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  <  SHORT_WRITE  ||  room  >  _outputEnd)  {	  if(room    <    len    ||    room    >    _outputEnd)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	62	5	replace
185	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(len  <  SHORT_WRITE  ||  room  >  0)  {	  if(len    <    SHORT_WRITE    &&    room    >    0)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	55	1	replace
186	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  0)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  SHORT_WRITE  ||  room  >  0)  {	  if(len    <    SHORT_WRITE    &&    room    >    0)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	55	1	replace
187	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >=  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(len  <  SHORT_WRITE  &&  room  >=  0)  {	  if(len    <    SHORT_WRITE    &&    room    >    0)    {    	compilable	  [FE]  AssertionFailedError  	55	1	replace
188	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >=  0)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >=  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  SHORT_WRITE  &&  room  >=  0)  {	  if(len    <    SHORT_WRITE    &&    room    >    0)    {    	compilable	  [FE]  AssertionFailedError  	55	1	replace
189	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >  SHORT_WRITE  &&  room  >  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(len  >  SHORT_WRITE  &&  room  >  0)  {	  if(len    <    SHORT_WRITE    &&    room    >    0)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	55	5	replace
190	[BUG]  [BUGGY]  if(len  >  SHORT_WRITE  &&  room  >  0)  {  [FE]  StringIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >  SHORT_WRITE  &&  room  >  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  >  SHORT_WRITE  &&  room  >  0)  {	  if(len    <    SHORT_WRITE    &&    room    >    0)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	55	5	replace
191	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  &&  room  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  &&  room  <  =  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  SHORT_WRITE  &&  room  <  =  0)  {	  if(len    <    SHORT_WRITE    &&    room    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
192	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >  0  ||  room  <  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(len  >  0  ||  room  <  SHORT_WRITE)  {	  if(len    >    0)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	32	1	replace
193	[BUG]  [BUGGY]  if(len  >  0  ||  room  <  SHORT_WRITE)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >  0  ||  room  <  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  >  0  ||  room  <  SHORT_WRITE)  {	  if(len    >    0)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	32	1	replace
194	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                  AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(room  >=  SHORT_WRITE)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }	  if(room    <    SHORT_WRITE)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	63	1	replace
195	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]                  AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  >=  SHORT_WRITE)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }	  if(room    <    SHORT_WRITE)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	63	1	replace
196	[BUG]  [BUGGY]  if(room  ==  len)  {  if(room  ==  len)  {  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  ==  len)  {  if(room  ==  len)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    ==    len)    {    if(room  ==  len)  {	  	non-compiled	[CE]  ';'  expected	43	None	add
197	[BUG]  [BUGGY]  if(room  ==  len)  {  if(room  >=  len)  {  [CE]  ';'  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  ==  len)  {  if(room  >=  len)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    ==    len)    {    if(room  >=  len)  {	  	non-compiled	[CE]  ';'  expected	43	None	add
198	[BUG]  [BUGGY]  if(room  ==  len)  {  if(room!=  len)  {  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  ==  len)  {  if(room!=  len)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    ==    len)    {    if(room!=  len)  {	  	non-compiled	[CE]  ';'  expected	43	None	add
199	[BUG]  [BUGGY]  if(room  ==  len)  {  If(room  ==  len)  {  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  ==  len)  {  If(room  ==  len)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    ==    len)    {    If(room  ==  len)  {	  	non-compiled	[CE]  ';'  expected	43	None	add
200	[BUG]  [BUGGY]  if(len  >  0)  {  int  len  =  text.length();  if(len  >  0)  {  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >  0)  {  int  len  =  text.length();  if(len  >  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    >    0)    {    int  len  =  text.length();  if(len  >  0)  {	  	non-compiled	[CE]  ';'  expected	31	None	add
201	[BUG]  [BUGGY]  if(len  >  0)  {  TextRaw  text  =(TextRaw)text.getRaw();  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >  0)  {  TextRaw  text  =(TextRaw)text.getRaw();  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    >    0)    {    TextRaw  text  =(TextRaw)text.getRaw();	  	non-compiled	[CE]  ';'  expected	31	None	add
202	[BUG]  [BUGGY]  if(room  <  =  SHORT_WRITE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  =  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  <  =  SHORT_WRITE)  {	  if(len    <    =    SHORT_WRITE)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
203	[BUG]  [BUGGY]  if(len  >  room  +  1)  {  int  len  =  text.length();  if(len  >  room  +  1)  {  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >  room  +  1)  {  int  len  =  text.length();  if(len  >  room  +  1)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    >    room    +    1)    {    int  len  =  text.length();  if(len  >  room  +  1)  {	  	non-compiled	[CE]  ';'  expected	29	None	add
204	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  ==  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(room  ==  0)  {	  if(len    <    SHORT_WRITE)    {    if(len    <    SHORT_WRITE)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	8	5	replace
205	[BUG]  [BUGGY]  if(room  ==  0)  {  [FE]  StringIndexOutOfBoundsException  [FE]        AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  ==  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  ==  0)  {	  if(len    <    SHORT_WRITE)    {    if(len    <    SHORT_WRITE)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	8	5	replace
206	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >=  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(room  >=  0)  {	  if(len    <    SHORT_WRITE)    {    if(len    <    SHORT_WRITE)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
207	[BUG]  [BUGGY]  if(room  >=  0)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >=  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  >=  0)  {	  if(len    <    SHORT_WRITE)    {    if(len    <    SHORT_WRITE)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
208	[BUG]  [BUGGY]  if(room  >  room)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  char  c  =  text.charAt(i);  if(room  >  c)  {  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >  room)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  char  c  =  text.charAt(i);  if(room  >  c)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    >    room)    {    int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  char  c  =  text.charAt(i);  if(room  >  c)  {	  	non-compiled	[CE]  ';'  expected	45	None	add
209	[BUG]  [BUGGY]  if(room  >  room)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  char[]  chars  =  text.toCharArray();  if(room  >  chars)  {  [CE]  ';'  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >  room)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  char[]  chars  =  text.toCharArray();  if(room  >  chars)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    >    room)    {    int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  char[]  chars  =  text.toCharArray();  if(room  >  chars)  {	  	non-compiled	[CE]  ';'  expected	45	None	add
210	[BUG]  [BUGGY]  if(room  >  room)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  char  c  =  text.charAt(i);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >  room)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  char  c  =  text.charAt(i);  _outputTail  +=  len;  }  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    >    room)    {    int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  char  c  =  text.charAt(i);  _outputTail  +=  len;  }	  	non-compiled	[CE]  ';'  expected	45	None	add
211	[BUG]  [BUGGY]  if(room  >  room)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  char  c  =  text.charAt(i);  if(room  >  room)  {  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >  room)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  char  c  =  text.charAt(i);  if(room  >  room)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    >    room)    {    int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  char  c  =  text.charAt(i);  if(room  >  room)  {	  	non-compiled	[CE]  ';'  expected	45	None	add
212	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(room  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    &&    room    >=    SHORT_WRITE)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	57	5	replace
213	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    &&    room    >=    SHORT_WRITE)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	57	5	replace
214	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  SHORT_WRITE  &&  len  >=  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(room  <  SHORT_WRITE  &&  len  >=  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    &&    room    >=    SHORT_WRITE)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	57	5	replace
215	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE  &&  len  >=  SHORT_WRITE)  {  [FE]  StringIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  SHORT_WRITE  &&  len  >=  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  <  SHORT_WRITE  &&  len  >=  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    &&    room    >=    SHORT_WRITE)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	57	5	replace
216	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  ||  len  >  _outputMaxContiguous)  {  [CE]  cannot  find  symbol  _outputMaxContiguous  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  ||  len  >  _outputMaxContiguous)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  SHORT_WRITE  ||  len  >  _outputMaxContiguous)  {	  if(len    <    SHORT_WRITE    ||    len    >    room)    {    	non-compiled	[CE]  cannot  find  symbol  _outputMaxContiguous	59	None	replace
217	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  if(room  <  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  if(room  <  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    <    SHORT_WRITE)    {    int  len  =  text.length();  if(room  <  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	37	None	add
218	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  int  len  =  text.length();  if(len  >  room)  {  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >=  SHORT_WRITE)  {  int  len  =  text.length();  if(len  >  room)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  >=  SHORT_WRITE)  {  int  len  =  text.length();  if(len  >  room)  {	  if(len    >    room)    {    int    len    =    text.length();    if(len    >    room)    {    	non-compiled	[CE]  ';'  expected	52	None	replace
219	[BUG]  [BUGGY]  readRaw(text);  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  readRaw(text);  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	readRaw(text);	  if(room    <    SHORT_WRITE)    {    if(len    >    room)    {    writeRawLong(text);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
220	[BUG]  [BUGGY]  readRawLong(text);  [CE]  illegal  start  of  type  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  readRawLong(text);  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	readRawLong(text);	  if(room    <    SHORT_WRITE)    {    if(len    >    room)    {    writeRawLong(text);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
221	[BUG]  [BUGGY]  TextUtilities.writeRawLong(text);  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  TextUtilities.writeRawLong(text);  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	TextUtilities.writeRawLong(text);	  if(room    <    SHORT_WRITE)    {    if(len    >    room)    {    writeRawLong(text);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
222	[BUG]  [BUGGY]  TextUtilities.writeRaw(text);  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  TextUtilities.writeRaw(text);  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	TextUtilities.writeRaw(text);	  if(room    <    SHORT_WRITE)    {    if(len    >    room)    {    writeRawLong(text);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
223	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    <    SHORT_WRITE)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
224	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }	  if(room    <    SHORT_WRITE)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
225	[BUG]  [BUGGY]  _writer.write(text,  len);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  _writer.write(text,  len);  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	_writer.write(text,  len);	  _writer.write(text);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
226	[BUG]  [BUGGY]  if(len  >  space)  {  [CE]  cannot  find  symbol  space  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >  space)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  >  space)  {	  if(len    >    room)    {    if(len    >    space)    {    	non-compiled	[CE]  cannot  find  symbol  space	23	None	replace
227	[BUG]  [BUGGY]  if(len  <  =  space)  {  [CE]  illegal  start  of  expression  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  =  space)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  =  space)  {	  if(len    >    room)    {    if(len    >    space)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
228	[BUG]  [BUGGY]  writer.writeRaw(len);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  writer.writeRaw(len);  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	writer.writeRaw(len);	  writer.writeRaw(room);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
229	[BUG]  [BUGGY]  writer.writeRaw(text,  room);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  writer.writeRaw(text,  room);  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	writer.writeRaw(text,  room);	  writer.writeRaw(room);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
230	[BUG]  [BUGGY]  if(len  >=  0)  {  If(len  >=  0)  {  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >=  0)  {  If(len  >=  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    >=    0)    {    If(len  >=  0)  {	  	non-compiled	[CE]  ';'  expected	49	None	add
231	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  <  len)  {  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  <  len)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  >=  SHORT_WRITE)  {  if(room  <  len)  {	  if(room    <    len)    {    if(room    <    len)    {    	non-compiled	[CE]  ';'  expected	5	None	replace
232	[BUG]  [BUGGY]  if(room  <  len  ||  room  >  _outputEnd)  {  if(room  <  len  ||  space  >  _outputEnd)  {  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  len  ||  room  >  _outputEnd)  {  if(room  <  len  ||  space  >  _outputEnd)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    <    len    ||    room    >    _outputEnd)    {    if(room  <  len  ||  space  >  _outputEnd)  {	  	non-compiled	[CE]  ';'  expected	61	None	add
233	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room!=  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(room!=  0)  {	  if(len    <    SHORT_WRITE)    {    int    len    =    text.length();    if(len    <    SHORT_WRITE)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	1	replace
234	[BUG]  [BUGGY]  if(room!=  0)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room!=  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room!=  0)  {	  if(len    <    SHORT_WRITE)    {    int    len    =    text.length();    if(len    <    SHORT_WRITE)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	1	replace
235	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  SHORT_WRITE  ||  len  >  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(room  <  SHORT_WRITE  ||  len  >  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	26	5	replace
236	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE  ||  len  >  SHORT_WRITE)  {  [FE]  StringIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  SHORT_WRITE  ||  len  >  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  <  SHORT_WRITE  ||  len  >  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	26	5	replace
237	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  HEX_CHARS)  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  HEX_CHARS)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  SHORT_WRITE  ||  room  >  HEX_CHARS)  {	  if(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	26	None	replace
238	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }	  if(room    <    SHORT_WRITE)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    =    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
239	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong	  if(room    <    SHORT_WRITE)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    =    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	67	None	replace
240	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }  else  {  writeRawLong(text);  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }  else  {  writeRawLong(text);  }  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }  else  {  writeRawLong(text);  }	  if(room    <    SHORT_WRITE)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    =    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
241	[BUG]  [BUGGY]  if(room  >=  len)  {  If(room  >  len)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >=  len)  {  If(room  >  len)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  >=  len)  {  If(room  >  len)  {	  if(room    >    len)    {    If(room    >    len)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
242	[BUG]  [BUGGY]  if(room  <  len)  {  If(room  >  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  len)  {  If(room  >  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  <  len)  {  If(room  >  0)  {	  if(room    >    len)    {    If(room    >    len)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
243	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  if(len  >  room)  {  writeRawLong(text);  }  if(room  <  SHORT_WRITE)  {  if(len  >  space)  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  SHORT_WRITE)  {  if(len  >  room)  {  writeRawLong(text);  }  if(room  <  SHORT_WRITE)  {  if(len  >  space)  {  writeRawLong(text);  }  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    <    SHORT_WRITE)    {    if(len    >    room)    {    writeRawLong(text);    }    if(room  <  SHORT_WRITE)  {  if(len  >  space)  {  writeRawLong(text);  }	  	non-compiled	[CE]  ';'  expected	65	None	add
244	[BUG]  [BUGGY]  _writer.writeRaw(text,  0,  room);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  _writer.writeRaw(text,  0,  room);  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	_writer.writeRaw(text,  0,  room);	  _writer.write(text,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
245	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE)  {  int  len  =  text.length();  if(room  ==  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE)  {  int  len  =  text.length();  if(room  ==  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  SHORT_WRITE)  {  int  len  =  text.length();  if(room  ==  SHORT_WRITE)  {	  if(room    >    len)    {    int    len    =    text.length();    if(room    >    len)    {    	non-compiled	[CE]  ';'  expected	47	None	replace
246	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  If(room  <  len)  {  [CE]  ';'  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >=  SHORT_WRITE)  {  If(room  <  len)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  >=  SHORT_WRITE)  {  If(room  <  len)  {	  if(room    <    len)    {    If(room    <    len)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
247	[BUG]  [BUGGY]  if(room  >=  len)  {  If(room  >=  len)  {  [CE]  ';'  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >=  len)  {  If(room  >=  len)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  >=  len)  {  If(room  >=  len)  {	  if(room    <    len)    {    If(room    <    len)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
248	[BUG]  [BUGGY]  if(len  <  room)  {  if(len  >=  room)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  room)  {  if(len  >=  room)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    <    room)    {    if(len  >=  room)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
249	[BUG]  [BUGGY]  If(len  >=  0)  {  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  If(len  >=  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	If(len  >=  0)  {	  if(len    >=    room)    {    If(len    >=    room)    {    	non-compiled	[CE]  ';'  expected	48	None	replace
250	[BUG]  [BUGGY]  if(room  <  =  len)  {  [CE]  illegal  start  of  expression  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  =  len)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  <  =  len)  {	  if(len    <    =    room)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
251	[BUG]  [BUGGY]  If(room  <  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  If(room  <  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	If(room  <  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE)    {    If(len    <    SHORT_WRITE)    {    	non-compiled	[CE]  ';'  expected	9	None	replace
252	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  SHORT_WRITE  &&  len  >  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(room  <  SHORT_WRITE  &&  len  >  0)  {	  if(len    <    SHORT_WRITE    &&    room    >    0)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	55	5	replace
253	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE  &&  len  >  0)  {  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  SHORT_WRITE  &&  len  >  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  <  SHORT_WRITE  &&  len  >  0)  {	  if(len    <    SHORT_WRITE    &&    room    >    0)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	55	5	replace
254	[BUG]  [BUGGY]  int  len  =  text.length()  +  room;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  int  len  =  text.length()  +  room;  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	int  len  =  text.length()  +  room;	  int    len    =    text.length();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
255	[BUG]  [BUGGY]  int  len  =  text.length()  -  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  int  len  =  text.length()  -  1;  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	int  len  =  text.length()  -  1;	  int    len    =    text.length();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
256	[BUG]  [BUGGY]  if(room  >  len)  {  int  len  =  text.length();  }  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >  len)  {  int  len  =  text.length();  }  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  >  len)  {  int  len  =  text.length();  }	  if(len    >    room)    {    int    len    =    text.length();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
257	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong	  if(room    <    SHORT_WRITE)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	63	None	replace
258	[BUG]  [BUGGY]  if(room  >=  len)  {  int  len  =  text.length();  [CE]  variable  len  is  already  defined  in  method  writeRaw(String)  [FE]            AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >=  len)  {  int  len  =  text.length();  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  >=  len)  {  int  len  =  text.length();	  if(room    >    len)    {    int    len    =    text.length();    	non-compiled	[CE]  variable  len  is  already  defined  in  method  writeRaw(String)	17	None	replace
259	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  If(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  If(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    <    SHORT_WRITE    &&    room    >=    SHORT_WRITE)    {    If(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	56	None	add
260	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >=  SHORT_WRITE  &&  len  >  room  &&  room  <  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(room  >=  SHORT_WRITE  &&  len  >  room  &&  room  <  SHORT_WRITE)  {	  if(len    >    room    &&    room    <    SHORT_WRITE)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	28	5	replace
261	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE  &&  len  >  room  &&  room  <  SHORT_WRITE)  {  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >=  SHORT_WRITE  &&  len  >  room  &&  room  <  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  >=  SHORT_WRITE  &&  len  >  room  &&  room  <  SHORT_WRITE)  {	  if(len    >    room    &&    room    <    SHORT_WRITE)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	28	5	replace
262	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >  0  &&  room  <  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(room  >  0  &&  room  <  SHORT_WRITE)  {	  if(len    >    room    &&    room    <    SHORT_WRITE)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	28	5	replace
263	[BUG]  [BUGGY]  if(room  >  0  &&  room  <  SHORT_WRITE)  {  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >  0  &&  room  <  SHORT_WRITE)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  >  0  &&  room  <  SHORT_WRITE)  {	  if(len    >    room    &&    room    <    SHORT_WRITE)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	28	5	replace
264	[BUG]  [BUGGY]  if(room  <  len  ||  room  >  _outputMaxContiguous)  {  [CE]  cannot  find  symbol  _outputMaxContiguous  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  len  ||  room  >  _outputMaxContiguous)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  <  len  ||  room  >  _outputMaxContiguous)  {	  if(room    <    len    ||    room    >    _outputEnd)    {    	non-compiled	[CE]  cannot  find  symbol  _outputMaxContiguous	62	None	replace
265	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >=  len  ||  room  >  _outputEnd)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(room  >=  len  ||  room  >  _outputEnd)  {	  if(room    <    len    ||    room    >    _outputEnd)    {    	compilable	  [FE]  AssertionFailedError  	62	1	replace
266	[BUG]  [BUGGY]  if(room  >=  len  ||  room  >  _outputEnd)  {  [FE]  AssertionFailedError  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >=  len  ||  room  >  _outputEnd)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  >=  len  ||  room  >  _outputEnd)  {	  if(room    <    len    ||    room    >    _outputEnd)    {    	compilable	  [FE]  AssertionFailedError  	62	1	replace
267	[BUG]  [BUGGY]  if(room  >  0)  {  int  len  =  text.length();  if(room  >  0)  {  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >  0)  {  int  len  =  text.length();  if(room  >  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    >    0)    {    int  len  =  text.length();  if(room  >  0)  {	  	non-compiled	[CE]  ';'  expected	13	None	add
268	[BUG]  [BUGGY]  if(room  >  0)  {  int  len  =  text.length();  while(room  >  0)  {  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >  0)  {  int  len  =  text.length();  while(room  >  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    >    0)    {    int  len  =  text.length();  while(room  >  0)  {	  	non-compiled	[CE]  ';'  expected	13	None	add
269	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >  len  +  1)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(room  >  len  +  1)  {	  if(len    >    room    +    1)    {    	compilable	  [FE]  AssertionFailedError  	30	1	replace
270	[BUG]  [BUGGY]  if(room  >  len  +  1)  {  [FE]  AssertionFailedError  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >  len  +  1)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  >  len  +  1)  {	  if(len    >    room    +    1)    {    	compilable	  [FE]  AssertionFailedError  	30	1	replace
271	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >=  len  +  1)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(room  >=  len  +  1)  {	  if(len    >    room    +    1)    {    	compilable	  [FE]  AssertionFailedError  	30	1	replace
272	[BUG]  [BUGGY]  if(room  >=  len  +  1)  {  [FE]  AssertionFailedError  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >=  len  +  1)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  >=  len  +  1)  {	  if(len    >    room    +    1)    {    	compilable	  [FE]  AssertionFailedError  	30	1	replace
273	[BUG]  [BUGGY]  if(room  >  room  &&  room  <  =  _outputEnd)  {  [CE]  illegal  start  of  expression  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >  room  &&  room  <  =  _outputEnd)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  >  room  &&  room  <  =  _outputEnd)  {	  if(len    >    room    &&    room    <    =    _outputEnd)    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
274	[BUG]  [BUGGY]  if(room  >=  len  &&  room  <  =  _outputEnd)  {  [CE]  illegal  start  of  expression  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >=  len  &&  room  <  =  _outputEnd)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  >=  len  &&  room  <  =  _outputEnd)  {	  if(len    >    room    &&    room    <    =    _outputEnd)    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
275	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >  room  &&  room  <  _outputEnd)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(room  >  room  &&  room  <  _outputEnd)  {	  if(len    >    room    &&    room    <    =    _outputEnd)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	60	5	replace
276	[BUG]  [BUGGY]  if(room  >  room  &&  room  <  _outputEnd)  {  [FE]  StringIndexOutOfBoundsException  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >  room  &&  room  <  _outputEnd)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  >  room  &&  room  <  _outputEnd)  {	  if(len    >    room    &&    room    <    =    _outputEnd)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	60	5	replace
277	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE  ||  room  >  HEX_CHARS)  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  SHORT_WRITE  ||  room  >  HEX_CHARS)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  <  SHORT_WRITE  ||  room  >  HEX_CHARS)  {	  if(room    <    SHORT_WRITE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	38	None	replace
278	[BUG]  [BUGGY]  writer.writeRaw(room,  len);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  writer.writeRaw(room,  len);  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	writer.writeRaw(room,  len);	  writer.writeRaw(room);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
279	[BUG]  [BUGGY]  writer.writeRaw(room,  _outputBuffer);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  writer.writeRaw(room,  _outputBuffer);  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	writer.writeRaw(room,  _outputBuffer);	  writer.writeRaw(room);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
280	[BUG]  [BUGGY]  writer.write(room);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  writer.write(room);  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	writer.write(room);	  writer.writeRaw(room);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
281	[BUG]  [BUGGY]  writer.write(room,  _outputBuffer,  _outputTail);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  writer.write(room,  _outputBuffer,  _outputTail);  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	writer.write(room,  _outputBuffer,  _outputTail);	  writer.writeRaw(room);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
282	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >  0)  {  if(len  <  SHORT_WRITE  &&  space  >  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >  0)  {  if(len  <  SHORT_WRITE  &&  space  >  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    <    SHORT_WRITE    &&    room    >    0)    {    if(len  <  SHORT_WRITE  &&  space  >  0)  {	  	non-compiled	[CE]  ';'  expected	54	None	add
283	[BUG]  [BUGGY]  if(room  <  len)  {  If(room  >=  len)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  len)  {  If(room  >=  len)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  <  len)  {  If(room  >=  len)  {	  if(room    >    len)    {    If(room    >    len)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
284	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  SHORT_WRITE  &&  room  >  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(room  <  SHORT_WRITE  &&  room  >  0)  {	  if(room    <    SHORT_WRITE)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	38	5	replace
285	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE  &&  room  >  0)  {  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  SHORT_WRITE  &&  room  >  0)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  <  SHORT_WRITE  &&  room  >  0)  {	  if(room    <    SHORT_WRITE)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	38	5	replace
286	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }	  if(room    <    SHORT_WRITE)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
287	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }	  if(room    <    SHORT_WRITE)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
288	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room!=  len)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(room!=  len)  {	  if(room    ==    len)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	44	1	replace
289	[BUG]  [BUGGY]  if(room!=  len)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room!=  len)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room!=  len)  {	  if(room    ==    len)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	44	1	replace
290	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  _outputMaxContiguous)  {  [CE]  cannot  find  symbol  _outputMaxContiguous  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  _outputMaxContiguous)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  SHORT_WRITE  ||  room  >  _outputMaxContiguous)  {	  if(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	non-compiled	[CE]  cannot  find  symbol  _outputMaxContiguous	26	None	replace
291	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ");  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  _verifyValueWrite( "write  text  value ");  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	_verifyValueWrite( "write  text  value ");  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }	  writeRawLong(text);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
292	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ");  if(room  <  room)  {  writeRawLong(text);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  _verifyValueWrite( "write  text  value ");  if(room  <  room)  {  writeRawLong(text);  }  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	_verifyValueWrite( "write  text  value ");  if(room  <  room)  {  writeRawLong(text);  }	  writeRawLong(text);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
293	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ");  if(room  >=  0)  {  writeRawLong(text);  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  _verifyValueWrite( "write  text  value ");  if(room  >=  0)  {  writeRawLong(text);  }  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	_verifyValueWrite( "write  text  value ");  if(room  >=  0)  {  writeRawLong(text);  }	  writeRawLong(text);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
294	[BUG]  [BUGGY]  if(room  >  0  &&  room  <  =  _outputEnd)  {  [CE]  illegal  start  of  expression  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >  0  &&  room  <  =  _outputEnd)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  >  0  &&  room  <  =  _outputEnd)  {	  if(len    >    room    &&    room    <    =    _outputEnd)    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
295	[BUG]  [BUGGY]  If(len  <  room)  {  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  If(len  <  room)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	If(len  <  room)  {	  if(len    >    room)    {    If(len    >    room)    {    	non-compiled	[CE]  ';'  expected	22	None	replace
296	[BUG]  [BUGGY]  if(len  <  =  _outputEnd)  {  [CE]  illegal  start  of  expression  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  =  _outputEnd)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  =  _outputEnd)  {	  if(len    <    =    room)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
297	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  room  +  1)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(len  <  room  +  1)  {	  if(len    >    room    +    1)    {    	compilable	  [FE]  AssertionFailedError  	30	1	replace
298	[BUG]  [BUGGY]  if(len  <  room  +  1)  {  [FE]  AssertionFailedError  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  room  +  1)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  room  +  1)  {	  if(len    >    room    +    1)    {    	compilable	  [FE]  AssertionFailedError  	30	1	replace
299	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >  room  *  1)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(len  >  room  *  1)  {	  if(len    >    room    +    1)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	30	5	replace
300	[BUG]  [BUGGY]  if(len  >  room  *  1)  {  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >  room  *  1)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  >  room  *  1)  {	  if(len    >    room    +    1)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	30	5	replace
301	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  len  &&  room  >  _outputEnd)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(room  <  len  &&  room  >  _outputEnd)  {	  if(room    <    len    ||    room    >    _outputEnd)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	62	5	replace
302	[BUG]  [BUGGY]  if(room  <  len  &&  room  >  _outputEnd)  {  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  len  &&  room  >  _outputEnd)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  <  len  &&  room  >  _outputEnd)  {	  if(room    <    len    ||    room    >    _outputEnd)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	62	5	replace
303	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE)  {  int  len  =  text.length();  }  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE)  {  int  len  =  text.length();  }  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  SHORT_WRITE)  {  int  len  =  text.length();  }	  if(len    >    room)    {    int    len    =    text.length();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
304	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputTail);  _outputTail  +=  len;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputTail);  _outputTail  +=  len;  }	  if(room    <    SHORT_WRITE)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
305	[BUG]  [BUGGY]  _writer.write(text,  0,  len,  room);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  _writer.write(text,  0,  len,  room);  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	_writer.write(text,  0,  len,  room);	  _writer.write(text,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
306	[BUG]  [BUGGY]  _writer.write(room,  0,  len);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  _writer.write(room,  0,  len);  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	_writer.write(room,  0,  len);	  _writer.write(text,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
307	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  =  len;  }  else  {  writeRawLong(text);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  =  len;  }  else  {  writeRawLong(text);  }  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  =  len;  }  else  {  writeRawLong(text);  }	  if(room    <    SHORT_WRITE)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    =    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
308	[BUG]  [BUGGY]  if(room  >=  len)  {  If(room  <  len)  {  [CE]  ';'  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  >=  len)  {  If(room  <  len)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  >=  len)  {  If(room  <  len)  {	  if(room    <    len)    {    If(room    <    len)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
309	[BUG]  [BUGGY]  if(room  ==  len)  {  If(room  <  len)  {  [CE]  ';'  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(room  ==  len)  {  If(room  <  len)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  ==  len)  {  If(room  <  len)  {	  if(room    <    len)    {    If(room    <    len)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
310	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE)  {  writeRawLong(text);  }  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE)  {  writeRawLong(text);  }  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  SHORT_WRITE)  {  writeRawLong(text);  }	  if(room    <    SHORT_WRITE)    {    if(len    >    room)    {    writeRawLong(text);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
311	[BUG]  [BUGGY]  if(len  >  room)  {  writeRawLong(text);  }  [CE]  illegal  start  of  type  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  >  room)  {  writeRawLong(text);  }  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  >  room)  {  writeRawLong(text);  }	  if(room    <    SHORT_WRITE)    {    if(len    >    room)    {    writeRawLong(text);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
312	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >  room)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(len  <  SHORT_WRITE  &&  room  >  room)  {	  if(len    >    room    &&    room    <    SHORT_WRITE)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	28	5	replace
313	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >  room)  {  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }        [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >  room)  {  [BUGGY]      text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  SHORT_WRITE  &&  room  >  room)  {	  if(len    >    room    &&    room    <    SHORT_WRITE)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	28	5	replace
