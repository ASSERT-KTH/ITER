bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(len  >=  room)  {  if(len  >=  room)  {  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(len  >=  room)  {  if(len  >=  room)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    >=    room)    {    if(len  >=  room)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
2	[BUG]  [BUGGY]  if(len  >=  room)  {  if(len!=  room)  {  [CE]  ';'  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(len  >=  room)  {  if(len!=  room)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    >=    room)    {    if(len!=  room)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
3	[BUG]  [BUGGY]  if(len  >=  room)  {  if(len  ==  room)  {  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(len  >=  room)  {  if(len  ==  room)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    >=    room)    {    if(len  ==  room)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
4	[BUG]  [BUGGY]  if(len  >=  room)  {  if(len  >>  room)  {  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(len  >=  room)  {  if(len  >>  room)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    >=    room)    {    if(len  >>  room)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
5	[BUG]  [BUGGY]  if(room  <  len)  {  if(room  <  len)  {  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(room  <  len)  {  if(room  <  len)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    <    len)    {    if(room  <  len)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
6	[BUG]  [BUGGY]  if(room  <  len)  {  if(room  >=  len)  {  [CE]  ';'  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(room  <  len)  {  if(room  >=  len)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    <    len)    {    if(room  >=  len)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
7	[BUG]  [BUGGY]  if(room  <  len)  {  If(room  <  len)  {  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(room  <  len)  {  If(room  <  len)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    <    len)    {    If(room  <  len)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
8	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE)  {  if(len  <  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(len  <  SHORT_WRITE)  {  if(len  <  SHORT_WRITE)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    <    SHORT_WRITE)    {    if(len  <  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
9	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE)  {  If(len  <  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(len  <  SHORT_WRITE)  {  If(len  <  SHORT_WRITE)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    <    SHORT_WRITE)    {    If(len  <  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
10	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE)  {  if(len  >=  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(len  <  SHORT_WRITE)  {  if(len  >=  SHORT_WRITE)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    <    SHORT_WRITE)    {    if(len  >=  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(len  <  room)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(len  <  room)  {	  if(room    <    len)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
12	[BUG]  [BUGGY]  if(len  <  room)  {  [FE]  AssertionFailedError  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(len  <  room)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  room)  {	  if(room    <    len)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
13	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(room  >  0)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(room  >  0)  {	  if(room    >    len)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	1	replace
14	[BUG]  [BUGGY]  if(room  >  0)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(room  >  0)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  >  0)  {	  if(room    >    len)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	1	replace
15	[BUG]  [BUGGY]  if(room  >  len)  {  if(room  >  len)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(room  >  len)  {  if(room  >  len)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    >    len)    {    if(room  >  len)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
16	[BUG]  [BUGGY]  if(room  >  len)  {  If(room  >  len)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(room  >  len)  {  If(room  >  len)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    >    len)    {    If(room  >  len)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
17	[BUG]  [BUGGY]  if(room  >  len)  {  int  len  =  text.length();  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(room  >  len)  {  int  len  =  text.length();  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    >    len)    {    int  len  =  text.length();	  	non-compiled	[CE]  ';'  expected	5	None	add
18	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(len  >=  SHORT_WRITE)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(len  >=  SHORT_WRITE)  {	  if(len    >=    room)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	2	5	replace
19	[BUG]  [BUGGY]  if(len  >=  SHORT_WRITE)  {  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(len  >=  SHORT_WRITE)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  >=  SHORT_WRITE)  {	  if(len    >=    room)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	2	5	replace
20	[BUG]  [BUGGY]  if(len  <  =  room)  {  [CE]  illegal  start  of  expression  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(len  <  =  room)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  =  room)  {	  if(len    >=    room)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
21	[BUG]  [BUGGY]  if(len  >  room)  {  if(len  >  room)  {  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(len  >  room)  {  if(len  >  room)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    >    room)    {    if(len  >  room)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
22	[BUG]  [BUGGY]  if(len  >  room)  {  If(len  >  room)  {  [CE]  ';'  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(len  >  room)  {  If(len  >  room)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    >    room)    {    If(len  >  room)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
23	[BUG]  [BUGGY]  if(len  >  room)  {  if(len  >  space)  {  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(len  >  room)  {  if(len  >  space)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    >    room)    {    if(len  >  space)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
24	[BUG]  [BUGGY]  if(len  <  =  SHORT_WRITE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(len  <  =  SHORT_WRITE)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  =  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
25	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(len  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	1	replace
26	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	1	replace
27	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(len  >  room  &&  room  <  SHORT_WRITE)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(len  >  room  &&  room  <  SHORT_WRITE)  {	  if(len    >    room)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	11	5	replace
28	[BUG]  [BUGGY]  if(len  >  room  &&  room  <  SHORT_WRITE)  {  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(len  >  room  &&  room  <  SHORT_WRITE)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  >  room  &&  room  <  SHORT_WRITE)  {	  if(len    >    room)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	11	5	replace
29	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(len  >  room  +  1)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(len  >  room  +  1)  {	  if(len    >    room)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	11	5	replace
30	[BUG]  [BUGGY]  if(len  >  room  +  1)  {  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(len  >  room  +  1)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  >  room  +  1)  {	  if(len    >    room)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	11	5	replace
31	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(len  >  0)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(len  >  0)  {	  if(len    >    room)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	replace
32	[BUG]  [BUGGY]  if(len  >  0)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(len  >  0)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  >  0)  {	  if(len    >    room)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	replace
33	[BUG]  [BUGGY]  _writer.write(text,  0,  len);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  _writer.write(text,  0,  len);  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	_writer.write(text,  0,  len);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
34	[BUG]  [BUGGY]  _writer.writeRaw(text);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  _writer.writeRaw(text);  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	_writer.writeRaw(text);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
35	[BUG]  [BUGGY]  _writer.write(text);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  _writer.write(text);  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	_writer.write(text);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
36	[BUG]  [BUGGY]  writeRawLong(text);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  writeRawLong(text);  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	writeRawLong(text);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
37	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(room  <  SHORT_WRITE)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(room  <  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	4	5	replace
38	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(room  <  SHORT_WRITE)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  <  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	4	5	replace
39	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(room  >=  SHORT_WRITE)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(room  >=  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	1	replace
40	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(room  >=  SHORT_WRITE)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  >=  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	1	replace
41	[BUG]  [BUGGY]  int  len  =  text.length();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  int  len  =  text.length();  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	int  len  =  text.length();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
42	[BUG]  [BUGGY]  writer.writeRaw(room);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  writer.writeRaw(room);  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	writer.writeRaw(room);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
43	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(room  ==  len)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(room  ==  len)  {	  if(room    <    len)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	9	5	replace
44	[BUG]  [BUGGY]  if(room  ==  len)  {  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(room  ==  len)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  ==  len)  {	  if(room    <    len)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	9	5	replace
45	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(room  >  room)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(room  >  room)  {	  if(room    <    len)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	9	5	replace
46	[BUG]  [BUGGY]  if(room  >  room)  {  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(room  >  room)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  >  room)  {	  if(room    <    len)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	9	5	replace
47	[BUG]  [BUGGY]  if(room  >  len)  {  int  len  =  text.length();  if(room  >  len)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(room  >  len)  {  int  len  =  text.length();  if(room  >  len)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room    >    len)    {    int  len  =  text.length();  if(room  >  len)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
48	[BUG]  [BUGGY]  if(len  >=  room)  {  If(len  >=  room)  {  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(len  >=  room)  {  If(len  >=  room)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    >=    room)    {    If(len  >=  room)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
49	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(len  >=  0)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(len  >=  0)  {	  if(len    >=    room)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	1	replace
50	[BUG]  [BUGGY]  if(len  >=  0)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(len  >=  0)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  >=  0)  {	  if(len    >=    room)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	1	replace
51	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE)  {  int  len  =  text.length();  if(len  <  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(len  <  SHORT_WRITE)  {  int  len  =  text.length();  if(len  <  SHORT_WRITE)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    <    SHORT_WRITE)    {    int  len  =  text.length();  if(len  <  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
52	[BUG]  [BUGGY]  if(len  >  room)  {  int  len  =  text.length();  if(len  >  room)  {  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(len  >  room)  {  int  len  =  text.length();  if(len  >  room)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    >    room)    {    int  len  =  text.length();  if(len  >  room)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
53	[BUG]  [BUGGY]  if(len  >  room)  {  int  len  =  text.length();  [CE]  ';'  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(len  >  room)  {  int  len  =  text.length();  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len    >    room)    {    int  len  =  text.length();	  	non-compiled	[CE]  ';'  expected	10	None	add
54	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >  0)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(len  <  SHORT_WRITE  &&  room  >  0)  {	  if(len    <    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
55	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >  0)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  SHORT_WRITE  &&  room  >  0)  {	  if(len    <    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
56	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
57	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
58	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(len  <  SHORT_WRITE  ||  len  >  room)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(len  <  SHORT_WRITE  ||  len  >  room)  {	  if(len    <    SHORT_WRITE)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	1	replace
59	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  ||  len  >  room)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(len  <  SHORT_WRITE  ||  len  >  room)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  <  SHORT_WRITE  ||  len  >  room)  {	  if(len    <    SHORT_WRITE)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	1	replace
60	[BUG]  [BUGGY]  if(len  >  room  &&  room  <  =  _outputEnd)  {  [CE]  illegal  start  of  expression  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(len  >  room  &&  room  <  =  _outputEnd)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(len  >  room  &&  room  <  =  _outputEnd)  {	  if(len    >    room)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
61	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(room  <  len  ||  room  >  _outputEnd)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(room  <  len  ||  room  >  _outputEnd)  {	  if(room    <    len)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	9	5	replace
62	[BUG]  [BUGGY]  if(room  <  len  ||  room  >  _outputEnd)  {  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(room  <  len  ||  room  >  _outputEnd)  {  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  <  len  ||  room  >  _outputEnd)  {	  if(room    <    len)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	9	5	replace
63	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
64	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
65	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]                  AssertionFailedError    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(room  <  SHORT_WRITE)  {  if(len  >  room)  {  writeRawLong(text);  }  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	if(room  <  SHORT_WRITE)  {  if(len  >  room)  {  writeRawLong(text);  }	      	compilable	  [FE]  StringIndexOutOfBoundsException  	7	5	replace
66	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  if(len  >  room)  {  writeRawLong(text);  }  [FE]  StringIndexOutOfBoundsException  [FE]                  AssertionFailedError    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(room  <  SHORT_WRITE)  {  if(len  >  room)  {  writeRawLong(text);  }  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  <  SHORT_WRITE)  {  if(len  >  room)  {  writeRawLong(text);  }	      	compilable	  [FE]  StringIndexOutOfBoundsException  	7	5	replace
67	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }  else  {  writeRawLong(text);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;  if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }      [BUGGY]  if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }  else  {  writeRawLong(text);  }  [BUGGY]    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }  else  {  writeRawLong(text);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
