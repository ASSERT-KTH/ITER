bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(_writer  ==  null)  {  if(_writer  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {      [BUGGY]  if(_writer  ==  null)  {  if(_writer  ==  null)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_writer    ==    null)    {    if(_writer  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
2	[BUG]  [BUGGY]  if(_writer  ==  null)  {  if(typeMsg  ==  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {      [BUGGY]  if(_writer  ==  null)  {  if(typeMsg  ==  null)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_writer    ==    null)    {    if(typeMsg  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
3	[BUG]  [BUGGY]  if(_writer  ==  null)  {  if(_writer!=  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {      [BUGGY]  if(_writer  ==  null)  {  if(_writer!=  null)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_writer    ==    null)    {    if(_writer!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
4	[BUG]  [BUGGY]  if(_writer  ==  null)  {  if(_writer  ==  null  ||  typeMsg!=  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {      [BUGGY]  if(_writer  ==  null)  {  if(_writer  ==  null  ||  typeMsg!=  null)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_writer    ==    null)    {    if(_writer  ==  null  ||  typeMsg!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
5	[BUG]  [BUGGY]  if(_writer  ==  null)  {  if(typeMsg!=  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {      [BUGGY]  if(_writer  ==  null)  {  if(typeMsg!=  null)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_writer    ==    null)    {    if(typeMsg!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
6	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }	  if(typeMsg    ==    null)    {    if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name   ");    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
7	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_ERROR)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_ERROR)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(status  ==  JsonWriteContext.STATUS_ERROR)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }	  if(typeMsg    ==    null)    {    if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name   ");    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
8	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_FAILURE)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_FAILURE)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(status  ==  JsonWriteContext.STATUS_FAILURE)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }	  if(typeMsg    ==    null)    {    if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name   ");    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
9	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [CE]  cannot  find  symbol  status  [FE]              NullPointerException      [CONTEXT]      {      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {	  if(_writer!=    null)    {    if(typeMsg!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  status	27	None	replace
10	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(typeMsg!=  null)  {  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]      {      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(typeMsg!=  null)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_outputTail  >=  _outputEnd)  {  if(typeMsg!=  null)  {	  if(_writer!=    null)    {    if(typeMsg!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
11	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                NullPointerException      [CONTEXT]      {      [BUGGY]  if(typeMsg!=  null  ||  typeMsg.length()!=  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	add	if(typeMsg!=  null  ||  typeMsg.length()!=  0)  {	  if(typeMsg!=    null)    {    if(typeMsg    ==    null    ||    typeMsg.length()!=    0)    {    	compilable	  [FE]  NullPointerException  	20	5	replace
12	[BUG]  [BUGGY]  if(typeMsg!=  null  ||  typeMsg.length()!=  0)  {  [FE]  NullPointerException  [FE]                NullPointerException      [CONTEXT]      {      [BUGGY]  if(typeMsg!=  null  ||  typeMsg.length()!=  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg!=  null  ||  typeMsg.length()!=  0)  {	  if(typeMsg!=    null)    {    if(typeMsg    ==    null    ||    typeMsg.length()!=    0)    {    	compilable	  [FE]  NullPointerException  	20	5	replace
13	[BUG]  [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name: "  +  status);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {      [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name: "  +  status);  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	_reportError( "Can  not   "+typeMsg+ ",  expecting  field  name: "  +  status);	  _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name.   ");    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
14	[BUG]  [BUGGY]  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      {      [BUGGY]  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg!=    null    ||    typeMsg.length()    ==    0)    {    if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
15	[BUG]  [BUGGY]  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      {      [BUGGY]  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg!=    null    ||    typeMsg.length()    ==    0)    {    if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
16	[BUG]  [BUGGY]  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]      {      [BUGGY]  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  return;  }  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg!=    null    ||    typeMsg.length()    ==    0)    {    if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  return;  }	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
17	[BUG]  [BUGGY]  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]      {      [BUGGY]  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg!=    null    ||    typeMsg.length()    ==    0)    {    if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
18	[BUG]  [BUGGY]  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            NullPointerException    [CONTEXT]      {      [BUGGY]  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg!=    null    ||    typeMsg.length()    ==    0)    {    if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
19	[BUG]  [BUGGY]  if(_cfgPrettyPrinter  ==  null)  {  if(_cfgPrettyPrinter!=  null)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      {      [BUGGY]  if(_cfgPrettyPrinter  ==  null)  {  if(_cfgPrettyPrinter!=  null)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_cfgPrettyPrinter    ==    null)    {    if(_cfgPrettyPrinter!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
20	[BUG]  [BUGGY]  if(_cfgPrettyPrinter  ==  null)  {  if(_cfgPrettyPrinter  ==  null)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      {      [BUGGY]  if(_cfgPrettyPrinter  ==  null)  {  if(_cfgPrettyPrinter  ==  null)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_cfgPrettyPrinter    ==    null)    {    if(_cfgPrettyPrinter  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
21	[BUG]  [BUGGY]  if(_cfgPrettyPrinter  ==  null)  {  if(typeMsg  ==  null)  {  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]      {      [BUGGY]  if(_cfgPrettyPrinter  ==  null)  {  if(typeMsg  ==  null)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_cfgPrettyPrinter    ==    null)    {    if(typeMsg  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
22	[BUG]  [BUGGY]  if(_cfgPrettyPrinter  ==  null)  {  if(typeMsg!=  null)  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]      {      [BUGGY]  if(_cfgPrettyPrinter  ==  null)  {  if(typeMsg!=  null)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_cfgPrettyPrinter    ==    null)    {    if(typeMsg!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
23	[BUG]  [BUGGY]  if(_cfgPrettyPrinter  ==  null)  {  if(typeMsg  ==  null  ||  _cfgPrettyPrinter!=  null)  {  [CE]  illegal  start  of  expression  [FE]            NullPointerException    [CONTEXT]      {      [BUGGY]  if(_cfgPrettyPrinter  ==  null)  {  if(typeMsg  ==  null  ||  _cfgPrettyPrinter!=  null)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_cfgPrettyPrinter    ==    null)    {    if(typeMsg  ==  null  ||  _cfgPrettyPrinter!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
24	[BUG]  [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [CE]  cannot  find  symbol  length  [FE]        AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg  ==  null  ||  typeMsg.length  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {	  if(typeMsg    ==    null    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  length	3	None	replace
25	[BUG]  [BUGGY]  if(typeMsg  ==  null  ||  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  [CE]  cannot  find  symbol  status  [FE]          AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(typeMsg  ==  null  ||  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg  ==  null  ||  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {	  if(typeMsg    ==    null    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  status	3	None	replace
26	[BUG]  [BUGGY]  if(typeMsg  ==  null  ||  typeMsg!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  [CE]  incomparable  types:  String  and  int  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(typeMsg  ==  null  ||  typeMsg!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg  ==  null  ||  typeMsg!=  JsonWriteContext.STATUS_EXPECT_NAME)  {	  if(typeMsg    ==    null    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    	non-compiled	[CE]  incomparable  types:  String  and  int	3	None	replace
27	[BUG]  [BUGGY]  if(_writeContext!=  null)  {  if(_writeContext!=  null)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      {      [BUGGY]  if(_writeContext!=  null)  {  if(_writeContext!=  null)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_writeContext!=    null)    {    if(_writeContext!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
28	[BUG]  [BUGGY]  if(_writeContext!=  null)  {  if(_writer!=  null)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      {      [BUGGY]  if(_writeContext!=  null)  {  if(_writer!=  null)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_writeContext!=    null)    {    if(_writer!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
29	[BUG]  [BUGGY]  if(_writeContext!=  null)  {  if(_writeContext  ==  null)  {  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]      {      [BUGGY]  if(_writeContext!=  null)  {  if(_writeContext  ==  null)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_writeContext!=    null)    {    if(_writeContext  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
30	[BUG]  [BUGGY]  if(_writeContext!=  null)  {  if(_writer  ==  null)  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]      {      [BUGGY]  if(_writeContext!=  null)  {  if(_writer  ==  null)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_writeContext!=    null)    {    if(_writer  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
31	[BUG]  [BUGGY]  if(_writeContext!=  null)  {  if(typeMsg  ==  null)  {  [CE]  illegal  start  of  expression  [FE]            NullPointerException    [CONTEXT]      {      [BUGGY]  if(_writeContext!=  null)  {  if(typeMsg  ==  null)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_writeContext!=    null)    {    if(typeMsg  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
32	[BUG]  [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      {      [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg    ==    null    ||    typeMsg.length()!=    0)    {    if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
33	[BUG]  [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {  if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      {      [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {  if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg    ==    null    ||    typeMsg.length()!=    0)    {    if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
34	[BUG]  [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {  if(typeMsg  ==  null  ||  typeMsg.length()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]      {      [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {  if(typeMsg  ==  null  ||  typeMsg.length()  >=  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg    ==    null    ||    typeMsg.length()!=    0)    {    if(typeMsg  ==  null  ||  typeMsg.length()  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
35	[BUG]  [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]      {      [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg    ==    null    ||    typeMsg.length()!=    0)    {    if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
36	[BUG]  [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]            NullPointerException    [CONTEXT]      {      [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  return;  }  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg    ==    null    ||    typeMsg.length()!=    0)    {    if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  return;  }	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
37	[BUG]  [BUGGY]  if(_cfgPrettyPrinter!=  null)  {  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(_cfgPrettyPrinter!=  null)  {  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_cfgPrettyPrinter!=  null)  {  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {	  if(typeMsg    ==    null    ||    _cfgPrettyPrinter!=    null)    {    if(typeMsg!=    null    ||    typeMsg.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
38	[BUG]  [BUGGY]  if(_cfgPrettyPrinter!=  null)  {  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(_cfgPrettyPrinter!=  null)  {  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_cfgPrettyPrinter!=  null)  {  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {	  if(typeMsg    ==    null    ||    _cfgPrettyPrinter!=    null)    {    if(typeMsg!=    null    ||    typeMsg.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
39	[BUG]  [BUGGY]  if(_writer!=  null)  {  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(_writer!=  null)  {  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_writer!=  null)  {  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {	  if(typeMsg    ==    null    ||    _cfgPrettyPrinter!=    null)    {    if(typeMsg!=    null    ||    typeMsg.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
40	[BUG]  [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {      [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg    ==    null    ||    typeMsg.length()    ==    0)    {    if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
41	[BUG]  [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {      [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg    ==    null    ||    typeMsg.length()    ==    0)    {    if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
42	[BUG]  [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {      [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg    ==    null    ||    typeMsg.length()    ==    0)    {    if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
43	[BUG]  [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  if(typeMsg  ==  null  ||  typeMsg.length()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {      [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  if(typeMsg  ==  null  ||  typeMsg.length()  >=  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg    ==    null    ||    typeMsg.length()    ==    0)    {    if(typeMsg  ==  null  ||  typeMsg.length()  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
44	[BUG]  [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  if(typeMsg  ==  null  ||  typeMsg.length()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {      [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  if(typeMsg  ==  null  ||  typeMsg.length()  ==  1)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg    ==    null    ||    typeMsg.length()    ==    0)    {    if(typeMsg  ==  null  ||  typeMsg.length()  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
45	[BUG]  [BUGGY]  if(_prettyValueWrite!=  null  ||  typeMsg.length()  ==  0)  {  [CE]  cannot  find  symbol  _prettyValueWrite  [FE]    NullPointerException    [CONTEXT]      {      [BUGGY]  if(_prettyValueWrite!=  null  ||  typeMsg.length()  ==  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_prettyValueWrite!=  null  ||  typeMsg.length()  ==  0)  {	  if(typeMsg!=    null    ||    typeMsg.length()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  _prettyValueWrite	52	None	replace
46	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name. ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name. ");  }  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name. ");  }	  if(typeMsg    ==    null)    {    if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name.   ");    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
47	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      {      [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()  >=  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	add	if(typeMsg  ==  null  ||  typeMsg.length()  >=  0)  {	  if(typeMsg    ==    null    ||    typeMsg.length()!=    0)    {    	compilable	  [FE]  NullPointerException  	30	5	replace
48	[BUG]  [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()  >=  0)  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      {      [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()  >=  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg  ==  null  ||  typeMsg.length()  >=  0)  {	  if(typeMsg    ==    null    ||    typeMsg.length()!=    0)    {    	compilable	  [FE]  NullPointerException  	30	5	replace
49	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(_writeContext  ==  null)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	add	if(_writeContext  ==  null)  {	  if(_prettyValueWrite    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	41	1	replace
50	[BUG]  [BUGGY]  if(_writeContext  ==  null)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(_writeContext  ==  null)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_writeContext  ==  null)  {	  if(_prettyValueWrite    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	41	1	replace
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()  <  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	add	if(typeMsg  ==  null  ||  typeMsg.length()  <  0)  {	  if(typeMsg    ==    null)    {    if(typeMsg    ==    null    ||    typeMsg.length()    <    0)    {    	compilable	  [FE]  AssertionFailedError  	42	1	replace
52	[BUG]  [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()  <  0)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()  <  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg  ==  null  ||  typeMsg.length()  <  0)  {	  if(typeMsg    ==    null)    {    if(typeMsg    ==    null    ||    typeMsg.length()    <    0)    {    	compilable	  [FE]  AssertionFailedError  	42	1	replace
53	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(typeMsg!=  null  ||  typeMsg.length()  <  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	add	if(typeMsg!=  null  ||  typeMsg.length()  <  0)  {	  if(typeMsg    ==    null)    {    if(typeMsg    ==    null    ||    typeMsg.length()    <    0)    {    	compilable	  [FE]  NullPointerException  	42	5	replace
54	[BUG]  [BUGGY]  if(typeMsg!=  null  ||  typeMsg.length()  <  0)  {  [FE]  NullPointerException  [FE]          AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(typeMsg!=  null  ||  typeMsg.length()  <  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg!=  null  ||  typeMsg.length()  <  0)  {	  if(typeMsg    ==    null)    {    if(typeMsg    ==    null    ||    typeMsg.length()    <    0)    {    	compilable	  [FE]  NullPointerException  	42	5	replace
55	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException      [CONTEXT]      {      [BUGGY]  if(typeMsg!=  null  ||  typeMsg.length()  >=  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	add	if(typeMsg!=  null  ||  typeMsg.length()  >=  0)  {	  if(typeMsg!=    null)    {    if(typeMsg!=    null    ||    typeMsg.length()    >=    0)    {    	compilable	  [FE]  NullPointerException  	48	5	replace
56	[BUG]  [BUGGY]  if(typeMsg!=  null  ||  typeMsg.length()  >=  0)  {  [FE]  NullPointerException  [FE]        NullPointerException      [CONTEXT]      {      [BUGGY]  if(typeMsg!=  null  ||  typeMsg.length()  >=  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg!=  null  ||  typeMsg.length()  >=  0)  {	  if(typeMsg!=    null)    {    if(typeMsg!=    null    ||    typeMsg.length()    >=    0)    {    	compilable	  [FE]  NullPointerException  	48	5	replace
57	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  return;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  return;  }  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  return;  }	  if(typeMsg    ==    null)    {    if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name   ");    return;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
58	[BUG]  [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  return;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  return;  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	_reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  return;	  if(typeMsg    ==    null)    {    if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name   ");    return;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
59	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_ERROR)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  return;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_ERROR)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  return;  }  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(status  ==  JsonWriteContext.STATUS_ERROR)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  return;  }	  if(typeMsg    ==    null)    {    if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name   ");    return;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
60	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_FAILURE)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  return;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_FAILURE)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  return;  }  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(status  ==  JsonWriteContext.STATUS_FAILURE)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  return;  }	  if(typeMsg    ==    null)    {    if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name   ");    return;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
61	[BUG]  [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length!=  0)  {  [CE]  cannot  find  symbol  length  [FE]        AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length!=  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg  ==  null  ||  typeMsg.length!=  0)  {	  if(typeMsg    ==    null    ||    typeMsg.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  length	40	None	replace
62	[BUG]  [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length  >=  0)  {  [CE]  cannot  find  symbol  length  [FE]          AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length  >=  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg  ==  null  ||  typeMsg.length  >=  0)  {	  if(typeMsg    ==    null    ||    typeMsg.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  length	40	None	replace
63	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(typeMsg  ==  null  ||  typeMsg!=  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(typeMsg  ==  null  ||  typeMsg!=  null)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(typeMsg  ==  null  ||  typeMsg!=  null)  {	  if(typeMsg    ==    null)    {    if(typeMsg    ==    null    ||    typeMsg!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
64	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(typeMsg  ==  null  ||  typeMsg!=  null)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	add	if(typeMsg  ==  null  ||  typeMsg!=  null)  {	  if(typeMsg    ==    null)    {    if(typeMsg    ==    null    ||    typeMsg!=    null)    {    	compilable	  [FE]  NullPointerException  	34	5	replace
65	[BUG]  [BUGGY]  if(typeMsg  ==  null  ||  typeMsg!=  null)  {  [FE]  NullPointerException  [FE]          AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(typeMsg  ==  null  ||  typeMsg!=  null)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg  ==  null  ||  typeMsg!=  null)  {	  if(typeMsg    ==    null)    {    if(typeMsg    ==    null    ||    typeMsg!=    null)    {    	compilable	  [FE]  NullPointerException  	34	5	replace
66	[BUG]  [BUGGY]  if(_cfgPrettyPrinter!=  null)  {  if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(_cfgPrettyPrinter!=  null)  {  if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_cfgPrettyPrinter!=  null)  {  if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {	  if(typeMsg    ==    null    ||    _cfgPrettyPrinter!=    null)    {    if(typeMsg    ==    null    ||    typeMsg.length()!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
67	[BUG]  [BUGGY]  if(_cfgPrettyPrinter  ==  null)  {  if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(_cfgPrettyPrinter  ==  null)  {  if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_cfgPrettyPrinter  ==  null)  {  if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {	  if(typeMsg    ==    null    ||    _cfgPrettyPrinter!=    null)    {    if(typeMsg    ==    null    ||    typeMsg.length()!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
68	[BUG]  [BUGGY]  if(_prettyPrinter!=  null)  {  if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(_prettyPrinter!=  null)  {  if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_prettyPrinter!=  null)  {  if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {	  if(typeMsg    ==    null    ||    _cfgPrettyPrinter!=    null)    {    if(typeMsg    ==    null    ||    typeMsg.length()!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
69	[BUG]  [BUGGY]  if(_cfgPrettyPrinter  ==  null)  {  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(_cfgPrettyPrinter  ==  null)  {  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_cfgPrettyPrinter  ==  null)  {  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {	  if(typeMsg    ==    null    ||    _cfgPrettyPrinter!=    null)    {    if(typeMsg    ==    null    ||    typeMsg.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
70	[BUG]  [BUGGY]  if(_prettyPrinter!=  null)  {  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(_prettyPrinter!=  null)  {  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_prettyPrinter!=  null)  {  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {	  if(typeMsg    ==    null    ||    _cfgPrettyPrinter!=    null)    {    if(typeMsg    ==    null    ||    typeMsg.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
71	[BUG]  [BUGGY]  _writeContext  =  _writeContext.createChildArrayContext();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  _writeContext  =  _writeContext.createChildArrayContext();  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	_writeContext  =  _writeContext.createChildArrayContext();	  _writeContext    =    _writeContext.createChildObjectContext();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
72	[BUG]  [BUGGY]  _writeContext  =  _writeContext.createChildObjectContext(true);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {      [BUGGY]  _writeContext  =  _writeContext.createChildObjectContext(true);  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	_writeContext  =  _writeContext.createChildObjectContext(true);	  _writeContext    =    _writeContext.createChildObjectContext();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
73	[BUG]  [BUGGY]  _writeContext  =  _writeContext.createChildObjectContext(-1);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {      [BUGGY]  _writeContext  =  _writeContext.createChildObjectContext(-1);  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	_writeContext  =  _writeContext.createChildObjectContext(-1);	  _writeContext    =    _writeContext.createChildObjectContext();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
74	[BUG]  [BUGGY]  if(_cfgPrettyPrinter!=  null)  {  if(typeMsg  ==  null  ||  typeMsg.length  <  2)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(_cfgPrettyPrinter!=  null)  {  if(typeMsg  ==  null  ||  typeMsg.length  <  2)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_cfgPrettyPrinter!=  null)  {  if(typeMsg  ==  null  ||  typeMsg.length  <  2)  {	  if(typeMsg    ==    null    ||    _cfgPrettyPrinter!=    null)    {    if(typeMsg    ==    null    ||    typeMsg.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
75	[BUG]  [BUGGY]  if(_cfgPrettyPrinter  ==  null)  {  if(typeMsg  ==  null  ||  typeMsg.length  <  2)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(_cfgPrettyPrinter  ==  null)  {  if(typeMsg  ==  null  ||  typeMsg.length  <  2)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_cfgPrettyPrinter  ==  null)  {  if(typeMsg  ==  null  ||  typeMsg.length  <  2)  {	  if(typeMsg    ==    null    ||    _cfgPrettyPrinter!=    null)    {    if(typeMsg    ==    null    ||    typeMsg.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
76	[BUG]  [BUGGY]  if(_cfgPrettyPrinter!=  null)  {  if(typeMsg  ==  null  ||  typeMsg.length  <  1)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(_cfgPrettyPrinter!=  null)  {  if(typeMsg  ==  null  ||  typeMsg.length  <  1)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_cfgPrettyPrinter!=  null)  {  if(typeMsg  ==  null  ||  typeMsg.length  <  1)  {	  if(typeMsg    ==    null    ||    _cfgPrettyPrinter!=    null)    {    if(typeMsg    ==    null    ||    typeMsg.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
77	[BUG]  [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length  <  2)  {  [CE]  cannot  find  symbol  length  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length  <  2)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg  ==  null  ||  typeMsg.length  <  2)  {	  if(typeMsg    ==    null    ||    _cfgPrettyPrinter!=    null)    {    if(typeMsg    ==    null    ||    typeMsg.length    <    2)    {    	non-compiled	[CE]  cannot  find  symbol  length	47	None	replace
78	[BUG]  [BUGGY]  if(_cfgPrettyPrinter!=  null)  {  if(typeMsg  ==  null  ||  typeMsg!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(_cfgPrettyPrinter!=  null)  {  if(typeMsg  ==  null  ||  typeMsg!=  null)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_cfgPrettyPrinter!=  null)  {  if(typeMsg  ==  null  ||  typeMsg!=  null)  {	  if(typeMsg    ==    null    ||    _cfgPrettyPrinter!=    null)    {    if(typeMsg    ==    null    ||    typeMsg!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
79	[BUG]  [BUGGY]  if(_prettyPrinter!=  null)  {  if(typeMsg  ==  null  ||  typeMsg!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(_prettyPrinter!=  null)  {  if(typeMsg  ==  null  ||  typeMsg!=  null)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_prettyPrinter!=  null)  {  if(typeMsg  ==  null  ||  typeMsg!=  null)  {	  if(typeMsg    ==    null    ||    _cfgPrettyPrinter!=    null)    {    if(typeMsg    ==    null    ||    typeMsg!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
80	[BUG]  [BUGGY]  if(_cfgPrettyPrinter  ==  null)  {  if(typeMsg  ==  null  ||  typeMsg!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(_cfgPrettyPrinter  ==  null)  {  if(typeMsg  ==  null  ||  typeMsg!=  null)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_cfgPrettyPrinter  ==  null)  {  if(typeMsg  ==  null  ||  typeMsg!=  null)  {	  if(typeMsg    ==    null    ||    _cfgPrettyPrinter!=    null)    {    if(typeMsg    ==    null    ||    typeMsg!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
81	[BUG]  [BUGGY]  if(_writer!=  null)  {  if(typeMsg  ==  null  ||  typeMsg!=  null)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(_writer!=  null)  {  if(typeMsg  ==  null  ||  typeMsg!=  null)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_writer!=  null)  {  if(typeMsg  ==  null  ||  typeMsg!=  null)  {	  if(typeMsg    ==    null    ||    _cfgPrettyPrinter!=    null)    {    if(typeMsg    ==    null    ||    typeMsg!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
82	[BUG]  [BUGGY]  if(_verifyPrettyValueWrite(typeMsg)||(typeMsg!=  null  &&  typeMsg.length()  >  0))  {  [CE]  'void'  type  not  allowed  here  [FE]        AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(_verifyPrettyValueWrite(typeMsg)||(typeMsg!=  null  &&  typeMsg.length()  >  0))  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_verifyPrettyValueWrite(typeMsg)||(typeMsg!=  null  &&  typeMsg.length()  >  0))  {	  if(_verifyPrettyValueWrite(typeMsg))    {    	non-compiled	[CE]  'void'  type  not  allowed  here	33	None	replace
83	[BUG]  [BUGGY]  if(_verifyPrettyValueWrite(typeMsg,  c))  {  [CE]  cannot  find  symbol  c  [FE]          AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(_verifyPrettyValueWrite(typeMsg,  c))  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_verifyPrettyValueWrite(typeMsg,  c))  {	  if(_verifyPrettyValueWrite(typeMsg))    {    	non-compiled	[CE]  cannot  find  symbol  c	33	None	replace
84	[BUG]  [BUGGY]  if(_verifyPrettyValueWrite(typeMsg)||(typeMsg  ==  null  &&  typeMsg.length()  >  0))  {  [CE]  'void'  type  not  allowed  here  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(_verifyPrettyValueWrite(typeMsg)||(typeMsg  ==  null  &&  typeMsg.length()  >  0))  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_verifyPrettyValueWrite(typeMsg)||(typeMsg  ==  null  &&  typeMsg.length()  >  0))  {	  if(_verifyPrettyValueWrite(typeMsg))    {    	non-compiled	[CE]  'void'  type  not  allowed  here	33	None	replace
85	[BUG]  [BUGGY]  if(_verifyPrettyValueWrite(typeMsg,  status))  {  [CE]  cannot  find  symbol  status  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(_verifyPrettyValueWrite(typeMsg,  status))  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_verifyPrettyValueWrite(typeMsg,  status))  {	  if(_verifyPrettyValueWrite(typeMsg))    {    	non-compiled	[CE]  cannot  find  symbol  status	33	None	replace
86	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(status  ==  JsonWriteContext.STATUS_OK)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }	  if(typeMsg    ==    null)    {    if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name   ");    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
87	[BUG]  [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name,  expecting  field  name. ");  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {      [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name,  expecting  field  name. ");  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	_reportError( "Can  not   "+typeMsg+ ",  expecting  field  name,  expecting  field  name. ");	  _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name.   ");    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
88	[BUG]  [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name, ");  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {      [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name, ");  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	_reportError( "Can  not   "+typeMsg+ ",  expecting  field  name, ");	  _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name.   ");    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
89	[BUG]  [BUGGY]  if(_prettyPrinter  ==  null)  {  if(typeMsg  ==  null  ||  typeMsg!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(_prettyPrinter  ==  null)  {  if(typeMsg  ==  null  ||  typeMsg!=  null)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_prettyPrinter  ==  null)  {  if(typeMsg  ==  null  ||  typeMsg!=  null)  {	  if(typeMsg    ==    null    ||    _cfgPrettyPrinter!=    null)    {    if(typeMsg    ==    null    ||    typeMsg!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
90	[BUG]  [BUGGY]  if(typeMsg  ==  null  ||  status  ==  JsonWriteContext.STATUS_ERROR)  {  [CE]  cannot  find  symbol  status  [FE]        AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(typeMsg  ==  null  ||  status  ==  JsonWriteContext.STATUS_ERROR)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg  ==  null  ||  status  ==  JsonWriteContext.STATUS_ERROR)  {	  if(typeMsg    ==    null    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  status	3	None	replace
91	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]      {      [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()  ==  1)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	add	if(typeMsg  ==  null  ||  typeMsg.length()  ==  1)  {	  if(typeMsg!=    null    ||    typeMsg.length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	52	1	replace
92	[BUG]  [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()  ==  1)  {  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]      {      [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()  ==  1)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg  ==  null  ||  typeMsg.length()  ==  1)  {	  if(typeMsg!=    null    ||    typeMsg.length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	52	1	replace
93	[BUG]  [BUGGY]  if(_prettyPrinter!=  null)  {  if(typeMsg  ==  null  ||  typeMsg.length  <  2)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(_prettyPrinter!=  null)  {  if(typeMsg  ==  null  ||  typeMsg.length  <  2)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_prettyPrinter!=  null)  {  if(typeMsg  ==  null  ||  typeMsg.length  <  2)  {	  if(typeMsg    ==    null    ||    _cfgPrettyPrinter!=    null)    {    if(typeMsg    ==    null    ||    typeMsg.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
94	[BUG]  [BUGGY]  if(_writer!=  null)  {  if(typeMsg  ==  null  ||  typeMsg.length  <  2)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(_writer!=  null)  {  if(typeMsg  ==  null  ||  typeMsg.length  <  2)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_writer!=  null)  {  if(typeMsg  ==  null  ||  typeMsg.length  <  2)  {	  if(typeMsg    ==    null    ||    _cfgPrettyPrinter!=    null)    {    if(typeMsg    ==    null    ||    typeMsg.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
95	[BUG]  [BUGGY]  if(_writer  ==  null)  {  if(_writer  ==  null  ||  _writer.isValidPrettyValueWrite(typeMsg))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {      [BUGGY]  if(_writer  ==  null)  {  if(_writer  ==  null  ||  _writer.isValidPrettyValueWrite(typeMsg))  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_writer    ==    null)    {    if(_writer  ==  null  ||  _writer.isValidPrettyValueWrite(typeMsg))  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
96	[BUG]  [BUGGY]  if(_writer  ==  null)  {  if(_writer  ==  null  ||  _writer.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {      [BUGGY]  if(_writer  ==  null)  {  if(_writer  ==  null  ||  _writer.length()  ==  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_writer    ==    null)    {    if(_writer  ==  null  ||  _writer.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
97	[BUG]  [BUGGY]  if(_writer  ==  null)  {  if(_writer  ==  null  ||  typeMsg  ==  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {      [BUGGY]  if(_writer  ==  null)  {  if(_writer  ==  null  ||  typeMsg  ==  null)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_writer    ==    null)    {    if(_writer  ==  null  ||  typeMsg  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
98	[BUG]  [BUGGY]  if(_verifyPrettyValueWrite(typeMsg),  status)  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(_verifyPrettyValueWrite(typeMsg),  status)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_verifyPrettyValueWrite(typeMsg),  status)  {	  if(_verifyPrettyValueWrite(typeMsg))    {    	non-compiled	[CE]  ')'  expected	33	None	replace
99	[BUG]  [BUGGY]  if(_verifyPrettyValueWrite)  {  [CE]  cannot  find  symbol  _verifyPrettyValueWrite  [FE]            NullPointerException      [CONTEXT]      {      [BUGGY]  if(_verifyPrettyValueWrite)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_verifyPrettyValueWrite)  {	  if(typeMsg!=    null)    {    if(typeMsg    ==    null    ||    typeMsg.length()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  _verifyPrettyValueWrite	18	None	replace
100	[BUG]  [BUGGY]  if(typeMsg!=  null  ||  typeMsg.length  ==  0)  {  [CE]  cannot  find  symbol  length  [FE]        AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(typeMsg!=  null  ||  typeMsg.length  ==  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg!=  null  ||  typeMsg.length  ==  0)  {	  if(typeMsg    ==    null    ||    typeMsg.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  length	40	None	replace
101	[BUG]  [BUGGY]  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  if(typeMsg!=  null  ||  typeMsg.length()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      {      [BUGGY]  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  if(typeMsg!=  null  ||  typeMsg.length()  ==  1)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg!=    null    ||    typeMsg.length()    ==    0)    {    if(typeMsg!=  null  ||  typeMsg.length()  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
102	[BUG]  [BUGGY]  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  if(typeMsg!=  null  ||  typeMsg.length()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      {      [BUGGY]  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  if(typeMsg!=  null  ||  typeMsg.length()  ==  2)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg!=    null    ||    typeMsg.length()    ==    0)    {    if(typeMsg!=  null  ||  typeMsg.length()  ==  2)  {	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
103	[BUG]  [BUGGY]  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  if(typeMsg  ==  null  ||  typeMsg.length()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]      {      [BUGGY]  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  if(typeMsg  ==  null  ||  typeMsg.length()  ==  1)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg!=    null    ||    typeMsg.length()    ==    0)    {    if(typeMsg  ==  null  ||  typeMsg.length()  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
104	[BUG]  [BUGGY]  if(_writeContext!=  null)  {  if(_verifyPrettyValueWrite(typeMsg))  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      {      [BUGGY]  if(_writeContext!=  null)  {  if(_verifyPrettyValueWrite(typeMsg))  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_writeContext!=    null)    {    if(_verifyPrettyValueWrite(typeMsg))  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
105	[BUG]  [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  AssertionFailedError  <  String>typeMsg  =  typeMsg.trim();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {      [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  AssertionFailedError  <  String>typeMsg  =  typeMsg.trim();  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg    ==    null    ||    typeMsg.length()    ==    0)    {    AssertionFailedError  <  String>typeMsg  =  typeMsg.trim();	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
106	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_ERROR)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name. ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_ERROR)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name. ");  }  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(status  ==  JsonWriteContext.STATUS_ERROR)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name. ");  }	  if(typeMsg    ==    null)    {    if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name.   ");    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
107	[BUG]  [BUGGY]  _reportError( "Current  context  not  an  instance  of  type   "+typeMsg+ ",  expecting  field  name ");  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  _reportError( "Current  context  not  an  instance  of  type   "+typeMsg+ ",  expecting  field  name ");  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	_reportError( "Current  context  not  an  instance  of  type   "+typeMsg+ ",  expecting  field  name ");	  _reportError(   "Current    context    not    an    instance    of    type   "+typeMsg);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
108	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_UNKNOWN)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  return;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_UNKNOWN)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  return;  }  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(status  ==  JsonWriteContext.STATUS_UNKNOWN)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  return;  }	  if(typeMsg    ==    null)    {    if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name   ");    return;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
109	[BUG]  [BUGGY]  if(_cfgPrettyPrinter  ==  null)  {  if(_cfgPrettyPrinter  ==  null  ||  _cfgPrettyPrinter!=  null)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      {      [BUGGY]  if(_cfgPrettyPrinter  ==  null)  {  if(_cfgPrettyPrinter  ==  null  ||  _cfgPrettyPrinter!=  null)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_cfgPrettyPrinter    ==    null)    {    if(_cfgPrettyPrinter  ==  null  ||  _cfgPrettyPrinter!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
110	[BUG]  [BUGGY]  if(_cfgPrettyPrinter  ==  null)  {  if(_cfgPrettyPrinter  ==  null  ||  typeMsg!=  null)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      {      [BUGGY]  if(_cfgPrettyPrinter  ==  null)  {  if(_cfgPrettyPrinter  ==  null  ||  typeMsg!=  null)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_cfgPrettyPrinter    ==    null)    {    if(_cfgPrettyPrinter  ==  null  ||  typeMsg!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
111	[BUG]  [BUGGY]  if(_cfgPrettyPrinter  ==  null)  {  if(_cfgPrettyPrinter  ==  null  ||  _cfgPrettyPrinter.isReadOnly())  {  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]      {      [BUGGY]  if(_cfgPrettyPrinter  ==  null)  {  if(_cfgPrettyPrinter  ==  null  ||  _cfgPrettyPrinter.isReadOnly())  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_cfgPrettyPrinter    ==    null)    {    if(_cfgPrettyPrinter  ==  null  ||  _cfgPrettyPrinter.isReadOnly())  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
112	[BUG]  [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {  if(typeMsg  ==  null  ||  typeMsg.length()!=  1)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      {      [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {  if(typeMsg  ==  null  ||  typeMsg.length()!=  1)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg    ==    null    ||    typeMsg.length()!=    0)    {    if(typeMsg  ==  null  ||  typeMsg.length()!=  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
113	[BUG]  [BUGGY]  if(_prettyPrinter!=  null)  {  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(_prettyPrinter!=  null)  {  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_prettyPrinter!=  null)  {  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {	  if(typeMsg    ==    null    ||    _cfgPrettyPrinter!=    null)    {    if(typeMsg!=    null    ||    typeMsg.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
114	[BUG]  [BUGGY]  if(_writeContext!=  null)  {  if(_writeContext!=  null  ||  typeMsg  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      {      [BUGGY]  if(_writeContext!=  null)  {  if(_writeContext!=  null  ||  typeMsg  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_writeContext!=    null)    {    if(_writeContext!=  null  ||  typeMsg  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
115	[BUG]  [BUGGY]  if(_writeContext!=  null)  {  if(_writer!=  null  ||  _writeContext.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      {      [BUGGY]  if(_writeContext!=  null)  {  if(_writer!=  null  ||  _writeContext.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_writeContext!=    null)    {    if(_writer!=  null  ||  _writeContext.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
116	[BUG]  [BUGGY]  if(_writeContext!=  null)  {  if(_writeContext!=  null  ||  typeMsg.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]      {      [BUGGY]  if(_writeContext!=  null)  {  if(_writeContext!=  null  ||  typeMsg.length()  ==  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_writeContext!=    null)    {    if(_writeContext!=  null  ||  typeMsg.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
117	[BUG]  [BUGGY]  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      {      [BUGGY]  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  return;  }  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg!=    null    ||    typeMsg.length()    ==    0)    {    if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  return;  }	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
118	[BUG]  [BUGGY]  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      {      [BUGGY]  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg!=    null    ||    typeMsg.length()    ==    0)    {    if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
119	[BUG]  [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {  if(typeMsg  ==  null  ||  typeMsg.length()!=  2)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      {      [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {  if(typeMsg  ==  null  ||  typeMsg.length()!=  2)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg    ==    null    ||    typeMsg.length()!=    0)    {    if(typeMsg  ==  null  ||  typeMsg.length()!=  2)  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
120	[BUG]  [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name,  expecting  field  name ");  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name,  expecting  field  name ");  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	_reportError( "Can  not   "+typeMsg+ ",  expecting  field  name,  expecting  field  name ");	  _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name   ");    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
121	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]      {      [BUGGY]  if(_writer  ==  null  ||  typeMsg!=  null)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	add	if(_writer  ==  null  ||  typeMsg!=  null)  {	  if(_writer    ==    null)    {    	compilable	  [FE]  NullPointerException  	22	5	replace
122	[BUG]  [BUGGY]  if(_writer  ==  null  ||  typeMsg!=  null)  {  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]      {      [BUGGY]  if(_writer  ==  null  ||  typeMsg!=  null)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_writer  ==  null  ||  typeMsg!=  null)  {	  if(_writer    ==    null)    {    	compilable	  [FE]  NullPointerException  	22	5	replace
123	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException      [CONTEXT]      {      [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()  >  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	add	if(typeMsg  ==  null  ||  typeMsg.length()  >  0)  {	  if(typeMsg!=    null)    {    if(typeMsg!=    null    ||    typeMsg.length()    >=    0)    {    	compilable	  [FE]  NullPointerException  	48	5	replace
124	[BUG]  [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()  >  0)  {  [FE]  NullPointerException  [FE]        NullPointerException      [CONTEXT]      {      [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()  >  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg  ==  null  ||  typeMsg.length()  >  0)  {	  if(typeMsg!=    null)    {    if(typeMsg!=    null    ||    typeMsg.length()    >=    0)    {    	compilable	  [FE]  NullPointerException  	48	5	replace
125	[BUG]  [BUGGY]  if(_prettyValueWrite  ==  null  ||  typeMsg.length()!=  0)  {  [CE]  cannot  find  symbol  _prettyValueWrite  [FE]    NullPointerException    [CONTEXT]      {      [BUGGY]  if(_prettyValueWrite  ==  null  ||  typeMsg.length()!=  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_prettyValueWrite  ==  null  ||  typeMsg.length()!=  0)  {	  if(typeMsg    ==    null    ||    typeMsg.length()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol  _prettyValueWrite	30	None	replace
126	[BUG]  [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name.  If(status  ==  JsonWriteContext.STATUS_EXPECT_NAME));  [CE]  unclosed  string  literal  [FE]                        AssertionFailedError      [CONTEXT]      {      [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name.  If(status  ==  JsonWriteContext.STATUS_EXPECT_NAME));  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	_reportError( "Can  not   "+typeMsg+ ",  expecting  field  name.  If(status  ==  JsonWriteContext.STATUS_EXPECT_NAME));	  _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name.   ");    	non-compiled	[CE]  unclosed  string  literal	46	None	replace
127	[BUG]  [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name: ");  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {      [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name: ");  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	_reportError( "Can  not   "+typeMsg+ ",  expecting  field  name: ");	  _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name.   ");    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
128	[BUG]  [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()  <  =  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg  ==  null  ||  typeMsg.length()  <  =  0)  {	  if(typeMsg    ==    null)    {    if(typeMsg    ==    null    ||    typeMsg.length()    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
129	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(typeMsg  ==  null  ||  typeMsg  ==  null)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	add	if(typeMsg  ==  null  ||  typeMsg  ==  null)  {	  if(typeMsg    ==    null)    {    if(typeMsg    ==    null    ||    typeMsg!=    null)    {    	compilable	  [FE]  AssertionFailedError  	34	1	replace
130	[BUG]  [BUGGY]  if(typeMsg  ==  null  ||  typeMsg  ==  null)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(typeMsg  ==  null  ||  typeMsg  ==  null)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg  ==  null  ||  typeMsg  ==  null)  {	  if(typeMsg    ==    null)    {    if(typeMsg    ==    null    ||    typeMsg!=    null)    {    	compilable	  [FE]  AssertionFailedError  	34	1	replace
131	[BUG]  [BUGGY]  if(!_verifyPrettyValueWrite(typeMsg))  {  [CE]  'void'  type  not  allowed  here  [FE]        AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(!_verifyPrettyValueWrite(typeMsg))  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(!_verifyPrettyValueWrite(typeMsg))  {	  if(_verifyPrettyValueWrite(typeMsg))    {    	non-compiled	[CE]  'void'  type  not  allowed  here	33	None	replace
132	[BUG]  [BUGGY]  if(_verifyPrettyValueWrite(typeMsg)||!Character.isDigit(c))  {  [CE]  'void'  type  not  allowed  here  [FE]          AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(_verifyPrettyValueWrite(typeMsg)||!Character.isDigit(c))  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_verifyPrettyValueWrite(typeMsg)||!Character.isDigit(c))  {	  if(_verifyPrettyValueWrite(typeMsg))    {    	non-compiled	[CE]  'void'  type  not  allowed  here	33	None	replace
133	[BUG]  [BUGGY]  if(_verifyPrettyValueWrite(typeMsg)||  typeMsg  ==  null)  {  [CE]  'void'  type  not  allowed  here  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(_verifyPrettyValueWrite(typeMsg)||  typeMsg  ==  null)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_verifyPrettyValueWrite(typeMsg)||  typeMsg  ==  null)  {	  if(_verifyPrettyValueWrite(typeMsg))    {    	non-compiled	[CE]  'void'  type  not  allowed  here	33	None	replace
134	[BUG]  [BUGGY]  if(_writer  ==  null)  {  if(_writer  ==  null  ||!_writer.isValidPrettyValueWrite(typeMsg))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {      [BUGGY]  if(_writer  ==  null)  {  if(_writer  ==  null  ||!_writer.isValidPrettyValueWrite(typeMsg))  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_writer    ==    null)    {    if(_writer  ==  null  ||!_writer.isValidPrettyValueWrite(typeMsg))  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
135	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {      [BUGGY]  if(_writer  ==  null  ||  typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	add	if(_writer  ==  null  ||  typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {	  if(typeMsg    ==    null    ||    typeMsg.length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
136	[BUG]  [BUGGY]  if(_writer  ==  null  ||  typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {      [BUGGY]  if(_writer  ==  null  ||  typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_writer  ==  null  ||  typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {	  if(typeMsg    ==    null    ||    typeMsg.length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
137	[BUG]  [BUGGY]  if(_prettyValueWrite  ==  null  ||  typeMsg.length()  ==  0)  {  [CE]  cannot  find  symbol  _prettyValueWrite  [FE]    NullPointerException    [CONTEXT]      {      [BUGGY]  if(_prettyValueWrite  ==  null  ||  typeMsg.length()  ==  0)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_prettyValueWrite  ==  null  ||  typeMsg.length()  ==  0)  {	  if(typeMsg!=    null    ||    typeMsg.length()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  _prettyValueWrite	52	None	replace
138	[BUG]  [BUGGY]  _writeContext  =  _writeContext.createChildObjectContext(-1,  -1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  _writeContext  =  _writeContext.createChildObjectContext(-1,  -1);  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	_writeContext  =  _writeContext.createChildObjectContext(-1,  -1);	  _writeContext    =    _writeContext.createChildObjectContext();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
139	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name. ");  return;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name. ");  return;  }  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name. ");  return;  }	  if(typeMsg    ==    null)    {    if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name   ");    return;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
140	[BUG]  [BUGGY]  if(_cfgPrettyPrinter!=  null)  {  if(typeMsg  ==  null  ||  typeMsg  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(_cfgPrettyPrinter!=  null)  {  if(typeMsg  ==  null  ||  typeMsg  ==  null)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_cfgPrettyPrinter!=  null)  {  if(typeMsg  ==  null  ||  typeMsg  ==  null)  {	  if(typeMsg    ==    null    ||    _cfgPrettyPrinter!=    null)    {    if(typeMsg    ==    null    ||    typeMsg!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
141	[BUG]  [BUGGY]  if(_prettyValueWrite)  {  [CE]  cannot  find  symbol  _prettyValueWrite  [FE]        NullPointerException      [CONTEXT]      {      [BUGGY]  if(_prettyValueWrite)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_prettyValueWrite)  {	  if(_writer!=    null)    {    if(_writer!=    null    ||    typeMsg.length()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  _prettyValueWrite	53	None	replace
142	[BUG]  [BUGGY]  if(typeMsg  ==  null  ||  status  ==  JsonWriteContext.STATUS_SYNTHETIC)  {  [CE]  cannot  find  symbol  status  [FE]        AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(typeMsg  ==  null  ||  status  ==  JsonWriteContext.STATUS_SYNTHETIC)  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg  ==  null  ||  status  ==  JsonWriteContext.STATUS_SYNTHETIC)  {	  if(typeMsg    ==    null    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  status	3	None	replace
143	[BUG]  [BUGGY]  if(_cfgPrettyPrinter  ==  null)  {  if(_cfgPrettyPrinter  ==  null  ||!_cfgPrettyPrinter.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      {      [BUGGY]  if(_cfgPrettyPrinter  ==  null)  {  if(_cfgPrettyPrinter  ==  null  ||!_cfgPrettyPrinter.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_cfgPrettyPrinter    ==    null)    {    if(_cfgPrettyPrinter  ==  null  ||!_cfgPrettyPrinter.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
144	[BUG]  [BUGGY]  if(_cfgPrettyPrinter  ==  null)  {  if(_cfgPrettyPrinter  ==  null  ||!_cfgPrettyPrinter.isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      {      [BUGGY]  if(_cfgPrettyPrinter  ==  null)  {  if(_cfgPrettyPrinter  ==  null  ||!_cfgPrettyPrinter.isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [BUGGY]        _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_cfgPrettyPrinter    ==    null)    {    if(_cfgPrettyPrinter  ==  null  ||!_cfgPrettyPrinter.isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
