bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(typeMsg  ==  null)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  [CE]  cannot  find  symbol  status  [FE]              AssertionFailedError    [CONTEXT]    {    [BUGGY]  if(typeMsg  ==  null)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg  ==  null)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }	      	non-compiled	[CE]  cannot  find  symbol  status	7	None	replace
2	[BUG]  [BUGGY]  if(typeMsg  ==  null)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name. ");  }  [CE]  cannot  find  symbol  status  [FE]                AssertionFailedError    [CONTEXT]    {    [BUGGY]  if(typeMsg  ==  null)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name. ");  }  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg  ==  null)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name. ");  }	      	non-compiled	[CE]  cannot  find  symbol  status	7	None	replace
3	[BUG]  [BUGGY]  if(typeMsg  ==  null  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [CE]  cannot  find  symbol  status  [FE]    AssertionFailedError    [CONTEXT]    {    [BUGGY]  if(typeMsg  ==  null  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg  ==  null  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {	  if(typeMsg    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  status	4	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {    [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	add	if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {	  if(typeMsg    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
5	[BUG]  [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {    [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {	  if(typeMsg    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
6	[BUG]  [BUGGY]  if(typeMsg  ==  null  ||  _cfgPrettyPrinter!=  null)  {  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {    [BUGGY]  if(typeMsg  ==  null  ||  _cfgPrettyPrinter!=  null)  {  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg    ==    null    ||    _cfgPrettyPrinter!=    null)    {    if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
7	[BUG]  [BUGGY]  if(typeMsg  ==  null  ||  _cfgPrettyPrinter!=  null)  {  if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    {    [BUGGY]  if(typeMsg  ==  null  ||  _cfgPrettyPrinter!=  null)  {  if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg    ==    null    ||    _cfgPrettyPrinter!=    null)    {    if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
8	[BUG]  [BUGGY]  if(typeMsg  ==  null  ||  _cfgPrettyPrinter!=  null)  {  if(typeMsg  ==  null  ||  _cfgPrettyPrinter!=  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    {    [BUGGY]  if(typeMsg  ==  null  ||  _cfgPrettyPrinter!=  null)  {  if(typeMsg  ==  null  ||  _cfgPrettyPrinter!=  null)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg    ==    null    ||    _cfgPrettyPrinter!=    null)    {    if(typeMsg  ==  null  ||  _cfgPrettyPrinter!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
9	[BUG]  [BUGGY]  if(typeMsg  ==  null  ||  _cfgPrettyPrinter!=  null)  {  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    {    [BUGGY]  if(typeMsg  ==  null  ||  _cfgPrettyPrinter!=  null)  {  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg    ==    null    ||    _cfgPrettyPrinter!=    null)    {    if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
10	[BUG]  [BUGGY]  if(typeMsg  ==  null  ||  _cfgPrettyPrinter!=  null)  {  if(typeMsg  ==  null  ||  typeMsg!=  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    {    [BUGGY]  if(typeMsg  ==  null  ||  _cfgPrettyPrinter!=  null)  {  if(typeMsg  ==  null  ||  typeMsg!=  null)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg    ==    null    ||    _cfgPrettyPrinter!=    null)    {    if(typeMsg  ==  null  ||  typeMsg!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
11	[BUG]  [BUGGY]  if(typeMsg  ==  null)  {  if(typeMsg  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {    [BUGGY]  if(typeMsg  ==  null)  {  if(typeMsg  ==  null)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg    ==    null)    {    if(typeMsg  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
12	[BUG]  [BUGGY]  if(typeMsg  ==  null)  {  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    {    [BUGGY]  if(typeMsg  ==  null)  {  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg    ==    null)    {    if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
13	[BUG]  [BUGGY]  if(typeMsg  ==  null)  {  if(typeMsg!=  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    {    [BUGGY]  if(typeMsg  ==  null)  {  if(typeMsg!=  null)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg    ==    null)    {    if(typeMsg!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
14	[BUG]  [BUGGY]  if(typeMsg  ==  null)  {  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    {    [BUGGY]  if(typeMsg  ==  null)  {  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg    ==    null)    {    if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
15	[BUG]  [BUGGY]  if(typeMsg  ==  null)  {  if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    {    [BUGGY]  if(typeMsg  ==  null)  {  if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg    ==    null)    {    if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
16	[BUG]  [BUGGY]  if(typeMsg!=  null)  {  if(typeMsg  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    {    [BUGGY]  if(typeMsg!=  null)  {  if(typeMsg  ==  null)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg!=    null)    {    if(typeMsg  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
17	[BUG]  [BUGGY]  if(typeMsg!=  null)  {  if(typeMsg!=  null)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]    {    [BUGGY]  if(typeMsg!=  null)  {  if(typeMsg!=  null)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg!=    null)    {    if(typeMsg!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
18	[BUG]  [BUGGY]  if(typeMsg!=  null)  {  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]    {    [BUGGY]  if(typeMsg!=  null)  {  if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg!=    null)    {    if(typeMsg  ==  null  ||  typeMsg.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
19	[BUG]  [BUGGY]  if(typeMsg!=  null)  {  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]    {    [BUGGY]  if(typeMsg!=  null)  {  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg!=    null)    {    if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
20	[BUG]  [BUGGY]  if(typeMsg!=  null)  {  if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {  [CE]  illegal  start  of  expression  [FE]            NullPointerException    [CONTEXT]    {    [BUGGY]  if(typeMsg!=  null)  {  if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg!=    null)    {    if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]    {    [BUGGY]  if(_writer  ==  null)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	add	if(_writer  ==  null)  {	  if(_writer!=    null)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
22	[BUG]  [BUGGY]  if(_writer  ==  null)  {  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]    {    [BUGGY]  if(_writer  ==  null)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_writer  ==  null)  {	  if(_writer!=    null)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
23	[BUG]  [BUGGY]  if(_prettyValueWrite!=  null)  {  [CE]  cannot  find  symbol  _prettyValueWrite  [FE]      NullPointerException    [CONTEXT]    {    [BUGGY]  if(_prettyValueWrite!=  null)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_prettyValueWrite!=  null)  {	  if(_writer!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  _prettyValueWrite	10	None	replace
24	[BUG]  [BUGGY]  if(_writer!=  null)  {  if(_writer  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    {    [BUGGY]  if(_writer!=  null)  {  if(_writer  ==  null)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_writer!=    null)    {    if(_writer  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
25	[BUG]  [BUGGY]  if(_writer!=  null)  {  if(_writer!=  null)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]    {    [BUGGY]  if(_writer!=  null)  {  if(_writer!=  null)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_writer!=    null)    {    if(_writer!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
26	[BUG]  [BUGGY]  if(_writer!=  null)  {  if(typeMsg  ==  null)  {  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]    {    [BUGGY]  if(_writer!=  null)  {  if(typeMsg  ==  null)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_writer!=    null)    {    if(typeMsg  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
27	[BUG]  [BUGGY]  if(_writer!=  null)  {  if(typeMsg!=  null)  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]    {    [BUGGY]  if(_writer!=  null)  {  if(typeMsg!=  null)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_writer!=    null)    {    if(typeMsg!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
28	[BUG]  [BUGGY]  if(_writer!=  null)  {  if(_writer  ==  null  ||  typeMsg!=  null)  {  [CE]  illegal  start  of  expression  [FE]            NullPointerException    [CONTEXT]    {    [BUGGY]  if(_writer!=  null)  {  if(_writer  ==  null  ||  typeMsg!=  null)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_writer!=    null)    {    if(_writer  ==  null  ||  typeMsg!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
29	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]    {    [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	add	if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {	  if(typeMsg    ==    null    ||    _cfgPrettyPrinter!=    null)    {    	compilable	  [FE]  NullPointerException  	6	5	replace
30	[BUG]  [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]    {    [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg  ==  null  ||  typeMsg.length()!=  0)  {	  if(typeMsg    ==    null    ||    _cfgPrettyPrinter!=    null)    {    	compilable	  [FE]  NullPointerException  	6	5	replace
31	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        AssertionFailedError    [CONTEXT]    {    [BUGGY]  if(_writeContext!=  null)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	add	if(_writeContext!=  null)  {	  if(_prettyPrinter!=    null)    {    	compilable	  [FE]  NullPointerException  	8	5	replace
32	[BUG]  [BUGGY]  if(_writeContext!=  null)  {  [FE]  NullPointerException  [FE]        AssertionFailedError    [CONTEXT]    {    [BUGGY]  if(_writeContext!=  null)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_writeContext!=  null)  {	  if(_prettyPrinter!=    null)    {    	compilable	  [FE]  NullPointerException  	8	5	replace
33	[BUG]  [BUGGY]  if(_verifyPrettyValueWrite(typeMsg))  {  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]    {    [BUGGY]  if(_verifyPrettyValueWrite(typeMsg))  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_verifyPrettyValueWrite(typeMsg))  {	  if(typeMsg    ==    null)    {    	non-compiled	[CE]  incompatible  types	4	None	replace
34	[BUG]  [BUGGY]  if(typeMsg  ==  null)  {  if(typeMsg  ==  null  ||  typeMsg!=  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {    [BUGGY]  if(typeMsg  ==  null)  {  if(typeMsg  ==  null  ||  typeMsg!=  null)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg    ==    null)    {    if(typeMsg  ==  null  ||  typeMsg!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
35	[BUG]  [BUGGY]  if(_writer!=  null)  {  if(_writer!=  null  ||  _writer.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    {    [BUGGY]  if(_writer!=  null)  {  if(_writer!=  null  ||  _writer.length()  ==  0)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_writer!=    null)    {    if(_writer!=  null  ||  _writer.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
36	[BUG]  [BUGGY]  if(_writer!=  null)  {  if(_writer  ==  null  ||  _writer.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]    {    [BUGGY]  if(_writer!=  null)  {  if(_writer  ==  null  ||  _writer.length()  ==  0)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_writer!=    null)    {    if(_writer  ==  null  ||  _writer.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
37	[BUG]  [BUGGY]  if(_writer!=  null)  {  if(_writer!=  null  ||  typeMsg  ==  null)  {  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]    {    [BUGGY]  if(_writer!=  null)  {  if(_writer!=  null  ||  typeMsg  ==  null)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_writer!=    null)    {    if(_writer!=  null  ||  typeMsg  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
38	[BUG]  [BUGGY]  if(typeMsg  ==  null  ||  _cfgPrettyPrinter!=  null)  {  if(typeMsg!=  null  ||  _cfgPrettyPrinter!=  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {    [BUGGY]  if(typeMsg  ==  null  ||  _cfgPrettyPrinter!=  null)  {  if(typeMsg!=  null  ||  _cfgPrettyPrinter!=  null)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg    ==    null    ||    _cfgPrettyPrinter!=    null)    {    if(typeMsg!=  null  ||  _cfgPrettyPrinter!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
39	[BUG]  [BUGGY]  if(typeMsg  ==  null)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  return;  }  [CE]  cannot  find  symbol  status  [FE]              AssertionFailedError    [CONTEXT]    {    [BUGGY]  if(typeMsg  ==  null)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  return;  }  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg  ==  null)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  return;  }	      	non-compiled	[CE]  cannot  find  symbol  status	7	None	replace
40	[BUG]  [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length  ==  0)  {  [CE]  cannot  find  symbol  length  [FE]    AssertionFailedError    [CONTEXT]    {    [BUGGY]  if(typeMsg  ==  null  ||  typeMsg.length  ==  0)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg  ==  null  ||  typeMsg.length  ==  0)  {	  if(typeMsg    ==    null    ||    _cfgPrettyPrinter!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  length	6	None	replace
41	[BUG]  [BUGGY]  if(_prettyValueWrite  ==  null)  {  [CE]  cannot  find  symbol  _prettyValueWrite  [FE]    AssertionFailedError    [CONTEXT]    {    [BUGGY]  if(_prettyValueWrite  ==  null)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_prettyValueWrite  ==  null)  {	  if(typeMsg    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  _prettyValueWrite	4	None	replace
42	[BUG]  [BUGGY]  if(typeMsg  ==  null)  {  if(typeMsg  ==  null  ||  typeMsg.length()  <  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {    [BUGGY]  if(typeMsg  ==  null)  {  if(typeMsg  ==  null  ||  typeMsg.length()  <  0)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg    ==    null)    {    if(typeMsg  ==  null  ||  typeMsg.length()  <  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
43	[BUG]  [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {    [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	_reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
44	[BUG]  [BUGGY]  _reportError( "Current  context  not  an  instance  of  type "+typeMsg);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {    [BUGGY]  _reportError( "Current  context  not  an  instance  of  type "+typeMsg);  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	_reportError( "Current  context  not  an  instance  of  type "+typeMsg);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
45	[BUG]  [BUGGY]  _writeContext  =  _writeContext.createChildObjectContext();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    {    [BUGGY]  _writeContext  =  _writeContext.createChildObjectContext();  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	_writeContext  =  _writeContext.createChildObjectContext();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
46	[BUG]  [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name. ");  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    {    [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name. ");  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	_reportError( "Can  not   "+typeMsg+ ",  expecting  field  name. ");	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
47	[BUG]  [BUGGY]  if(typeMsg  ==  null  ||  _cfgPrettyPrinter!=  null)  {  if(typeMsg  ==  null  ||  typeMsg.length  <  2)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {    [BUGGY]  if(typeMsg  ==  null  ||  _cfgPrettyPrinter!=  null)  {  if(typeMsg  ==  null  ||  typeMsg.length  <  2)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg    ==    null    ||    _cfgPrettyPrinter!=    null)    {    if(typeMsg  ==  null  ||  typeMsg.length  <  2)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
48	[BUG]  [BUGGY]  if(typeMsg!=  null)  {  if(typeMsg!=  null  ||  typeMsg.length()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    {    [BUGGY]  if(typeMsg!=  null)  {  if(typeMsg!=  null  ||  typeMsg.length()  >=  0)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg!=    null)    {    if(typeMsg!=  null  ||  typeMsg.length()  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
49	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]    {    [BUGGY]  if(_cfgPrettyPrinter  ==  null)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	add	if(_cfgPrettyPrinter  ==  null)  {	  if(typeMsg    ==    null    ||    _cfgPrettyPrinter!=    null)    {    	compilable	  [FE]  NullPointerException  	6	5	replace
50	[BUG]  [BUGGY]  if(_cfgPrettyPrinter  ==  null)  {  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]    {    [BUGGY]  if(_cfgPrettyPrinter  ==  null)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_cfgPrettyPrinter  ==  null)  {	  if(typeMsg    ==    null    ||    _cfgPrettyPrinter!=    null)    {    	compilable	  [FE]  NullPointerException  	6	5	replace
51	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    {    [BUGGY]  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	add	if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {	  if(typeMsg!=    null)    {    	compilable	  [FE]  NullPointerException  	2	5	replace
52	[BUG]  [BUGGY]  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    {    [BUGGY]  if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(typeMsg!=  null  ||  typeMsg.length()  ==  0)  {	  if(typeMsg!=    null)    {    	compilable	  [FE]  NullPointerException  	2	5	replace
53	[BUG]  [BUGGY]  if(_writer!=  null)  {  if(_writer!=  null  ||  typeMsg.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    {    [BUGGY]  if(_writer!=  null)  {  if(_writer!=  null  ||  typeMsg.length()  ==  0)  {  [BUGGY]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	if(_writer!=    null)    {    if(_writer!=  null  ||  typeMsg.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
