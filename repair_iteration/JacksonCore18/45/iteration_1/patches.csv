bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(room  <  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  <  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    =    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
2	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  >=  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }	  if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    =    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
3	[BUG]  [BUGGY]  if(room  <  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  <  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }	  if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    =    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
4	[BUG]  [BUGGY]  if(room  >=  len)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  >=  len)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }	  if(room    ==    len)    {    if(_outputTail    >=    _outputEnd)    {    _flushBuffer();    }    	non-compiled	[CE]  ';'  expected	3	None	replace
5	[BUG]  [BUGGY]  _writer.write(text);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  _writer.write(text);  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	_writer.write(text);	  if(room    ==    len)    {    if(_outputTail    >=    _outputEnd)    {    _flushBuffer();    }    	non-compiled	[CE]  ';'  expected	3	None	replace
6	[BUG]  [BUGGY]  if(room  >=  len)  {  if(_outputTail  >>  _outputEnd)  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  >=  len)  {  if(_outputTail  >>  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(_outputTail  >>  _outputEnd)  {  _flushBuffer();  }	  if(room    ==    len)    {    if(_outputTail    >=    _outputEnd)    {    _flushBuffer();    }    	non-compiled	[CE]  ';'  expected	3	None	replace
7	[BUG]  [BUGGY]  if(room  >=  len)  {  if(_outputTail  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  >=  len)  {  if(_outputTail  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(_outputTail  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
8	[BUG]  [BUGGY]  if(room  >=  len)  {  if(_outputTail  >=  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  >=  len)  {  if(_outputTail  >=  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(_outputTail  >=  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
9	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  >=  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  >=  len)  {  if(room  >=  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(room  >=  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
10	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  >=  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  _outputTail  +=  len;  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  _outputTail  +=  len;  }	  if(room    >=    len)    {    if(room    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	8	None	replace
11	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  <  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  >=  len)  {  if(room  <  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(room  <  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    if(room    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	8	None	replace
12	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  >=  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    if(room    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	8	None	replace
13	[BUG]  [BUGGY]  _writer.write(text,  0,  room);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  _writer.write(text,  0,  room);  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	_writer.write(text,  0,  room);	  _writer.write(text,    0,    len);    	non-compiled	[CE]  ';'  expected	2	None	replace
14	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  >=  len)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  _writer.write(text,    0,    len);    	non-compiled	[CE]  ';'  expected	2	None	replace
15	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.write(text,  0,  len);  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  >=  len)  {  _writer.write(text,  0,  len);  }  else  {  writeRawLong(text);  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  _writer.write(text,  0,  len);  }  else  {  writeRawLong(text);  }	  _writer.write(text,    0,    len);    	non-compiled	[CE]  ';'  expected	2	None	replace
16	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  >=  len)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong(text);  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong(text);  }	  _writer.write(text,    0,    len);    	non-compiled	[CE]  ';'  expected	2	None	replace
17	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  >=  len)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    <    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
18	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  >=  len)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }	  if(room    <    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
19	[BUG]  [BUGGY]  if(room  ==  len)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  ==  len)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  ==  len)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    <    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
20	[BUG]  [BUGGY]  if(room  ==  len)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  ==  len)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  ==  len)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }	  if(room    <    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
21	[BUG]  [BUGGY]  _flushBuffer();  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  _flushBuffer();  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	_flushBuffer();	  if(room    >=    len)    {    if(_outputTail    >    0)    {    _flushBuffer();    }    	non-compiled	[CE]  ';'  expected	4	None	replace
22	[BUG]  [BUGGY]  _writer.writeRaw(text);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  _writer.writeRaw(text);  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	_writer.writeRaw(text);	  if(room    >=    len)    {    if(_outputTail    >    0)    {    _flushBuffer();    }    	non-compiled	[CE]  ';'  expected	4	None	replace
23	[BUG]  [BUGGY]  if(room  >=  len)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  >=  len)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }	  if(room    ==    len)    {    if(_outputTail    >=    _outputEnd)    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	1	None	replace
24	[BUG]  [BUGGY]  if(room  >=  len)  {  if(_outputTail  >>  _outputEnd)  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  >=  len)  {  if(_outputTail  >>  _outputEnd)  {  writeRawLong(text);  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(_outputTail  >>  _outputEnd)  {  writeRawLong(text);  }	  if(room    ==    len)    {    if(_outputTail    >=    _outputEnd)    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	1	None	replace
25	[BUG]  [BUGGY]  if(room  ==  len)  {  if(_outputTail  >>  _outputEnd)  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  ==  len)  {  if(_outputTail  >>  _outputEnd)  {  writeRawLong(text);  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  ==  len)  {  if(_outputTail  >>  _outputEnd)  {  writeRawLong(text);  }	  if(room    ==    len)    {    if(_outputTail    >=    _outputEnd)    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	1	None	replace
26	[BUG]  [BUGGY]  if(room  <  len)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  <  len)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  len)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
27	[BUG]  [BUGGY]  if(room  ==  len)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  ==  len)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  ==  len)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
28	[BUG]  [BUGGY]  if(room  ==  len)  {  if(_outputTail  >=  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  ==  len)  {  if(_outputTail  >=  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  ==  len)  {  if(_outputTail  >=  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }	      	non-compiled	[CE]  ';'  expected	5	None	replace
29	[BUG]  [BUGGY]  if(room  ==  len)  {  if(_outputTail  >=  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  ==  len)  {  if(_outputTail  >=  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  else  {  writeRawLong(text);  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  ==  len)  {  if(_outputTail  >=  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  else  {  writeRawLong(text);  }	      	non-compiled	[CE]  ';'  expected	5	None	replace
30	[BUG]  [BUGGY]  if(room  ==  len)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  ==  len)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  ==  len)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text.getChars(0,  len,  _outputBuffer,  _outputTail);  }	      	non-compiled	[CE]  ')'  expected	5	None	replace
31	[BUG]  [BUGGY]  if(room  >=  0)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  >=  0)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  0)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    <    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	11	None	replace
32	[BUG]  [BUGGY]  if(room  >=  0)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  >=  0)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  0)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    <    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	11	None	replace
33	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  ==  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  >=  len)  {  if(room  ==  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(room  ==  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    if(room    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	8	None	replace
34	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  >  1)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  >=  len)  {  if(room  >  1)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(room  >  1)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    if(room    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	8	None	replace
35	[BUG]  [BUGGY]  if(room  >=  0)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  >=  0)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  0)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }	  if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
36	[BUG]  [BUGGY]  if(room  >=  0)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  >=  0)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  0)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
37	[BUG]  [BUGGY]  if(room  >=  0)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  >=  0)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  0)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong	  if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  not  a  statement	6	None	replace
38	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  >=  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }	  if(room    <    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
39	[BUG]  [BUGGY]  if(room  >=  0)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  >=  0)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  0)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }	  if(room    <    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
40	[BUG]  [BUGGY]  readRaw(text);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  readRaw(text);  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	readRaw(text);	  if(room    ==    len)    {    if(_outputTail    >=    _outputEnd)    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	1	None	replace
41	[BUG]  [BUGGY]  reader.writeRaw(text);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  reader.writeRaw(text);  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	reader.writeRaw(text);	  if(room    ==    len)    {    if(_outputTail    >=    _outputEnd)    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	1	None	replace
42	[BUG]  [BUGGY]  readRaw();  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  readRaw();  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	readRaw();	  if(room    ==    len)    {    if(_outputTail    >=    _outputEnd)    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	1	None	replace
43	[BUG]  [BUGGY]  nisipToLastChar(room)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  nisipToLastChar(room)  {  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	nisipToLastChar(room)  {	  if(room    ==    len)    {    if(_outputTail    >=    _outputEnd)    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	1	None	replace
44	[BUG]  [BUGGY]  if(room  >=  len)  {  writeRawLong(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  >=  len)  {  writeRawLong(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  writeRawLong(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	      	non-compiled	[CE]  ';'  expected	5	None	replace
45	[BUG]  [BUGGY]  if(room  ==  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  ==  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  ==  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
46	[BUG]  [BUGGY]  if(room  ==  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  ==  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  ==  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }	  if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
47	[BUG]  [BUGGY]  if(room  ==  len)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  ==  len)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  ==  len)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }	  if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
48	[BUG]  [BUGGY]  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  else  {  writeRawLong(text);  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  else  {  writeRawLong(text);  }	      	non-compiled	[CE]  ';'  expected	5	None	replace
49	[BUG]  [BUGGY]  _writer.write(room,  text.getChars(0,  len,  _outputBuffer,  _outputTail));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  _writer.write(room,  text.getChars(0,  len,  _outputBuffer,  _outputTail));  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	_writer.write(room,  text.getChars(0,  len,  _outputBuffer,  _outputTail));	  if(room    ==    len)    {    if(_outputTail    >=    _outputEnd)    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	1	None	replace
50	[BUG]  [BUGGY]  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }	  if(room    <    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	11	None	replace
51	[BUG]  [BUGGY]  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  _outputTail  +=  len;  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  _outputTail  +=  len;  }	  if(room    <    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	11	None	replace
52	[BUG]  [BUGGY]  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }  else  {  writeRawLong(text);  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }  else  {  writeRawLong(text);  }	  if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    =    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
53	[BUG]  [BUGGY]  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  _outputTail  +=  len;  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  _outputTail  +=  len;  }	  if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
54	[BUG]  [BUGGY]  if(room  <  len)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  <  len)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  len)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }	  if(room    ==    len)    {    if(_outputTail    >=    _outputEnd)    {    _flushBuffer();    }    	non-compiled	[CE]  ';'  expected	3	None	replace
55	[BUG]  [BUGGY]  if(room  <  len)  {  if(room  >=  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  if(room  <  len)  {  if(room  >=  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  len)  {  if(room  >=  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    if(room    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	8	None	replace
56	[BUG]  [BUGGY]  _writer.write(room,  0,  len);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }    [BUGGY]  _writer.write(room,  0,  len);  [BUGGY]      [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	_writer.write(room,  0,  len);	  _writer.write(text,    0,    len);    	non-compiled	[CE]  ';'  expected	2	None	replace
