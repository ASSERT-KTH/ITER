bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  _writer.write(text,  0,  room  +  1);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  _writer.write(text,  0,  room  +  1);  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	_writer.write(text,  0,  room  +  1);	  _writer.write(text,    0,    room);    	non-compiled	[CE]  ';'  expected	13	None	replace
2	[BUG]  [BUGGY]  _writer.write(text,  0,  room  -  _outputTail);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  _writer.write(text,  0,  room  -  _outputTail);  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	_writer.write(text,  0,  room  -  _outputTail);	  _writer.write(text,    0,    room);    	non-compiled	[CE]  ';'  expected	13	None	replace
3	[BUG]  [BUGGY]  _writer.write(text,  0,  room  -  _outputBuffer.length);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  _writer.write(text,  0,  room  -  _outputBuffer.length);  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	_writer.write(text,  0,  room  -  _outputBuffer.length);	  _writer.write(text,    0,    room);    	non-compiled	[CE]  ';'  expected	13	None	replace
4	[BUG]  [BUGGY]  if(room  <  len)  {  writeRawLong(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  <  len)  {  writeRawLong(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  len)  {  writeRawLong(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    writeRawLong(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	44	None	replace
5	[BUG]  [BUGGY]  if(room  ==  len)  {  writeRawLong(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  ==  len)  {  writeRawLong(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  ==  len)  {  writeRawLong(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    writeRawLong(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	44	None	replace
6	[BUG]  [BUGGY]  if(room  >=  len)  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  writeRawLong(text);  }	  if(room    >=    len)    {    writeRawLong(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	44	None	replace
7	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(_outputTail  >=  _outputEnd)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    if(room    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    1,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	12	None	replace
8	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(room  >=  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(room  >=  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(_outputTail  >=  _outputEnd)  {  if(room  >=  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    if(room    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    1,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	12	None	replace
9	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(room  >=  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(room  >=  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(_outputTail  >=  _outputEnd)  {  if(room  >=  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len	  if(room    >=    len)    {    if(room    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    1,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	12	None	replace
10	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(room  >=  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  le  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(room  >=  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  le  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(_outputTail  >=  _outputEnd)  {  if(room  >=  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  le	  if(room    >=    len)    {    if(room    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    1,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	12	None	replace
11	[BUG]  [BUGGY]  if(room  ==  0)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  ==  0)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  ==  0)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }	  if(room    >=    0)    {    if(room    <    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	39	None	replace
12	[BUG]  [BUGGY]  if(room  ==  0)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  ==  0)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  ==  0)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }	  if(room    >=    0)    {    if(room    <    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	39	None	replace
13	[BUG]  [BUGGY]  if(room  ==  0)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  ==  0)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  ==  0)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    0)    {    if(room    <    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	39	None	replace
14	[BUG]  [BUGGY]  if(room  ==  0)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  ==  0)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  ==  0)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    0)    {    if(room    <    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	39	None	replace
15	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    ==    len)    {    if(room    <    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
16	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  _outputTail  +=  len;  }	  if(room    ==    len)    {    if(room    <    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
17	[BUG]  [BUGGY]  if(room  >=  len)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text.getChars(0,  len,  _outputBuffer,  _outputTail);  }	  if(room    ==    len)    {    if(_outputTail    >=    _outputEnd)    {    writeRawLong(text.getChars(0,    len,    _outputBuffer,    _outputTail);    }    	non-compiled	[CE]  ')'  expected	30	None	replace
18	[BUG]  [BUGGY]  if(room  >=  len)  {  if(_outputTail  >>  _outputEnd)  {  writeRawLong(text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(_outputTail  >>  _outputEnd)  {  writeRawLong(text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(_outputTail  >>  _outputEnd)  {  writeRawLong(text.getChars(0,  len,  _outputBuffer,  _outputTail);  }	  if(room    ==    len)    {    if(_outputTail    >=    _outputEnd)    {    writeRawLong(text.getChars(0,    len,    _outputBuffer,    _outputTail);    }    	non-compiled	[CE]  ')'  expected	30	None	replace
19	[BUG]  [BUGGY]  if(room  ==  len)  {  if(_outputTail  >>  _outputEnd)  {  writeRawLong(text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  ==  len)  {  if(_outputTail  >>  _outputEnd)  {  writeRawLong(text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  ==  len)  {  if(_outputTail  >>  _outputEnd)  {  writeRawLong(text.getChars(0,  len,  _outputBuffer,  _outputTail);  }	  if(room    ==    len)    {    if(_outputTail    >=    _outputEnd)    {    writeRawLong(text.getChars(0,    len,    _outputBuffer,    _outputTail);    }    	non-compiled	[CE]  ')'  expected	30	None	replace
20	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    0)    {    if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	36	None	replace
21	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    0)    {    if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	36	None	replace
22	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }	  if(room    >=    0)    {    if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	36	None	replace
23	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  _outputTail  +=  len;  }	  if(room    >=    0)    {    if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	36	None	replace
24	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }	  if(room    <    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    1,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	50	None	replace
25	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  1;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  1;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  1;  }	  if(room    <    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    1,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	50	None	replace
26	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  room);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  room);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  room);  _outputTail  +=  len;  }	  if(room    <    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    1,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	50	None	replace
27	[BUG]  [BUGGY]  if(room  <  len)  {  if(room  >  1)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  <  len)  {  if(room  >  1)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  len)  {  if(room  >  1)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    if(room    >    1)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
28	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  <  1)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(room  <  1)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(room  <  1)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    if(room    >    1)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
29	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  >  1)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(room  >  1)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(room  >  1)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  _outputTail  +=  len;  }	  if(room    >=    len)    {    if(room    >    1)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
30	[BUG]  [BUGGY]  if(room  <  len)  {  if(room  ==  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  <  len)  {  if(room  ==  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  len)  {  if(room  ==  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    <    len)    {    if(room    >=    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	55	None	replace
31	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE)  {  _writer.write(room,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(len  <  SHORT_WRITE)  {  _writer.write(room,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(len  <  SHORT_WRITE)  {  _writer.write(room,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  _writer.write(room,    0,    len);    	non-compiled	[CE]  ';'  expected	56	None	replace
32	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE)  {  _writer.write(room,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(len  <  SHORT_WRITE)  {  _writer.write(room,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(len  <  SHORT_WRITE)  {  _writer.write(room,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong(text);  }	  _writer.write(room,    0,    len);    	non-compiled	[CE]  ';'  expected	56	None	replace
33	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE)  {  _writer.write(room,  0,  len);  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(len  <  SHORT_WRITE)  {  _writer.write(room,  0,  len);  }  else  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(len  <  SHORT_WRITE)  {  _writer.write(room,  0,  len);  }  else  {  writeRawLong(text);  }	  _writer.write(room,    0,    len);    	non-compiled	[CE]  ';'  expected	56	None	replace
34	[BUG]  [BUGGY]  _writer.write(room);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  _writer.write(room);  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	_writer.write(room);	  _writer.write(text);    	non-compiled	[CE]  ';'  expected	5	None	replace
35	[BUG]  [BUGGY]  _writer.write(text,  _outputBuffer,  _outputTail);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  _writer.write(text,  _outputBuffer,  _outputTail);  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	_writer.write(text,  _outputBuffer,  _outputTail);	  _writer.write(text);    	non-compiled	[CE]  ';'  expected	5	None	replace
36	[BUG]  [BUGGY]  if(room  <  len)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  <  len)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  len)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }	  if(room    >=    len)    {    if(_outputTail    >>    _outputEnd)    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	24	None	replace
37	[BUG]  [BUGGY]  if(room  <  len)  {  if(_outputTail  >>  _outputEnd)  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  <  len)  {  if(_outputTail  >>  _outputEnd)  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  len)  {  if(_outputTail  >>  _outputEnd)  {  writeRawLong(text);  }	  if(room    >=    len)    {    if(_outputTail    >>    _outputEnd)    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	24	None	replace
38	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(_outputTail  >=  _outputEnd)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    0)    {    if(room    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	32	None	replace
39	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(room  >=  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(room  >=  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(_outputTail  >=  _outputEnd)  {  if(room  >=  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    0)    {    if(room    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	32	None	replace
40	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(room  ==  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(room  ==  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(_outputTail  >=  _outputEnd)  {  if(room  ==  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    0)    {    if(room    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	32	None	replace
41	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(room!=  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(room!=  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(_outputTail  >=  _outputEnd)  {  if(room!=  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    0)    {    if(room    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	32	None	replace
42	[BUG]  [BUGGY]  if(room  ==  len)  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  ==  len)  {  _flushBuffer();  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  ==  len)  {  _flushBuffer();  }	  _flushBuffer();    	non-compiled	[CE]  ';'  expected	21	None	replace
43	[BUG]  [BUGGY]  if(room  >=  len)  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  _flushBuffer();  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  _flushBuffer();  }	  _flushBuffer();    	non-compiled	[CE]  ';'  expected	21	None	replace
44	[BUG]  [BUGGY]  if(room  ==  len)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  ==  len)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  ==  len)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  _flushBuffer();    	non-compiled	[CE]  ';'  expected	21	None	replace
45	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  SHORT_WRITE)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong	  if(room    >=    0)    {    if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  not  a  statement	35	None	replace
46	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  SHORT_WRITE)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    0)    {    if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
47	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    <    len)    {    if(room    >=    SHORT_WRITE)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	26	None	replace
48	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  >>  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  >>  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  SHORT_WRITE)  {  if(room  >>  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    <    len)    {    if(room    >=    SHORT_WRITE)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	26	None	replace
49	[BUG]  [BUGGY]  if(room  <  len)  {  if(room  ==  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  <  len)  {  if(room  ==  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  len)  {  if(room  ==  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    <    len)    {    if(room    >=    SHORT_WRITE)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	26	None	replace
50	[BUG]  [BUGGY]  if(room  ==  len)  {  if(room  >=  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  ==  len)  {  if(room  >=  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  ==  len)  {  if(room  >=  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    if(room    >=    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
51	[BUG]  [BUGGY]  if(room  ==  len)  {  if(_outputTail  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  ==  len)  {  if(_outputTail  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  ==  len)  {  if(_outputTail  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    if(_outputTail    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
52	[BUG]  [BUGGY]  if(room  ==  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  ==  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  ==  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    if(_outputTail    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
53	[BUG]  [BUGGY]  _writer.writeRawLong(text);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  _writer.writeRawLong(text);  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	_writer.writeRawLong(text);	  if(room    >=    len)    {    if(room    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    1);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	10	None	replace
54	[BUG]  [BUGGY]  _writer.write(_outputBuffer,  _outputTail);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  _writer.write(_outputBuffer,  _outputTail);  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	_writer.write(_outputBuffer,  _outputTail);	  if(room    >=    len)    {    if(room    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    1);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	10	None	replace
55	[BUG]  [BUGGY]  if(room  >=  len)  {  if(_outputTail  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(_outputTail  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(_outputTail  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }	  if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	48	None	replace
56	[BUG]  [BUGGY]  if(room  <  len)  {  if(_outputTail  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  <  len)  {  if(_outputTail  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  len)  {  if(_outputTail  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }	  if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	48	None	replace
57	[BUG]  [BUGGY]  if(room  <  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  <  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }	  if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	48	None	replace
58	[BUG]  [BUGGY]  if(room  >=  len)  {  if(_outputTail  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(_outputTail  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  else  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(_outputTail  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  else  {  writeRawLong(text);  }	  if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	48	None	replace
59	[BUG]  [BUGGY]  _writer.write(room,  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  _writer.write(room,  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1));  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	_writer.write(room,  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1));	  _writer.write(room,    text.getChars(0,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  ';'  expected	49	None	replace
60	[BUG]  [BUGGY]  _writer.write(room,  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  2));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  _writer.write(room,  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  2));  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	_writer.write(room,  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  2));	  _writer.write(room,    text.getChars(0,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  ';'  expected	49	None	replace
61	[BUG]  [BUGGY]  _writer.write(room,  text.getChars(0,  len,  _outputBuffer,  _outputTail),  _outputHead);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  _writer.write(room,  text.getChars(0,  len,  _outputBuffer,  _outputTail),  _outputHead);  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	_writer.write(room,  text.getChars(0,  len,  _outputBuffer,  _outputTail),  _outputHead);	  _writer.write(room,    text.getChars(0,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  ';'  expected	49	None	replace
62	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(_outputTail  >=  _outputEnd)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }	  if(room    <    len)    {    if(room    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    =    len;    }    	non-compiled	[CE]  ';'  expected	3	None	replace
63	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(room  <  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(room  <  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(_outputTail  >=  _outputEnd)  {  if(room  <  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }	  if(room    <    len)    {    if(room    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    =    len;    }    	non-compiled	[CE]  ';'  expected	3	None	replace
64	[BUG]  [BUGGY]  if(room  ==  len)  {  if(_outputTail  >=  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  ==  len)  {  if(_outputTail  >=  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  ==  len)  {  if(_outputTail  >=  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    if(_outputTail    >=    _outputEnd)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	8	None	replace
65	[BUG]  [BUGGY]  if(room  >=  len)  {  if(_outputTail  >>  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(_outputTail  >>  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(_outputTail  >>  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    if(_outputTail    >=    _outputEnd)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	8	None	replace
66	[BUG]  [BUGGY]  readRawLong();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  readRawLong();  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	readRawLong();	  if(room    >=    0)    {    if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong    	non-compiled	[CE]  ';'  expected	37	None	replace
67	[BUG]  [BUGGY]  _writer.writeRaw(room);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  _writer.writeRaw(room);  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	_writer.writeRaw(room);	  readRaw();    	non-compiled	[CE]  ';'  expected	42	None	replace
68	[BUG]  [BUGGY]  writeRawLong(text);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  writeRawLong(text);  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	writeRawLong(text);	  readRaw();    	non-compiled	[CE]  ';'  expected	42	None	replace
69	[BUG]  [BUGGY]  writeRaw(room);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  writeRaw(room);  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	writeRaw(room);	  readRaw();    	non-compiled	[CE]  ';'  expected	42	None	replace
70	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(room  >=  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(room  >=  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(_outputTail  >=  _outputEnd)  {  if(room  >=  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }	  if(room    >=    len)    {    if(room    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    =    len;    }    	non-compiled	[CE]  ';'  expected	2	None	replace
71	[BUG]  [BUGGY]  nisipToLastChar(text)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  nisipToLastChar(text)  {  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	nisipToLastChar(text)  {	  nisipToLastChar(room)    {    	non-compiled	[CE]  ';'  expected	43	None	replace
72	[BUG]  [BUGGY]  nisipToLastChar(room,  _outputTail)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  nisipToLastChar(room,  _outputTail)  {  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	nisipToLastChar(room,  _outputTail)  {	  nisipToLastChar(room)    {    	non-compiled	[CE]  ';'  expected	43	None	replace
73	[BUG]  [BUGGY]  nisipToLastChar(true)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  nisipToLastChar(true)  {  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	nisipToLastChar(true)  {	  nisipToLastChar(room)    {    	non-compiled	[CE]  ';'  expected	43	None	replace
74	[BUG]  [BUGGY]  nisipToLastChar(_outputBuffer,  room)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  nisipToLastChar(_outputBuffer,  room)  {  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	nisipToLastChar(_outputBuffer,  room)  {	  nisipToLastChar(room)    {    	non-compiled	[CE]  ';'  expected	43	None	replace
75	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  ==  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  ==  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  SHORT_WRITE)  {  if(room  ==  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    ==    len)    {    if(room    >=    SHORT_WRITE)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
76	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  >  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  >  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  SHORT_WRITE)  {  if(room  >  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    ==    len)    {    if(room    >=    SHORT_WRITE)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
77	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(room  <  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(room  <  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(_outputTail  >=  _outputEnd)  {  if(room  <  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    <    len)    {    if(room    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	1	None	replace
78	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(_outputTail  >=  _outputEnd)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    <    len)    {    if(room    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	1	None	replace
79	[BUG]  [BUGGY]  if(room  >=  len)  {  if(_outputTail  >=  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(_outputTail  >=  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(_outputTail  >=  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  _outputTail  +=  len;  }	  if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    1);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	53	None	replace
80	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }	  if(room    <    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    =    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	52	None	replace
81	[BUG]  [BUGGY]  if(room  ==  len)  {  if(room  >=  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  ==  len)  {  if(room  >=  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  ==  len)  {  if(room  >=  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }	  if(room    ==    len)    {    if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	47	None	replace
82	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  >=  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(room  >=  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(room  >=  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }	  if(room    ==    len)    {    if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	47	None	replace
83	[BUG]  [BUGGY]  if(room  ==  len)  {  _writer.writeRaw(text);  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  ==  len)  {  _writer.writeRaw(text);  }  else  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  ==  len)  {  _writer.writeRaw(text);  }  else  {  writeRawLong(text);  }	  _writer.writeRaw(text);    	non-compiled	[CE]  ';'  expected	22	None	replace
84	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.writeRaw(text);  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  _writer.writeRaw(text);  }  else  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  _writer.writeRaw(text);  }  else  {  writeRawLong(text);  }	  _writer.writeRaw(text);    	non-compiled	[CE]  ';'  expected	22	None	replace
85	[BUG]  [BUGGY]  if(room  ==  len)  {  _writer.writeRaw(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  ==  len)  {  _writer.writeRaw(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  ==  len)  {  _writer.writeRaw(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  }	  _writer.writeRaw(text);    	non-compiled	[CE]  ';'  expected	22	None	replace
86	[BUG]  [BUGGY]  if(room  <  len)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  <  len)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  len)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong(text);  }	  if(room    >=    len)    {    _writer.write(text,    0,    len);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	16	None	replace
87	[BUG]  [BUGGY]  if(room  ==  len)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  ==  len)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  ==  len)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong(text);  }	  if(room    >=    len)    {    _writer.write(text,    0,    len);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	16	None	replace
88	[BUG]  [BUGGY]  if(room!=  len)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room!=  len)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room!=  len)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong(text);  }	  if(room    >=    len)    {    _writer.write(text,    0,    len);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	16	None	replace
89	[BUG]  [BUGGY]  _outputTail  +=  len;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  _outputTail  +=  len;  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	_outputTail  +=  len;	  if(room    <    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    1);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	51	None	replace
90	[BUG]  [BUGGY]  if(room  >=  len)  {  if(_outputTail  >=  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(_outputTail  >=  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(_outputTail  >=  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }	  if(room    ==    len)    {    if(_outputTail    >=    _outputEnd)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    }    	non-compiled	[CE]  ';'  expected	28	None	replace
91	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(room  ==  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(room  ==  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(_outputTail  >=  _outputEnd)  {  if(room  ==  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }	  if(room    ==    len)    {    if(_outputTail    >=    _outputEnd)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    }    	non-compiled	[CE]  ';'  expected	28	None	replace
92	[BUG]  [BUGGY]  if(room  >=  len)  {  if(_outputTail  >>  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(_outputTail  >>  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(_outputTail  >>  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }	  if(room    ==    len)    {    if(_outputTail    >=    _outputEnd)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    }    	non-compiled	[CE]  ';'  expected	28	None	replace
93	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(room  ==  len)  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(room  ==  len)  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(_outputTail  >=  _outputEnd)  {  if(room  ==  len)  {  writeRawLong(text);  }	  if(room    ==    len)    {    if(_outputTail    >=    _outputEnd)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    }    	non-compiled	[CE]  ';'  expected	28	None	replace
94	[BUG]  [BUGGY]  if(room  <  len)  {  _writer.write(text,  0,  len);  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  <  len)  {  _writer.write(text,  0,  len);  }  else  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  len)  {  _writer.write(text,  0,  len);  }  else  {  writeRawLong(text);  }	  if(room    >=    len)    {    _writer.write(text,    0,    len);    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	15	None	replace
95	[BUG]  [BUGGY]  if(room  ==  len)  {  _writer.write(text,  0,  len);  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  ==  len)  {  _writer.write(text,  0,  len);  }  else  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  ==  len)  {  _writer.write(text,  0,  len);  }  else  {  writeRawLong(text);  }	  if(room    >=    len)    {    _writer.write(text,    0,    len);    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	15	None	replace
96	[BUG]  [BUGGY]  if(room  <  len)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  <  len)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  len)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    _writer.write(text,    0,    len);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	14	None	replace
97	[BUG]  [BUGGY]  if(room  ==  len)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  ==  len)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  ==  len)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    _writer.write(text,    0,    len);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	14	None	replace
98	[BUG]  [BUGGY]  if(room  >=  len)  {  if(_outputTail  >=  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(_outputTail  >=  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  else  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(_outputTail  >=  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  else  {  writeRawLong(text);  }	  if(room    ==    len)    {    if(_outputTail    >=    _outputEnd)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	29	None	replace
99	[BUG]  [BUGGY]  reader.writeRaw(room);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  reader.writeRaw(room);  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	reader.writeRaw(room);	  reader.writeRaw(text);    	non-compiled	[CE]  ';'  expected	41	None	replace
100	[BUG]  [BUGGY]  reader.writeChars(0,  len,  _outputBuffer,  _outputTail);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  reader.writeChars(0,  len,  _outputBuffer,  _outputTail);  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	reader.writeChars(0,  len,  _outputBuffer,  _outputTail);	  reader.writeRaw(text);    	non-compiled	[CE]  ';'  expected	41	None	replace
101	[BUG]  [BUGGY]  reader.writeChars(0,  len,  _outputBuffer,  _outputTail  +  len);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  reader.writeChars(0,  len,  _outputBuffer,  _outputTail  +  len);  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	reader.writeChars(0,  len,  _outputBuffer,  _outputTail  +  len);	  reader.writeRaw(text);    	non-compiled	[CE]  ';'  expected	41	None	replace
102	[BUG]  [BUGGY]  reader.writeRawLong(text);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  reader.writeRawLong(text);  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	reader.writeRawLong(text);	  reader.writeRaw(text);    	non-compiled	[CE]  ';'  expected	41	None	replace
103	[BUG]  [BUGGY]  if(room  <  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  <  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }	  if(room    >=    len)    {    if(room    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	38	None	replace
104	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  <  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(room  <  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(room  <  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  _outputTail  +=  len;  }	  if(room    >=    len)    {    if(room    <    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	11	None	replace
105	[BUG]  [BUGGY]  if(room  >=  len)  {  if(_outputTail  ==  _outputEnd)  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(_outputTail  ==  _outputEnd)  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(_outputTail  ==  _outputEnd)  {  writeRawLong(text);  }	  if(room    >=    len)    {    if(_outputTail    >=    _outputEnd)    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
106	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong	  if(room    >=    len)    {    _writer.write(text,    0,    len);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    writeRawLong(text);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
107	[BUG]  [BUGGY]  if(room  ==  len)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  ==  len)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  ==  len)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong	  if(room    >=    len)    {    _writer.write(text,    0,    len);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    writeRawLong(text);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
108	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.write(text,  0,  len);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  _writer.write(text,  0,  len);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  _writer.write(text,  0,  len);  }	  if(room    >=    len)    {    _writer.write(text,    0,    len);    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	15	None	replace
109	[BUG]  [BUGGY]  _writer.write(text,  0,  room  +  len);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  _writer.write(text,  0,  room  +  len);  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	_writer.write(text,  0,  room  +  len);	  _writer.write(text,    0,    room);    	non-compiled	[CE]  ';'  expected	13	None	replace
110	[BUG]  [BUGGY]  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }	  if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    1);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	53	None	replace
111	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  <  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(room  <  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(room  <  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    if(room    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    1,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	12	None	replace
112	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  ==  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(room  ==  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(room  ==  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    if(room    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    1,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	12	None	replace
113	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  >  1)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(room  >  1)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(room  >  1)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    if(room    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    1,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	12	None	replace
114	[BUG]  [BUGGY]  nisipToLastChar(room)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  nisipToLastChar(room)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	nisipToLastChar(room)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }	  if(room    ==    len)    {    if(_outputTail    >>    _outputEnd)    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	25	None	replace
115	[BUG]  [BUGGY]  if(room  ==  SHORT_WRITE)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  ==  SHORT_WRITE)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  ==  SHORT_WRITE)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong	  if(room    >=    0)    {    if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  not  a  statement	35	None	replace
116	[BUG]  [BUGGY]  if(room  ==  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  ==  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  ==  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong	  if(room    >=    0)    {    if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  not  a  statement	35	None	replace
117	[BUG]  [BUGGY]  if(room  ==  SHORT_WRITE)  {  if(room  >=  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  ==  SHORT_WRITE)  {  if(room  >=  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  ==  SHORT_WRITE)  {  if(room  >=  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong	  if(room    >=    0)    {    if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  not  a  statement	35	None	replace
118	[BUG]  [BUGGY]  if(room  ==  SHORT_WRITE)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  ==  SHORT_WRITE)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  ==  SHORT_WRITE)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }	  if(room    >=    0)    {    if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
119	[BUG]  [BUGGY]  if(room  >=  len)  {  if(_outputTail  >  _outputEnd)  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(_outputTail  >  _outputEnd)  {  _flushBuffer();  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(_outputTail  >  _outputEnd)  {  _flushBuffer();  }	  if(room    <    len)    {    if(_outputTail    >=    _outputEnd)    {    _flushBuffer();    }    	non-compiled	[CE]  ';'  expected	54	None	replace
120	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  >=  1)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(room  >=  1)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(room  >=  1)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    if(room    >=    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
121	[BUG]  [BUGGY]  if(room  >=  len)  {  if(_outputTail  >  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(_outputTail  >  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(_outputTail  >  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }	  if(room    ==    len)    {    if(_outputTail    >=    _outputEnd)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    }    	non-compiled	[CE]  ';'  expected	28	None	replace
122	[BUG]  [BUGGY]  if(room  >=  len)  {  if(!_outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(!_outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(!_outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }	  if(room    ==    len)    {    if(_outputTail    >=    _outputEnd)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    }    	non-compiled	[CE]  ';'  expected	28	None	replace
123	[BUG]  [BUGGY]  writer.writeRaw(text);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  writer.writeRaw(text);  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	writer.writeRaw(text);	  if(room    >=    0)    {    if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong    	non-compiled	[CE]  ';'  expected	37	None	replace
124	[BUG]  [BUGGY]  writer.writeRawLong(text);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  writer.writeRawLong(text);  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	writer.writeRawLong(text);	  if(room    >=    0)    {    if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong    	non-compiled	[CE]  ';'  expected	37	None	replace
125	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  ==  1)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(room  ==  1)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(room  ==  1)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    if(room    >    1)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
126	[BUG]  [BUGGY]  if(room  >=  0)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  0)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  0)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }	  if(room    >=    len)    {    if(room    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	38	None	replace
127	[BUG]  [BUGGY]  if(room  >=  0)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  0)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  0)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong	  if(room    >=    len)    {    if(room    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  not  a  statement	38	None	replace
128	[BUG]  [BUGGY]  if(room  >=  0)  {  if(room  ==  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  0)  {  if(room  ==  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  0)  {  if(room  ==  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }	  if(room    >=    len)    {    if(room    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	38	None	replace
129	[BUG]  [BUGGY]  reader.writeLong(text);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  reader.writeLong(text);  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	reader.writeLong(text);	  reader.writeRaw(text);    	non-compiled	[CE]  ';'  expected	41	None	replace
130	[BUG]  [BUGGY]  reader.writeRaw(room,  text);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  reader.writeRaw(room,  text);  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	reader.writeRaw(room,  text);	  reader.writeRaw(text);    	non-compiled	[CE]  ';'  expected	41	None	replace
131	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  <  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(room  <  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(room  <  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }	  if(room    >=    len)    {    if(room    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    =    len;    }    	non-compiled	[CE]  ';'  expected	2	None	replace
132	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  ==  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(room  ==  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(room  ==  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }	  if(room    >=    len)    {    if(room    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    =    len;    }    	non-compiled	[CE]  ';'  expected	2	None	replace
133	[BUG]  [BUGGY]  readRawLong(text);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  readRawLong(text);  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	readRawLong(text);	  readRaw(text);    	non-compiled	[CE]  ';'  expected	40	None	replace
134	[BUG]  [BUGGY]  if(room  >=  0)  {  if(room  >=  len)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  0)  {  if(room  >=  len)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  0)  {  if(room  >=  len)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    _writer.write(text,    0,    len);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	14	None	replace
135	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  null;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  null;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  null;  }	  if(room    <    len)    {    if(room    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    =    len;    }    	non-compiled	[CE]  ';'  expected	3	None	replace
136	[BUG]  [BUGGY]  if(room  ==  0)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  ==  0)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  ==  0)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong	  if(room    ==    len)    {    if(room    <    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  not  a  statement	20	None	replace
137	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail  +  1);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail  +  1);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail  +  1);  _outputTail  +=  len;  }	  if(room    >=    len)    {    if(room    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    1);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	10	None	replace
138	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  ==  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(room  ==  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(room  ==  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  _outputTail  +=  len;  }	  if(room    >=    len)    {    if(room    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    1);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	10	None	replace
139	[BUG]  [BUGGY]  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }	  if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	48	None	replace
140	[BUG]  [BUGGY]  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  }  else  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  }  else  {  writeRawLong(text);  }	  if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	48	None	replace
141	[BUG]  [BUGGY]  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong(text);  }	  if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	48	None	replace
142	[BUG]  [BUGGY]  if(room  >=  0)  {  if(room  >=  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  0)  {  if(room  >=  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  0)  {  if(room  >=  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    <    len)    {    if(room    >=    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	55	None	replace
143	[BUG]  [BUGGY]  if(room  >=  0)  {  if(room  ==  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  0)  {  if(room  ==  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  0)  {  if(room  ==  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    <    len)    {    if(room    >=    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	55	None	replace
144	[BUG]  [BUGGY]  if(room  >=  0)  {  if(room  >=  1)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  0)  {  if(room  >=  1)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  0)  {  if(room  >=  1)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    <    len)    {    if(room    >=    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	55	None	replace
145	[BUG]  [BUGGY]  nisipToLastChar(_outputTail)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  nisipToLastChar(_outputTail)  {  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	nisipToLastChar(_outputTail)  {	  nisipToLastChar(room)    {    	non-compiled	[CE]  ';'  expected	43	None	replace
146	[BUG]  [BUGGY]  if(room  >=  len)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  _flushBuffer();  }  else  {  writeRawLong(text);  }	  _flushBuffer();    	non-compiled	[CE]  ';'  expected	21	None	replace
147	[BUG]  [BUGGY]  _writer.write(text,  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  _writer.write(text,  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1));  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	_writer.write(text,  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1));	  _writer.write(room,    text.getChars(0,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  ';'  expected	49	None	replace
148	[BUG]  [BUGGY]  _writer.write(text,  text.getChars(0,  len,  _outputBuffer,  _outputTail));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  _writer.write(text,  text.getChars(0,  len,  _outputBuffer,  _outputTail));  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	_writer.write(text,  text.getChars(0,  len,  _outputBuffer,  _outputTail));	  _writer.write(room,    text.getChars(0,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  ';'  expected	49	None	replace
149	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room!=  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(room!=  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(room!=  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    if(room    ==    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
150	[BUG]  [BUGGY]  if(room  ==  0)  {  if(room  >=  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  ==  0)  {  if(room  >=  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  ==  0)  {  if(room  >=  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }	  if(room    >=    len)    {    if(room    <    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	18	None	replace
151	[BUG]  [BUGGY]  if(room  >=  0)  {  writeRawLong(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  0)  {  writeRawLong(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  0)  {  writeRawLong(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    writeRawLong(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	44	None	replace
152	[BUG]  [BUGGY]  if(room  >=  len)  {  writeRawInt(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  writeRawInt(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  writeRawInt(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    writeRawLong(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	44	None	replace
153	[BUG]  [BUGGY]  if(room  >=  0)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  0)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  0)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    ==    len)    {    if(room    >=    SHORT_WRITE)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
154	[BUG]  [BUGGY]  if(room  >=  0)  {  if(room  ==  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  0)  {  if(room  ==  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  0)  {  if(room  ==  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    ==    len)    {    if(room    >=    SHORT_WRITE)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
155	[BUG]  [BUGGY]  if(room  >=  0)  {  if(room  >=  HORIZONTAL)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  0)  {  if(room  >=  HORIZONTAL)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  0)  {  if(room  >=  HORIZONTAL)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    ==    len)    {    if(room    >=    SHORT_WRITE)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
156	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  _writer.write(text);    	non-compiled	[CE]  ';'  expected	5	None	replace
157	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong(text);  }	  _writer.write(text);    	non-compiled	[CE]  ';'  expected	5	None	replace
158	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }	  _writer.write(text);    	non-compiled	[CE]  ';'  expected	5	None	replace
159	[BUG]  [BUGGY]  if(room  ==  0)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  ==  0)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  ==  0)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }	  if(room    >=    0)    {    if(room    <    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	39	None	replace
160	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.write(room,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  _writer.write(room,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  _writer.write(room,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  _writer.write(room,    0,    len);    	non-compiled	[CE]  ';'  expected	56	None	replace
161	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.write(room,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  _writer.write(room,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  _writer.write(room,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong(text);  }	  _writer.write(room,    0,    len);    	non-compiled	[CE]  ';'  expected	56	None	replace
162	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.write(room,  0,  len);  }  else  {  text.getChars(0,  len  +  1,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  _writer.write(room,  0,  len);  }  else  {  text.getChars(0,  len  +  1,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  _writer.write(room,  0,  len);  }  else  {  text.getChars(0,  len  +  1,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  _writer.write(room,    0,    len);    	non-compiled	[CE]  ';'  expected	56	None	replace
163	[BUG]  [BUGGY]  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong	  if(room    ==    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  not  a  statement	46	None	replace
164	[BUG]  [BUGGY]  if(room  >=  0)  {  if(room  >  1)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  0)  {  if(room  >  1)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  0)  {  if(room  >  1)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    <    len)    {    if(room    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	1	None	replace
165	[BUG]  [BUGGY]  if(room  >=  len)  {  if(_outputTail  >  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(_outputTail  >  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(_outputTail  >  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    if(_outputTail    >=    _outputEnd)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	8	None	replace
166	[BUG]  [BUGGY]  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }	  if(room    <    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    1,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	50	None	replace
167	[BUG]  [BUGGY]  if(room  ==  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  ==  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  ==  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }	  if(room    <    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    1,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	50	None	replace
168	[BUG]  [BUGGY]  if(room  ==  len)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  ==  len)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  ==  len)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }	  if(room    <    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    1,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	50	None	replace
169	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.writeRaw(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  _writer.writeRaw(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  _writer.writeRaw(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  _writer.writeRaw(text);    	non-compiled	[CE]  ';'  expected	22	None	replace
170	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.writeRaw(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  _writer.writeRaw(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  _writer.writeRaw(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong(text);  }	  _writer.writeRaw(text);    	non-compiled	[CE]  ';'  expected	22	None	replace
171	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.writeRaw(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  _writer.writeRaw(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  _writer.writeRaw(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }	  _writer.writeRaw(text);    	non-compiled	[CE]  ';'  expected	22	None	replace
172	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }  else  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }  else  {  writeRawLong(text);  }	  if(room    <    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    =    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	52	None	replace
173	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }  else  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  =  len;  }  else  {  writeRawLong(text);  }	  if(room    <    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    =    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	52	None	replace
174	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  <  SHORT_WRITE)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  SHORT_WRITE)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }	  if(room    ==    len)    {    if(room    <    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	20	None	replace
175	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  if(room  ==  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  <  SHORT_WRITE)  {  if(room  ==  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  SHORT_WRITE)  {  if(room  ==  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }	  if(room    ==    len)    {    if(room    <    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	20	None	replace
176	[BUG]  [BUGGY]  if(room  <  len)  {  if(room  >=  1)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  <  len)  {  if(room  >=  1)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  len)  {  if(room  >=  1)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    <    len)    {    if(room    >=    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	55	None	replace
177	[BUG]  [BUGGY]  if(room  <  len)  {  if(_outputTail  >=  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  <  len)  {  if(_outputTail  >=  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  else  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  len)  {  if(_outputTail  >=  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  else  {  writeRawLong(text);  }	  if(room    ==    len)    {    if(_outputTail    >=    _outputEnd)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	29	None	replace
178	[BUG]  [BUGGY]  if(room  >=  len)  {  if(_outputTail  >>  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(_outputTail  >>  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  else  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(_outputTail  >>  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  else  {  writeRawLong(text);  }	  if(room    ==    len)    {    if(_outputTail    >=    _outputEnd)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	29	None	replace
179	[BUG]  [BUGGY]  if(room  <  len)  {  if(_outputTail  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  <  len)  {  if(_outputTail  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  len)  {  if(_outputTail  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    if(_outputTail    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
180	[BUG]  [BUGGY]  nisipToLastChar(room,  _outputBuffer,  _outputTail)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  nisipToLastChar(room,  _outputBuffer,  _outputTail)  {  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	nisipToLastChar(room,  _outputBuffer,  _outputTail)  {	  nisipToLastChar(room)    {    	non-compiled	[CE]  ';'  expected	43	None	replace
181	[BUG]  [BUGGY]  nisipToLastChar(room,  _outputBuffer)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  nisipToLastChar(room,  _outputBuffer)  {  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	nisipToLastChar(room,  _outputBuffer)  {	  nisipToLastChar(room)    {    	non-compiled	[CE]  ';'  expected	43	None	replace
182	[BUG]  [BUGGY]  if(room  <  len)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  <  len)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  len)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    ==    len)    {    if(room    <    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
183	[BUG]  [BUGGY]  reader.write(room);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  reader.write(room);  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	reader.write(room);	  reader.writeRaw(text);    	non-compiled	[CE]  ';'  expected	41	None	replace
184	[BUG]  [BUGGY]  reader.writeChars(room,  _outputBuffer,  _outputTail);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  reader.writeChars(room,  _outputBuffer,  _outputTail);  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	reader.writeChars(room,  _outputBuffer,  _outputTail);	  reader.writeRaw(text);    	non-compiled	[CE]  ';'  expected	41	None	replace
185	[BUG]  [BUGGY]  if(room  >=  len)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }	  if(room    >=    len)    {    if(_outputTail    >>    _outputEnd)    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	24	None	replace
186	[BUG]  [BUGGY]  if(room  <  len)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  <  len)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  len)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }	  if(room    ==    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	46	None	replace
187	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.write(text);  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  _writer.write(text);  }  else  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  _writer.write(text);  }  else  {  writeRawLong(text);  }	  _writer.write(text);    	non-compiled	[CE]  ';'  expected	5	None	replace
188	[BUG]  [BUGGY]  if(room  <  =  0)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  <  =  0)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  =  0)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }	  if(room    >=    len)    {    if(room    <    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
189	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  >=  1)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(room  >=  1)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(room  >=  1)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }	  if(room    >=    len)    {    if(room    <    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	18	None	replace
190	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  <  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    ==    len)    {    if(room    >=    SHORT_WRITE)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
191	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  if(room  ==  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  <  SHORT_WRITE)  {  if(room  ==  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  SHORT_WRITE)  {  if(room  ==  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    ==    len)    {    if(room    >=    SHORT_WRITE)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
192	[BUG]  [BUGGY]  if(room  >=  len)  {  if(_outputTail  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(_outputTail  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(_outputTail  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }	  if(room    <    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    1,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	50	None	replace
193	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  <  SHORT_WRITE)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  SHORT_WRITE)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }	  if(room    >=    0)    {    if(room    <    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	39	None	replace
194	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  <  SHORT_WRITE)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  SHORT_WRITE)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    0)    {    if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	36	None	replace
195	[BUG]  [BUGGY]  if(room  <  len)  {  if(_outputTail  >=  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  <  len)  {  if(_outputTail  >=  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  len)  {  if(_outputTail  >=  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }	  if(room    ==    len)    {    if(_outputTail    >=    _outputEnd)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    }    	non-compiled	[CE]  ';'  expected	28	None	replace
196	[BUG]  [BUGGY]  if(room  >=  len)  {  if(_outputTail  ==  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(_outputTail  ==  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(_outputTail  ==  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }	  if(room    ==    len)    {    if(_outputTail    >=    _outputEnd)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    }    	non-compiled	[CE]  ';'  expected	28	None	replace
197	[BUG]  [BUGGY]  if(room  <  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  <  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  len)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    if(room    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    1,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	12	None	replace
198	[BUG]  [BUGGY]  if(room  <  len)  {  if(room  >=  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  <  len)  {  if(room  >=  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  len)  {  if(room  >=  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    if(room    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    1,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	12	None	replace
199	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong	  if(room    >=    0)    {    if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong    	non-compiled	[CE]  not  a  statement	37	None	replace
200	[BUG]  [BUGGY]  if(room  <  len)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  <  len)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  len)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong	  if(room    >=    0)    {    if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong    	non-compiled	[CE]  not  a  statement	37	None	replace
201	[BUG]  [BUGGY]  if(room  >=  len)  {  _flushBuffer();  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  _flushBuffer();  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  _flushBuffer();  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  _flushBuffer();    	non-compiled	[CE]  ';'  expected	21	None	replace
202	[BUG]  [BUGGY]  if(room  >=  len)  {  _flushBuffer();  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  _flushBuffer();  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  _flushBuffer();  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong(text);  }	  _flushBuffer();    	non-compiled	[CE]  ';'  expected	21	None	replace
203	[BUG]  [BUGGY]  if(room  <  len)  {  if(_outputTail  >=  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  <  len)  {  if(_outputTail  >=  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  len)  {  if(_outputTail  >=  _outputEnd)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    if(_outputTail    >=    _outputEnd)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	8	None	replace
204	[BUG]  [BUGGY]  if(room  >=  len)  {  if(_outputTail  ==  _outputEnd)  {  writeRawLong(text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(_outputTail  ==  _outputEnd)  {  writeRawLong(text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(_outputTail  ==  _outputEnd)  {  writeRawLong(text.getChars(0,  len,  _outputBuffer,  _outputTail);  }	  if(room    ==    len)    {    if(_outputTail    >=    _outputEnd)    {    writeRawLong(text.getChars(0,    len,    _outputBuffer,    _outputTail);    }    	non-compiled	[CE]  ')'  expected	30	None	replace
205	[BUG]  [BUGGY]  if(room  >=  len)  {  if(_outputEnd  <  _outputMaxContiguous)  {  writeRawLong(text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  if(_outputEnd  <  _outputMaxContiguous)  {  writeRawLong(text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  if(_outputEnd  <  _outputMaxContiguous)  {  writeRawLong(text.getChars(0,  len,  _outputBuffer,  _outputTail);  }	  if(room    ==    len)    {    if(_outputTail    >=    _outputEnd)    {    writeRawLong(text.getChars(0,    len,    _outputBuffer,    _outputTail);    }    	non-compiled	[CE]  ')'  expected	30	None	replace
206	[BUG]  [BUGGY]  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  else  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  else  {  writeRawLong(text);  }	  if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	48	None	replace
207	[BUG]  [BUGGY]  if(room  ==  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  ==  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  else  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  ==  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  else  {  writeRawLong(text);  }	  if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	48	None	replace
208	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  <  SHORT_WRITE)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  SHORT_WRITE)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    0)    {    if(room    <    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
209	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.write(text,  0,  room);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong(text);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  _writer.write(text,  0,  room);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  _writer.write(text,  0,  room);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong(text);  }	  _writer.write(text,    0,    room);    	non-compiled	[CE]  ';'  expected	13	None	replace
210	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.write(text,  0,  room);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  _writer.write(text,  0,  room);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  _writer.write(text,  0,  room);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  _writer.write(text,    0,    room);    	non-compiled	[CE]  ';'  expected	13	None	replace
211	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.write(text,  0,  room);  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  >=  len)  {  _writer.write(text,  0,  room);  }  else  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  >=  len)  {  _writer.write(text,  0,  room);  }  else  {  writeRawLong(text);  }	  _writer.write(text,    0,    room);    	non-compiled	[CE]  ';'  expected	13	None	replace
212	[BUG]  [BUGGY]  if(room  <  =  0)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  <  =  0)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  =  0)  {  if(room  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }	  if(room    >=    len)    {    if(room    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
213	[BUG]  [BUGGY]  if(room  <  len)  {  if(room  >=  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }      [BUGGY]  if(room  <  len)  {  if(room  >=  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [BUGGY]        [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	if(room  <  len)  {  if(room  >=  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }	  if(room    >=    len)    {    if(room    >    0)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	38	None	replace
