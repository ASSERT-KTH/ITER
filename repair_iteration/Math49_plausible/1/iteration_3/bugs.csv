bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  this;  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    this;    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  MathRuntimeException$6  	152	1	add
2	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  this;  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  this;  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    this;    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  MathRuntimeException$6  	152	1	add
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  this;  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    this;    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  AssertionError  	152	2	add
4	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  this;  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [FE]  AssertionError  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  this;  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    this;    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  AssertionError  	152	2	add
5	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]        MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  this;  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  this;  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    this;    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  this;  }	  	compilable	  [FE]  MathRuntimeException$6  	152	1	add
6	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  this;  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  this;  }  [FE]  MathRuntimeException$6  [FE]        MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  this;  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  this;  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    this;    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  this;  }	  	compilable	  [FE]  MathRuntimeException$6  	152	1	add
7	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]          MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  this;  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    this;    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  MathRuntimeException$6  	152	1	add
8	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  this;  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [FE]  MathRuntimeException$6  [FE]          MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  this;  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    this;    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  MathRuntimeException$6  	152	1	add
9	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE    ||    v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	10	1	add
10	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE    ||    v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	10	1	add
11	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE    ||    v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	10	1	add
12	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE    ||    v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	10	1	add
13	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]        MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE    ||    v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	10	1	add
14	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]        MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE    ||    v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	10	1	add
15	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]          MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE    ||    v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	10	1	add
16	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]          MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE    ||    v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	10	1	add
17	[BUG]  [BUGGY]  null  dimension  =  v.getDimension();  [CE]  not  a  statement  [FE]        MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  null  dimension  =  v.getDimension();  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	null  dimension  =  v.getDimension();	          int    dimension    =    v.getDimension();    int    dimension    =    V.getDimension();    	non-compiled	[CE]  not  a  statement	150	None	replace
18	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]          MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Integer  dimension  =  v.getDimension();  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	Integer  dimension  =  v.getDimension();	          int    dimension    =    v.getDimension();    int    dimension    =    V.getDimension();    	compilable	  [FE]  MathRuntimeException$6  	150	1	replace
19	[BUG]  [BUGGY]  Integer  dimension  =  v.getDimension();  [FE]  MathRuntimeException$6  [FE]          MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Integer  dimension  =  v.getDimension();  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Integer  dimension  =  v.getDimension();	          int    dimension    =    v.getDimension();    int    dimension    =    V.getDimension();    	compilable	  [FE]  MathRuntimeException$6  	150	1	replace
20	[BUG]  [BUGGY]  Iterator  <  RealVector>  iter  =  v.iterator();  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]          MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  RealVector>  iter  =  v.iterator();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Iterator  <  RealVector>  iter  =  v.iterator();	  Iterator    <    RealVector>    iter    =    v.getEntryIterator();    	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	98	None	replace
21	[BUG]  [BUGGY]  Iterator  <  RealVector>  iter  =  this.entries.iterator();  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  RealVector>  iter  =  this.entries.iterator();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Iterator  <  RealVector>  iter  =  this.entries.iterator();	  Iterator    <    RealVector>    iter    =    v.getEntryIterator();    	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	98	None	replace
22	[BUG]  [BUGGY]  Iterator  <  RealVector>  iter  =  v.entryIterator();  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  RealVector>  iter  =  v.entryIterator();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Iterator  <  RealVector>  iter  =  v.entryIterator();	  Iterator    <    RealVector>    iter    =    v.getEntryIterator();    	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	98	None	replace
23	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.isMultiply())  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  ';'  expected  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.isMultiply())  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.isMultiply())  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }	  if(v.isMultiply())    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  ';'  expected	140	None	replace
24	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  MathRuntimeException$6  	62	1	add
25	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  MathRuntimeException$6  	62	1	add
26	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  AssertionError  	62	2	add
27	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [FE]  AssertionError  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  AssertionError  	62	2	add
28	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]        MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  MathRuntimeException$6  	62	1	add
29	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [FE]  MathRuntimeException$6  [FE]        MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  MathRuntimeException$6  	62	1	add
30	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  double  dimension  =  v.getDimension()  +  1;  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	double  dimension  =  v.getDimension()  +  1;	  int    dimension    =    v.getDimension()    +    1;    	compilable	  [FE]  MathRuntimeException$6  	20	1	replace
31	[BUG]  [BUGGY]  double  dimension  =  v.getDimension()  +  1;  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  double  dimension  =  v.getDimension()  +  1;  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	double  dimension  =  v.getDimension()  +  1;	  int    dimension    =    v.getDimension()    +    1;    	compilable	  [FE]  MathRuntimeException$6  	20	1	replace
32	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v!=        null)        {        checkVectorDimensions(v.getDimension());        }        if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	33	1	add
33	[BUG]  [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=        null)        {        checkVectorDimensions(v.getDimension());        }        if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	33	1	add
34	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v!=        null)        {        checkVectorDimensions(v.getDimension());        }        if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	33	1	add
35	[BUG]  [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=        null)        {        checkVectorDimensions(v.getDimension());        }        if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	33	1	add
36	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]        MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v!=        null)        {        checkVectorDimensions(v.getDimension());        }        if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	33	1	add
37	[BUG]  [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]        MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=        null)        {        checkVectorDimensions(v.getDimension());        }        if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	33	1	add
38	[BUG]  [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkV  [CE]  ';'  expected  [FE]          MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkV  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=        null)        {        checkVectorDimensions(v.getDimension());        }        if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkV	  	non-compiled	[CE]  ';'  expected	33	None	add
39	[BUG]  [BUGGY]  Annotation  <  RealVector>  res  =  new  RealVector(this,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [CE]  cannot  find  symbol  [FE]        MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Annotation  <  RealVector>  res  =  new  RealVector(this,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Annotation  <  RealVector>  res  =  new  RealVector(this,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE);	  Annotation    <    RealVector>    res    =    new    RealVector(this,    v.getDimension());    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
40	[BUG]  [BUGGY]  Annotation  <  RealVector>  res  =  new  RealVector(this,  DEFAULT_ZERO_TOLERANCE,  v.getDimension());  [CE]  cannot  find  symbol  [FE]          MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Annotation  <  RealVector>  res  =  new  RealVector(this,  DEFAULT_ZERO_TOLERANCE,  v.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Annotation  <  RealVector>  res  =  new  RealVector(this,  DEFAULT_ZERO_TOLERANCE,  v.getDimension());	  Annotation    <    RealVector>    res    =    new    RealVector(this,    v.getDimension());    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
41	[BUG]  [BUGGY]  Annotation  <  RealVector>  res  =  new  RealVector(this,  v.getDimension(),  value);  [CE]  cannot  find  symbol  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Annotation  <  RealVector>  res  =  new  RealVector(this,  v.getDimension(),  value);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Annotation  <  RealVector>  res  =  new  RealVector(this,  v.getDimension(),  value);	  Annotation    <    RealVector>    res    =    new    RealVector(this,    v.getDimension());    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
42	[BUG]  [BUGGY]  Annotation  <  RealVector>  res  =  new  RealVector(this,  v.getEntry());  [CE]  cannot  find  symbol  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Annotation  <  RealVector>  res  =  new  RealVector(this,  v.getEntry());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Annotation  <  RealVector>  res  =  new  RealVector(this,  v.getEntry());	  Annotation    <    RealVector>    res    =    new    RealVector(this,    v.getDimension());    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
43	[BUG]  [BUGGY]  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    <    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	15	None	replace
44	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  illegal  start  of  expression  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    <    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
45	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [CE]  ';'  expected  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    If(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  ';'  expected	56	None	replace
46	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [CE]  ';'  expected  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    If(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  ';'  expected	56	None	replace
47	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [CE]  ';'  expected  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    If(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  ';'  expected	56	None	replace
48	[BUG]  [BUGGY]  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  [CE]  illegal  start  of  expression  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);	  ||    v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
49	[BUG]  [BUGGY]  ||  v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  [CE]  illegal  start  of  expression  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  ||  v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	||  v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);	  ||    v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
50	[BUG]  [BUGGY]  ||  v.getType()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  [CE]  illegal  start  of  expression  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  ||  v.getType()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	||  v.getType()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);	  ||    v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
51	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=  null)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v!=    null)    {    if(v.getDimension()    >    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	92	None	replace
52	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v  ==  null)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v!=    null)    {    if(v.getDimension()    >    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	92	None	replace
53	[BUG]  [BUGGY]          int    dimension    =    v.getDimension();    int  dimensions  =  v.getDimension();  int  dimension  =  v.getDimension();  int  dimensions  =  v.getDimension();  [CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]          int    dimension    =    v.getDimension();    int  dimensions  =  v.getDimension();  int  dimension  =  v.getDimension();  int  dimensions  =  v.getDimension();  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	                int        dimension        =        v.getDimension();        int    dimensions    =    v.getDimension();    int  dimension  =  v.getDimension();  int  dimensions  =  v.getDimension();	  	non-compiled	[CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)	73	None	add
54	[BUG]  [BUGGY]          int    dimension    =    v.getDimension();    int  dimensions  =  v.getDimension();  Integer  dimension  =  v.getDimension();  int  dimensions  =  v.getDimension();  [CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]          int    dimension    =    v.getDimension();    int  dimensions  =  v.getDimension();  Integer  dimension  =  v.getDimension();  int  dimensions  =  v.getDimension();  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	                int        dimension        =        v.getDimension();        int    dimensions    =    v.getDimension();    Integer  dimension  =  v.getDimension();  int  dimensions  =  v.getDimension();	  	non-compiled	[CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)	73	None	add
55	[BUG]  [BUGGY]          int    dimension    =    v.getDimension();    int  dimensions  =  v.getDimension();  int  dimensions  =  v.getDimension();  int  dimensions  =  v.getDimension();  [CE]  variable  dimensions  is  already  defined  in  method  ebeMultiply(RealVector)  [FE]        MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]          int    dimension    =    v.getDimension();    int  dimensions  =  v.getDimension();  int  dimensions  =  v.getDimension();  int  dimensions  =  v.getDimension();  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	                int        dimension        =        v.getDimension();        int    dimensions    =    v.getDimension();    int  dimensions  =  v.getDimension();  int  dimensions  =  v.getDimension();	  	non-compiled	[CE]  variable  dimensions  is  already  defined  in  method  ebeMultiply(RealVector)	73	None	add
56	[BUG]  [BUGGY]          int    dimension    =    v.getDimension();    int  dimensions  =  v.getDimension();  double  dimension  =  v.getDimension();  int  dimensions  =  v.getDimension();  [CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)  [FE]          MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]          int    dimension    =    v.getDimension();    int  dimensions  =  v.getDimension();  double  dimension  =  v.getDimension();  int  dimensions  =  v.getDimension();  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	                int        dimension        =        v.getDimension();        int    dimensions    =    v.getDimension();    double  dimension  =  v.getDimension();  int  dimensions  =  v.getDimension();	  	non-compiled	[CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)	73	None	add
57	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [CE]  ';'  expected  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	63	None	replace
58	[BUG]  [BUGGY]  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v.getDimension()    <    =    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	133	None	replace
59	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  AssertionError  	38	2	add
60	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  AssertionError  	38	2	add
61	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(	  	non-compiled	[CE]  ')'  expected	38	None	add
62	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector  [CE]  '('  or  '['  expected  [FE]        AssertionError    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector	  	non-compiled	[CE]  '('  or  '['  expected	38	None	add
63	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  ';'  expected  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v!=    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  ';'  expected	113	None	replace
64	[BUG]  [BUGGY]  Annotation  <  RealVector>  entry  =  v.getValue();  [CE]  cannot  find  symbol  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Annotation  <  RealVector>  entry  =  v.getValue();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Annotation  <  RealVector>  entry  =  v.getValue();	  Annotation    <    RealVector>    entry    =    v.getEntry();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
65	[BUG]  [BUGGY]  Annotation  <  RealVector>  entry  =  v.entry();  [CE]  cannot  find  symbol  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Annotation  <  RealVector>  entry  =  v.entry();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Annotation  <  RealVector>  entry  =  v.entry();	  Annotation    <    RealVector>    entry    =    v.getEntry();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
66	[BUG]  [BUGGY]  Annotation  <  RealVector>  entry  =  this.v.getEntry();  [CE]  cannot  find  symbol  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Annotation  <  RealVector>  entry  =  this.v.getEntry();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Annotation  <  RealVector>  entry  =  this.v.getEntry();	  Annotation    <    RealVector>    entry    =    v.getEntry();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
67	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(v,  this);  [CE]  RealVector  is  abstract;  cannot  be  instantiated  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(v,  this);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(v,  this);	  RealVector    res    =    new    RealVector(v);    	non-compiled	[CE]  RealVector  is  abstract;  cannot  be  instantiated	84	None	replace
68	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this.value);  [CE]  cannot  find  symbol  value  [FE]                      MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this.value);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this.value);	  RealVector    res    =    new    RealVector(v);    	non-compiled	[CE]  cannot  find  symbol  value	84	None	replace
69	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  MathRuntimeException$6  	130	1	add
70	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  MathRuntimeException$6  	130	1	add
71	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  AssertionError  	130	2	add
72	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [FE]  AssertionError  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  AssertionError  	130	2	add
73	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  If(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]        MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  If(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    If(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  	non-compiled	[CE]  ';'  expected	130	None	add
74	[BUG]  [BUGGY]  CheckIntToDoubleHashMap(v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [CE]  cannot  find  symbol  [FE]        MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  CheckIntToDoubleHashMap(v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	CheckIntToDoubleHashMap(v.getDimension(),  DEFAULT_ZERO_TOLERANCE);	  CheckIntToDoubleHashMap(v.getDimension());    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
75	[BUG]  [BUGGY]  CheckIntToDoubleHashMap(v,  epsilon.getDimension());  [CE]  double  cannot  be  dereferenced  [FE]          MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  CheckIntToDoubleHashMap(v,  epsilon.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	CheckIntToDoubleHashMap(v,  epsilon.getDimension());	  CheckIntToDoubleHashMap(v.getDimension());    	non-compiled	[CE]  double  cannot  be  dereferenced	118	None	replace
76	[BUG]  [BUGGY]  CheckIntToDoubleHashMap(v.getDimension(),  value);  [CE]  cannot  find  symbol  value  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  CheckIntToDoubleHashMap(v.getDimension(),  value);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	CheckIntToDoubleHashMap(v.getDimension(),  value);	  CheckIntToDoubleHashMap(v.getDimension());    	non-compiled	[CE]  cannot  find  symbol  value	118	None	replace
77	[BUG]  [BUGGY]  CheckIntToDoubleHashMap(v.getDimension(),  size);  [CE]  cannot  find  symbol  size  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  CheckIntToDoubleHashMap(v.getDimension(),  size);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	CheckIntToDoubleHashMap(v.getDimension(),  size);	  CheckIntToDoubleHashMap(v.getDimension());    	non-compiled	[CE]  cannot  find  symbol  size	118	None	replace
78	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(new  RealVector(v.getDimension()));  }  [CE]  RealVector  is  abstract;  cannot  be  instantiated  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(new  RealVector(v.getDimension()));  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(new  RealVector(v.getDimension()));  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  RealVector  is  abstract;  cannot  be  instantiated	9	None	replace
79	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getEntry(),  DEFAULT_ZERO_TOLERANCE);  [CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getEntry(),  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getEntry(),  DEFAULT_ZERO_TOLERANCE);	  RealVector    res    =    new    RealVector(this,    v.getDimension(),    v.getEntry());    	non-compiled	[CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;	6	None	replace
80	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  v.getEntry());  [CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;  [FE]                      MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  v.getEntry());  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  v.getEntry());	  RealVector    res    =    new    RealVector(this,    v.getDimension(),    v.getEntry());    	non-compiled	[CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;	6	None	replace
81	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getEntry(),  value);  [CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;  [FE]                        MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getEntry(),  value);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getEntry(),  value);	  RealVector    res    =    new    RealVector(this,    v.getDimension(),    v.getEntry());    	non-compiled	[CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;	6	None	replace
82	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  value,  v.getEntry());  [CE]  cannot  find  symbol  value  [FE]                          MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  value,  v.getEntry());  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  v.getDimension(),  value,  v.getEntry());	  RealVector    res    =    new    RealVector(this,    v.getDimension(),    v.getEntry());    	non-compiled	[CE]  cannot  find  symbol  value	6	None	replace
83	[BUG]  [BUGGY]  if(v.getDimension()!=  null  ||  v.getDimension()!=  null)  {  checkVectorDimensions(v.getDimension());  }  [CE]  incomparable  types:  int  and  <null>  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  null  ||  v.getDimension()!=  null)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  null  ||  v.getDimension()!=  null)  {  checkVectorDimensions(v.getDimension());  }	  if(v.getDimension()!=    null    &&    v.getDimension()!=    null)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	138	None	replace
84	[BUG]  [BUGGY]  if(v.getDimension()!=  null  &&  v.getDimension()  ==  null)  {  checkVectorDimensions(v.getDimension());  }  [CE]  incomparable  types:  int  and  <null>  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  null  &&  v.getDimension()  ==  null)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  null  &&  v.getDimension()  ==  null)  {  checkVectorDimensions(v.getDimension());  }	  if(v.getDimension()!=    null    &&    v.getDimension()!=    null)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	138	None	replace
85	[BUG]  [BUGGY]  if(v.getDimension()!=  null  &&  v.getDimension()  >=  null)  {  checkVectorDimensions(v.getDimension());  }  [CE]  incomparable  types:  int  and  <null>  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  null  &&  v.getDimension()  >=  null)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  null  &&  v.getDimension()  >=  null)  {  checkVectorDimensions(v.getDimension());  }	  if(v.getDimension()!=    null    &&    v.getDimension()!=    null)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	138	None	replace
86	[BUG]  [BUGGY]  Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.getValue();  [CE]  >  expected  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.getValue();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.getValue();	  Iterator    <    Map.Entry    <    String,    RealVector>    entry    =    v.getEntry();    	non-compiled	[CE]  >  expected	123	None	replace
87	[BUG]  [BUGGY]  Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.getKey();  [CE]  >  expected  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.getKey();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.getKey();	  Iterator    <    Map.Entry    <    String,    RealVector>    entry    =    v.getEntry();    	non-compiled	[CE]  >  expected	123	None	replace
88	[BUG]  [BUGGY]  Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.entrySet();  [CE]  >  expected  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.entrySet();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.entrySet();	  Iterator    <    Map.Entry    <    String,    RealVector>    entry    =    v.getEntry();    	non-compiled	[CE]  >  expected	123	None	replace
89	[BUG]  [BUGGY]  int  dimension  =  v.getDimension();  Integer  dimension  =  v.getDimension();  [CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)  [FE]          MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  int  dimension  =  v.getDimension();  Integer  dimension  =  v.getDimension();  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	int  dimension  =  v.getDimension();  Integer  dimension  =  v.getDimension();	          int    dimension    =    v.getDimension();    Int    dimension    =    v.getDimension();    	non-compiled	[CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)	72	None	replace
90	[BUG]  [BUGGY]  Int  dimension  =  v.getDimension();  [CE]  cannot  find  symbol  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Int  dimension  =  v.getDimension();  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Int  dimension  =  v.getDimension();	          int    dimension    =    v.getDimension();    Int    dimension    =    v.getDimension();    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
91	[BUG]  [BUGGY]  checkDimensions(v,  epsilon.getDimension(),  value);  [CE]  double  cannot  be  dereferenced  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkDimensions(v,  epsilon.getDimension(),  value);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkDimensions(v,  epsilon.getDimension(),  value);	  checkDimensions(v,    epsilon.getDimension());    	non-compiled	[CE]  double  cannot  be  dereferenced	80	None	replace
92	[BUG]  [BUGGY]  checkDimensions(v,  value.getDimension());  [CE]  cannot  find  symbol  value  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkDimensions(v,  value.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkDimensions(v,  value.getDimension());	  checkDimensions(v,    epsilon.getDimension());    	non-compiled	[CE]  cannot  find  symbol  value	80	None	replace
93	[BUG]  [BUGGY]  checkDimensions(epsilon,  v.getDimension());  [CE]  cannot  find  symbol  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkDimensions(epsilon,  v.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkDimensions(epsilon,  v.getDimension());	  checkDimensions(v,    epsilon.getDimension());    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
94	[BUG]  [BUGGY]  checkDimensions(v,  epsilon.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [CE]  double  cannot  be  dereferenced  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkDimensions(v,  epsilon.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkDimensions(v,  epsilon.getDimension(),  DEFAULT_ZERO_TOLERANCE);	  checkDimensions(v,    epsilon.getDimension());    	non-compiled	[CE]  double  cannot  be  dereferenced	80	None	replace
95	[BUG]  [BUGGY]  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]                      MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v.getDimension()    >    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	129	None	replace
96	[BUG]  [BUGGY]  Annotation  <  RealVector>  res  =(RealVector)v.clone();  [CE]  cannot  find  symbol  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Annotation  <  RealVector>  res  =(RealVector)v.clone();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Annotation  <  RealVector>  res  =(RealVector)v.clone();	  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v    ==    null)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
97	[BUG]  [BUGGY]  Annotation  <  RealVector>  res  =  new  RealVector(v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [CE]  cannot  find  symbol  [FE]          MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Annotation  <  RealVector>  res  =  new  RealVector(v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Annotation  <  RealVector>  res  =  new  RealVector(v.getDimension(),  DEFAULT_ZERO_TOLERANCE);	  Annotation    <    RealVector>    res    =    new    RealVector(v.getDimension());    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
98	[BUG]  [BUGGY]  Annotation  <  RealVector>  res  =  new  RealVector(v.getDimension(),  this);  [CE]  cannot  find  symbol  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Annotation  <  RealVector>  res  =  new  RealVector(v.getDimension(),  this);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Annotation  <  RealVector>  res  =  new  RealVector(v.getDimension(),  this);	  Annotation    <    RealVector>    res    =    new    RealVector(v.getDimension());    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
99	[BUG]  [BUGGY]  Annotation  <  RealVector>  res  =  new  RealVector(v.getEntry());  [CE]  cannot  find  symbol  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Annotation  <  RealVector>  res  =  new  RealVector(v.getEntry());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Annotation  <  RealVector>  res  =  new  RealVector(v.getEntry());	  Annotation    <    RealVector>    res    =    new    RealVector(v.getDimension());    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
100	[BUG]  [BUGGY]  Annotation  <  RealVector>  res  =  new  RealVector(v.getDimension(),  value);  [CE]  cannot  find  symbol  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Annotation  <  RealVector>  res  =  new  RealVector(v.getDimension(),  value);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Annotation  <  RealVector>  res  =  new  RealVector(v.getDimension(),  value);	  Annotation    <    RealVector>    res    =    new    RealVector(v.getDimension());    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
101	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  ';'  expected  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  ';'  expected	87	None	replace
102	[BUG]  [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  ';'  expected  [FE]                      MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  ';'  expected	87	None	replace
103	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkV  [CE]  ';'  expected  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkV  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkV	  	non-compiled	[CE]  ';'  expected	50	None	add
104	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVe  [CE]  ';'  expected  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVe  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVe	  	non-compiled	[CE]  ';'  expected	50	None	add
105	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  check  [CE]  ';'  expected  [FE]        MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  check  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  check	  	non-compiled	[CE]  ';'  expected	50	None	add
106	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorD  [CE]  ';'  expected  [FE]          MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorD  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorD	  	non-compiled	[CE]  ';'  expected	50	None	add
107	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  [CE]  ';'  expected  [FE]            MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {	  	non-compiled	[CE]  ';'  expected	50	None	add
108	[BUG]  [BUGGY]  RealVector  res  =(RealVector)this.entries.get(v,  this,  epsilon);  [CE]  method  get  in  class  OpenIntToDoubleHashMap  cannot  be  applied  to  given  types;  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =(RealVector)this.entries.get(v,  this,  epsilon);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =(RealVector)this.entries.get(v,  this,  epsilon);	  RealVector    res    =(RealVector)this.entries.get(v,    this);    	non-compiled	[CE]  method  get  in  class  OpenIntToDoubleHashMap  cannot  be  applied  to  given  types;	59	None	replace
109	[BUG]  [BUGGY]  RealVector  res  =(RealVector)this.entries.get(v,  this,  DEFAULT_ZERO_TOLERANCE);  [CE]  method  get  in  class  OpenIntToDoubleHashMap  cannot  be  applied  to  given  types;  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =(RealVector)this.entries.get(v,  this,  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =(RealVector)this.entries.get(v,  this,  DEFAULT_ZERO_TOLERANCE);	  RealVector    res    =(RealVector)this.entries.get(v,    this);    	non-compiled	[CE]  method  get  in  class  OpenIntToDoubleHashMap  cannot  be  applied  to  given  types;	59	None	replace
110	[BUG]  [BUGGY]  checkDimensions(v,  realAccess.getDimension());  [CE]  cannot  find  symbol  realAccess  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkDimensions(v,  realAccess.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkDimensions(v,  realAccess.getDimension());	  checkDimensions(v,    v.getDimension());    	non-compiled	[CE]  cannot  find  symbol  realAccess	81	None	replace
111	[BUG]  [BUGGY]  checkDimensions(v,  RealVector.getDimension());  [CE]  non-static  method  getDimension()  cannot  be  referenced  from  a  static  context  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkDimensions(v,  RealVector.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkDimensions(v,  RealVector.getDimension());	  checkDimensions(v,    v.getDimension());    	non-compiled	[CE]  non-static  method  getDimension()  cannot  be  referenced  from  a  static  context	81	None	replace
112	[BUG]  [BUGGY]  checkDimensions(v,  RealVector.class.getSimpleName());  [CE]  cannot  find  symbol  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkDimensions(v,  RealVector.class.getSimpleName());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkDimensions(v,  RealVector.class.getSimpleName());	  checkDimensions(v,    v.getDimension());    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
113	[BUG]  [BUGGY]  res.setEntry(v.getValue(),  DEFAULT_ZERO_TOLERANCE);  [CE]  cannot  find  symbol  [FE]        MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  res.setEntry(v.getValue(),  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	res.setEntry(v.getValue(),  DEFAULT_ZERO_TOLERANCE);	          res.setEntry(v.getValue());    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
114	[BUG]  [BUGGY]  res.setEntry(v.getValue(),  v.getValue());  [CE]  cannot  find  symbol  [FE]          MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  res.setEntry(v.getValue(),  v.getValue());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	res.setEntry(v.getValue(),  v.getValue());	          res.setEntry(v.getValue());    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
115	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  DEFAULT_ZERO_TOLERANCE,  v.getDimension(),  value);  [CE]  cannot  find  symbol  value  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  DEFAULT_ZERO_TOLERANCE,  v.getDimension(),  value);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  DEFAULT_ZERO_TOLERANCE,  v.getDimension(),  value);	  RealVector    res    =    new    RealVector(this,    DEFAULT_ZERO_TOLERANCE,    v.getDimension());    	non-compiled	[CE]  cannot  find  symbol  value	42	None	replace
116	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  DEFAULT_ZERO_TOLERANCE,  v.getEntry());  [CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  DEFAULT_ZERO_TOLERANCE,  v.getEntry());  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  DEFAULT_ZERO_TOLERANCE,  v.getEntry());	  RealVector    res    =    new    RealVector(this,    DEFAULT_ZERO_TOLERANCE,    v.getDimension());    	non-compiled	[CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;	42	None	replace
117	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  DEFAULT_ZERO_TOLERANCE,  v.getDimension()  +  1);  [CE]  RealVector  is  abstract;  cannot  be  instantiated  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  DEFAULT_ZERO_TOLERANCE,  v.getDimension()  +  1);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  DEFAULT_ZERO_TOLERANCE,  v.getDimension()  +  1);	  RealVector    res    =    new    RealVector(this,    DEFAULT_ZERO_TOLERANCE,    v.getDimension());    	non-compiled	[CE]  RealVector  is  abstract;  cannot  be  instantiated	42	None	replace
118	[BUG]  [BUGGY]  res.add(new  OpenMapRealVector(v));  [CE]  cannot  find  symbol  res  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  res.add(new  OpenMapRealVector(v));  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	res.add(new  OpenMapRealVector(v));	  vices.add(new    OpenMapRealVector(v));    	non-compiled	[CE]  cannot  find  symbol  res	29	None	replace
119	[BUG]  [BUGGY]  openMapRealVectors.add(new  OpenMapRealVector(v));  [CE]  cannot  find  symbol  openMapRealVectors  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  openMapRealVectors.add(new  OpenMapRealVector(v));  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	openMapRealVectors.add(new  OpenMapRealVector(v));	  vices.add(new    OpenMapRealVector(v));    	non-compiled	[CE]  cannot  find  symbol  openMapRealVectors	29	None	replace
120	[BUG]  [BUGGY]  openMapRealVector.add(new  OpenMapRealVector(v));  [CE]  cannot  find  symbol  openMapRealVector  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  openMapRealVector.add(new  OpenMapRealVector(v));  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	openMapRealVector.add(new  OpenMapRealVector(v));	  vices.add(new    OpenMapRealVector(v));    	non-compiled	[CE]  cannot  find  symbol  openMapRealVector	29	None	replace
121	[BUG]  [BUGGY]  RealVector  res  =  new  OpenMapRealVector(v);  [CE]  variable  res  is  already  defined  in  method  ebeMultiply(RealVector)  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  OpenMapRealVector(v);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  OpenMapRealVector(v);	  vices.add(new    OpenMapRealVector(v));    	non-compiled	[CE]  variable  res  is  already  defined  in  method  ebeMultiply(RealVector)	29	None	replace
122	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getEntry(),  v.getDimension());  [CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;  [FE]                      MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getEntry(),  v.getDimension());  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  v.getEntry(),  v.getDimension());	  RealVector    res    =    new    RealVector(this,    v.getEntry());    	non-compiled	[CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;	85	None	replace
123	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  v,  v.getEntry());  [CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;  [FE]                        MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  v,  v.getEntry());  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  v,  v.getEntry());	  RealVector    res    =    new    RealVector(this,    v.getEntry());    	non-compiled	[CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;	85	None	replace
124	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getEntry(),  v);  [CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;  [FE]                          MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getEntry(),  v);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  v.getEntry(),  v);	  RealVector    res    =    new    RealVector(this,    v.getEntry());    	non-compiled	[CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;	85	None	replace
125	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [CE]  RealVector  is  abstract;  cannot  be  instantiated  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getDimension(),  DEFAULT_ZERO_TOLERANCE);	  RealVector    res    =    new    RealVector(this,    v.getDimension(),    v.getDimension());    	non-compiled	[CE]  RealVector  is  abstract;  cannot  be  instantiated	5	None	replace
126	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getDimension(),  value);  [CE]  cannot  find  symbol  value  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getDimension(),  value);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getDimension(),  value);	  RealVector    res    =    new    RealVector(this,    v.getDimension(),    v.getDimension());    	non-compiled	[CE]  cannot  find  symbol  value	5	None	replace
127	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	compilable	  [FE]  AssertionError  	131	2	replace
128	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [FE]  AssertionError  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	compilable	  [FE]  AssertionError  	131	2	replace
129	[BUG]  [BUGGY]  ||(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  &&  v.getVectorDimension()!=  DEFAULT_ZERO_TOLERANCE))  {  return  new  OpenMapRealVector(this);  }  [CE]  illegal  start  of  expression  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  ||(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  &&  v.getVectorDimension()!=  DEFAULT_ZERO_TOLERANCE))  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	||(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  &&  v.getVectorDimension()!=  DEFAULT_ZERO_TOLERANCE))  {  return  new  OpenMapRealVector(this);  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
130	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	compilable	  [FE]  AssertionError  	131	2	replace
131	[BUG]  [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [FE]  AssertionError  [FE]        MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	compilable	  [FE]  AssertionError  	131	2	replace
132	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	124	1	add
133	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	124	1	add
134	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  	compilable	  [FE]  AssertionError  	124	2	add
135	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [FE]  AssertionError  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  	compilable	  [FE]  AssertionError  	124	2	add
136	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  If(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  ';'  expected  [FE]        MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  If(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    If(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  	non-compiled	[CE]  ';'  expected	124	None	add
137	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  v,  DEFAULT_ZERO_TOLERANCE);  [CE]  RealVector  is  abstract;  cannot  be  instantiated  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  v,  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  v,  DEFAULT_ZERO_TOLERANCE);	  RealVector    res    =    new    RealVector(this,    v);    	non-compiled	[CE]  RealVector  is  abstract;  cannot  be  instantiated	41	None	replace
138	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getValue());  [CE]  cannot  find  symbol  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getValue());  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  v.getValue());	  RealVector    res    =    new    RealVector(this,    v);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
139	[BUG]  [BUGGY]  if(v.getDimension()  ==  null)  {  checkVectorDimensions(v,  v.getDimension());  }  [CE]  incomparable  types:  int  and  <null>  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  null)  {  checkVectorDimensions(v,  v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  ==  null)  {  checkVectorDimensions(v,  v.getDimension());  }	  if(v.getDimension()!=    null)    {    checkVectorDimensions(v,    v.getDimension());    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	110	None	replace
140	[BUG]  [BUGGY]  CheckVectorDimensions(v,  v.getDimension());  [CE]  cannot  find  symbol  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  CheckVectorDimensions(v,  v.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	CheckVectorDimensions(v,  v.getDimension());	  if(v.getDimension()!=    null)    {    checkVectorDimensions(v,    v.getDimension());    }    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
141	[BUG]  [BUGGY]  if(v.getDimension()!=  null)  {  checkVectorDimensions(v,  this.v.getDimension());  }  [CE]  incomparable  types:  int  and  <null>  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  null)  {  checkVectorDimensions(v,  this.v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  null)  {  checkVectorDimensions(v,  this.v.getDimension());  }	  if(v.getDimension()!=    null)    {    checkVectorDimensions(v,    v.getDimension());    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	110	None	replace
142	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  &&  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  &&  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE    ||    v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    	compilable	  [FE]  MathRuntimeException$6  	11	1	replace
143	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  &&  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  &&  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  &&  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE    ||    v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    	compilable	  [FE]  MathRuntimeException$6  	11	1	replace
144	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  &&  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  &&  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE    ||    v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    	compilable	  [FE]  MathRuntimeException$6  	11	1	replace
145	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  &&  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  &&  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  &&  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE    ||    v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    	compilable	  [FE]  MathRuntimeException$6  	11	1	replace
146	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]        MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE    ||    v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    	compilable	  [FE]  MathRuntimeException$6  	11	1	replace
147	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]        MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE    ||    v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    	compilable	  [FE]  MathRuntimeException$6  	11	1	replace
148	[BUG]  [BUGGY]  checkMultiply(epsilon.getDimension(),  v);  [CE]  double  cannot  be  dereferenced  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkMultiply(epsilon.getDimension(),  v);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkMultiply(epsilon.getDimension(),  v);	  checkMultiply(v.getDimension(),    epsilon);    	non-compiled	[CE]  double  cannot  be  dereferenced	47	None	replace
149	[BUG]  [BUGGY]  checkMultiply(v,  epsilon.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [CE]  double  cannot  be  dereferenced  [FE]                      MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkMultiply(v,  epsilon.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkMultiply(v,  epsilon.getDimension(),  DEFAULT_ZERO_TOLERANCE);	  checkMultiply(v.getDimension(),    epsilon);    	non-compiled	[CE]  double  cannot  be  dereferenced	47	None	replace
150	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  MathRuntimeException$6  	66	1	add
151	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  MathRuntimeException$6  	66	1	add
152	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  AssertionError  	66	2	add
153	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [FE]  AssertionError  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  AssertionError  	66	2	add
154	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]        MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  MathRuntimeException$6  	66	1	add
155	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [FE]  MathRuntimeException$6  [FE]        MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  MathRuntimeException$6  	66	1	add
156	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(  [CE]  ')'  expected  [FE]          MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(	  	non-compiled	[CE]  ')'  expected	66	None	add
157	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v  ==  null)  {  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v!=    null)    {    if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	105	None	replace
158	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  DEFAULT_ZERO_TOLERANCE,  v,  value);  [CE]  cannot  find  symbol  value  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  DEFAULT_ZERO_TOLERANCE,  v,  value);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  DEFAULT_ZERO_TOLERANCE,  v,  value);	  RealVector    res    =    new    RealVector(this,    DEFAULT_ZERO_TOLERANCE,    v);    	non-compiled	[CE]  cannot  find  symbol  value	40	None	replace
159	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  DEFAULT_ZERO_TOLERANCE,  value);  [CE]  cannot  find  symbol  value  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  DEFAULT_ZERO_TOLERANCE,  value);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  DEFAULT_ZERO_TOLERANCE,  value);	  RealVector    res    =    new    RealVector(this,    DEFAULT_ZERO_TOLERANCE,    v);    	non-compiled	[CE]  cannot  find  symbol  value	40	None	replace
160	[BUG]  [BUGGY]  checkMultiply(v,  res.getDimension());  [CE]  cannot  find  symbol  res  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkMultiply(v,  res.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkMultiply(v,  res.getDimension());	  checkMultiply(v,    current.getDimension());    	non-compiled	[CE]  cannot  find  symbol  res	141	None	replace
161	[BUG]  [BUGGY]  checkMultiply(v,  epsilon.getDimension());  [CE]  double  cannot  be  dereferenced  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkMultiply(v,  epsilon.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkMultiply(v,  epsilon.getDimension());	  checkMultiply(v,    current.getDimension());    	non-compiled	[CE]  double  cannot  be  dereferenced	141	None	replace
162	[BUG]  [BUGGY]  checkMultiply(v,  this.epsilon.getDimension());  [CE]  double  cannot  be  dereferenced  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkMultiply(v,  this.epsilon.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkMultiply(v,  this.epsilon.getDimension());	  checkMultiply(v,    current.getDimension());    	non-compiled	[CE]  double  cannot  be  dereferenced	141	None	replace
163	[BUG]  [BUGGY]  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  ';'  expected  [FE]                      MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v.getDimension()    <    =    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  ';'  expected	127	None	replace
164	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension()  [CE]  ')'  expected  [FE]                        MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension()  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension()	  if(v.getDimension()    <    =    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  ')'  expected	127	None	replace
165	[BUG]  [BUGGY]  checkMultiply(v,  realAccess.getDimension());  [CE]  cannot  find  symbol  realAccess  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkMultiply(v,  realAccess.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkMultiply(v,  realAccess.getDimension());	  checkMultiply(v,    v.getDimension());    	non-compiled	[CE]  cannot  find  symbol  realAccess	45	None	replace
166	[BUG]  [BUGGY]  checkMultiply(v,  RealVector.getDimension());  [CE]  non-static  method  getDimension()  cannot  be  referenced  from  a  static  context  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkMultiply(v,  RealVector.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkMultiply(v,  RealVector.getDimension());	  checkMultiply(v,    v.getDimension());    	non-compiled	[CE]  non-static  method  getDimension()  cannot  be  referenced  from  a  static  context	45	None	replace
167	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  [CE]  ';'  expected  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);	  	non-compiled	[CE]  ';'  expected	144	None	add
168	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(  [CE]  ')'  expected  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(	  	non-compiled	[CE]  ')'  expected	144	None	add
169	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  [CE]  ';'  expected  [FE]        MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(this);    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);	  	non-compiled	[CE]  ';'  expected	144	None	add
170	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealV  [CE]  '('  or  '['  expected  [FE]          MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealV  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealV	  	non-compiled	[CE]  '('  or  '['  expected	144	None	add
171	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector  [CE]  '('  or  '['  expected  [FE]            MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector	  	non-compiled	[CE]  '('  or  '['  expected	144	None	add
172	[BUG]  [BUGGY]  if(v!=  null)  {  checkVectorDimensions(new  RealVector(v.getEntry()));  }  [CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;  [FE]        MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  checkVectorDimensions(new  RealVector(v.getEntry()));  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=  null)  {  checkVectorDimensions(new  RealVector(v.getEntry()));  }	  if(v!=    null)    {    checkVectorDimensions(v.getEntry());    }    	non-compiled	[CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;	135	None	replace
173	[BUG]  [BUGGY]  if(v!=  null)  {  checkVectorDimensions(v.getEntry(),  this);  }  [CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;  [FE]          MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  checkVectorDimensions(v.getEntry(),  this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=  null)  {  checkVectorDimensions(v.getEntry(),  this);  }	  if(v!=    null)    {    checkVectorDimensions(v.getEntry());    }    	non-compiled	[CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;	135	None	replace
174	[BUG]  [BUGGY]  if(v!=  null)  {  checkVectorDimensions(v.getEntry(),  v);  }  [CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  checkVectorDimensions(v.getEntry(),  v);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=  null)  {  checkVectorDimensions(v.getEntry(),  v);  }	  if(v!=    null)    {    checkVectorDimensions(v.getEntry());    }    	non-compiled	[CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;	135	None	replace
175	[BUG]  [BUGGY]  if(v!=  null)  {  checkVectorDimensions(v.getEntry(),  v.getValue());  }  [CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  checkVectorDimensions(v.getEntry(),  v.getValue());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=  null)  {  checkVectorDimensions(v.getEntry(),  v.getValue());  }	  if(v!=    null)    {    checkVectorDimensions(v.getEntry());    }    	non-compiled	[CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;	135	None	replace
176	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  AssertionError  	64	2	add
177	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  AssertionError  	64	2	add
178	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  AssertionError  	64	2	add
179	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  AssertionError  	64	2	add
180	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(	  	non-compiled	[CE]  ')'  expected	64	None	add
181	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  AssertionError  	64	2	add
182	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  AssertionError  	64	2	add
183	[BUG]  [BUGGY]  RealVector.setDimension(v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [CE]  cannot  find  symbol  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector.setDimension(v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector.setDimension(v.getDimension(),  DEFAULT_ZERO_TOLERANCE);	  res.setDimension(v.getDimension(),    DEFAULT_ZERO_TOLERANCE);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
184	[BUG]  [BUGGY]  res.setDimension(v.getDimension(),  DEFAULT_ZERO_TOLERANCE  +  1);  [CE]  cannot  find  symbol  res  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  res.setDimension(v.getDimension(),  DEFAULT_ZERO_TOLERANCE  +  1);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	res.setDimension(v.getDimension(),  DEFAULT_ZERO_TOLERANCE  +  1);	  res.setDimension(v.getDimension(),    DEFAULT_ZERO_TOLERANCE);    	non-compiled	[CE]  cannot  find  symbol  res	24	None	replace
185	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v    ==    null)    {    checkVectorDimensions(v.getDimension());    }    if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	101	1	add
186	[BUG]  [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v    ==    null)    {    checkVectorDimensions(v.getDimension());    }    if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	101	1	add
187	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v    ==    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	101	1	add
188	[BUG]  [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v    ==    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	101	1	add
189	[BUG]  [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  If(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  [CE]  ';'  expected  [FE]        MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  If(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v    ==    null)    {    checkVectorDimensions(v.getDimension());    }    If(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }	  	non-compiled	[CE]  ';'  expected	101	None	add
190	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealV  [CE]  '('  or  '['  expected  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealV  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealV	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(this);    	non-compiled	[CE]  '('  or  '['  expected	12	None	replace
191	[BUG]  [BUGGY]  RealVector  res  =(RealVector)this.entries.get(v,  epsilon);  [CE]  method  get  in  class  OpenIntToDoubleHashMap  cannot  be  applied  to  given  types;  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =(RealVector)this.entries.get(v,  epsilon);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =(RealVector)this.entries.get(v,  epsilon);	  RealVector    res    =(RealVector)this.entries.get(v,    v);    	non-compiled	[CE]  method  get  in  class  OpenIntToDoubleHashMap  cannot  be  applied  to  given  types;	60	None	replace
192	[BUG]  [BUGGY]  RealVector  res  =(RealVector)this.entries.get(v,  value);  [CE]  cannot  find  symbol  value  [FE]                      MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =(RealVector)this.entries.get(v,  value);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =(RealVector)this.entries.get(v,  value);	  RealVector    res    =(RealVector)this.entries.get(v,    v);    	non-compiled	[CE]  cannot  find  symbol  value	60	None	replace
193	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v!=        null)        {        checkVectorDimensions(v.getDimension());        }        if(v    ==    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	35	1	add
194	[BUG]  [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=        null)        {        checkVectorDimensions(v.getDimension());        }        if(v    ==    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	35	1	add
195	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v!=        null)        {        checkVectorDimensions(v.getDimension());        }        if(v    ==    null)    {    checkVectorDimensions(v.getDimension());    }    if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	35	1	add
196	[BUG]  [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=        null)        {        checkVectorDimensions(v.getDimension());        }        if(v    ==    null)    {    checkVectorDimensions(v.getDimension());    }    if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	35	1	add
197	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]        MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v!=        null)        {        checkVectorDimensions(v.getDimension());        }        if(v    ==    null)    {    checkVectorDimensions(v.getDimension());    }    if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	35	1	add
198	[BUG]  [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]        MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=        null)        {        checkVectorDimensions(v.getDimension());        }        if(v    ==    null)    {    checkVectorDimensions(v.getDimension());    }    if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	35	1	add
199	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]          MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v!=        null)        {        checkVectorDimensions(v.getDimension());        }        if(v    ==    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	35	1	add
200	[BUG]  [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]          MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=        null)        {        checkVectorDimensions(v.getDimension());        }        if(v    ==    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	35	1	add
201	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  [CE]  ';'  expected  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v  ==  null)  {  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }	  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    If(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  ';'  expected	37	None	replace
202	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  checkVectorDimensions(v.getDimension());  }	  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    If(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    	compilable	  [FE]  MathRuntimeException$6  	37	1	replace
203	[BUG]  [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  checkVectorDimensions(v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  checkVectorDimensions(v.getDimension());  }	  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    If(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    	compilable	  [FE]  MathRuntimeException$6  	37	1	replace
204	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(v.getValue(),  this);  [CE]  cannot  find  symbol  [FE]        MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(v.getValue(),  this);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(v.getValue(),  this);	  RealVector    res    =    new    RealVector(v.getValue());    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
205	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(v.getKey());  [CE]  cannot  find  symbol  [FE]          MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(v.getKey());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(v.getKey());	  RealVector    res    =    new    RealVector(v.getValue());    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
206	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(v.getValue(),  DEFAULT_ZERO_TOLERANCE);  [CE]  cannot  find  symbol  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(v.getValue(),  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(v.getValue(),  DEFAULT_ZERO_TOLERANCE);	  RealVector    res    =    new    RealVector(v.getValue());    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
207	[BUG]  [BUGGY]  int  dimension  =  v.getDimension()  +  1;  int  dimension  =  v.getDimension()  +  1;  [CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  int  dimension  =  v.getDimension()  +  1;  int  dimension  =  v.getDimension()  +  1;  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	int    dimension    =    v.getDimension()    +    1;    int  dimension  =  v.getDimension()  +  1;	  	non-compiled	[CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)	19	None	add
208	[BUG]  [BUGGY]  int  dimension  =  v.getDimension()  +  1;  Int  dimension  =  v.getDimension()  +  1;  [CE]  cannot  find  symbol  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  int  dimension  =  v.getDimension()  +  1;  Int  dimension  =  v.getDimension()  +  1;  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	int    dimension    =    v.getDimension()    +    1;    Int  dimension  =  v.getDimension()  +  1;	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
209	[BUG]  [BUGGY]  int  dimension  =  v.getDimension()  +  1;  Integer  dimension  =  v.getDimension()  +  1;  [CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)  [FE]        MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  int  dimension  =  v.getDimension()  +  1;  Integer  dimension  =  v.getDimension()  +  1;  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	int    dimension    =    v.getDimension()    +    1;    Integer  dimension  =  v.getDimension()  +  1;	  	non-compiled	[CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)	19	None	add
210	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]          MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  int  dimension  =  v.getDimension()  +  1;  int  dimensions  =  v.getDimension()  +  1;  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	int    dimension    =    v.getDimension()    +    1;    int  dimensions  =  v.getDimension()  +  1;	  	compilable	  [FE]  MathRuntimeException$6  	19	1	add
211	[BUG]  [BUGGY]  int  dimension  =  v.getDimension()  +  1;  int  dimensions  =  v.getDimension()  +  1;  [FE]  MathRuntimeException$6  [FE]          MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  int  dimension  =  v.getDimension()  +  1;  int  dimensions  =  v.getDimension()  +  1;  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	int    dimension    =    v.getDimension()    +    1;    int  dimensions  =  v.getDimension()  +  1;	  	compilable	  [FE]  MathRuntimeException$6  	19	1	add
212	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	compilable	  [FE]  AssertionError  	125	2	replace
213	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [FE]  AssertionError  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	compilable	  [FE]  AssertionError  	125	2	replace
214	[BUG]  [BUGGY]  ||(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  &&  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE))  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  illegal  start  of  expression  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  ||(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  &&  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE))  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	||(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  &&  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE))  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
215	[BUG]  [BUGGY]  ||(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  &&  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE))  {  return  new  OpenMapRealVector(this,  v.getDimension()  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  ||(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  &&  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE))  {  return  new  OpenMapRealVector(this,  v.getDimension()  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	||(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  &&  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE))  {  return  new  OpenMapRealVector(this,  v.getDimension()	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
216	[BUG]  [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(new  RealVector(v.getDimension()));  }  [CE]  RealVector  is  abstract;  cannot  be  instantiated  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(new  RealVector(v.getDimension()));  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v  ==  null)  {  checkVectorDimensions(new  RealVector(v.getDimension()));  }	  if(v!=    null)    {    checkVectorDimensions(new    RealVector(v.getDimension()));    }    	non-compiled	[CE]  RealVector  is  abstract;  cannot  be  instantiated	104	None	replace
217	[BUG]  [BUGGY]  Vector  res  =  new  RealVector(v.getDimension());  [CE]  cannot  find  symbol  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Vector  res  =  new  RealVector(v.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Vector  res  =  new  RealVector(v.getDimension());	  if(v!=    null)    {    checkVectorDimensions(new    RealVector(v.getDimension()));    }    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
218	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  this;  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  this;  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    this;    }    	compilable	  [FE]  MathRuntimeException$6  	153	1	replace
219	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  this;  }  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  this;  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  this;  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    this;    }    	compilable	  [FE]  MathRuntimeException$6  	153	1	replace
220	[BUG]  [BUGGY]  Annotation  <  RealVector>  entries  =  v.getAnnotation();  [CE]  cannot  find  symbol  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Annotation  <  RealVector>  entries  =  v.getAnnotation();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Annotation  <  RealVector>  entries  =  v.getAnnotation();	  if(v    ==    null)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
221	[BUG]  [BUGGY]  vices.add(new  OpenMapRealVector(v,  this));  [CE]  no  suitable  constructor  found  for  OpenMapRealVector(RealVector,OpenMapRealVector)  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  vices.add(new  OpenMapRealVector(v,  this));  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	vices.add(new  OpenMapRealVector(v,  this));	  if(v    ==    null)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  no  suitable  constructor  found  for  OpenMapRealVector(RealVector,OpenMapRealVector)	102	None	replace
222	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(  [CE]  ')'  expected  [FE]        MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(    	non-compiled	[CE]  ')'  expected	96	None	replace
223	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  double  dimension  =  v.getDimension()  *  DEFAULT_ZERO_TOLERANCE;  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	double  dimension  =  v.getDimension()  *  DEFAULT_ZERO_TOLERANCE;	  double    dimension    =    v.getDimension();    	compilable	  [FE]  MathRuntimeException$6  	22	1	replace
224	[BUG]  [BUGGY]  double  dimension  =  v.getDimension()  *  DEFAULT_ZERO_TOLERANCE;  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  double  dimension  =  v.getDimension()  *  DEFAULT_ZERO_TOLERANCE;  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	double  dimension  =  v.getDimension()  *  DEFAULT_ZERO_TOLERANCE;	  double    dimension    =    v.getDimension();    	compilable	  [FE]  MathRuntimeException$6  	22	1	replace
225	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  double  dimension  =  v.getDimension()  *  2;  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	double  dimension  =  v.getDimension()  *  2;	  double    dimension    =    v.getDimension();    	compilable	  [FE]  MathRuntimeException$6  	22	1	replace
226	[BUG]  [BUGGY]  double  dimension  =  v.getDimension()  *  2;  [FE]  MathRuntimeException$6  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  double  dimension  =  v.getDimension()  *  2;  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	double  dimension  =  v.getDimension()  *  2;	  double    dimension    =    v.getDimension();    	compilable	  [FE]  MathRuntimeException$6  	22	1	replace
227	[BUG]  [BUGGY]          int    dimension    =    v.getDimension();    int  Dimension  =  v.getDimension();  int  dimension  =  v.getDimension();  int  Dimension  =  v.getDimension();  [CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]          int    dimension    =    v.getDimension();    int  Dimension  =  v.getDimension();  int  dimension  =  v.getDimension();  int  Dimension  =  v.getDimension();  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	                int        dimension        =        v.getDimension();        int    Dimension    =    v.getDimension();    int  dimension  =  v.getDimension();  int  Dimension  =  v.getDimension();	  	non-compiled	[CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)	75	None	add
228	[BUG]  [BUGGY]          int    dimension    =    v.getDimension();    int  Dimension  =  v.getDimension();  Integer  dimension  =  v.getDimension();  int  Dimension  =  v.getDimension();  [CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]          int    dimension    =    v.getDimension();    int  Dimension  =  v.getDimension();  Integer  dimension  =  v.getDimension();  int  Dimension  =  v.getDimension();  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	                int        dimension        =        v.getDimension();        int    Dimension    =    v.getDimension();    Integer  dimension  =  v.getDimension();  int  Dimension  =  v.getDimension();	  	non-compiled	[CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)	75	None	add
229	[BUG]  [BUGGY]          int    dimension    =    v.getDimension();    int  Dimension  =  v.getDimension();  int  dimensions  =  v.getDimension();  int  Dimension  =  v.getDimension();  [CE]  variable  Dimension  is  already  defined  in  method  ebeMultiply(RealVector)  [FE]        MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]          int    dimension    =    v.getDimension();    int  Dimension  =  v.getDimension();  int  dimensions  =  v.getDimension();  int  Dimension  =  v.getDimension();  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	                int        dimension        =        v.getDimension();        int    Dimension    =    v.getDimension();    int  dimensions  =  v.getDimension();  int  Dimension  =  v.getDimension();	  	non-compiled	[CE]  variable  Dimension  is  already  defined  in  method  ebeMultiply(RealVector)	75	None	add
230	[BUG]  [BUGGY]          int    dimension    =    v.getDimension();    int  Dimension  =  v.getDimension();  int  Dimension  =  v.getDimension();  int  Dimension  =  v.getDimension();  [CE]  variable  Dimension  is  already  defined  in  method  ebeMultiply(RealVector)  [FE]          MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]          int    dimension    =    v.getDimension();    int  Dimension  =  v.getDimension();  int  Dimension  =  v.getDimension();  int  Dimension  =  v.getDimension();  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	                int        dimension        =        v.getDimension();        int    Dimension    =    v.getDimension();    int  Dimension  =  v.getDimension();  int  Dimension  =  v.getDimension();	  	non-compiled	[CE]  variable  Dimension  is  already  defined  in  method  ebeMultiply(RealVector)	75	None	add
231	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getMultiply());  [CE]  cannot  find  symbol  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getMultiply());  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  v.getMultiply());	  RealVector    res    =    new    RealVector(this,    v.multiply);    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
232	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  v.multiply,  v.multiply);  [CE]  cannot  find  symbol  multiply  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  v.multiply,  v.multiply);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  v.multiply,  v.multiply);	  RealVector    res    =    new    RealVector(this,    v.multiply);    	non-compiled	[CE]  cannot  find  symbol  multiply	99	None	replace
233	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  v.multiply  ||  v.multiply);  [CE]  cannot  find  symbol  multiply  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  v.multiply  ||  v.multiply);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  v.multiply  ||  v.multiply);	  RealVector    res    =    new    RealVector(this,    v.multiply);    	non-compiled	[CE]  cannot  find  symbol  multiply	99	None	replace
234	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkV  [CE]  ';'  expected  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkV  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkV	  	non-compiled	[CE]  ';'  expected	54	None	add
235	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkV  [CE]  ';'  expected  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkV  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkV	  	non-compiled	[CE]  ';'  expected	54	None	add
236	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVe  [CE]  ';'  expected  [FE]        MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVe  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVe	  	non-compiled	[CE]  ';'  expected	54	None	add
237	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVe  [CE]  ';'  expected  [FE]          MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVe  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVe	  	non-compiled	[CE]  ';'  expected	54	None	add
238	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  check  [CE]  ';'  expected  [FE]            MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  check  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  check	  	non-compiled	[CE]  ';'  expected	54	None	add
239	[BUG]  [BUGGY]  checkMultiply(v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  value);  [CE]  cannot  find  symbol  value  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkMultiply(v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  value);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkMultiply(v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  value);	  checkMultiply(v.getDimension(),    DEFAULT_ZERO_TOLERANCE);    	non-compiled	[CE]  cannot  find  symbol  value	44	None	replace
240	[BUG]  [BUGGY]  checkMultiply(v,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [CE]  cannot  find  symbol  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkMultiply(v,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkMultiply(v,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE);	  checkMultiply(v.getDimension(),    DEFAULT_ZERO_TOLERANCE);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
241	[BUG]  [BUGGY]  checkMultiply(v,  current.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [CE]  cannot  find  symbol  current  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkMultiply(v,  current.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkMultiply(v,  current.getDimension(),  DEFAULT_ZERO_TOLERANCE);	  checkMultiply(v.getDimension(),    DEFAULT_ZERO_TOLERANCE);    	non-compiled	[CE]  cannot  find  symbol  current	44	None	replace
242	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(v,  DEFAULT_ZERO_TOLERANCE,  value);  [CE]  cannot  find  symbol  value  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(v,  DEFAULT_ZERO_TOLERANCE,  value);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(v,  DEFAULT_ZERO_TOLERANCE,  value);	  RealVector    res    =    new    RealVector(v,    DEFAULT_ZERO_TOLERANCE);    	non-compiled	[CE]  cannot  find  symbol  value	43	None	replace
243	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(DEFAULT_ZERO_TOLERANCE,  v);  [CE]  RealVector  is  abstract;  cannot  be  instantiated  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(DEFAULT_ZERO_TOLERANCE,  v);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(DEFAULT_ZERO_TOLERANCE,  v);	  RealVector    res    =    new    RealVector(v,    DEFAULT_ZERO_TOLERANCE);    	non-compiled	[CE]  RealVector  is  abstract;  cannot  be  instantiated	43	None	replace
244	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(v,  DEFAULT_ZERO_TOLERANCE,  DEFAULT_ZERO_TOLERANCE);  [CE]  RealVector  is  abstract;  cannot  be  instantiated  [FE]                      MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(v,  DEFAULT_ZERO_TOLERANCE,  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(v,  DEFAULT_ZERO_TOLERANCE,  DEFAULT_ZERO_TOLERANCE);	  RealVector    res    =    new    RealVector(v,    DEFAULT_ZERO_TOLERANCE);    	non-compiled	[CE]  RealVector  is  abstract;  cannot  be  instantiated	43	None	replace
245	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkV  [CE]  ';'  expected  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkV  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkV	  	non-compiled	[CE]  ';'  expected	52	None	add
246	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVe  [CE]  ';'  expected  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVe  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVe	  	non-compiled	[CE]  ';'  expected	52	None	add
247	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  check  [CE]  ';'  expected  [FE]        MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  check  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  check	  	non-compiled	[CE]  ';'  expected	52	None	add
248	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkV  [CE]  ';'  expected  [FE]          MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkV  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkV	  	non-compiled	[CE]  ';'  expected	52	None	add
249	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorD  [CE]  ';'  expected  [FE]            MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorD  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorD	  	non-compiled	[CE]  ';'  expected	52	None	add
250	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(v.getEntry(),  this);  [CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(v.getEntry(),  this);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(v.getEntry(),  this);	  RealVector    res    =    new    RealVector(v.getEntry());    	non-compiled	[CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;	32	None	replace
251	[BUG]  [BUGGY]  RealVector  res  =(RealVector)this.entries.get(v,  this.size);  [CE]  cannot  find  symbol  size  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =(RealVector)this.entries.get(v,  this.size);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =(RealVector)this.entries.get(v,  this.size);	  RealVector    res    =(RealVector)this.entries.get(v,    this.value);    	non-compiled	[CE]  cannot  find  symbol  size	109	None	replace
252	[BUG]  [BUGGY]  RealVector  res  =(RealVector)this.entries.get(v,  this.value).epsilon;  [CE]  cannot  find  symbol  value  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =(RealVector)this.entries.get(v,  this.value).epsilon;  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =(RealVector)this.entries.get(v,  this.value).epsilon;	  RealVector    res    =(RealVector)this.entries.get(v,    this.value);    	non-compiled	[CE]  cannot  find  symbol  value	109	None	replace
253	[BUG]  [BUGGY]  new  OpenMapRealVector(this,  v,  v.getEntry());  [CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;  [FE]          MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  new  OpenMapRealVector(this,  v,  v.getEntry());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	new  OpenMapRealVector(this,  v,  v.getEntry());	  new    OpenMapRealVector(this,    v.getEntry());    	non-compiled	[CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;	31	None	replace
254	[BUG]  [BUGGY]  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE,  v.getEntry());  [CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE,  v.getEntry());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE,  v.getEntry());	  new    OpenMapRealVector(this,    v.getEntry());    	non-compiled	[CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;	31	None	replace
255	[BUG]  [BUGGY]  new  OpenMapRealVector(this,  v.getEntry(),  v);  [CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  new  OpenMapRealVector(this,  v.getEntry(),  v);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	new  OpenMapRealVector(this,  v.getEntry(),  v);	  new    OpenMapRealVector(this,    v.getEntry());    	non-compiled	[CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;	31	None	replace
256	[BUG]  [BUGGY]  new  OpenMapRealVector(this,  v,  this.getEntry());  [CE]  method  getEntry  in  class  OpenMapRealVector  cannot  be  applied  to  given  types;  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  new  OpenMapRealVector(this,  v,  this.getEntry());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	new  OpenMapRealVector(this,  v,  this.getEntry());	  new    OpenMapRealVector(this,    v.getEntry());    	non-compiled	[CE]  method  getEntry  in  class  OpenMapRealVector  cannot  be  applied  to  given  types;	31	None	replace
257	[BUG]  [BUGGY]  double  dimension  =  v.getDimension();  double  dimension  =  v.getDimension();  [CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  double  dimension  =  v.getDimension();  double  dimension  =  v.getDimension();  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	double    dimension    =    v.getDimension();    double  dimension  =  v.getDimension();	  	non-compiled	[CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)	21	None	add
258	[BUG]  [BUGGY]  double  dimension  =  v.getDimension();  Double  dimension  =  v.getDimension();  [CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  double  dimension  =  v.getDimension();  Double  dimension  =  v.getDimension();  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	double    dimension    =    v.getDimension();    Double  dimension  =  v.getDimension();	  	non-compiled	[CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)	21	None	add
259	[BUG]  [BUGGY]  double  dimension  =  v.getDimension();  int  dimension  =  v.getDimension();  [CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)  [FE]        MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  double  dimension  =  v.getDimension();  int  dimension  =  v.getDimension();  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	double    dimension    =    v.getDimension();    int  dimension  =  v.getDimension();	  	non-compiled	[CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)	21	None	add
260	[BUG]  [BUGGY]  double  dimension  =  v.getDimension();  long  dimension  =  v.getDimension();  [CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)  [FE]          MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  double  dimension  =  v.getDimension();  long  dimension  =  v.getDimension();  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	double    dimension    =    v.getDimension();    long  dimension  =  v.getDimension();	  	non-compiled	[CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)	21	None	add
261	[BUG]  [BUGGY]  CheckMultiply(v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [CE]  cannot  find  symbol  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  CheckMultiply(v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	CheckMultiply(v.getDimension(),  DEFAULT_ZERO_TOLERANCE);	  checkMultiply(v.getDimension(),    value);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
262	[BUG]  [BUGGY]  checkMultiply(v.getDimension(),  defult_ZERO_TOLERANCE);  [CE]  cannot  find  symbol  defult_ZERO_TOLERANCE  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkMultiply(v.getDimension(),  defult_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkMultiply(v.getDimension(),  defult_ZERO_TOLERANCE);	  checkMultiply(v.getDimension(),    value);    	non-compiled	[CE]  cannot  find  symbol  defult_ZERO_TOLERANCE	46	None	replace
263	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Double  dimension  =  v.getDimension()  *  DEFAULT_ZERO_TOLERANCE;  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	Double  dimension  =  v.getDimension()  *  DEFAULT_ZERO_TOLERANCE;	  int    dimension    =    v.getDimension()    *    DEFAULT_ZERO_TOLERANCE;    	compilable	  [FE]  MathRuntimeException$6  	23	1	replace
264	[BUG]  [BUGGY]  Double  dimension  =  v.getDimension()  *  DEFAULT_ZERO_TOLERANCE;  [FE]  MathRuntimeException$6  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Double  dimension  =  v.getDimension()  *  DEFAULT_ZERO_TOLERANCE;  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Double  dimension  =  v.getDimension()  *  DEFAULT_ZERO_TOLERANCE;	  int    dimension    =    v.getDimension()    *    DEFAULT_ZERO_TOLERANCE;    	compilable	  [FE]  MathRuntimeException$6  	23	1	replace
265	[BUG]  [BUGGY]  long  dimension  =  v.getDimension()  *  DEFAULT_ZERO_TOLERANCE;  [CE]  possible  loss  of  precision  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  long  dimension  =  v.getDimension()  *  DEFAULT_ZERO_TOLERANCE;  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	long  dimension  =  v.getDimension()  *  DEFAULT_ZERO_TOLERANCE;	  int    dimension    =    v.getDimension()    *    DEFAULT_ZERO_TOLERANCE;    	non-compiled	[CE]  possible  loss  of  precision	23	None	replace
266	[BUG]  [BUGGY]  Iterator  <  RealVector>  iter  =  res.entries().iterator();  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]        MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  RealVector>  iter  =  res.entries().iterator();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Iterator  <  RealVector>  iter  =  res.entries().iterator();	          Iterator    <    RealVector>    iter    =    v.entries().iterator();    	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	108	None	replace
267	[BUG]  [BUGGY]  Iterator  <  RealVector>  iter  =  v.entrySet().iterator();  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]          MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  RealVector>  iter  =  v.entrySet().iterator();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Iterator  <  RealVector>  iter  =  v.entrySet().iterator();	          Iterator    <    RealVector>    iter    =    v.entries().iterator();    	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	108	None	replace
268	[BUG]  [BUGGY]  checkDimensions(v,  res.getDimension());  [CE]  cannot  find  symbol  res  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkDimensions(v,  res.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkDimensions(v,  res.getDimension());	  checkDimensions(v,    current.getDimension());    	non-compiled	[CE]  cannot  find  symbol  res	100	None	replace
269	[BUG]  [BUGGY]  checkDimensions(v,  this.epsilon.getDimension());  [CE]  double  cannot  be  dereferenced  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkDimensions(v,  this.epsilon.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkDimensions(v,  this.epsilon.getDimension());	  checkDimensions(v,    current.getDimension());    	non-compiled	[CE]  double  cannot  be  dereferenced	100	None	replace
270	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getSize(),  DEFAULT_ZERO_TOLERANCE);  [CE]  cannot  find  symbol  [FE]                      MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getSize(),  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getSize(),  DEFAULT_ZERO_TOLERANCE);	  RealVector    res    =    new    RealVector(this,    v.getDimension(),    v.getSize());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
271	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getSize(),  expectedSize);  [CE]  cannot  find  symbol  [FE]                        MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getSize(),  expectedSize);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getSize(),  expectedSize);	  RealVector    res    =    new    RealVector(this,    v.getDimension(),    v.getSize());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
272	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getSize(),  dimension);  [CE]  cannot  find  symbol  [FE]                          MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getSize(),  dimension);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getSize(),  dimension);	  RealVector    res    =    new    RealVector(this,    v.getDimension(),    v.getSize());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
273	[BUG]  [BUGGY]  RealVector  res  =(RealVector)this.entries.get(v,  DEFAULT_ZERO_TOLERANCE,  value);  [CE]  cannot  find  symbol  value  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =(RealVector)this.entries.get(v,  DEFAULT_ZERO_TOLERANCE,  value);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =(RealVector)this.entries.get(v,  DEFAULT_ZERO_TOLERANCE,  value);	  RealVector    res    =(RealVector)this.entries.get(v,    DEFAULT_ZERO_TOLERANCE);    	non-compiled	[CE]  cannot  find  symbol  value	57	None	replace
274	[BUG]  [BUGGY]  RealVector  res  =(RealVector)this.entries.get(v,  DEFAULT_ZERO_TOLERANCE,  DEFAULT_ZERO_TOLERANCE);  [CE]  method  get  in  class  OpenIntToDoubleHashMap  cannot  be  applied  to  given  types;  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =(RealVector)this.entries.get(v,  DEFAULT_ZERO_TOLERANCE,  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =(RealVector)this.entries.get(v,  DEFAULT_ZERO_TOLERANCE,  DEFAULT_ZERO_TOLERANCE);	  RealVector    res    =(RealVector)this.entries.get(v,    DEFAULT_ZERO_TOLERANCE);    	non-compiled	[CE]  method  get  in  class  OpenIntToDoubleHashMap  cannot  be  applied  to  given  types;	57	None	replace
275	[BUG]  [BUGGY]  RealVector  res  =(RealVector)this.entries.get(v,  DEFAULT_ZERO_TOLERANCE,  v);  [CE]  method  get  in  class  OpenIntToDoubleHashMap  cannot  be  applied  to  given  types;  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =(RealVector)this.entries.get(v,  DEFAULT_ZERO_TOLERANCE,  v);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =(RealVector)this.entries.get(v,  DEFAULT_ZERO_TOLERANCE,  v);	  RealVector    res    =(RealVector)this.entries.get(v,    DEFAULT_ZERO_TOLERANCE);    	non-compiled	[CE]  method  get  in  class  OpenIntToDoubleHashMap  cannot  be  applied  to  given  types;	57	None	replace
276	[BUG]  [BUGGY]  RealVector  res  =(RealVector)this.entries.get(v,  DEFAULT_ZERO_TOLERANCE,  values);  [CE]  cannot  find  symbol  values  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =(RealVector)this.entries.get(v,  DEFAULT_ZERO_TOLERANCE,  values);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =(RealVector)this.entries.get(v,  DEFAULT_ZERO_TOLERANCE,  values);	  RealVector    res    =(RealVector)this.entries.get(v,    DEFAULT_ZERO_TOLERANCE);    	non-compiled	[CE]  cannot  find  symbol  values	57	None	replace
277	[BUG]  [BUGGY]  Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.keySet().iterator();  [CE]  >  expected  [FE]        MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.keySet().iterator();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.keySet().iterator();	  Iterator    <    Map.Entry    <    String,    RealVector>    entry    =    v.entrySet().iterator();    	non-compiled	[CE]  >  expected	119	None	replace
278	[BUG]  [BUGGY]  Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.getValue().iterator();  [CE]  >  expected  [FE]          MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.getValue().iterator();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.getValue().iterator();	  Iterator    <    Map.Entry    <    String,    RealVector>    entry    =    v.entrySet().iterator();    	non-compiled	[CE]  >  expected	119	None	replace
279	[BUG]  [BUGGY]  Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.entries().iterator();  [CE]  >  expected  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.entries().iterator();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.entries().iterator();	  Iterator    <    Map.Entry    <    String,    RealVector>    entry    =    v.entrySet().iterator();    	non-compiled	[CE]  >  expected	119	None	replace
280	[BUG]  [BUGGY]  new  OpenMapRealVector().ebeMultiply(this,  v);  [CE]  no  suitable  method  found  for  ebeMultiply(OpenMapRealVector,RealVector)  [FE]    StackOverflowError    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  new  OpenMapRealVector().ebeMultiply(this,  v);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	new  OpenMapRealVector().ebeMultiply(this,  v);	  new    OpenMapRealVector().ebeMultiply(v);    	non-compiled	[CE]  no  suitable  method  found  for  ebeMultiply(OpenMapRealVector,RealVector)	121	None	replace
281	[BUG]  [BUGGY]  new  OpenMapRealVector().ebeMultiply(v,  this);  [CE]  no  suitable  method  found  for  ebeMultiply(RealVector,OpenMapRealVector)  [FE]      StackOverflowError    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  new  OpenMapRealVector().ebeMultiply(v,  this);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	new  OpenMapRealVector().ebeMultiply(v,  this);	  new    OpenMapRealVector().ebeMultiply(v);    	non-compiled	[CE]  no  suitable  method  found  for  ebeMultiply(RealVector,OpenMapRealVector)	121	None	replace
282	[BUG]  [BUGGY]  new  OpenMapRealVector().ebeMultiply(new  RealVector(v));  [CE]  RealVector  is  abstract;  cannot  be  instantiated  [FE]        StackOverflowError    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  new  OpenMapRealVector().ebeMultiply(new  RealVector(v));  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	new  OpenMapRealVector().ebeMultiply(new  RealVector(v));	  new    OpenMapRealVector().ebeMultiply(v);    	non-compiled	[CE]  RealVector  is  abstract;  cannot  be  instantiated	121	None	replace
283	[BUG]  [BUGGY]  if(v.isMultiply())  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [CE]  ')'  expected  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.isMultiply())  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.isMultiply())  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE    	non-compiled	[CE]  ')'  expected	139	None	replace
284	[BUG]  [BUGGY]  if(v.getEntry()!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [CE]  ')'  expected  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getEntry()!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getEntry()!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE    	non-compiled	[CE]  ')'  expected	139	None	replace
285	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [CE]  ')'  expected  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE    	non-compiled	[CE]  ')'  expected	139	None	replace
286	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  [CE]  ';'  expected  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(this);    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);	  	non-compiled	[CE]  ';'  expected	142	None	add
287	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(  [CE]  ')'  expected  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(this);    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(	  	non-compiled	[CE]  ')'  expected	142	None	add
288	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealV  [CE]  '('  or  '['  expected  [FE]        MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealV  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(this);    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealV	  	non-compiled	[CE]  '('  or  '['  expected	142	None	add
289	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector  [CE]  '('  or  '['  expected  [FE]          MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(this);    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector	  	non-compiled	[CE]  '('  or  '['  expected	142	None	add
290	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]            MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(this);    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	142	1	add
291	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]            MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(this);    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	142	1	add
292	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Integer  dimension  =  v.getDimension();  int  dimensions  =  v.getDimension();  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	Integer  dimension  =  v.getDimension();  int  dimensions  =  v.getDimension();	          int    dimension    =    v.getDimension();    int    dimensions    =    v.getDimension();    	compilable	  [FE]  MathRuntimeException$6  	74	1	replace
293	[BUG]  [BUGGY]  Integer  dimension  =  v.getDimension();  int  dimensions  =  v.getDimension();  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Integer  dimension  =  v.getDimension();  int  dimensions  =  v.getDimension();  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Integer  dimension  =  v.getDimension();  int  dimensions  =  v.getDimension();	          int    dimension    =    v.getDimension();    int    dimensions    =    v.getDimension();    	compilable	  [FE]  MathRuntimeException$6  	74	1	replace
294	[BUG]  [BUGGY]  null  dimension  =  v.getDimension();  int  dimensions  =  v.getDimension();  [CE]  not  a  statement  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  null  dimension  =  v.getDimension();  int  dimensions  =  v.getDimension();  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	null  dimension  =  v.getDimension();  int  dimensions  =  v.getDimension();	          int    dimension    =    v.getDimension();    int    dimensions    =    v.getDimension();    	non-compiled	[CE]  not  a  statement	74	None	replace
295	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  new  OpenMapRealVector().ebeMultiply(v);  new  OpenMapRealVector().ebeMultiply(v);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	new    OpenMapRealVector().ebeMultiply(v);    new  OpenMapRealVector().ebeMultiply(v);	  	compilable	  [FE]  StackOverflowError  	120	2	add
296	[BUG]  [BUGGY]  new  OpenMapRealVector().ebeMultiply(v);  new  OpenMapRealVector().ebeMultiply(v);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  new  OpenMapRealVector().ebeMultiply(v);  new  OpenMapRealVector().ebeMultiply(v);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	new    OpenMapRealVector().ebeMultiply(v);    new  OpenMapRealVector().ebeMultiply(v);	  	compilable	  [FE]  StackOverflowError  	120	2	add
297	[BUG]  [BUGGY]  new  OpenMapRealVector().ebeMultiply(v);  createOpenMapRealVector().ebeMultiply(v);  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  new  OpenMapRealVector().ebeMultiply(v);  createOpenMapRealVector().ebeMultiply(v);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	new    OpenMapRealVector().ebeMultiply(v);    createOpenMapRealVector().ebeMultiply(v);	  	non-compiled	[CE]  cannot  find  symbol	120	None	add
298	[BUG]  [BUGGY]  new  OpenMapRealVector().ebeMultiply(v);  openMapRealVector().ebeMultiply(v);  [CE]  cannot  find  symbol  [FE]        StackOverflowError    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  new  OpenMapRealVector().ebeMultiply(v);  openMapRealVector().ebeMultiply(v);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	new    OpenMapRealVector().ebeMultiply(v);    openMapRealVector().ebeMultiply(v);	  	non-compiled	[CE]  cannot  find  symbol	120	None	add
299	[BUG]  [BUGGY]  if(v.isMultiply())  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [CE]  ')'  expected  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.isMultiply())  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.isMultiply())  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO    	non-compiled	[CE]  ')'  expected	117	None	replace
300	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO)  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [CE]  ')'  expected  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO)  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  DEFAULT_ZERO)  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO    	non-compiled	[CE]  ')'  expected	117	None	replace
301	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [CE]  ')'  expected  [FE]                      MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO    	non-compiled	[CE]  ')'  expected	117	None	replace
302	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [CE]  ')'  expected  [FE]                        MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO    	non-compiled	[CE]  ')'  expected	117	None	replace
303	[BUG]  [BUGGY]  RealVector  res  =  v.getRealVector();  [CE]  cannot  find  symbol  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  v.getRealVector();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  v.getRealVector();	  RealVector    res    =    v.getDimension();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
304	[BUG]  [BUGGY]  RealVector  res  =  v.getRawDimension();  [CE]  cannot  find  symbol  [FE]                      MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  v.getRawDimension();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  v.getRawDimension();	  RealVector    res    =    v.getDimension();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
305	[BUG]  [BUGGY]  RealVector  res  =  v.getDimension()  +  1;  [CE]  incompatible  types  [FE]                        MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  v.getDimension()  +  1;  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  v.getDimension()  +  1;	  RealVector    res    =    v.getDimension();    	non-compiled	[CE]  incompatible  types	25	None	replace
306	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	8	1	add
307	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	8	1	add
308	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  If(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [CE]  ';'  expected  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  If(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    If(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  	non-compiled	[CE]  ';'  expected	8	None	add
309	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]        MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	8	1	add
310	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]        MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	8	1	add
311	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  CheckVectorDimensions(v.getDimension());  }  [CE]  cannot  find  symbol  [FE]          MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  CheckVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  CheckVectorDimensions(v.getDimension());  }	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
312	[BUG]  [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(null,  v.getDimension());  }  [CE]  no  suitable  method  found  for  checkVectorDimensions(<null>,int)  [FE]          MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(null,  v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v  ==  null)  {  checkVectorDimensions(null,  v.getDimension());  }	  if(v    ==    null)    {    checkVectorDimensions(null.getDimension());    }    	non-compiled	[CE]  no  suitable  method  found  for  checkVectorDimensions(<null>,int)	103	None	replace
313	[BUG]  [BUGGY]  if(v.isMultiply())  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  ';'  expected  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.isMultiply())  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.isMultiply())  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v.isMultiply())    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  ';'  expected	126	None	replace
314	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  double  dimension  =  v.getDimension();  double  Dimension  =  v.getDimension();  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	double  dimension  =  v.getDimension();  double  Dimension  =  v.getDimension();	          int    dimension    =    v.getDimension();    int    Dimension    =    v.getDimension();    	compilable	  [FE]  MathRuntimeException$6  	76	1	replace
315	[BUG]  [BUGGY]  double  dimension  =  v.getDimension();  double  Dimension  =  v.getDimension();  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  double  dimension  =  v.getDimension();  double  Dimension  =  v.getDimension();  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	double  dimension  =  v.getDimension();  double  Dimension  =  v.getDimension();	          int    dimension    =    v.getDimension();    int    Dimension    =    v.getDimension();    	compilable	  [FE]  MathRuntimeException$6  	76	1	replace
316	[BUG]  [BUGGY]  Iterator  <  RealVector>  iter  =  v.entries.iterator();  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]        MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  RealVector>  iter  =  v.entries.iterator();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Iterator  <  RealVector>  iter  =  v.entries.iterator();	  Iterator    <    RealVector>    iter    =    v.getEntrySet().iterator();    	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	97	None	replace
317	[BUG]  [BUGGY]  Iterator  <  Map.Entry  <  K,  V  >>  v  =  map.entrySet().iterator();  [CE]  package  Map  does  not  exist  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  Map.Entry  <  K,  V  >>  v  =  map.entrySet().iterator();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Iterator  <  Map.Entry  <  K,  V  >>  v  =  map.entrySet().iterator();	  Iterator    <    Map.Entry    <    Map.Entry    <    K,    V    >=    v    =    map.entrySet().iterator();    	non-compiled	[CE]  package  Map  does  not  exist	122	None	replace
318	[BUG]  [BUGGY]  Iterator  <  Map.Entry  <  K,  V  >=  v  =  map.entrySet().iterator();  [CE]  >  expected  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  Map.Entry  <  K,  V  >=  v  =  map.entrySet().iterator();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Iterator  <  Map.Entry  <  K,  V  >=  v  =  map.entrySet().iterator();	  Iterator    <    Map.Entry    <    Map.Entry    <    K,    V    >=    v    =    map.entrySet().iterator();    	non-compiled	[CE]  >  expected	122	None	replace
319	[BUG]  [BUGGY]  Iterator  <  Map.Entry  <  K,  V  >>  v  =  map.keySet().iterator();  [CE]  package  Map  does  not  exist  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  Map.Entry  <  K,  V  >>  v  =  map.keySet().iterator();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Iterator  <  Map.Entry  <  K,  V  >>  v  =  map.keySet().iterator();	  Iterator    <    Map.Entry    <    Map.Entry    <    K,    V    >=    v    =    map.entrySet().iterator();    	non-compiled	[CE]  package  Map  does  not  exist	122	None	replace
320	[BUG]  [BUGGY]  Iterator  <  Map.Entry  <  K,  V  >>  v  =  this.map.entrySet().iterator();  [CE]  package  Map  does  not  exist  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  Map.Entry  <  K,  V  >>  v  =  this.map.entrySet().iterator();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Iterator  <  Map.Entry  <  K,  V  >>  v  =  this.map.entrySet().iterator();	  Iterator    <    Map.Entry    <    Map.Entry    <    K,    V    >=    v    =    map.entrySet().iterator();    	non-compiled	[CE]  package  Map  does  not  exist	122	None	replace
321	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  MathRuntimeException$6  	154	1	add
322	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  MathRuntimeException$6  	154	1	add
323	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  AssertionError  	154	2	add
324	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [FE]  AssertionError  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  AssertionError  	154	2	add
325	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]        MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  MathRuntimeException$6  	154	1	add
326	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [FE]  MathRuntimeException$6  [FE]        MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  MathRuntimeException$6  	154	1	add
327	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  value);  [CE]  cannot  find  symbol  value  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  value);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  value);	  RealVector    res    =    new    RealVector(this,    v.getDimension(),    DEFAULT_ZERO_TOLERANCE);    	non-compiled	[CE]  cannot  find  symbol  value	4	None	replace
328	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  DEFAULT_ZERO_TOLERANCE);  [CE]  RealVector  is  abstract;  cannot  be  instantiated  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  DEFAULT_ZERO_TOLERANCE);	  RealVector    res    =    new    RealVector(this,    v.getDimension(),    DEFAULT_ZERO_TOLERANCE);    	non-compiled	[CE]  RealVector  is  abstract;  cannot  be  instantiated	4	None	replace
329	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  MathRuntimeException$6  	146	1	add
330	[BUG]  [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  MathRuntimeException$6  	146	1	add
331	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  MathRuntimeException$6  	146	1	add
332	[BUG]  [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [FE]  MathRuntimeException$6  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  MathRuntimeException$6  	146	1	add
333	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  AssertionError  	146	2	add
334	[BUG]  [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [FE]  AssertionError  [FE]        MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  AssertionError  	146	2	add
335	[BUG]  [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(  [CE]  ')'  expected  [FE]          MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(	  	non-compiled	[CE]  ')'  expected	146	None	add
336	[BUG]  [BUGGY]  Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  this.entries.iterator();  [CE]  >  expected  [FE]        MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  this.entries.iterator();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  this.entries.iterator();	          Iterator    <    Map.Entry    <    String,    RealVector>    entry    =    entries.iterator();    	non-compiled	[CE]  >  expected	151	None	replace
337	[BUG]  [BUGGY]  Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.entries.iterator();  [CE]  >  expected  [FE]          MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.entries.iterator();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.entries.iterator();	          Iterator    <    Map.Entry    <    String,    RealVector>    entry    =    entries.iterator();    	non-compiled	[CE]  >  expected	151	None	replace
338	[BUG]  [BUGGY]  Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.iterator();  [CE]  >  expected  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.iterator();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.iterator();	          Iterator    <    Map.Entry    <    String,    RealVector>    entry    =    entries.iterator();    	non-compiled	[CE]  >  expected	151	None	replace
339	[BUG]  [BUGGY]  CheckDimensions(v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [CE]  cannot  find  symbol  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  CheckDimensions(v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	CheckDimensions(v.getDimension(),  DEFAULT_ZERO_TOLERANCE);	  checkDimensions(v.getDimension(),    value);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
340	[BUG]  [BUGGY]  checkDimensions(v.getDimension(),  defult_ZERO_TOLERANCE);  [CE]  cannot  find  symbol  defult_ZERO_TOLERANCE  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkDimensions(v.getDimension(),  defult_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkDimensions(v.getDimension(),  defult_ZERO_TOLERANCE);	  checkDimensions(v.getDimension(),    value);    	non-compiled	[CE]  cannot  find  symbol  defult_ZERO_TOLERANCE	82	None	replace
341	[BUG]  [BUGGY]  checkDimensions(v.getDimension(),  defULT_ZERO_TOLERANCE);  [CE]  cannot  find  symbol  defULT_ZERO_TOLERANCE  [FE]                      MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkDimensions(v.getDimension(),  defULT_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkDimensions(v.getDimension(),  defULT_ZERO_TOLERANCE);	  checkDimensions(v.getDimension(),    value);    	non-compiled	[CE]  cannot  find  symbol  defULT_ZERO_TOLERANCE	82	None	replace
342	[BUG]  [BUGGY]  checkDimensions(v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  value);  [CE]  cannot  find  symbol  value  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkDimensions(v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  value);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkDimensions(v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  value);	  checkDimensions(v.getDimension(),    DEFAULT_ZERO_TOLERANCE);    	non-compiled	[CE]  cannot  find  symbol  value	79	None	replace
343	[BUG]  [BUGGY]  checkDimensions(v,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [CE]  cannot  find  symbol  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkDimensions(v,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkDimensions(v,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE);	  checkDimensions(v.getDimension(),    DEFAULT_ZERO_TOLERANCE);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
344	[BUG]  [BUGGY]  checkDimensions(v,  current.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [CE]  cannot  find  symbol  current  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkDimensions(v,  current.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkDimensions(v,  current.getDimension(),  DEFAULT_ZERO_TOLERANCE);	  checkDimensions(v.getDimension(),    DEFAULT_ZERO_TOLERANCE);    	non-compiled	[CE]  cannot  find  symbol  current	79	None	replace
345	[BUG]  [BUGGY]  CheckVectorDimensions(v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [CE]  cannot  find  symbol  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  CheckVectorDimensions(v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	CheckVectorDimensions(v.getDimension(),  DEFAULT_ZERO_TOLERANCE);	  CheckVectorDimensions(v.getDimension());    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
346	[BUG]  [BUGGY]  CheckVectorDimensions(v,  current.getDimension());  [CE]  cannot  find  symbol  current  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  CheckVectorDimensions(v,  current.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	CheckVectorDimensions(v,  current.getDimension());	  CheckVectorDimensions(v.getDimension());    	non-compiled	[CE]  cannot  find  symbol  current	48	None	replace
347	[BUG]  [BUGGY]  CheckVectorDimensions(v,  this.getDimension());  [CE]  cannot  find  symbol  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  CheckVectorDimensions(v,  this.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	CheckVectorDimensions(v,  this.getDimension());	  CheckVectorDimensions(v.getDimension());    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
348	[BUG]  [BUGGY]  CheckVectorDimensions(v,  getDimension());  [CE]  cannot  find  symbol  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  CheckVectorDimensions(v,  getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	CheckVectorDimensions(v,  getDimension());	  CheckVectorDimensions(v.getDimension());    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
349	[BUG]  [BUGGY]  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  [CE]  illegal  start  of  expression  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
350	[BUG]  [BUGGY]  ((  OpenMapRealVector)v).getMultiply();  [CE]  cannot  find  symbol  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  ((  OpenMapRealVector)v).getMultiply();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	((  OpenMapRealVector)v).getMultiply();	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
351	[BUG]  [BUGGY]  ((  RealVector)v).getMultiply();  [CE]  cannot  find  symbol  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  ((  RealVector)v).getMultiply();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	((  RealVector)v).getMultiply();	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
352	[BUG]  [BUGGY]  epsilon.multiply(v);  [CE]  double  cannot  be  dereferenced  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  epsilon.multiply(v);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	epsilon.multiply(v);	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(    	non-compiled	[CE]  double  cannot  be  dereferenced	89	None	replace
353	[BUG]  [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkV  [CE]  ';'  expected  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkV  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=        null)        {        checkVectorDimensions(v.getDimension());        }        if(v    ==    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkV	  	non-compiled	[CE]  ';'  expected	35	None	add
354	[BUG]  [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorD  [CE]  ';'  expected  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorD  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=        null)        {        checkVectorDimensions(v.getDimension());        }        if(v    ==    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorD	  	non-compiled	[CE]  ';'  expected	35	None	add
355	[BUG]  [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkV  [CE]  ';'  expected  [FE]        MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkV  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=        null)        {        checkVectorDimensions(v.getDimension());        }        if(v    ==    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkV	  	non-compiled	[CE]  ';'  expected	35	None	add
356	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_NUMBER_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_NUMBER_TOLERANCE);  }  [CE]  ';'  expected  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_NUMBER_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_NUMBER_TOLERANCE);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_NUMBER_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_NUMBER_TOLERANCE);  }	  if(v!=    null)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  ';'  expected	115	None	replace
357	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  illegal  start  of  expression  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=  null)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v    ==    null)    {    if(v.getDimension()    >    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
358	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.  [CE]  ')'  expected  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.	  if(v!=    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  ')'  expected	113	None	replace
359	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getEntry(),  DEFAULT_ZERO_TOLERANCE);  [CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;  [FE]                      MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getEntry(),  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  v.getEntry(),  DEFAULT_ZERO_TOLERANCE);	  RealVector    res    =    new    RealVector(this,    v.getEntry());    	non-compiled	[CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;	85	None	replace
360	[BUG]  [BUGGY]  res.setEntry(v.getValue(),  v);  [CE]  cannot  find  symbol  [FE]        MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  res.setEntry(v.getValue(),  v);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	res.setEntry(v.getValue(),  v);	          res.setEntry(v.getValue());    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
361	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]        MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    If(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	107	None	replace
362	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]          MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    If(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	107	None	replace
363	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [CE]  ';'  expected  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    If(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	107	None	replace
364	[BUG]  [BUGGY]  checkDimensions(v,  realVector.getDimension());  [CE]  cannot  find  symbol  realVector  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkDimensions(v,  realVector.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkDimensions(v,  realVector.getDimension());	  checkDimensions(v,    current.getDimension());    	non-compiled	[CE]  cannot  find  symbol  realVector	100	None	replace
365	[BUG]  [BUGGY]  if(v.getEntry()!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [CE]  ';'  expected  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getEntry()!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getEntry()!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(    	non-compiled	[CE]  ';'  expected	68	None	replace
366	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(  [CE]  ')'  expected  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(    	non-compiled	[CE]  ')'  expected	68	None	replace
367	[BUG]  [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  [CE]  ';'  expected  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(this);    	non-compiled	[CE]  ';'  expected	12	None	replace
368	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  DEFAULT_ZERO_TOLERANCE,  v.getDimension(),  v.getEntry());  [CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  DEFAULT_ZERO_TOLERANCE,  v.getDimension(),  v.getEntry());  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  DEFAULT_ZERO_TOLERANCE,  v.getDimension(),  v.getEntry());	  RealVector    res    =    new    RealVector(this,    v.getDimension(),    v.getEntry());    	non-compiled	[CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;	6	None	replace
369	[BUG]  [BUGGY]  RealVector  res  =  new  OpenMapRealVector(  [CE]  ')'  expected  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  OpenMapRealVector(  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  OpenMapRealVector(	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(    	non-compiled	[CE]  ')'  expected	13	None	replace
370	[BUG]  [BUGGY]  res.setEntry(null,  v.getValue());  [CE]  cannot  find  symbol  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  res.setEntry(null,  v.getValue());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	res.setEntry(null,  v.getValue());	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
371	[BUG]  [BUGGY]  ((  RealVector)v).multiply(this);  [CE]  cannot  find  symbol  [FE]                      MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  ((  RealVector)v).multiply(this);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	((  RealVector)v).multiply(this);	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
372	[BUG]  [BUGGY]  if(v.isMultiply()  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  cannot  find  symbol  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.isMultiply()  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.isMultiply()  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v.isMultiply())    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
373	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.isMultiply())  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.isMultiply())  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=  null)  {  if(v.isMultiply())  {  return  new  OpenMapRealVector(this);  }	  if(v.isMultiply())    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	134	None	replace
374	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  true);  [CE]  RealVector  is  abstract;  cannot  be  instantiated  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  true);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  true);	  RealVector    res    =    new    RealVector(this,    v.getDimension(),    DEFAULT_ZERO_TOLERANCE);    	non-compiled	[CE]  RealVector  is  abstract;  cannot  be  instantiated	4	None	replace
375	[BUG]  [BUGGY]  checkDimensions(v.getDimension(),  DEFULT_ZERO_TOLERANCE);  [CE]  cannot  find  symbol  DEFULT_ZERO_TOLERANCE  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkDimensions(v.getDimension(),  DEFULT_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkDimensions(v.getDimension(),  DEFULT_ZERO_TOLERANCE);	  checkDimensions(v.getDimension(),    value);    	non-compiled	[CE]  cannot  find  symbol  DEFULT_ZERO_TOLERANCE	82	None	replace
376	[BUG]  [BUGGY]  RealVector  res  =(RealVector)this.values.get(v,  this.entries);  [CE]  cannot  find  symbol  values  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =(RealVector)this.values.get(v,  this.entries);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =(RealVector)this.values.get(v,  this.entries);	  RealVector    res    =(RealVector)this.entries.get(v,    this.value);    	non-compiled	[CE]  cannot  find  symbol  values	109	None	replace
377	[BUG]  [BUGGY]  RealVector  res  =(RealVector)this.entries.get(v,  this.key);  [CE]  cannot  find  symbol  key  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =(RealVector)this.entries.get(v,  this.key);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =(RealVector)this.entries.get(v,  this.key);	  RealVector    res    =(RealVector)this.entries.get(v,    this.value);    	non-compiled	[CE]  cannot  find  symbol  key	109	None	replace
378	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension  [CE]  ')'  expected  [FE]                      MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension	  if(v.getDimension()    <    =    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  ')'  expected	127	None	replace
379	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  If(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  If(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    If(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	non-compiled	[CE]  ';'  expected	62	None	add
380	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	compilable	  [FE]  AssertionError  	131	2	replace
381	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [FE]  AssertionError  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	compilable	  [FE]  AssertionError  	131	2	replace
382	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	compilable	  [FE]  MathRuntimeException$6  	131	1	replace
383	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [FE]  MathRuntimeException$6  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	compilable	  [FE]  MathRuntimeException$6  	131	1	replace
384	[BUG]  [BUGGY]  Annotation  <  RealVector>  res  =  new  RealVector(v,  current.getDimension());  [CE]  cannot  find  symbol  [FE]          MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Annotation  <  RealVector>  res  =  new  RealVector(v,  current.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Annotation  <  RealVector>  res  =  new  RealVector(v,  current.getDimension());	  Annotation    <    RealVector>    res    =    new    RealVector(v.getDimension());    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
385	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.isMultiply())  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  ';'  expected  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.isMultiply())  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=  null)  {  if(v.isMultiply())  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v.isMultiply())    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  ';'  expected	126	None	replace
386	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DE  [CE]  ')'  expected  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DE  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DE	  if(v    ==    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  ')'  expected	95	None	replace
387	[BUG]  [BUGGY]  checkMultiply(v,  this.sparseIterator.getDimension());  [CE]  cannot  find  symbol  sparseIterator  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkMultiply(v,  this.sparseIterator.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkMultiply(v,  this.sparseIterator.getDimension());	  checkMultiply(v,    current.getDimension());    	non-compiled	[CE]  cannot  find  symbol  sparseIterator	141	None	replace
388	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorD  [CE]  ';'  expected  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorD  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorD	  	non-compiled	[CE]  ';'  expected	52	None	add
389	[BUG]  [BUGGY]  Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  new  OpenMapRealVectorIterator  <  Map.Entry  <  String,  RealVector>();  [CE]  >  expected  [FE]        MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  new  OpenMapRealVectorIterator  <  Map.Entry  <  String,  RealVector>();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  new  OpenMapRealVectorIterator  <  Map.Entry  <  String,  RealVector>();	          Iterator    <    Map.Entry    <    String,    RealVector>    entry    =    entries.iterator();    	non-compiled	[CE]  >  expected	151	None	replace
390	[BUG]  [BUGGY]  Iterator  <  Map.Entry  <  Map.Entry  <  K,  V  >>  v  =  map.entrySet().iterator();  [CE]  >  expected  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  Map.Entry  <  Map.Entry  <  K,  V  >>  v  =  map.entrySet().iterator();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Iterator  <  Map.Entry  <  Map.Entry  <  K,  V  >>  v  =  map.entrySet().iterator();	  Iterator    <    Map.Entry    <    Map.Entry    <    K,    V    >=    v    =    map.entrySet().iterator();    	non-compiled	[CE]  >  expected	122	None	replace
391	[BUG]  [BUGGY]  Iterator  <  Map.Entry  <  Map.Entry  <  K,  V  >>  v  =  map.keySet().iterator();  [CE]  >  expected  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  Map.Entry  <  Map.Entry  <  K,  V  >>  v  =  map.keySet().iterator();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Iterator  <  Map.Entry  <  Map.Entry  <  K,  V  >>  v  =  map.keySet().iterator();	  Iterator    <    Map.Entry    <    Map.Entry    <    K,    V    >=    v    =    map.entrySet().iterator();    	non-compiled	[CE]  >  expected	122	None	replace
392	[BUG]  [BUGGY]  Iterator  <  Map.Entry  <  Map.Entry  <  K,  V  >>  v  =  this.map.entrySet().iterator();  [CE]  >  expected  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  Map.Entry  <  Map.Entry  <  K,  V  >>  v  =  this.map.entrySet().iterator();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Iterator  <  Map.Entry  <  Map.Entry  <  K,  V  >>  v  =  this.map.entrySet().iterator();	  Iterator    <    Map.Entry    <    Map.Entry    <    K,    V    >=    v    =    map.entrySet().iterator();    	non-compiled	[CE]  >  expected	122	None	replace
393	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  If(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [CE]  ';'  expected  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  If(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE    ||    v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    If(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  	non-compiled	[CE]  ';'  expected	10	None	add
394	[BUG]  [BUGGY]  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  illegal  start  of  expression  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    <    =    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
395	[BUG]  [BUGGY]  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  illegal  start  of  expression  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    <    =    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
396	[BUG]  [BUGGY]  Iterator  <  RealVector>  iter  =  new  OpenMapRealVector(v.entries()).iterator();  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]        MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  RealVector>  iter  =  new  OpenMapRealVector(v.entries()).iterator();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Iterator  <  RealVector>  iter  =  new  OpenMapRealVector(v.entries()).iterator();	          Iterator    <    RealVector>    iter    =    v.entries().iterator();    	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	108	None	replace
397	[BUG]  [BUGGY]  Iterator  <  RealVector>  iter  =  this.entries().iterator();  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]          MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  RealVector>  iter  =  this.entries().iterator();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Iterator  <  RealVector>  iter  =  this.entries().iterator();	          Iterator    <    RealVector>    iter    =    v.entries().iterator();    	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	108	None	replace
398	[BUG]  [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorD  [CE]  ';'  expected  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorD  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=        null)        {        checkVectorDimensions(v.getDimension());        }        if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorD	  	non-compiled	[CE]  ';'  expected	33	None	add
399	[BUG]  [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  check  [CE]  ';'  expected  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  check  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=        null)        {        checkVectorDimensions(v.getDimension());        }        if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  check	  	non-compiled	[CE]  ';'  expected	33	None	add
400	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  DEFAULT_ZERO_TOLERANCE,  v.value);  [CE]  cannot  find  symbol  value  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  DEFAULT_ZERO_TOLERANCE,  v.value);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  DEFAULT_ZERO_TOLERANCE,  v.value);	  RealVector    res    =    new    RealVector(this,    DEFAULT_ZERO_TOLERANCE,    v);    	non-compiled	[CE]  cannot  find  symbol  value	40	None	replace
401	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  DEFAULT_ZERO_TOLERANCE,  v.multiply);  [CE]  cannot  find  symbol  multiply  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  DEFAULT_ZERO_TOLERANCE,  v.multiply);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  DEFAULT_ZERO_TOLERANCE,  v.multiply);	  RealVector    res    =    new    RealVector(this,    DEFAULT_ZERO_TOLERANCE,    v);    	non-compiled	[CE]  cannot  find  symbol  multiply	40	None	replace
402	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [CE]  ')'  expected  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO    	non-compiled	[CE]  ')'  expected	117	None	replace
403	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [CE]  ')'  expected  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO    	non-compiled	[CE]  ')'  expected	117	None	replace
404	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_NUMBER_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_NUMBER_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_NUMBER_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v!=    null)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	111	None	replace
405	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  float  dimension  =  v.getDimension()  +  1;  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	float  dimension  =  v.getDimension()  +  1;	  int    dimension    =    v.getDimension()    +    1;    	compilable	  [FE]  MathRuntimeException$6  	20	1	replace
406	[BUG]  [BUGGY]  float  dimension  =  v.getDimension()  +  1;  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  float  dimension  =  v.getDimension()  +  1;  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	float  dimension  =  v.getDimension()  +  1;	  int    dimension    =    v.getDimension()    +    1;    	compilable	  [FE]  MathRuntimeException$6  	20	1	replace
407	[BUG]  [BUGGY]  ||(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE))  {  return  new  OpenMapRealVector(this);  [CE]  illegal  start  of  expression  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  ||(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE))  {  return  new  OpenMapRealVector(this);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	||(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE))  {  return  new  OpenMapRealVector(this);	  ||    v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
408	[BUG]  [BUGGY]  checkDimensions(v,  epsilon.multiply());  [CE]  double  cannot  be  dereferenced  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkDimensions(v,  epsilon.multiply());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkDimensions(v,  epsilon.multiply());	  checkDimensions(v,    epsilon.getDimension());    	non-compiled	[CE]  double  cannot  be  dereferenced	80	None	replace
409	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getDimension()  +  1);  [CE]  RealVector  is  abstract;  cannot  be  instantiated  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getDimension()  +  1);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getDimension()  +  1);	  RealVector    res    =    new    RealVector(this,    v.getDimension(),    v.getDimension());    	non-compiled	[CE]  RealVector  is  abstract;  cannot  be  instantiated	5	None	replace
410	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [CE]  ')'  expected  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE    	non-compiled	[CE]  ')'  expected	139	None	replace
411	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [CE]  ')'  expected  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE    	non-compiled	[CE]  ')'  expected	139	None	replace
412	[BUG]  [BUGGY]  new  OpenMapRealVector().ebeMultiply(v);  res  =  new  OpenMapRealVector().ebeMultiply(v);  [CE]  cannot  find  symbol  res  [FE]    StackOverflowError    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  new  OpenMapRealVector().ebeMultiply(v);  res  =  new  OpenMapRealVector().ebeMultiply(v);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	new    OpenMapRealVector().ebeMultiply(v);    res  =  new  OpenMapRealVector().ebeMultiply(v);	  	non-compiled	[CE]  cannot  find  symbol  res	120	None	add
413	[BUG]  [BUGGY]  RealVector  res  =(RealVector)this.entries.get(v,  DEFAULT_ZERO_TOLERANCE  +  1);  [CE]  method  get  in  class  OpenIntToDoubleHashMap  cannot  be  applied  to  given  types;  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =(RealVector)this.entries.get(v,  DEFAULT_ZERO_TOLERANCE  +  1);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =(RealVector)this.entries.get(v,  DEFAULT_ZERO_TOLERANCE  +  1);	  RealVector    res    =(RealVector)this.entries.get(v,    DEFAULT_ZERO_TOLERANCE);    	non-compiled	[CE]  method  get  in  class  OpenIntToDoubleHashMap  cannot  be  applied  to  given  types;	57	None	replace
414	[BUG]  [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(v.getEntry());  }  [CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;  [FE]        MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(v.getEntry());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v  ==  null)  {  checkVectorDimensions(v.getEntry());  }	  if(v!=    null)    {    checkVectorDimensions(v.getEntry());    }    	non-compiled	[CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;	135	None	replace
415	[BUG]  [BUGGY]  if(v!=  null)  {  checkVectorDimensions(v,  v.getEntry());  }  [CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;  [FE]          MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  checkVectorDimensions(v,  v.getEntry());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=  null)  {  checkVectorDimensions(v,  v.getEntry());  }	  if(v!=    null)    {    checkVectorDimensions(v.getEntry());    }    	non-compiled	[CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;	135	None	replace
416	[BUG]  [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(v.getEntry(),  v);  }  [CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(v.getEntry(),  v);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v  ==  null)  {  checkVectorDimensions(v.getEntry(),  v);  }	  if(v!=    null)    {    checkVectorDimensions(v.getEntry());    }    	non-compiled	[CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;	135	None	replace
417	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  v,  this);  [CE]  RealVector  is  abstract;  cannot  be  instantiated  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  v,  this);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  v,  this);	  RealVector    res    =    new    RealVector(this,    v);    	non-compiled	[CE]  RealVector  is  abstract;  cannot  be  instantiated	41	None	replace
418	[BUG]  [BUGGY]  if(v.getDimension()!=  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [CE]  incomparable  types:  int  and  <null>  [FE]          MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  if(v.getDimension()!=    DEFAULT_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	148	None	replace
419	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	154	1	add
420	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	154	1	add
421	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v!=    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	90	None	replace
422	[BUG]  [BUGGY]          int    dimension    =    v.getDimension();    int  dimensions  =  v.getDimension();  int  dimension  =  V.getDimension();  int  dimensions  =  v.getDimension();  [CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]          int    dimension    =    v.getDimension();    int  dimensions  =  v.getDimension();  int  dimension  =  V.getDimension();  int  dimensions  =  v.getDimension();  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	                int        dimension        =        v.getDimension();        int    dimensions    =    v.getDimension();    int  dimension  =  V.getDimension();  int  dimensions  =  v.getDimension();	  	non-compiled	[CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)	73	None	add
423	[BUG]  [BUGGY]          int    dimension    =    v.getDimension();    int  dimensions  =  v.getDimension();  int  Dimension  =  v.getDimension();  int  dimensions  =  v.getDimension();  [CE]  variable  dimensions  is  already  defined  in  method  ebeMultiply(RealVector)  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]          int    dimension    =    v.getDimension();    int  dimensions  =  v.getDimension();  int  Dimension  =  v.getDimension();  int  dimensions  =  v.getDimension();  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	                int        dimension        =        v.getDimension();        int    dimensions    =    v.getDimension();    int  Dimension  =  v.getDimension();  int  dimensions  =  v.getDimension();	  	non-compiled	[CE]  variable  dimensions  is  already  defined  in  method  ebeMultiply(RealVector)	73	None	add
424	[BUG]  [BUGGY]          int    dimension    =    v.getDimension();    int  Dimension  =  v.getDimension();  int  dimension  =  V.getDimension();  int  Dimension  =  v.getDimension();  [CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]          int    dimension    =    v.getDimension();    int  Dimension  =  v.getDimension();  int  dimension  =  V.getDimension();  int  Dimension  =  v.getDimension();  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	                int        dimension        =        v.getDimension();        int    Dimension    =    v.getDimension();    int  dimension  =  V.getDimension();  int  Dimension  =  v.getDimension();	  	non-compiled	[CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)	75	None	add
425	[BUG]  [BUGGY]  if(v.getDimension()!=  null)  {  checkVectorDimensions(new  RealVector(v),  v.getDimension());  }  [CE]  incomparable  types:  int  and  <null>  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  null)  {  checkVectorDimensions(new  RealVector(v),  v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  null)  {  checkVectorDimensions(new  RealVector(v),  v.getDimension());  }	  if(v.getDimension()!=    null)    {    checkVectorDimensions(v,    v.getDimension());    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	110	None	replace
426	[BUG]  [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(new  RealVector[]  {  v  }  );  }  [CE]  no  suitable  method  found  for  checkVectorDimensions(RealVector[])  [FE]          MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(new  RealVector[]  {  v  }  );  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v  ==  null)  {  checkVectorDimensions(new  RealVector[]  {  v  }  );  }	  if(v    ==    null)    {    checkVectorDimensions(null.getDimension());    }    	non-compiled	[CE]  no  suitable  method  found  for  checkVectorDimensions(RealVector[])	103	None	replace
427	[BUG]  [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(new  RealVector.getDimension());  }  [CE]  cannot  find  symbol  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(new  RealVector.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v  ==  null)  {  checkVectorDimensions(new  RealVector.getDimension());  }	  if(v    ==    null)    {    checkVectorDimensions(null.getDimension());    }    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
428	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v    ==    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	91	None	replace
429	[BUG]  [BUGGY]  Preconditions.checkState(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE);  [CE]  cannot  find  symbol  Preconditions  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Preconditions.checkState(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Preconditions.checkState(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE);	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  cannot  find  symbol  Preconditions	51	None	replace
430	[BUG]  [BUGGY]  new  OpenMapRealVector().ebeMultiply(new  RealVectorIterator());  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  new  OpenMapRealVector().ebeMultiply(new  RealVectorIterator());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	new  OpenMapRealVector().ebeMultiply(new  RealVectorIterator());	  new    OpenMapRealVector().ebeMultiply(v);    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
431	[BUG]  [BUGGY]  RealVector  res  =  new  OpenMapRealVector(this,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [CE]  no  suitable  constructor  found  for  OpenMapRealVector(OpenMapRealVector,int,double)  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  OpenMapRealVector(this,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  OpenMapRealVector(this,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE);	  res.setDimension(v.getDimension(),    DEFAULT_ZERO_TOLERANCE);    	non-compiled	[CE]  no  suitable  constructor  found  for  OpenMapRealVector(OpenMapRealVector,int,double)	24	None	replace
432	[BUG]  [BUGGY]  new  OpenMapRealVector(this,  v.getEntry(),  DEFAULT_ZERO_TOLERANCE);  [CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;  [FE]          MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  new  OpenMapRealVector(this,  v.getEntry(),  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	new  OpenMapRealVector(this,  v.getEntry(),  DEFAULT_ZERO_TOLERANCE);	  new    OpenMapRealVector(this,    v.getEntry());    	non-compiled	[CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;	31	None	replace
433	[BUG]  [BUGGY]  float  dimension  =  v.getDimension()  *  DEFAULT_ZERO_TOLERANCE;  [CE]  possible  loss  of  precision  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  float  dimension  =  v.getDimension()  *  DEFAULT_ZERO_TOLERANCE;  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	float  dimension  =  v.getDimension()  *  DEFAULT_ZERO_TOLERANCE;	  int    dimension    =    v.getDimension()    *    DEFAULT_ZERO_TOLERANCE;    	non-compiled	[CE]  possible  loss  of  precision	23	None	replace
434	[BUG]  [BUGGY]  checkMultiply(v.getDimension(),  DEFULT_ZERO_TOLERANCE);  [CE]  cannot  find  symbol  DEFULT_ZERO_TOLERANCE  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkMultiply(v.getDimension(),  DEFULT_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkMultiply(v.getDimension(),  DEFULT_ZERO_TOLERANCE);	  checkMultiply(v.getDimension(),    value);    	non-compiled	[CE]  cannot  find  symbol  DEFULT_ZERO_TOLERANCE	46	None	replace
435	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getSize()  -  1);  [CE]  cannot  find  symbol  [FE]                      MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getSize()  -  1);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getSize()  -  1);	  RealVector    res    =    new    RealVector(this,    v.getDimension(),    v.getSize());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
436	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.  [CE]  ')'  expected  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.	  if(v    ==    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  ')'  expected	114	None	replace
437	[BUG]  [BUGGY]  Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.values().iterator();  [CE]  >  expected  [FE]        MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.values().iterator();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.values().iterator();	  Iterator    <    Map.Entry    <    String,    RealVector>    entry    =    v.entrySet().iterator();    	non-compiled	[CE]  >  expected	119	None	replace
438	[BUG]  [BUGGY]  RealVector  res  =  v.getEpsilon();  [CE]  cannot  find  symbol  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  v.getEpsilon();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  v.getEpsilon();	  RealVector    res    =    v.getDimension();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
439	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	144	1	add
440	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	144	1	add
441	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.isMultiply())  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  ';'  expected  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.isMultiply())  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=  null)  {  if(v.isMultiply())  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }	  if(v.isMultiply())    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  ';'  expected	140	None	replace
442	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.isMultiply())  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  ';'  expected  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.isMultiply())  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v  ==  null)  {  if(v.isMultiply())  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }	  if(v.isMultiply())    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  ';'  expected	140	None	replace
443	[BUG]  [BUGGY]  Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.getEntryIterator();  [CE]  >  expected  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.getEntryIterator();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.getEntryIterator();	  Iterator    <    Map.Entry    <    String,    RealVector>    entry    =    v.getEntry();    	non-compiled	[CE]  >  expected	123	None	replace
444	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v    ==    null)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	112	None	replace
445	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  ';'  expected  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  ';'  expected	87	None	replace
446	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_INITIALIZER)  {  if(v.getDimension()!=  DEFAULT_INITIALIZER)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  ';'  expected  [FE]                      MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_INITIALIZER)  {  if(v.getDimension()!=  DEFAULT_INITIALIZER)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  DEFAULT_INITIALIZER)  {  if(v.getDimension()!=  DEFAULT_INITIALIZER)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  ';'  expected	87	None	replace
447	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	compilable	  [FE]  AssertionError  	125	2	replace
448	[BUG]  [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [FE]  AssertionError  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	compilable	  [FE]  AssertionError  	125	2	replace
449	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	compilable	  [FE]  AssertionError  	125	2	replace
450	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [FE]  AssertionError  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	compilable	  [FE]  AssertionError  	125	2	replace
451	[BUG]  [BUGGY]  boolean  dimension  =  v.getDimension();  boolean  dimension  =  v.getDimension();  [CE]  incompatible  types  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  boolean  dimension  =  v.getDimension();  boolean  dimension  =  v.getDimension();  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	boolean  dimension  =  v.getDimension();  boolean  dimension  =  v.getDimension();	          int    dimension    =    v.getDimension();    int    Dimension    =    v.getDimension();    	non-compiled	[CE]  incompatible  types	76	None	replace
452	[BUG]  [BUGGY]  boolean  dimension  =  v.getDimension();  boolean  Dimension  =  v.getDimension();  [CE]  incompatible  types  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  boolean  dimension  =  v.getDimension();  boolean  Dimension  =  v.getDimension();  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	boolean  dimension  =  v.getDimension();  boolean  Dimension  =  v.getDimension();	          int    dimension    =    v.getDimension();    int    Dimension    =    v.getDimension();    	non-compiled	[CE]  incompatible  types	76	None	replace
453	[BUG]  [BUGGY]  Annotation  <  RealVector>  entry  =  current.getEntry();  [CE]  cannot  find  symbol  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Annotation  <  RealVector>  entry  =  current.getEntry();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Annotation  <  RealVector>  entry  =  current.getEntry();	  Annotation    <    RealVector>    entry    =    v.getEntry();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
454	[BUG]  [BUGGY]  Annotation  <  RealVector>  entry  =  v.entries();  [CE]  cannot  find  symbol  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Annotation  <  RealVector>  entry  =  v.entries();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Annotation  <  RealVector>  entry  =  v.entries();	  Annotation    <    RealVector>    entry    =    v.getEntry();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
455	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  illegal  start  of  expression  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v  ==  null)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v!=    null)    {    if(v.getDimension()    >    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
456	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkMultiply(v.getDimension());  }  [CE]  cannot  find  symbol  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkMultiply(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkMultiply(v.getDimension());  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
457	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkMultiply(v.getDimension());  }  [CE]  cannot  find  symbol  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkMultiply(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkMultiply(v.getDimension());  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
458	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(v.getEntry(),  current);  [CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(v.getEntry(),  current);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(v.getEntry(),  current);	  RealVector    res    =    new    RealVector(v.getEntry());    	non-compiled	[CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;	32	None	replace
459	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(v,  this.getEntry());  [CE]  method  getEntry  in  class  OpenMapRealVector  cannot  be  applied  to  given  types;  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(v,  this.getEntry());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(v,  this.getEntry());	  RealVector    res    =    new    RealVector(v.getEntry());    	non-compiled	[CE]  method  getEntry  in  class  OpenMapRealVector  cannot  be  applied  to  given  types;	32	None	replace
460	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorD  [CE]  ';'  expected  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorD  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorD	  	non-compiled	[CE]  ';'  expected	54	None	add
461	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorD  [CE]  ';'  expected  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorD  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorD	  	non-compiled	[CE]  ';'  expected	54	None	add
462	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  check  [CE]  ';'  expected  [FE]        MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  check  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  check	  	non-compiled	[CE]  ';'  expected	54	None	add
463	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  int  dimension  =  v.getDimension()  +  1;  int  Dimension  =  v.getDimension()  +  1;  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	int    dimension    =    v.getDimension()    +    1;    int  Dimension  =  v.getDimension()  +  1;	  	compilable	  [FE]  MathRuntimeException$6  	19	1	add
464	[BUG]  [BUGGY]  int  dimension  =  v.getDimension()  +  1;  int  Dimension  =  v.getDimension()  +  1;  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  int  dimension  =  v.getDimension()  +  1;  int  Dimension  =  v.getDimension()  +  1;  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	int    dimension    =    v.getDimension()    +    1;    int  Dimension  =  v.getDimension()  +  1;	  	compilable	  [FE]  MathRuntimeException$6  	19	1	add
465	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE    ||    v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    	compilable	  [FE]  MathRuntimeException$6  	11	1	replace
466	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE    ||    v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    	compilable	  [FE]  MathRuntimeException$6  	11	1	replace
467	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_NUMBER_TOLERANCE  ||  v.getDimension()!=  DEFAULT_NUMBER_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [CE]  cannot  find  symbol  DEFAULT_NUMBER_TOLERANCE  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_NUMBER_TOLERANCE  ||  v.getDimension()!=  DEFAULT_NUMBER_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  DEFAULT_NUMBER_TOLERANCE  ||  v.getDimension()!=  DEFAULT_NUMBER_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE    ||    v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_NUMBER_TOLERANCE	11	None	replace
468	[BUG]  [BUGGY]  DeserialVector  res  =  new  OpenMapRealVector(v);  [CE]  cannot  find  symbol  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  DeserialVector  res  =  new  OpenMapRealVector(v);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	DeserialVector  res  =  new  OpenMapRealVector(v);	  vices.add(new    OpenMapRealVector(v));    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
469	[BUG]  [BUGGY]  RealVector  res  =  new  OpenMapRealVector(v));  [CE]  ';'  expected  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  OpenMapRealVector(v));  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  OpenMapRealVector(v));	  vices.add(new    OpenMapRealVector(v));    	non-compiled	[CE]  ';'  expected	29	None	replace
470	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFA  [CE]  ')'  expected  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFA  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFA	  if(v!=    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  ')'  expected	94	None	replace
471	[BUG]  [BUGGY]  res.setDimension(v.getDimension()  -  1,  DEFAULT_ZERO_TOLERANCE);  [CE]  cannot  find  symbol  res  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  res.setDimension(v.getDimension()  -  1,  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	res.setDimension(v.getDimension()  -  1,  DEFAULT_ZERO_TOLERANCE);	  res.setDimension(v.getDimension(),    DEFAULT_ZERO_TOLERANCE);    	non-compiled	[CE]  cannot  find  symbol  res	24	None	replace
472	[BUG]  [BUGGY]  if(v.getDimension()  <  DEFAULT_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [CE]  cannot  find  symbol  DEFAULT_TOLERANCE  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  <  DEFAULT_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  <  DEFAULT_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_TOLERANCE	55	None	replace
473	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    	compilable	  [FE]  MathRuntimeException$6  	55	1	replace
474	[BUG]  [BUGGY]  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    	compilable	  [FE]  MathRuntimeException$6  	55	1	replace
475	[BUG]  [BUGGY]  if(v.isMultiply())  {  checkVectorDimensions(v.getDimension());  }  [CE]  cannot  find  symbol  [FE]        MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.isMultiply())  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.isMultiply())  {  checkVectorDimensions(v.getDimension());  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
476	[BUG]  [BUGGY]  if(v.getEntry()!=  null)  {  checkVectorDimensions(v.getDimension());  }  [CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;  [FE]          MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getEntry()!=  null)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getEntry()!=  null)  {  checkVectorDimensions(v.getDimension());  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;	55	None	replace
477	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v!=    null)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	111	None	replace
478	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions  [CE]  ';'  expected  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions	  	non-compiled	[CE]  ';'  expected	50	None	add
479	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDi  [CE]  ';'  expected  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDi  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDi	  	non-compiled	[CE]  ';'  expected	50	None	add
480	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  ';'  expected  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  DEFAULT_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  ';'  expected	87	None	replace
481	[BUG]  [BUGGY]  if(v.getDimension()!=  null  &&  v.getDimension()!=  null)  {  checkVectorDimensions(v,  v.getDimension());  }  [CE]  incomparable  types:  int  and  <null>  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  null  &&  v.getDimension()!=  null)  {  checkVectorDimensions(v,  v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  null  &&  v.getDimension()!=  null)  {  checkVectorDimensions(v,  v.getDimension());  }	  if(v.getDimension()!=    null)    {    checkVectorDimensions(v,    v.getDimension());    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	110	None	replace
482	[BUG]  [BUGGY]  checkVectorDimensions(v,  v.getDimension());  [CE]  no  suitable  method  found  for  checkVectorDimensions(RealVector,int)  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkVectorDimensions(v,  v.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkVectorDimensions(v,  v.getDimension());	  if(v.getDimension()!=    null)    {    checkVectorDimensions(v,    v.getDimension());    }    	non-compiled	[CE]  no  suitable  method  found  for  checkVectorDimensions(RealVector,int)	110	None	replace
483	[BUG]  [BUGGY]  if(v.getDimension()!=  null)  {  checkVectorDimensions(v,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  null)  {  checkVectorDimensions(v,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  null)  {  checkVectorDimensions(v,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  }	  if(v.getDimension()!=    null)    {    checkVectorDimensions(v,    v.getDimension());    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	110	None	replace
484	[BUG]  [BUGGY]  Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.entries();  [CE]  >  expected  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.entries();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.entries();	  Iterator    <    Map.Entry    <    String,    RealVector>    entry    =    v.getEntry();    	non-compiled	[CE]  >  expected	123	None	replace
485	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  illegal  start  of  expression  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=  null)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }	  if(v!=    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
486	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  ';'  expected  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=  null)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }	  if(v!=    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  ';'  expected	94	None	replace
487	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [CE]  ')'  expected  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  ')'  expected	77	None	replace
488	[BUG]  [BUGGY]  RealVector  res  =(RealVector)this.entries.get(v,  DEFAULT_ZERO_TOLERANCE,  v.size);  [CE]  cannot  find  symbol  size  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =(RealVector)this.entries.get(v,  DEFAULT_ZERO_TOLERANCE,  v.size);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =(RealVector)this.entries.get(v,  DEFAULT_ZERO_TOLERANCE,  v.size);	  RealVector    res    =(RealVector)this.entries.get(v,    DEFAULT_ZERO_TOLERANCE);    	non-compiled	[CE]  cannot  find  symbol  size	57	None	replace
489	[BUG]  [BUGGY]  CheckIntToDoubleHashMap(v,  v.getDimension());  [CE]  cannot  find  symbol  [FE]        MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  CheckIntToDoubleHashMap(v,  v.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	CheckIntToDoubleHashMap(v,  v.getDimension());	  CheckIntToDoubleHashMap(v.getDimension());    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
490	[BUG]  [BUGGY]  CheckIntToDoubleHashMap(v,  this.entries.getDimension());  [CE]  cannot  find  symbol  [FE]          MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  CheckIntToDoubleHashMap(v,  this.entries.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	CheckIntToDoubleHashMap(v,  this.entries.getDimension());	  CheckIntToDoubleHashMap(v.getDimension());    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
491	[BUG]  [BUGGY]  if(v!=  null)  {  checkMultiply(v.getDimension());  }  [CE]  cannot  find  symbol  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  checkMultiply(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=  null)  {  checkMultiply(v.getDimension());  }	  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v    ==    null)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
492	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  double  dimension  =  v.getDimension()  +  DEFAULT_ZERO_TOLERANCE;  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	double  dimension  =  v.getDimension()  +  DEFAULT_ZERO_TOLERANCE;	  double    dimension    =    v.getDimension();    	compilable	  [FE]  MathRuntimeException$6  	22	1	replace
493	[BUG]  [BUGGY]  double  dimension  =  v.getDimension()  +  DEFAULT_ZERO_TOLERANCE;  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  double  dimension  =  v.getDimension()  +  DEFAULT_ZERO_TOLERANCE;  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	double  dimension  =  v.getDimension()  +  DEFAULT_ZERO_TOLERANCE;	  double    dimension    =    v.getDimension();    	compilable	  [FE]  MathRuntimeException$6  	22	1	replace
494	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  DEFAULT_ZERO_TOLERANCE,  v.getDimension(),  v.getDimension());  [CE]  RealVector  is  abstract;  cannot  be  instantiated  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  DEFAULT_ZERO_TOLERANCE,  v.getDimension(),  v.getDimension());  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  DEFAULT_ZERO_TOLERANCE,  v.getDimension(),  v.getDimension());	  RealVector    res    =    new    RealVector(this,    DEFAULT_ZERO_TOLERANCE,    v.getDimension());    	non-compiled	[CE]  RealVector  is  abstract;  cannot  be  instantiated	42	None	replace
495	[BUG]  [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions  [CE]  ';'  expected  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=        null)        {        checkVectorDimensions(v.getDimension());        }        if(v    ==    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions	  	non-compiled	[CE]  ';'  expected	35	None	add
496	[BUG]  [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorD  [CE]  ';'  expected  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorD  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=        null)        {        checkVectorDimensions(v.getDimension());        }        if(v    ==    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorD	  	non-compiled	[CE]  ';'  expected	35	None	add
497	[BUG]  [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDi  [CE]  ';'  expected  [FE]        MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDi  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=        null)        {        checkVectorDimensions(v.getDimension());        }        if(v    ==    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDi	  	non-compiled	[CE]  ';'  expected	35	None	add
498	[BUG]  [BUGGY]  if(v!=  null)  {  checkVectorDimensions(v.getEntry(),  v.getEntry());  }  [CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;  [FE]        MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  checkVectorDimensions(v.getEntry(),  v.getEntry());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=  null)  {  checkVectorDimensions(v.getEntry(),  v.getEntry());  }	  if(v!=    null)    {    checkVectorDimensions(v.getEntry());    }    	non-compiled	[CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;	135	None	replace
499	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  float  dimension  =  v.getDimension();  int  dimensions  =  v.getDimension();  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	float  dimension  =  v.getDimension();  int  dimensions  =  v.getDimension();	          int    dimension    =    v.getDimension();    int    dimensions    =    v.getDimension();    	compilable	  [FE]  MathRuntimeException$6  	74	1	replace
500	[BUG]  [BUGGY]  float  dimension  =  v.getDimension();  int  dimensions  =  v.getDimension();  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  float  dimension  =  v.getDimension();  int  dimensions  =  v.getDimension();  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	float  dimension  =  v.getDimension();  int  dimensions  =  v.getDimension();	          int    dimension    =    v.getDimension();    int    dimensions    =    v.getDimension();    	compilable	  [FE]  MathRuntimeException$6  	74	1	replace
501	[BUG]  [BUGGY]  if(v.getEntry()!=  null)  {  if(v.getDimension()!=  DEFAULT_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [CE]  ';'  expected  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getEntry()!=  null)  {  if(v.getDimension()!=  DEFAULT_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getEntry()!=  null)  {  if(v.getDimension()!=  DEFAULT_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	63	None	replace
502	[BUG]  [BUGGY]  ||(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  &&  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE))  {  return  new  OpenMapRealVector(this);  [CE]  illegal  start  of  expression  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  ||(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  &&  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE))  {  return  new  OpenMapRealVector(this);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	||(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  &&  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE))  {  return  new  OpenMapRealVector(this);	  ||    v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
503	[BUG]  [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions  [CE]  ';'  expected  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=        null)        {        checkVectorDimensions(v.getDimension());        }        if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions	  	non-compiled	[CE]  ';'  expected	33	None	add
504	[BUG]  [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDi  [CE]  ';'  expected  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDi  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=        null)        {        checkVectorDimensions(v.getDimension());        }        if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDi	  	non-compiled	[CE]  ';'  expected	33	None	add
505	[BUG]  [BUGGY]  RealVector  res  =(RealVector)this.entries.get(v,  DEFULT_ZERO_TOLERANCE);  [CE]  cannot  find  symbol  DEFULT_ZERO_TOLERANCE  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =(RealVector)this.entries.get(v,  DEFULT_ZERO_TOLERANCE);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =(RealVector)this.entries.get(v,  DEFULT_ZERO_TOLERANCE);	  RealVector    res    =(RealVector)this.entries.get(v,    v);    	non-compiled	[CE]  cannot  find  symbol  DEFULT_ZERO_TOLERANCE	60	None	replace
506	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  [CE]  ';'  expected  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =	  	non-compiled	[CE]  ';'  expected	144	None	add
507	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  no  suitable  constructor  found  for  OpenMapRealVector(OpenMapRealVector,double)  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  OpenMapRealVector(OpenMapRealVector,double)	2	None	replace
508	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getEntry(),  v);  [CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getEntry(),  v);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getEntry(),  v);	  RealVector    res    =    new    RealVector(this,    v.getDimension(),    v.getEntry());    	non-compiled	[CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;	6	None	replace
509	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getEntry(),  v.getValue());  [CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;  [FE]                      MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getEntry(),  v.getValue());  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getEntry(),  v.getValue());	  RealVector    res    =    new    RealVector(this,    v.getDimension(),    v.getEntry());    	non-compiled	[CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;	6	None	replace
510	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  float  dimension  =  v.getDimension();  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	float  dimension  =  v.getDimension();	          int    dimension    =    v.getDimension();    int    Dimension    =    v.getDimension();    	compilable	  [FE]  MathRuntimeException$6  	76	1	replace
511	[BUG]  [BUGGY]  float  dimension  =  v.getDimension();  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  float  dimension  =  v.getDimension();  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	float  dimension  =  v.getDimension();	          int    dimension    =    v.getDimension();    int    Dimension    =    v.getDimension();    	compilable	  [FE]  MathRuntimeException$6  	76	1	replace
512	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  DEFAULT_ZERO_TOLERANCE,  v,  v);  [CE]  RealVector  is  abstract;  cannot  be  instantiated  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  DEFAULT_ZERO_TOLERANCE,  v,  v);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  DEFAULT_ZERO_TOLERANCE,  v,  v);	  RealVector    res    =    new    RealVector(this,    DEFAULT_ZERO_TOLERANCE,    v);    	non-compiled	[CE]  RealVector  is  abstract;  cannot  be  instantiated	40	None	replace
513	[BUG]  [BUGGY]  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  illegal  start  of  expression  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    <    =    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
514	[BUG]  [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  illegal  start  of  expression  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    <    =    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
515	[BUG]  [BUGGY]  if(v!=  null)  {  checkVectorDimensions(new  RealVector(v.getDimension()),  DEFAULT_ZERO_TOLERANCE);  }  [CE]  RealVector  is  abstract;  cannot  be  instantiated  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  checkVectorDimensions(new  RealVector(v.getDimension()),  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=  null)  {  checkVectorDimensions(new  RealVector(v.getDimension()),  DEFAULT_ZERO_TOLERANCE);  }	  if(v!=    null)    {    checkVectorDimensions(new    RealVector(v.getDimension()));    }    	non-compiled	[CE]  RealVector  is  abstract;  cannot  be  instantiated	104	None	replace
516	[BUG]  [BUGGY]  if(v!=  null)  {  checkVectorDimensions(new  RealVector(v.getDimension()),  v);  }  [CE]  RealVector  is  abstract;  cannot  be  instantiated  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  checkVectorDimensions(new  RealVector(v.getDimension()),  v);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=  null)  {  checkVectorDimensions(new  RealVector(v.getDimension()),  v);  }	  if(v!=    null)    {    checkVectorDimensions(new    RealVector(v.getDimension()));    }    	non-compiled	[CE]  RealVector  is  abstract;  cannot  be  instantiated	104	None	replace
517	[BUG]  [BUGGY]  checkDimensions(v,  this.current.getDimension());  [CE]  cannot  find  symbol  current  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkDimensions(v,  this.current.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkDimensions(v,  this.current.getDimension());	  checkDimensions(v,    current.getDimension());    	non-compiled	[CE]  cannot  find  symbol  current	100	None	replace
518	[BUG]  [BUGGY]  if(v.isMultiply())  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  ';'  expected  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.isMultiply())  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.isMultiply())  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v.isMultiply())    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  ';'  expected	126	None	replace
519	[BUG]  [BUGGY]  if(v.isMultiply()  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  cannot  find  symbol  [FE]                      MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.isMultiply()  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.isMultiply()  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v.isMultiply())    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
520	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  ';'  expected  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=  null)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v!=    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  ';'  expected	113	None	replace
521	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  illegal  start  of  expression  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=  null)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v!=    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
522	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v  ==  null  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  if(v    ==    null)    {    checkVectorDimensions(v.getDimension());    }    	compilable	  [FE]  MathRuntimeException$6  	102	1	replace
523	[BUG]  [BUGGY]  if(v  ==  null  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v  ==  null  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  if(v    ==    null)    {    checkVectorDimensions(v.getDimension());    }    	compilable	  [FE]  MathRuntimeException$6  	102	1	replace
524	[BUG]  [BUGGY]  Annotation  <  RealVector>  res  =  checkVectorDimensions(v.getDimension());  [CE]  cannot  find  symbol  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Annotation  <  RealVector>  res  =  checkVectorDimensions(v.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Annotation  <  RealVector>  res  =  checkVectorDimensions(v.getDimension());	  if(v    ==    null)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
525	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	62	1	add
526	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	62	1	add
527	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  CheckVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [CE]  cannot  find  symbol  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  CheckVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  CheckVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	non-compiled	[CE]  cannot  find  symbol	62	None	add
528	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  Return  new  OpenMapRealVector(this);  }  [CE]  not  a  statement  [FE]        MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  Return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  Return  new  OpenMapRealVector(this);  }	  	non-compiled	[CE]  not  a  statement	62	None	add
529	[BUG]  [BUGGY]  res.setDimension(v.getDimension()  *  1);  [CE]  cannot  find  symbol  res  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  res.setDimension(v.getDimension()  *  1);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	res.setDimension(v.getDimension()  *  1);	  res.setDimension(v.getDimension()    +    1);    	non-compiled	[CE]  cannot  find  symbol  res	149	None	replace
530	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  [CE]  ';'  expected  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);	  	non-compiled	[CE]  ';'  expected	154	None	add
531	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  If(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  If(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    If(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	non-compiled	[CE]  ';'  expected	64	None	add
532	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  [CE]  ';'  expected  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(this);    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =	  	non-compiled	[CE]  ';'  expected	142	None	add
533	[BUG]  [BUGGY]  checkMultiply(v.getDimension(),  DEFAULT_TOLERANCE);  [CE]  cannot  find  symbol  DEFAULT_TOLERANCE  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkMultiply(v.getDimension(),  DEFAULT_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkMultiply(v.getDimension(),  DEFAULT_TOLERANCE);	  checkMultiply(v.getDimension(),    value);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_TOLERANCE	46	None	replace
534	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [CE]  ';'  expected  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	67	None	replace
535	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    <    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	compilable	  [FE]  MathRuntimeException$6  	14	1	replace
536	[BUG]  [BUGGY]  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [FE]  MathRuntimeException$6  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    <    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	compilable	  [FE]  MathRuntimeException$6  	14	1	replace
537	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  v.multiply());  [CE]  cannot  find  symbol  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  v.multiply());  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  v.multiply());	  RealVector    res    =    new    RealVector(this,    v.multiply);    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
538	[BUG]  [BUGGY]  RealVector  res  =  v.getDimension()  *  DEFAULT_ZERO_TOLERANCE;  [CE]  incompatible  types  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  v.getDimension()  *  DEFAULT_ZERO_TOLERANCE;  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  v.getDimension()  *  DEFAULT_ZERO_TOLERANCE;	  RealVector    res    =    v.getDimension();    	non-compiled	[CE]  incompatible  types	25	None	replace
539	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(v.getDimension());  [CE]  RealVector  is  abstract;  cannot  be  instantiated  [FE]                      MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(v.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(v.getDimension());	  RealVector    res    =    v.getDimension();    	non-compiled	[CE]  RealVector  is  abstract;  cannot  be  instantiated	25	None	replace
540	[BUG]  [BUGGY]  if(v!=  null)  {  checkOpenMapRealVectorDimensions(v.getDimension());  }  [CE]  cannot  find  symbol  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  checkOpenMapRealVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=  null)  {  checkOpenMapRealVectorDimensions(v.getDimension());  }	  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
541	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    	compilable	  [FE]  AssertionError  	147	2	replace
542	[BUG]  [BUGGY]  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [FE]  AssertionError  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    	compilable	  [FE]  AssertionError  	147	2	replace
543	[BUG]  [BUGGY]  if(v.isMultiply())  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  ';'  expected  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.isMultiply())  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.isMultiply())  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }	  if(v.isMultiply())    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
544	[BUG]  [BUGGY]  if(v.isMultiply()  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  cannot  find  symbol  [FE]                      MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.isMultiply()  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.isMultiply()  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }	  if(v.isMultiply())    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
545	[BUG]  [BUGGY]  int  dimension  =  v.getDimension()  +  1;  int  dimension  =  V.getDimension()  +  1;  [CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  int  dimension  =  v.getDimension()  +  1;  int  dimension  =  V.getDimension()  +  1;  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	int    dimension    =    v.getDimension()    +    1;    int  dimension  =  V.getDimension()  +  1;	  	non-compiled	[CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)	19	None	add
546	[BUG]  [BUGGY]  int  dimension  =  v.getDimension()  +  1;  int  dimension  =  v.getDimension()  +  2;  [CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  int  dimension  =  v.getDimension()  +  1;  int  dimension  =  v.getDimension()  +  2;  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	int    dimension    =    v.getDimension()    +    1;    int  dimension  =  v.getDimension()  +  2;	  	non-compiled	[CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)	19	None	add
547	[BUG]  [BUGGY]          int    dimension    =    v.getDimension();    int  dimensions  =  v.getDimension();  Int  dimension  =  v.getDimension();  int  dimensions  =  v.getDimension();  [CE]  cannot  find  symbol  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]          int    dimension    =    v.getDimension();    int  dimensions  =  v.getDimension();  Int  dimension  =  v.getDimension();  int  dimensions  =  v.getDimension();  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	                int        dimension        =        v.getDimension();        int    dimensions    =    v.getDimension();    Int  dimension  =  v.getDimension();  int  dimensions  =  v.getDimension();	  	non-compiled	[CE]  cannot  find  symbol	73	None	add
548	[BUG]  [BUGGY]          int    dimension    =    v.getDimension();    int  dimensions  =  v.getDimension();  int  dimension  =  v.getDimension();  int  dimensions  =  V.getDimension();  [CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]          int    dimension    =    v.getDimension();    int  dimensions  =  v.getDimension();  int  dimension  =  v.getDimension();  int  dimensions  =  V.getDimension();  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	                int        dimension        =        v.getDimension();        int    dimensions    =    v.getDimension();    int  dimension  =  v.getDimension();  int  dimensions  =  V.getDimension();	  	non-compiled	[CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)	73	None	add
549	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [CE]  cannot  find  symbol  DEFAULT_TOLERANCE  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  DEFAULT_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    If(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_TOLERANCE	56	None	replace
550	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions  [CE]  ';'  expected  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions	  	non-compiled	[CE]  ';'  expected	54	None	add
551	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDi  [CE]  ';'  expected  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDi  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDi	  	non-compiled	[CE]  ';'  expected	54	None	add
552	[BUG]  [BUGGY]  if(v.getEntry()!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(  [CE]  ')'  expected  [FE]        MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getEntry()!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getEntry()!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    If(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ')'  expected	107	None	replace
553	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  illegal  start  of  expression  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v  ==  null)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v    ==    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
554	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(v,  DEFAULT_ZERO_TOLERANCE,  true);  [CE]  RealVector  is  abstract;  cannot  be  instantiated  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(v,  DEFAULT_ZERO_TOLERANCE,  true);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(v,  DEFAULT_ZERO_TOLERANCE,  true);	  RealVector    res    =    new    RealVector(v,    DEFAULT_ZERO_TOLERANCE);    	non-compiled	[CE]  RealVector  is  abstract;  cannot  be  instantiated	43	None	replace
555	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  ((  OpenMapRealVector)v).ebeMultiply(this);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	((  OpenMapRealVector)v).ebeMultiply(this);	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(    	compilable	  [FE]  StackOverflowError  	89	2	replace
556	[BUG]  [BUGGY]  ((  OpenMapRealVector)v).ebeMultiply(this);  [FE]  StackOverflowError  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  ((  OpenMapRealVector)v).ebeMultiply(this);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	((  OpenMapRealVector)v).ebeMultiply(this);	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(    	compilable	  [FE]  StackOverflowError  	89	2	replace
557	[BUG]  [BUGGY]  new  OpenMapRealVector(this,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [CE]  no  suitable  constructor  found  for  OpenMapRealVector(OpenMapRealVector,int,double)  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  new  OpenMapRealVector(this,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	new  OpenMapRealVector(this,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE);	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(    	non-compiled	[CE]  no  suitable  constructor  found  for  OpenMapRealVector(OpenMapRealVector,int,double)	89	None	replace
558	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  new  OpenMapRealVector(this,  v.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	new  OpenMapRealVector(this,  v.getDimension());	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(    	compilable	  [FE]  MathRuntimeException$6  	89	1	replace
559	[BUG]  [BUGGY]  new  OpenMapRealVector(this,  v.getDimension());  [FE]  MathRuntimeException$6  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  new  OpenMapRealVector(this,  v.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	new  OpenMapRealVector(this,  v.getDimension());	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(    	compilable	  [FE]  MathRuntimeException$6  	89	1	replace
560	[BUG]  [BUGGY]  new  OpenMapRealVector(this,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE));  [CE]  ';'  expected  [FE]                      MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  new  OpenMapRealVector(this,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE));  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	new  OpenMapRealVector(this,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE));	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(    	non-compiled	[CE]  ';'  expected	89	None	replace
561	[BUG]  [BUGGY]  Annotation  <  RealVector>  res  =  new  RealVector(v,  this.getDimension());  [CE]  cannot  find  symbol  [FE]        MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Annotation  <  RealVector>  res  =  new  RealVector(v,  this.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Annotation  <  RealVector>  res  =  new  RealVector(v,  this.getDimension());	  Annotation    <    RealVector>    res    =    new    RealVector(this,    v.getDimension());    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
562	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  illegal  start  of  expression  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v  ==  null)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }	  if(v    ==    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
563	[BUG]  [BUGGY]  epsilon.add(new  OpenMapRealVector(v));  [CE]  double  cannot  be  dereferenced  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  epsilon.add(new  OpenMapRealVector(v));  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	epsilon.add(new  OpenMapRealVector(v));	  vices.add(new    OpenMapRealVector(v));    	non-compiled	[CE]  double  cannot  be  dereferenced	29	None	replace
564	[BUG]  [BUGGY]  automation.add(new  OpenMapRealVector(v));  [CE]  cannot  find  symbol  automation  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  automation.add(new  OpenMapRealVector(v));  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	automation.add(new  OpenMapRealVector(v));	  vices.add(new    OpenMapRealVector(v));    	non-compiled	[CE]  cannot  find  symbol  automation	29	None	replace
565	[BUG]  [BUGGY]  NeighborVector  res  =  new  OpenMapRealVector(v);  [CE]  cannot  find  symbol  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  NeighborVector  res  =  new  OpenMapRealVector(v);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	NeighborVector  res  =  new  OpenMapRealVector(v);	  vices.add(new    OpenMapRealVector(v));    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
566	[BUG]  [BUGGY]  NeighborVector  v  =  new  OpenMapRealVector(v);  [CE]  cannot  find  symbol  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  NeighborVector  v  =  new  OpenMapRealVector(v);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	NeighborVector  v  =  new  OpenMapRealVector(v);	  vices.add(new    OpenMapRealVector(v));    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
567	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE    ||    v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	10	1	add
568	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE    ||    v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	10	1	add
569	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v  ==  null  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v    ==    null)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	compilable	  [FE]  AssertionError  	112	2	replace
570	[BUG]  [BUGGY]  if(v  ==  null  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [FE]  AssertionError  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v  ==  null  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v    ==    null)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	compilable	  [FE]  AssertionError  	112	2	replace
571	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v    ==    null)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	112	None	replace
572	[BUG]  [BUGGY]  Iterator  <  RealVector>  iter  =  this.v.getEntrySet().iterator();  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]        MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  RealVector>  iter  =  this.v.getEntrySet().iterator();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Iterator  <  RealVector>  iter  =  this.v.getEntrySet().iterator();	  Iterator    <    RealVector>    iter    =    v.getEntrySet().iterator();    	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	97	None	replace
573	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  ';'  expected  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }	  if(v    ==    null)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  ';'  expected	116	None	replace
574	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getDimension(),  v.getEntry());  [CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getDimension(),  v.getEntry());  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getDimension(),  v.getEntry());	  RealVector    res    =    new    RealVector(this,    v.getDimension(),    v.getDimension());    	non-compiled	[CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;	5	None	replace
575	[BUG]  [BUGGY]  Annotation  <  RealVector>  entry  =  v.entries.getEntry();  [CE]  cannot  find  symbol  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Annotation  <  RealVector>  entry  =  v.entries.getEntry();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Annotation  <  RealVector>  entry  =  v.entries.getEntry();	  Annotation    <    RealVector>    entry    =    v.getEntry();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
576	[BUG]  [BUGGY]  checkMultiply(v,  realVector.getDimension());  [CE]  cannot  find  symbol  realVector  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkMultiply(v,  realVector.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkMultiply(v,  realVector.getDimension());	  checkMultiply(v,    v.getDimension());    	non-compiled	[CE]  cannot  find  symbol  realVector	45	None	replace
577	[BUG]  [BUGGY]  if(v.isMultiply()  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  cannot  find  symbol  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.isMultiply()  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.isMultiply()  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }	  if(v.isMultiply())    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
578	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  no  suitable  constructor  found  for  OpenMapRealVector(OpenMapRealVector,double)  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }	  if(v.isMultiply())    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  OpenMapRealVector(OpenMapRealVector,double)	140	None	replace
579	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(v.getEntry(),  DEFAULT_ZERO_TOLERANCE);  [CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;  [FE]            MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(v.getEntry(),  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(v.getEntry(),  DEFAULT_ZERO_TOLERANCE);	  RealVector    res    =    new    RealVector(v.getEntry());    	non-compiled	[CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;	32	None	replace
580	[BUG]  [BUGGY]  CheckIntToDoubleHashMap(v.getDimension())  {  checkVectorDimensions(v.getDimension());  }  [CE]  ';'  expected  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  CheckIntToDoubleHashMap(v.getDimension())  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	CheckIntToDoubleHashMap(v.getDimension())  {  checkVectorDimensions(v.getDimension());  }	  if(v.getDimension()    ==    null)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  ';'  expected	49	None	replace
581	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  If(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  If(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    If(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	non-compiled	[CE]  ';'  expected	38	None	add
582	[BUG]  [BUGGY]  Annotation  <  RealVector>  res  =  new  RealVector(v,  this.entries.getDimension());  [CE]  cannot  find  symbol  [FE]          MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Annotation  <  RealVector>  res  =  new  RealVector(v,  this.entries.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Annotation  <  RealVector>  res  =  new  RealVector(v,  this.entries.getDimension());	  Annotation    <    RealVector>    res    =    new    RealVector(v.getDimension());    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
583	[BUG]  [BUGGY]  if(v.getEntry()!=  null)  {  if(v.getDimension()!=  DEFAULT_UNKNOWN)  {  checkVectorDimensions(v.getDimension());  }  [CE]  ';'  expected  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getEntry()!=  null)  {  if(v.getDimension()!=  DEFAULT_UNKNOWN)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getEntry()!=  null)  {  if(v.getDimension()!=  DEFAULT_UNKNOWN)  {  checkVectorDimensions(v.getDimension());  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(    	non-compiled	[CE]  ';'  expected	68	None	replace
584	[BUG]  [BUGGY]  checkDimensions(v,  epsilon,  v.getDimension());  [CE]  cannot  find  symbol  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkDimensions(v,  epsilon,  v.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkDimensions(v,  epsilon,  v.getDimension());	  checkDimensions(v,    epsilon.getDimension());    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
585	[BUG]  [BUGGY]  checkDimensions(v,  epsilon,  value.getDimension());  [CE]  cannot  find  symbol  value  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkDimensions(v,  epsilon,  value.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkDimensions(v,  epsilon,  value.getDimension());	  checkDimensions(v,    epsilon.getDimension());    	non-compiled	[CE]  cannot  find  symbol  value	80	None	replace
586	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions  [CE]  ';'  expected  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions	  	non-compiled	[CE]  ';'  expected	52	None	add
587	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDi  [CE]  ';'  expected  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDi  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDi	  	non-compiled	[CE]  ';'  expected	52	None	add
588	[BUG]  [BUGGY]  Iterator  <  RealVector>  iter  =  this.v.getEntryIterator();  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]          MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  RealVector>  iter  =  this.v.getEntryIterator();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Iterator  <  RealVector>  iter  =  this.v.getEntryIterator();	  Iterator    <    RealVector>    iter    =    v.getEntryIterator();    	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	98	None	replace
589	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	compilable	  [FE]  MathRuntimeException$6  	125	1	replace
590	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	compilable	  [FE]  MathRuntimeException$6  	125	1	replace
591	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  this;  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  this;  }	  	compilable	  [FE]  MathRuntimeException$6  	146	1	add
592	[BUG]  [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  this;  }  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  this;  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  this;  }	  	compilable	  [FE]  MathRuntimeException$6  	146	1	add
593	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	146	1	add
594	[BUG]  [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	146	1	add
595	[BUG]  [BUGGY]  double  dimension  =  v.getDimension();  double  dimension  =  V.getDimension();  [CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  double  dimension  =  v.getDimension();  double  dimension  =  V.getDimension();  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	double    dimension    =    v.getDimension();    double  dimension  =  V.getDimension();	  	non-compiled	[CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)	21	None	add
596	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_NUMBER_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [CE]  cannot  find  symbol  DEFAULT_NUMBER_TOLERANCE  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_NUMBER_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  DEFAULT_NUMBER_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_NUMBER_TOLERANCE	51	None	replace
597	[BUG]  [BUGGY]  Iterator  <  RealVector>  iter  =  new  OpenMapRealVector(v.entries().iterator());  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]        MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  RealVector>  iter  =  new  OpenMapRealVector(v.entries().iterator());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Iterator  <  RealVector>  iter  =  new  OpenMapRealVector(v.entries().iterator());	          Iterator    <    RealVector>    iter    =    v.entries().iterator();    	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	108	None	replace
598	[BUG]  [BUGGY]  if(v.isMultiply()  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  cannot  find  symbol  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.isMultiply()  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.isMultiply()  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v.isMultiply())    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
599	[BUG]  [BUGGY]  if(v.isMultiply())  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.isMultiply())  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.isMultiply())  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v.isMultiply())    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	132	None	replace
600	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO)  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [CE]  ')'  expected  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO)  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  ==  DEFAULT_ZERO)  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO    	non-compiled	[CE]  ')'  expected	117	None	replace
601	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getSize(),  v.getDimension());  [CE]  cannot  find  symbol  [FE]                      MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getSize(),  v.getDimension());  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getSize(),  v.getDimension());	  RealVector    res    =    new    RealVector(this,    v.getDimension(),    v.getSize());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
602	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getSize()  +  1);  [CE]  cannot  find  symbol  [FE]                        MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getSize()  +  1);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getSize()  +  1);	  RealVector    res    =    new    RealVector(this,    v.getDimension(),    v.getSize());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
603	[BUG]  [BUGGY]  if(v.getEntry()!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getEntry()!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getEntry()!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  ';'  expected	155	None	replace
604	[BUG]  [BUGGY]  CheckVectorDimensions(v,  this.entries.getDimension());  [CE]  cannot  find  symbol  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  CheckVectorDimensions(v,  this.entries.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	CheckVectorDimensions(v,  this.entries.getDimension());	  CheckVectorDimensions(v.getDimension());    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
605	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  this;  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    this;    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	152	1	add
606	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  this;  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  this;  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    this;    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	152	1	add
607	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  this;  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  CheckVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [CE]  cannot  find  symbol  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  this;  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  CheckVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    this;    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  CheckVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	non-compiled	[CE]  cannot  find  symbol	152	None	add
608	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  v.getDimension());  [CE]  RealVector  is  abstract;  cannot  be  instantiated  [FE]                MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  v.getDimension());  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  v.getDimension());	  RealVector    res    =    new    RealVector(this,    v.getDimension(),    DEFAULT_ZERO_TOLERANCE);    	non-compiled	[CE]  RealVector  is  abstract;  cannot  be  instantiated	4	None	replace
609	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  ';'  expected  [FE]              MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=  null)  {  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }	  if(v!=    null)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  ';'  expected	115	None	replace
610	[BUG]  [BUGGY]  new  OpenMapRealVector(this,  v.getKey(),  v.getEntry());  [CE]  cannot  find  symbol  [FE]          MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  new  OpenMapRealVector(this,  v.getKey(),  v.getEntry());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	new  OpenMapRealVector(this,  v.getKey(),  v.getEntry());	  new    OpenMapRealVector(this,    v.getEntry());    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
611	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	66	1	add
612	[BUG]  [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=        DEFAULT_ZERO_TOLERANCE)        {        checkVectorDimensions(v.getDimension());        }        else        {        return        new        OpenMapRealVector(this);        }        if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	66	1	add
613	[BUG]  [BUGGY]  epsilon.getValue()  *  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  [CE]  not  a  statement  [FE]                  MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  epsilon.getValue()  *  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	epsilon.getValue()  *  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(    	non-compiled	[CE]  not  a  statement	13	None	replace
614	[BUG]  [BUGGY]  epsilon,  v.getDimension());  [CE]  not  a  statement  [FE]                    MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  epsilon,  v.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	epsilon,  v.getDimension());	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(    	non-compiled	[CE]  not  a  statement	13	None	replace
615	[BUG]  [BUGGY]  epsilon,  v.getDimension())  {  checkVectorDimensions(v.getDimension());  [CE]  not  a  statement  [FE]                      MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  epsilon,  v.getDimension())  {  checkVectorDimensions(v.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	epsilon,  v.getDimension())  {  checkVectorDimensions(v.getDimension());	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(    	non-compiled	[CE]  not  a  statement	13	None	replace
616	[BUG]  [BUGGY]  epsilon,  v.getDimension()  *  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  [CE]  not  a  statement  [FE]                        MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  epsilon,  v.getDimension()  *  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	epsilon,  v.getDimension()  *  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(    	non-compiled	[CE]  not  a  statement	13	None	replace
617	[BUG]  [BUGGY]  Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.getEntrySet().iterator();  [CE]  >  expected  [FE]        MathRuntimeException$6      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.getEntrySet().iterator();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.getEntrySet().iterator();	  Iterator    <    Map.Entry    <    String,    RealVector>    entry    =    v.entrySet().iterator();    	non-compiled	[CE]  >  expected	119	None	replace
618	[BUG]  [BUGGY]  if(v.getEntry()!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  this;  }  [CE]  ';'  expected  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getEntry()!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  this;  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getEntry()!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  this;  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    this;    }    	non-compiled	[CE]  ';'  expected	153	None	replace
619	[BUG]  [BUGGY]          int    dimension    =    v.getDimension();    int  Dimension  =  v.getDimension();  Int  dimension  =  v.getDimension();  int  Dimension  =  v.getDimension();  [CE]  cannot  find  symbol  [FE]    MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]          int    dimension    =    v.getDimension();    int  Dimension  =  v.getDimension();  Int  dimension  =  v.getDimension();  int  Dimension  =  v.getDimension();  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	                int        dimension        =        v.getDimension();        int    Dimension    =    v.getDimension();    Int  dimension  =  v.getDimension();  int  Dimension  =  v.getDimension();	  	non-compiled	[CE]  cannot  find  symbol	75	None	add
620	[BUG]  [BUGGY]          int    dimension    =    v.getDimension();    int  Dimension  =  v.getDimension();  int  dimension  =  v.getDimension();  int  Dimension  =  V.getDimension();  [CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)  [FE]      MathRuntimeException$6    [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]          int    dimension    =    v.getDimension();    int  Dimension  =  v.getDimension();  int  dimension  =  v.getDimension();  int  Dimension  =  V.getDimension();  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	                int        dimension        =        v.getDimension();        int    Dimension    =    v.getDimension();    int  dimension  =  v.getDimension();  int  Dimension  =  V.getDimension();	  	non-compiled	[CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)	75	None	add
