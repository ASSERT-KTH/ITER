bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  aughtException( "overflow:  gcd  is  2  <  31 ");  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  aughtException( "overflow:  gcd  is  2  <  31 ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	aughtException( "overflow:  gcd  is  2  <  31 ");	  if(v    ==    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    <    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
2	[BUG]  [BUGGY]  aughtException( "Overflow:  gcd  is  2  <  31 ");  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  aughtException( "Overflow:  gcd  is  2  <  31 ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	aughtException( "Overflow:  gcd  is  2  <  31 ");	  if(v    ==    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    <    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
3	[BUG]  [BUGGY]  ettyPrinter.println( "Overflow:  gcd  is  2  <  31 ");  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  ettyPrinter.println( "Overflow:  gcd  is  2  <  31 ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	ettyPrinter.println( "Overflow:  gcd  is  2  <  31 ");	  if(v    ==    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    <    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
4	[BUG]  [BUGGY]  aughtException( "overflow:  gcd  is  2  <  31 ",  v);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  aughtException( "overflow:  gcd  is  2  <  31 ",  v);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	aughtException( "overflow:  gcd  is  2  <  31 ",  v);	  if(v    ==    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    <    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
5	[BUG]  [BUGGY]  mutator  <  =  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2   ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  mutator  <  =  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2   ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	mutator  <  =  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2   ");  }	  mutator    <    =    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	88	None	replace
6	[BUG]  [BUGGY]  mutator  <  =  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  mutator  <  =  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2;  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	mutator  <  =  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2;  }	  mutator    <    =    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	88	None	replace
7	[BUG]  [BUGGY]  Mutator  <  =  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  Mutator  <  =  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	Mutator  <  =  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }	  mutator    <    =    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	88	None	replace
8	[BUG]  [BUGGY]  if(t  ==  0)  {  [CE]  cannot  find  symbol  t  [FE]          AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(t  ==  0)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(t  ==  0)  {	  if(u    ==    31)    {    if(u    >=    31)    {    	non-compiled	[CE]  cannot  find  symbol  t	16	None	replace
9	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]            AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  ==  1)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(k  ==  1)  {	  if(u    ==    31)    {    if(u    >=    31)    {    	compilable	  [FE]  ArithmeticException  	16	6	replace
10	[BUG]  [BUGGY]  if(k  ==  1)  {  [FE]  ArithmeticException  [FE]            AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  ==  1)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  ==  1)  {	  if(u    ==    31)    {    if(u    >=    31)    {    	compilable	  [FE]  ArithmeticException  	16	6	replace
11	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  32  ||  v  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  <  32  ||  v  ==  31)  {	  if(u    <    31    ||    v    ==    31)    {    	compilable	  [FE]  ArithmeticException  	122	9	replace
12	[BUG]  [BUGGY]  if(u  <  32  ||  v  ==  31)  {  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  32  ||  v  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  32  ||  v  ==  31)  {	  if(u    <    31    ||    v    ==    31)    {    	compilable	  [FE]  ArithmeticException  	122	9	replace
13	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  32  ||  v  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  <  32  ||  v  ==  32)  {	  if(u    <    31    ||    v    ==    31)    {    	compilable	  [FE]  ArithmeticException  	122	9	replace
14	[BUG]  [BUGGY]  if(u  <  32  ||  v  ==  32)  {  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  32  ||  v  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  32  ||  v  ==  32)  {	  if(u    <    31    ||    v    ==    31)    {    	compilable	  [FE]  ArithmeticException  	122	9	replace
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  >=  31  ||  v  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  >=  31  ||  v  ==  31)  {	  if(u    <    31    ||    v    ==    31)    {    	compilable	  [FE]  AssertionFailedError  	122	1	replace
16	[BUG]  [BUGGY]  if(u  >=  31  ||  v  ==  31)  {  [FE]  AssertionFailedError  [FE]        ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  >=  31  ||  v  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  >=  31  ||  v  ==  31)  {	  if(u    <    31    ||    v    ==    31)    {    	compilable	  [FE]  AssertionFailedError  	122	1	replace
17	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  -(v/2)/*B3*/;  [CE]  :  expected  [FE]                    AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  -(v/2)/*B3*/;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  -(v/2)/*B3*/;	  int    k    =((    u&1)    ==    1)?    -(v&2)/*B3*/;    	non-compiled	[CE]  :  expected	146	None	replace
18	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  <  31  ||  v  >  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(k  <  31  ||  v  >  31)  {	  if(v    <    31    ||    k    >    31)    {    	compilable	  [FE]  ArithmeticException  	150	9	replace
19	[BUG]  [BUGGY]  if(k  <  31  ||  v  >  31)  {  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  <  31  ||  v  >  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  <  31  ||  v  >  31)  {	  if(v    <    31    ||    k    >    31)    {    	compilable	  [FE]  ArithmeticException  	150	9	replace
20	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  <  32  ||  k  >  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(v  <  32  ||  k  >  31)  {	  if(v    <    31    ||    k    >    31)    {    	compilable	  [FE]  ArithmeticException  	150	9	replace
21	[BUG]  [BUGGY]  if(v  <  32  ||  k  >  31)  {  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  <  32  ||  k  >  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v  <  32  ||  k  >  31)  {	  if(v    <    31    ||    k    >    31)    {    	compilable	  [FE]  ArithmeticException  	150	9	replace
22	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/  +  1;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/  +  1;	  int    k    =((    u&1)    ==    1)?    -1    :    -(u/2)/*B3*/    +    1;    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
23	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  1;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  1;	  int    k    =((    u&1)    ==    1)?    -1    :    -(u/2)/*B3*/    +    1;    	non-compiled	[CE]  <identifier>  expected	118	None	replace
24	[BUG]  [BUGGY]  mutators.add(new  ArithmeticException( "Overflow:  gcd  is  2  >>  31 "));  [CE]  illegal  start  of  type  [FE]            ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  mutators.add(new  ArithmeticException( "Overflow:  gcd  is  2  >>  31 "));  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	mutators.add(new  ArithmeticException( "Overflow:  gcd  is  2  >>  31 "));	  mutators.add(new    ArithmeticException(   "overflow:    gcd    is    2    >=    31   "));    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
25	[BUG]  [BUGGY]  if(k  ==  31  ||  v  ==  31)  {  if(k  ==  31  ||  v  ==  31)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  ==  31  ||  v  ==  31)  {  if(k  ==  31  ||  v  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k    ==    31    ||    v    ==    31)    {    if(k  ==  31  ||  v  ==  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
26	[BUG]  [BUGGY]  if(k  ==  31  ||  v  ==  31)  {  if(k  ==  31  ||  v  >=  31)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  ==  31  ||  v  ==  31)  {  if(k  ==  31  ||  v  >=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k    ==    31    ||    v    ==    31)    {    if(k  ==  31  ||  v  >=  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
27	[BUG]  [BUGGY]  if(k  ==  31  ||  v  ==  31)  {  if(k  ==  31  ||  v!=  31)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  ==  31  ||  v  ==  31)  {  if(k  ==  31  ||  v!=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k    ==    31    ||    v    ==    31)    {    if(k  ==  31  ||  v!=  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
28	[BUG]  [BUGGY]  if(k  ==  31  ||  v  ==  31)  {  if(k  >=  31  ||  v  ==  31)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  ==  31  ||  v  ==  31)  {  if(k  >=  31  ||  v  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k    ==    31    ||    v    ==    31)    {    if(k  >=  31  ||  v  ==  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
29	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >>        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }	  	compilable	  [FE]  ArithmeticException  	37	9	add
30	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >>        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }	  	compilable	  [FE]  ArithmeticException  	37	9	add
31	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >>        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }	  	compilable	  [FE]  ArithmeticException  	37	9	add
32	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >>        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }	  	compilable	  [FE]  ArithmeticException  	37	9	add
33	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]        ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException(  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >>        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
34	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  if(u  <  31)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]          ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  if(u  <  31)  {  throw  new  ArithmeticException(  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >>        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  if(u  <  31)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
35	[BUG]  [BUGGY]  mutator  <  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  mutator  <  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	mutator  <  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }	          if(u    <    31)    {    throw    new    ArithmeticException(       "overflow:    gcd    is    2    >>    31       ");    }    if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31       ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	38	None	replace
36	[BUG]  [BUGGY]  mutator  <  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31 ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  mutator  <  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	mutator  <  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31 ");  }	          if(u    <    31)    {    throw    new    ArithmeticException(       "overflow:    gcd    is    2    >>    31       ");    }    if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31       ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	38	None	replace
37	[BUG]  [BUGGY]  mutator  <  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  mutator  <  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	mutator  <  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }	          if(u    <    31)    {    throw    new    ArithmeticException(       "overflow:    gcd    is    2    >>    31       ");    }    if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31       ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	38	None	replace
38	[BUG]  [BUGGY]  mutator  <  0)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  >>  31 ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  mutator  <  0)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  >>  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	mutator  <  0)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  >>  31 ");  }	          if(u    <    31)    {    throw    new    ArithmeticException(       "overflow:    gcd    is    2    >>    31       ");    }    if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31       ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	38	None	replace
39	[BUG]  [BUGGY]  if(k  <  31  ||  u  >=  31)  {  if(k  <  31  ||  u  >=  31)  {  [CE]  illegal  start  of  expression  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  <  31  ||  u  >=  31)  {  if(k  <  31  ||  u  >=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k    <    31    ||    u    >=    31)    {    if(k  <  31  ||  u  >=  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	142	None	add
40	[BUG]  [BUGGY]  if(k  <  31  ||  u  >=  31)  {  if(k  <  31  ||  u!=  31)  {  [CE]  illegal  start  of  expression  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  <  31  ||  u  >=  31)  {  if(k  <  31  ||  u!=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k    <    31    ||    u    >=    31)    {    if(k  <  31  ||  u!=  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	142	None	add
41	[BUG]  [BUGGY]  if(k  <  31  ||  u  >=  31)  {  if(k  <  31  ||  u  >>  31)  {  [CE]  illegal  start  of  expression  [FE]        ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  <  31  ||  u  >=  31)  {  if(k  <  31  ||  u  >>  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k    <    31    ||    u    >=    31)    {    if(k  <  31  ||  u  >>  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	142	None	add
42	[BUG]  [BUGGY]  if(k  <  31  ||  u  >=  31)  {  if(k  <  31  ||  u  ==  31)  {  [CE]  illegal  start  of  expression  [FE]          ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  <  31  ||  u  >=  31)  {  if(k  <  31  ||  u  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k    <    31    ||    u    >=    31)    {    if(k  <  31  ||  u  ==  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	142	None	add
43	[BUG]  [BUGGY]  mutators.add(new  ArithmeticException( "Overflow:  gcd  is  2 "));  [CE]  illegal  start  of  type  [FE]          ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  mutators.add(new  ArithmeticException( "Overflow:  gcd  is  2 "));  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	mutators.add(new  ArithmeticException( "Overflow:  gcd  is  2 "));	  mutators.add(new    ArithmeticException(   "overflow:    gcd    is    2   "));    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
44	[BUG]  [BUGGY]  mutators.add(new  ArithmeticException( "u:  gcd  is  2 "));  [CE]  illegal  start  of  type  [FE]            ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  mutators.add(new  ArithmeticException( "u:  gcd  is  2 "));  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	mutators.add(new  ArithmeticException( "u:  gcd  is  2 "));	  mutators.add(new    ArithmeticException(   "overflow:    gcd    is    2   "));    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
45	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  0)?  -1  -(u/2)/*B3*/,  v);  [CE]  :  expected  [FE]                    AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  0)?  -1  -(u/2)/*B3*/,  v);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  0)?  -1  -(u/2)/*B3*/,  v);	  int    k    =((    u&1)    ==    0)?    -(u/2)/*B3*/,    v);    	non-compiled	[CE]  :  expected	42	None	replace
46	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  0)?  -(u/2)/*B3*/,  31);  [CE]  :  expected  [FE]                      AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  0)?  -(u/2)/*B3*/,  31);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  0)?  -(u/2)/*B3*/,  31);	  int    k    =((    u&1)    ==    0)?    -(u/2)/*B3*/,    v);    	non-compiled	[CE]  :  expected	42	None	replace
47	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  0)?  -(v/2)/*B3*/,  u);  [CE]  :  expected  [FE]                        AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  0)?  -(v/2)/*B3*/,  u);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  0)?  -(v/2)/*B3*/,  u);	  int    k    =((    u&1)    ==    0)?    -(u/2)/*B3*/,    v);    	non-compiled	[CE]  :  expected	42	None	replace
48	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  ==  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >>        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }	  	compilable	  [FE]  ArithmeticException  	39	9	add
49	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  ==  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  ==  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >>        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }	  	compilable	  [FE]  ArithmeticException  	39	9	add
50	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  ==  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >>        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }	  	compilable	  [FE]  ArithmeticException  	39	9	add
51	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  ==  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  ==  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >>        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }	  	compilable	  [FE]  ArithmeticException  	39	9	add
52	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]        ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  ==  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >>        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }	  	compilable	  [FE]  ArithmeticException  	39	9	add
53	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  ==  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  [FE]  ArithmeticException  [FE]        ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  ==  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >>        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }	  	compilable	  [FE]  ArithmeticException  	39	9	add
54	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  ==  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]          ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  ==  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException(  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >>        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
55	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u!=  31  ||  k  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u!=  31  ||  k  ==  31)  {	  if(u    >=    31    ||    k    ==    31)    {    	compilable	  [FE]  ArithmeticException  	126	9	replace
56	[BUG]  [BUGGY]  if(u!=  31  ||  k  ==  31)  {  [FE]  ArithmeticException  [FE]    AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u!=  31  ||  k  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u!=  31  ||  k  ==  31)  {	  if(u    >=    31    ||    k    ==    31)    {    	compilable	  [FE]  ArithmeticException  	126	9	replace
57	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  >=  32  ||  k  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  >=  32  ||  k  ==  32)  {	  if(u    >=    31    ||    k    ==    31)    {    	compilable	  [FE]  AssertionFailedError  	126	1	replace
58	[BUG]  [BUGGY]  if(u  >=  32  ||  k  ==  32)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  >=  32  ||  k  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  >=  32  ||  k  ==  32)  {	  if(u    >=    31    ||    k    ==    31)    {    	compilable	  [FE]  AssertionFailedError  	126	1	replace
59	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  0  :  -(u/2)/*B3*/,  v);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  0  :  -(u/2)/*B3*/,  v);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  0  :  -(u/2)/*B3*/,  v);	  int    k    =((    u&1)    ==    1)?    0    :    -(u/2)/*B3*/);    	non-compiled	[CE]  ';'  expected	33	None	replace
60	[BUG]  [BUGGY]  ettyPrinter.println( "Overflow:  gcd  is  2 ");  [CE]  illegal  start  of  type  [FE]            ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  ettyPrinter.println( "Overflow:  gcd  is  2 ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	ettyPrinter.println( "Overflow:  gcd  is  2 ");	  ettyPrinter.println(   "Overflow:    gcd    is    2    ==    31   ");    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
61	[BUG]  [BUGGY]  ettyPrinter.println( "Overflow:  gcd  is  2 ",  k);  [CE]  illegal  start  of  type  [FE]              ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  ettyPrinter.println( "Overflow:  gcd  is  2 ",  k);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	ettyPrinter.println( "Overflow:  gcd  is  2 ",  k);	  ettyPrinter.println(   "Overflow:    gcd    is    2    ==    31   ");    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
62	[BUG]  [BUGGY]  ettyPrinter.println( "Overflow:  gcd  is  2  {  31, ");  [CE]  illegal  start  of  type  [FE]                ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  ettyPrinter.println( "Overflow:  gcd  is  2  {  31, ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	ettyPrinter.println( "Overflow:  gcd  is  2  {  31, ");	  ettyPrinter.println(   "Overflow:    gcd    is    2    ==    31   ");    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
63	[BUG]  [BUGGY]  while(u  <  31  ||  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }  [CE]  illegal  start  of  type  [FE]          ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  <  31  ||  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  31  ||  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }	  while(u    <    31    &&    k    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
64	[BUG]  [BUGGY]  while(u  <  31  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2   ");  }  [CE]  illegal  start  of  type  [FE]            ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  <  31  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2   ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  31  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2   ");  }	  while(u    <    31    &&    k    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
65	[BUG]  [BUGGY]  while(u  <  31  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  [0]  {  31, ");  }  [CE]  illegal  start  of  type  [FE]              ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  <  31  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  [0]  {  31, ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  31  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  [0]  {  31, ");  }	  while(u    <    31    &&    k    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
66	[BUG]  [BUGGY]  while(u  <  31  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  [1]  {  31, ");  }  [CE]  illegal  start  of  type  [FE]                ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  <  31  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  [1]  {  31, ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  31  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  [1]  {  31, ");  }	  while(u    <    31    &&    k    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
67	[BUG]  [BUGGY]  mutator  <  0)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  ==  31 ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  mutator  <  0)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  ==  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	mutator  <  0)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  ==  31 ");  }	          if(u    <    31)    {    throw    new    ArithmeticException(       "overflow:    gcd    is    2    >>    31       ");    }    if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31       ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	40	None	replace
68	[BUG]  [BUGGY]  if(u  <  32  ||  k  >  31)  {  if(u  <  32  ||  k  >  31)  {  [CE]  illegal  start  of  expression  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  32  ||  k  >  31)  {  if(u  <  32  ||  k  >  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    32    ||    k    >    31)    {    if(u  <  32  ||  k  >  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
69	[BUG]  [BUGGY]  if(u  <  32  ||  k  >  31)  {  if(u  >=  32  ||  k  >  31)  {  [CE]  illegal  start  of  expression  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  32  ||  k  >  31)  {  if(u  >=  32  ||  k  >  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    32    ||    k    >    31)    {    if(u  >=  32  ||  k  >  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
70	[BUG]  [BUGGY]  if(u  <  32  ||  k  >  31)  {  If(u  <  32  ||  k  >  31)  {  [CE]  ';'  expected  [FE]        ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  32  ||  k  >  31)  {  If(u  <  32  ||  k  >  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    32    ||    k    >    31)    {    If(u  <  32  ||  k  >  31)  {	  	non-compiled	[CE]  ';'  expected	57	None	add
71	[BUG]  [BUGGY]  if(u  <  32  ||  k  >  31)  {  if(u  <  32  ||  k  >  31,)  {  [CE]  ')'  expected  [FE]          ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  32  ||  k  >  31)  {  if(u  <  32  ||  k  >  31,)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    32    ||    k    >    31)    {    if(u  <  32  ||  k  >  31,)  {	  	non-compiled	[CE]  ')'  expected	57	None	add
72	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  1  :  -(u/2)/*B3*/,  denominator);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  1  :  -(u/2)/*B3*/,  denominator);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  1  :  -(u/2)/*B3*/,  denominator);	  int    k    =((    u&1)    ==    1)?    1    :    -(u/2)/*B3*/);    	non-compiled	[CE]  ';'  expected	137	None	replace
73	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  1  :  -(u/2)/*B3*/,  v);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  1  :  -(u/2)/*B3*/,  v);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  1  :  -(u/2)/*B3*/,  v);	  int    k    =((    u&1)    ==    1)?    1    :    -(u/2)/*B3*/);    	non-compiled	[CE]  ';'  expected	137	None	replace
74	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  1  :  -1  -(u/2)/*B3*/);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  1  :  -1  -(u/2)/*B3*/);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  1  :  -1  -(u/2)/*B3*/);	  int    k    =((    u&1)    ==    1)?    1    :    -(u/2)/*B3*/);    	non-compiled	[CE]  ';'  expected	137	None	replace
75	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  ==  32  ||  k  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  ==  32  ||  k  ==  32)  {	  if(u    ==    31    ||    k    ==    31)    {    if(u    ==    31    ||    k!=    31)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
76	[BUG]  [BUGGY]  if(u  ==  32  ||  k  ==  32)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  ==  32  ||  k  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  ==  32  ||  k  ==  32)  {	  if(u    ==    31    ||    k    ==    31)    {    if(u    ==    31    ||    k!=    31)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
77	[BUG]  [BUGGY]  if(k  <  31  ||  u  >  31)  {  If(u  <  31  ||  k  >  31)  {  [CE]  ';'  expected  [FE]            ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  <  31  ||  u  >  31)  {  If(u  <  31  ||  k  >  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  <  31  ||  u  >  31)  {  If(u  <  31  ||  k  >  31)  {	  if(u    <    31    ||    k    >    31)    {    If(u    <    31    ||    k    >    31)    {    	non-compiled	[CE]  ';'  expected	81	None	replace
78	[BUG]  [BUGGY]  If(u  <  31  ||  k  >  31)  {  [CE]  ';'  expected  [FE]              ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  If(u  <  31  ||  k  >  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	If(u  <  31  ||  k  >  31)  {	  if(u    <    31    ||    k    >    31)    {    If(u    <    31    ||    k    >    31)    {    	non-compiled	[CE]  ';'  expected	81	None	replace
79	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  0)?  -(v/2)/*B3*/);  [CE]  :  expected  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  0)?  -(v/2)/*B3*/);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  0)?  -(v/2)/*B3*/);	  int    k    =((    u&1)    ==    0)?    -(v&2)/*B3*/);    	non-compiled	[CE]  :  expected	151	None	replace
80	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  0)?  -1  -(v&2)/*B3*/);  [CE]  :  expected  [FE]                    AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  0)?  -1  -(v&2)/*B3*/);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  0)?  -1  -(v&2)/*B3*/);	  int    k    =((    u&1)    ==    0)?    -(v&2)/*B3*/);    	non-compiled	[CE]  :  expected	151	None	replace
81	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]              ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  <  31  ||  u  >  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(k  <  31  ||  u  >  32)  {	  if(u    <    31    ||    k    >    31)    {    if(u    <    31    ||    k    >    31,)    {    	compilable	  [FE]  ArithmeticException  	82	9	replace
82	[BUG]  [BUGGY]  if(k  <  31  ||  u  >  32)  {  [FE]  ArithmeticException  [FE]              ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  <  31  ||  u  >  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  <  31  ||  u  >  32)  {	  if(u    <    31    ||    k    >    31)    {    if(u    <    31    ||    k    >    31,)    {    	compilable	  [FE]  ArithmeticException  	82	9	replace
83	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]        ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  <  31  ||  v  ==  0)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(k  <  31  ||  v  ==  0)  {	  if(k    <    31    ||    t    ==    0)    {    	compilable	  [FE]  ArithmeticException  	153	9	replace
84	[BUG]  [BUGGY]  if(k  <  31  ||  v  ==  0)  {  [FE]  ArithmeticException  [FE]        ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  <  31  ||  v  ==  0)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  <  31  ||  v  ==  0)  {	  if(k    <    31    ||    t    ==    0)    {    	compilable	  [FE]  ArithmeticException  	153	9	replace
85	[BUG]  [BUGGY]  if(k  <  31  ||  gcd  ==  0)  {  [CE]  cannot  find  symbol  gcd  [FE]          ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  <  31  ||  gcd  ==  0)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  <  31  ||  gcd  ==  0)  {	  if(k    <    31    ||    t    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  gcd	153	None	replace
86	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]            ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  <  31  ||  u  ==  0)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(k  <  31  ||  u  ==  0)  {	  if(k    <    31    ||    t    ==    0)    {    	compilable	  [FE]  ArithmeticException  	153	9	replace
87	[BUG]  [BUGGY]  if(k  <  31  ||  u  ==  0)  {  [FE]  ArithmeticException  [FE]            ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  <  31  ||  u  ==  0)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  <  31  ||  u  ==  0)  {	  if(k    <    31    ||    t    ==    0)    {    	compilable	  [FE]  ArithmeticException  	153	9	replace
88	[BUG]  [BUGGY]  if(u  ==  31  ||  v  ==  31)  {  if(u  ==  31  ||  v  ==  31)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  ==  31  ||  v  ==  31)  {  if(u  ==  31  ||  v  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    ==    31    ||    v    ==    31)    {    if(u  ==  31  ||  v  ==  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
89	[BUG]  [BUGGY]  if(u  ==  31  ||  v  ==  31)  {  if(u  ==  31  ||  v!=  31)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  ==  31  ||  v  ==  31)  {  if(u  ==  31  ||  v!=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    ==    31    ||    v    ==    31)    {    if(u  ==  31  ||  v!=  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
90	[BUG]  [BUGGY]  if(u  ==  31  ||  v  ==  31)  {  if(u  ==  31  ||  v  >=  31)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  ==  31  ||  v  ==  31)  {  if(u  ==  31  ||  v  >=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    ==    31    ||    v    ==    31)    {    if(u  ==  31  ||  v  >=  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
91	[BUG]  [BUGGY]  if(u  ==  31  ||  v  ==  31)  {  if(u  >=  31  ||  v  ==  31)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  ==  31  ||  v  ==  31)  {  if(u  >=  31  ||  v  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    ==    31    ||    v    ==    31)    {    if(u  >=  31  ||  v  ==  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
92	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/,  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/,  1);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/,  1);	  int    k    =((    u&1)    ==    1)?    -1    :    -(u/2)/*B3*/,    1);    	non-compiled	[CE]  <identifier>  expected	116	None	replace
93	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  2);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  2);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  2);	  int    k    =((    u&1)    ==    1)?    -1    :    -(u/2)/*B3*/,    1);    	non-compiled	[CE]  <identifier>  expected	116	None	replace
94	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  3);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  3);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  3);	  int    k    =((    u&1)    ==    1)?    -1    :    -(u/2)/*B3*/,    1);    	non-compiled	[CE]  <identifier>  expected	116	None	replace
95	[BUG]  [BUGGY]  if(v  ==  31  ||  u  ==  31)  {  if(v  ==  31  ||  u  ==  31)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  ==  31  ||  u  ==  31)  {  if(v  ==  31  ||  u  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v    ==    31    ||    u    ==    31)    {    if(v  ==  31  ||  u  ==  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	123	None	add
96	[BUG]  [BUGGY]  if(v  ==  31  ||  u  ==  31)  {  if(v  ==  31  ||  u!=  31)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  ==  31  ||  u  ==  31)  {  if(v  ==  31  ||  u!=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v    ==    31    ||    u    ==    31)    {    if(v  ==  31  ||  u!=  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	123	None	add
97	[BUG]  [BUGGY]  if(v  ==  31  ||  u  ==  31)  {  if(v  ==  31  ||  u  >=  31)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  ==  31  ||  u  ==  31)  {  if(v  ==  31  ||  u  >=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v    ==    31    ||    u    ==    31)    {    if(v  ==  31  ||  u  >=  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	123	None	add
98	[BUG]  [BUGGY]  if(v  ==  31  ||  u  ==  31)  {  if(v  >=  31  ||  u  ==  31)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  ==  31  ||  u  ==  31)  {  if(v  >=  31  ||  u  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v    ==    31    ||    u    ==    31)    {    if(v  >=  31  ||  u  ==  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	123	None	add
99	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  ==  32)  {	  if(u    ==    31)    {    if(u    {    31)    {    	compilable	  [FE]  AssertionFailedError  	136	1	replace
100	[BUG]  [BUGGY]  if(u  ==  32)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  ==  32)  {	  if(u    ==    31)    {    if(u    {    31)    {    	compilable	  [FE]  AssertionFailedError  	136	1	replace
101	[BUG]  [BUGGY]  int  k  =((  u&1)!=  1)?  v  :  -(u/2)/*B3*/);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)!=  1)?  v  :  -(u/2)/*B3*/);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)!=  1)?  v  :  -(u/2)/*B3*/);	  int    k    =((    u&1)    ==    1)?    v    :    -(u/2)/*B2*/);    	non-compiled	[CE]  ';'  expected	50	None	replace
102	[BUG]  [BUGGY]  if(v  <  31)  {  if(v  <  31)  {  [CE]  illegal  start  of  expression  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  <  31)  {  if(v  <  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v    <    31)    {    if(v  <  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
103	[BUG]  [BUGGY]  if(v  <  31)  {  If(v  <  31)  {  [CE]  ';'  expected  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  <  31)  {  If(v  <  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v    <    31)    {    If(v  <  31)  {	  	non-compiled	[CE]  ';'  expected	63	None	add
104	[BUG]  [BUGGY]  if(v  <  31)  {  if(v  >=  31)  {  [CE]  illegal  start  of  expression  [FE]        ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  <  31)  {  if(v  >=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v    <    31)    {    if(v  >=  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
105	[BUG]  [BUGGY]  if(v  <  31)  {  if(v  <  32)  {  [CE]  illegal  start  of  expression  [FE]          ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  <  31)  {  if(v  <  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v    <    31)    {    if(v  <  32)  {	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
106	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >>        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }	  	compilable	  [FE]  ArithmeticException  	35	9	add
107	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >>        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }	  	compilable	  [FE]  ArithmeticException  	35	9	add
108	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >>        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }	  	compilable	  [FE]  ArithmeticException  	35	9	add
109	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >>        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }	  	compilable	  [FE]  ArithmeticException  	35	9	add
110	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]        ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >>        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }	  	compilable	  [FE]  ArithmeticException  	35	9	add
111	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  [FE]  ArithmeticException  [FE]        ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >>        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }	  	compilable	  [FE]  ArithmeticException  	35	9	add
112	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]          ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException(  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >>        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
113	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  if(u  <  31)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]            ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  if(u  <  31)  {  throw  new  ArithmeticException(  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >>        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  if(u  <  31)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
114	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  ==  31  ||  u  >=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(k  ==  31  ||  u  >=  31)  {	  if(k    >=    31)    {    	compilable	  [FE]  AssertionFailedError  	62	1	replace
115	[BUG]  [BUGGY]  if(k  ==  31  ||  u  >=  31)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  ==  31  ||  u  >=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  ==  31  ||  u  >=  31)  {	  if(k    >=    31)    {    	compilable	  [FE]  AssertionFailedError  	62	1	replace
116	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  <  31  ||  u>2  ||  k  >=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(k  <  31  ||  u>2  ||  k  >=  31)  {	  if(k    >=    31)    {    	compilable	  [FE]  ArithmeticException  	62	9	replace
117	[BUG]  [BUGGY]  if(k  <  31  ||  u>2  ||  k  >=  31)  {  [FE]  ArithmeticException  [FE]      AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  <  31  ||  u>2  ||  k  >=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  <  31  ||  u>2  ||  k  >=  31)  {	  if(k    >=    31)    {    	compilable	  [FE]  ArithmeticException  	62	9	replace
118	[BUG]  [BUGGY]  if(k  ==  31)  {  If(k  <  31)  {  [CE]  ';'  expected  [FE]          ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  ==  31)  {  If(k  <  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  ==  31)  {  If(k  <  31)  {	  if(k    <    31)    {    If(k    <    31)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
119	[BUG]  [BUGGY]  if(u  <  31)  {  If(k  <  31)  {  [CE]  ';'  expected  [FE]            ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31)  {  If(k  <  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  31)  {  If(k  <  31)  {	  if(k    <    31)    {    If(k    <    31)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
120	[BUG]  [BUGGY]  if(k  ==  31)  {  If(k  >=  31)  {  [CE]  ';'  expected  [FE]              ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  ==  31)  {  If(k  >=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  ==  31)  {  If(k  >=  31)  {	  if(k    <    31)    {    If(k    <    31)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
121	[BUG]  [BUGGY]  if(u  <  31)  {  If(v  <  31)  {  [CE]  ';'  expected  [FE]                ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31)  {  If(v  <  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  31)  {  If(v  <  31)  {	  if(k    <    31)    {    If(k    <    31)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
122	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  v  /(u/2)/*B3*/;  [CE]  :  expected  [FE]                    AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  v  /(u/2)/*B3*/;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  v  /(u/2)/*B3*/;	  int    k    =((    u&1)    ==    1)?    v    -(u/2)/*B3*/;    	non-compiled	[CE]  :  expected	56	None	replace
123	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  v  -(u/2)/*B2*/;  [CE]  :  expected  [FE]                      AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  v  -(u/2)/*B2*/;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  v  -(u/2)/*B2*/;	  int    k    =((    u&1)    ==    1)?    v    -(u/2)/*B3*/;    	non-compiled	[CE]  :  expected	56	None	replace
124	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  ==  31  ||  u  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(k  ==  31  ||  u  ==  32)  {	  if(u    ==    31    ||    k    ==    32)    {    	compilable	  [FE]  AssertionFailedError  	78	1	replace
125	[BUG]  [BUGGY]  if(k  ==  31  ||  u  ==  32)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  ==  31  ||  u  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  ==  31  ||  u  ==  32)  {	  if(u    ==    31    ||    k    ==    32)    {    	compilable	  [FE]  AssertionFailedError  	78	1	replace
126	[BUG]  [BUGGY]  while(u  ==  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  31 ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  ==  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  ==  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  31 ");  }	  if(u    ==    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    <    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
127	[BUG]  [BUGGY]  while(u  >=  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  31 ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  >=  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  >=  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  31 ");  }	  if(u    ==    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    <    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
128	[BUG]  [BUGGY]  If(u  ==  31  ||  k  ==  31)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  If(u  ==  31  ||  k  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	If(u  ==  31  ||  k  ==  31)  {	  if(u    ==    31    ||    k    ==    31)    {    If(u    ==    31    ||    k    ==    31)    {    	non-compiled	[CE]  ';'  expected	114	None	replace
129	[BUG]  [BUGGY]  if(u  <  31  ||  v  >  32)  {  if(u  <  31  ||  v  >  32)  {  [CE]  illegal  start  of  expression  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31  ||  v  >  32)  {  if(u  <  31  ||  v  >  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    31    ||    v    >    32)    {    if(u  <  31  ||  v  >  32)  {	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
130	[BUG]  [BUGGY]  if(u  <  31  ||  v  >  32)  {  if(u  >=  31  ||  v  >  32)  {  [CE]  illegal  start  of  expression  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31  ||  v  >  32)  {  if(u  >=  31  ||  v  >  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    31    ||    v    >    32)    {    if(u  >=  31  ||  v  >  32)  {	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
131	[BUG]  [BUGGY]  if(u  <  31  ||  v  >  32)  {  If(u  <  31  ||  v  >  32)  {  [CE]  ';'  expected  [FE]        ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31  ||  v  >  32)  {  If(u  <  31  ||  v  >  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    31    ||    v    >    32)    {    If(u  <  31  ||  v  >  32)  {	  	non-compiled	[CE]  ';'  expected	103	None	add
132	[BUG]  [BUGGY]  if(u  <  31  ||  v  >  32)  {  if(u  <  31,  ||  v  >  32)  {  [CE]  ')'  expected  [FE]          ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31  ||  v  >  32)  {  if(u  <  31,  ||  v  >  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    31    ||    v    >    32)    {    if(u  <  31,  ||  v  >  32)  {	  	non-compiled	[CE]  ')'  expected	103	None	add
133	[BUG]  [BUGGY]  If(k  ==  31  ||  u  ==  31)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  If(k  ==  31  ||  u  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	If(k  ==  31  ||  u  ==  31)  {	  if(k    ==    31    ||    u    ==    31)    {    If(k    ==    31    ||    u    ==    31)    {    	non-compiled	[CE]  ';'  expected	106	None	replace
134	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  ==  32  ||  v  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  ==  32  ||  v  ==  32)  {	  if(u    ==    31    ||    v    ==    31)    {    	compilable	  [FE]  AssertionFailedError  	49	1	replace
135	[BUG]  [BUGGY]  if(u  ==  32  ||  v  ==  32)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  ==  32  ||  v  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  ==  32  ||  v  ==  32)  {	  if(u    ==    31    ||    v    ==    31)    {    	compilable	  [FE]  AssertionFailedError  	49	1	replace
136	[BUG]  [BUGGY]  mutators.add( "overflow:  gcd  is  2 ");  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  mutators.add( "overflow:  gcd  is  2 ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	mutators.add( "overflow:  gcd  is  2 ");	  mutators.add(   "overflow:    gcd    is    2    >>    31   ");    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
137	[BUG]  [BUGGY]  mutators.add( "u:  gcd  is  2  >>  31 ");  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  mutators.add( "u:  gcd  is  2  >>  31 ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	mutators.add( "u:  gcd  is  2  >>  31 ");	  mutators.add(   "overflow:    gcd    is    2    >>    31   ");    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
138	[BUG]  [BUGGY]  mutators.add( "overflow:  gcd  is  2 ",  k);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  mutators.add( "overflow:  gcd  is  2 ",  k);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	mutators.add( "overflow:  gcd  is  2 ",  k);	  mutators.add(   "overflow:    gcd    is    2    >>    31   ");    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
139	[BUG]  [BUGGY]  mutators.add( "overflow:  gcd  is  2  ^  31 ");  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  mutators.add( "overflow:  gcd  is  2  ^  31 ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	mutators.add( "overflow:  gcd  is  2  ^  31 ");	  mutators.add(   "overflow:    gcd    is    2    >>    31   ");    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
140	[BUG]  [BUGGY]  if(u  <  31)  {  if(u  <  31)  {  [CE]  illegal  start  of  expression  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31)  {  if(u  <  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    31)    {    if(u  <  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	119	None	add
141	[BUG]  [BUGGY]  if(u  <  31)  {  if(u  >=  31)  {  [CE]  illegal  start  of  expression  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31)  {  if(u  >=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    31)    {    if(u  >=  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	119	None	add
142	[BUG]  [BUGGY]  if(u  <  31)  {  If(u  <  31)  {  [CE]  ';'  expected  [FE]        ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31)  {  If(u  <  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    31)    {    If(u  <  31)  {	  	non-compiled	[CE]  ';'  expected	119	None	add
143	[BUG]  [BUGGY]  if(u  <  31)  {  if(u  <  32)  {  [CE]  illegal  start  of  expression  [FE]          ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31)  {  if(u  <  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    31)    {    if(u  <  32)  {	  	non-compiled	[CE]  illegal  start  of  expression	119	None	add
144	[BUG]  [BUGGY]  if(u  <  32  ||  k  ==  31)  {  if(u  <  32  ||  k  ==  31)  {  [CE]  illegal  start  of  expression  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  32  ||  k  ==  31)  {  if(u  <  32  ||  k  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    32    ||    k    ==    31)    {    if(u  <  32  ||  k  ==  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
145	[BUG]  [BUGGY]  if(u  <  32  ||  k  ==  31)  {  if(u  <  32  ||  k  >=  31)  {  [CE]  illegal  start  of  expression  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  32  ||  k  ==  31)  {  if(u  <  32  ||  k  >=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    32    ||    k    ==    31)    {    if(u  <  32  ||  k  >=  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
146	[BUG]  [BUGGY]  if(u  <  32  ||  k  ==  31)  {  if(u  <  32  ||  k!=  31)  {  [CE]  illegal  start  of  expression  [FE]        ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  32  ||  k  ==  31)  {  if(u  <  32  ||  k!=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    32    ||    k    ==    31)    {    if(u  <  32  ||  k!=  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
147	[BUG]  [BUGGY]  if(u  <  32  ||  k  ==  31)  {  if(u  <  32  ||  k  >>  31)  {  [CE]  illegal  start  of  expression  [FE]          ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  32  ||  k  ==  31)  {  if(u  <  32  ||  k  >>  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    32    ||    k    ==    31)    {    if(u  <  32  ||  k  >>  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
148	[BUG]  [BUGGY]  if(u  ==  31  ||  k  ==  32)  {  if(u  ==  31  ||  k  ==  32)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  ==  31  ||  k  ==  32)  {  if(u  ==  31  ||  k  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    ==    31    ||    k    ==    32)    {    if(u  ==  31  ||  k  ==  32)  {	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
149	[BUG]  [BUGGY]  if(u  ==  31  ||  k  ==  32)  {  if(u  ==  31  ||  k  >=  32)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  ==  31  ||  k  ==  32)  {  if(u  ==  31  ||  k  >=  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    ==    31    ||    k    ==    32)    {    if(u  ==  31  ||  k  >=  32)  {	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
150	[BUG]  [BUGGY]  if(u  ==  31  ||  k  ==  32)  {  if(u  ==  31  ||  k!=  32)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  ==  31  ||  k  ==  32)  {  if(u  ==  31  ||  k!=  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    ==    31    ||    k    ==    32)    {    if(u  ==  31  ||  k!=  32)  {	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
151	[BUG]  [BUGGY]  if(u  ==  31  ||  k  ==  32)  {  if(u  >=  31  ||  k  ==  32)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  ==  31  ||  k  ==  32)  {  if(u  >=  31  ||  k  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    ==    31    ||    k    ==    32)    {    if(u  >=  31  ||  k  ==  32)  {	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
152	[BUG]  [BUGGY]  mutators.add(new  ArithmeticException( "Overflow:  gcd  is  2  {  31   "));  [CE]  illegal  start  of  type  [FE]        ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  mutators.add(new  ArithmeticException( "Overflow:  gcd  is  2  {  31   "));  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	mutators.add(new  ArithmeticException( "Overflow:  gcd  is  2  {  31   "));	  mutators.add(new    ArithmeticException(   "overflow:    gcd    is    2    {    31   "));    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
153	[BUG]  [BUGGY]  mutators.add(new  ArithmeticException( "u:  gcd  is  2  {  31 "));  [CE]  illegal  start  of  type  [FE]          ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  mutators.add(new  ArithmeticException( "u:  gcd  is  2  {  31 "));  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	mutators.add(new  ArithmeticException( "u:  gcd  is  2  {  31 "));	  mutators.add(new    ArithmeticException(   "overflow:    gcd    is    2    {    31   "));    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
154	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  32  ||  k  >=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  <  32  ||  k  >=  31)  {	  if(u    <    32    ||    k    ==    31)    {    	compilable	  [FE]  ArithmeticException  	22	9	replace
155	[BUG]  [BUGGY]  if(u  <  32  ||  k  >=  31)  {  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  32  ||  k  >=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  32  ||  k  >=  31)  {	  if(u    <    32    ||    k    ==    31)    {    	compilable	  [FE]  ArithmeticException  	22	9	replace
156	[BUG]  [BUGGY]  if(k  <  31  ||  u  ==  31)  {  if(k  <  31  ||  u  ==  31)  {  [CE]  illegal  start  of  expression  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  <  31  ||  u  ==  31)  {  if(k  <  31  ||  u  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k    <    31    ||    u    ==    31)    {    if(k  <  31  ||  u  ==  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	140	None	add
157	[BUG]  [BUGGY]  if(k  <  31  ||  u  ==  31)  {  if(k  <  31  ||  u  >=  31)  {  [CE]  illegal  start  of  expression  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  <  31  ||  u  ==  31)  {  if(k  <  31  ||  u  >=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k    <    31    ||    u    ==    31)    {    if(k  <  31  ||  u  >=  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	140	None	add
158	[BUG]  [BUGGY]  if(k  <  31  ||  u  ==  31)  {  if(k  <  31  ||  u!=  31)  {  [CE]  illegal  start  of  expression  [FE]        ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  <  31  ||  u  ==  31)  {  if(k  <  31  ||  u!=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k    <    31    ||    u    ==    31)    {    if(k  <  31  ||  u!=  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	140	None	add
159	[BUG]  [BUGGY]  if(k  <  31  ||  u  ==  31)  {  If(k  <  31  ||  u  ==  31)  {  [CE]  ';'  expected  [FE]          ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  <  31  ||  u  ==  31)  {  If(k  <  31  ||  u  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k    <    31    ||    u    ==    31)    {    If(k  <  31  ||  u  ==  31)  {	  	non-compiled	[CE]  ';'  expected	140	None	add
160	[BUG]  [BUGGY]  if(gcd  ==  0)  {  [CE]  cannot  find  symbol  gcd  [FE]        AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(gcd  ==  0)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(gcd  ==  0)  {	  if(u    ==    31)    {    if(u    ==    31)    {    	non-compiled	[CE]  cannot  find  symbol  gcd	15	None	replace
161	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  <  31  ||  v  >=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(k  <  31  ||  v  >=  31)  {	  if(k    <    31    ||    u    >=    31)    {    	compilable	  [FE]  ArithmeticException  	143	9	replace
162	[BUG]  [BUGGY]  if(k  <  31  ||  v  >=  31)  {  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  <  31  ||  v  >=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  <  31  ||  v  >=  31)  {	  if(k    <    31    ||    u    >=    31)    {    	compilable	  [FE]  ArithmeticException  	143	9	replace
163	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  ==  32  ||  k  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  ==  32  ||  k  ==  31)  {	  if(k    ==    31    ||    u    ==    31)    {    if(k!=    31    ||    u    ==    31)    {    	compilable	  [FE]  AssertionFailedError  	107	1	replace
164	[BUG]  [BUGGY]  if(u  ==  32  ||  k  ==  31)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  ==  32  ||  k  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  ==  32  ||  k  ==  31)  {	  if(k    ==    31    ||    u    ==    31)    {    if(k!=    31    ||    u    ==    31)    {    	compilable	  [FE]  AssertionFailedError  	107	1	replace
165	[BUG]  [BUGGY]  int  k  =  ((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/,  numerator);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =  ((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/,  numerator);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =  ((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/,  numerator);	  int    k    =    ((    u&1)    ==    1)?    v    :    -(u/2)/*B3*/,    denominator);    	non-compiled	[CE]  ';'  expected	20	None	replace
166	[BUG]  [BUGGY]  int  k  =  ((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/,  hashCode);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =  ((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/,  hashCode);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =  ((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/,  hashCode);	  int    k    =    ((    u&1)    ==    1)?    v    :    -(u/2)/*B3*/,    denominator);    	non-compiled	[CE]  ';'  expected	20	None	replace
167	[BUG]  [BUGGY]  if(v  ==  31  ||  k  ==  32)  {  if(v  ==  31  ||  k  ==  32)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  ==  31  ||  k  ==  32)  {  if(v  ==  31  ||  k  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v    ==    31    ||    k    ==    32)    {    if(v  ==  31  ||  k  ==  32)  {	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
168	[BUG]  [BUGGY]  if(v  ==  31  ||  k  ==  32)  {  if(v  ==  31  ||  k!=  32)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  ==  31  ||  k  ==  32)  {  if(v  ==  31  ||  k!=  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v    ==    31    ||    k    ==    32)    {    if(v  ==  31  ||  k!=  32)  {	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
169	[BUG]  [BUGGY]  if(v  ==  31  ||  k  ==  32)  {  if(v  ==  31  ||  k  >=  32)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  ==  31  ||  k  ==  32)  {  if(v  ==  31  ||  k  >=  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v    ==    31    ||    k    ==    32)    {    if(v  ==  31  ||  k  >=  32)  {	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
170	[BUG]  [BUGGY]  if(v  ==  31  ||  k  ==  32)  {  if(v  >=  31  ||  k  ==  32)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  ==  31  ||  k  ==  32)  {  if(v  >=  31  ||  k  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v    ==    31    ||    k    ==    32)    {    if(v  >=  31  ||  k  ==  32)  {	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
171	[BUG]  [BUGGY]  if(k  ==  31)  {  If(u  ==  31)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  ==  31)  {  If(u  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  ==  31)  {  If(u  ==  31)  {	  if(u    ==    31)    {    If(u    ==    31)    {    	non-compiled	[CE]  ';'  expected	132	None	replace
172	[BUG]  [BUGGY]  if(t  ==  0)  {  If(u  ==  31)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(t  ==  0)  {  If(u  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(t  ==  0)  {  If(u  ==  31)  {	  if(u    ==    31)    {    If(u    ==    31)    {    	non-compiled	[CE]  ';'  expected	132	None	replace
173	[BUG]  [BUGGY]  if(u  ==  32)  {  If(u  ==  32)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  ==  32)  {  If(u  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  ==  32)  {  If(u  ==  32)  {	  if(u    ==    31)    {    If(u    ==    31)    {    	non-compiled	[CE]  ';'  expected	132	None	replace
174	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/,  v);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/,  v);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/,  v);	  int    k    =((    u&1)    ==    1)?    -1    :    -(u/2)/*B3*/,    v);    	non-compiled	[CE]  ';'  expected	115	None	replace
175	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  31);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  31);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  31);	  int    k    =((    u&1)    ==    1)?    -1    :    -(u/2)/*B3*/,    v);    	non-compiled	[CE]  <identifier>  expected	115	None	replace
176	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  v  :  -1  -(u/2)/*B3*/;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  v  :  -1  -(u/2)/*B3*/;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  v  :  -1  -(u/2)/*B3*/;	  int    k    =((    u&1)    ==    1)?    -1    -(u/2)/*B3*/;    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
177	[BUG]  [BUGGY]  while(u  <  31  ||  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [CE]  illegal  start  of  type  [FE]            ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  <  31  ||  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  31  ||  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }	  while(u    <    31    &&    v    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
178	[BUG]  [BUGGY]  while(u  <  31  ||  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31 ");  }  [CE]  illegal  start  of  type  [FE]              ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  <  31  ||  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  31  ||  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31 ");  }	  while(u    <    31    &&    v    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
179	[BUG]  [BUGGY]  while(u  <  31  &&  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  [0]  {  1  }   ");  }  [CE]  illegal  start  of  type  [FE]                ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  <  31  &&  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  [0]  {  1  }   ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  31  &&  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  [0]  {  1  }   ");  }	  while(u    <    31    &&    v    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
180	[BUG]  [BUGGY]  while(u  <  31  &&  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  [0]  {  1  }   ");  [CE]  unreachable  statement  [FE]                  ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  <  31  &&  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  [0]  {  1  }   ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  31  &&  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  [0]  {  1  }   ");	  while(u    <    31    &&    v    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31   ");    }    	non-compiled	[CE]  unreachable  statement	13	None	replace
181	[BUG]  [BUGGY]  Mutator  <  =  0)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  >>  31 ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  Mutator  <  =  0)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  >>  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	Mutator  <  =  0)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  >>  31 ");  }	  mutator    <    =    0)    {    throw    new    ArithmeticException(   "Overflow:    gcd    is    2    >>    31   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	89	None	replace
182	[BUG]  [BUGGY]  Mutator  <  =  0)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  >=  31 ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  Mutator  <  =  0)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  >=  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	Mutator  <  =  0)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  >=  31 ");  }	  mutator    <    =    0)    {    throw    new    ArithmeticException(   "Overflow:    gcd    is    2    >>    31   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	89	None	replace
183	[BUG]  [BUGGY]  Mutator  <  =  0)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  ==  31 ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  Mutator  <  =  0)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  ==  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	Mutator  <  =  0)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  ==  31 ");  }	  mutator    <    =    0)    {    throw    new    ArithmeticException(   "Overflow:    gcd    is    2    >>    31   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	89	None	replace
184	[BUG]  [BUGGY]  if(v  <  31  ||  k  >  31)  {  if(v  <  31  ||  k  >  31)  {  [CE]  illegal  start  of  expression  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  <  31  ||  k  >  31)  {  if(v  <  31  ||  k  >  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v    <    31    ||    k    >    31)    {    if(v  <  31  ||  k  >  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	149	None	add
185	[BUG]  [BUGGY]  if(v  <  31  ||  k  >  31)  {  If(v  <  31  ||  k  >  31)  {  [CE]  ';'  expected  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  <  31  ||  k  >  31)  {  If(v  <  31  ||  k  >  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v    <    31    ||    k    >    31)    {    If(v  <  31  ||  k  >  31)  {	  	non-compiled	[CE]  ';'  expected	149	None	add
186	[BUG]  [BUGGY]  if(v  <  31  ||  k  >  31)  {  if(v  <  31  ||  k  >  31,)  {  [CE]  ')'  expected  [FE]        ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  <  31  ||  k  >  31)  {  if(v  <  31  ||  k  >  31,)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v    <    31    ||    k    >    31)    {    if(v  <  31  ||  k  >  31,)  {	  	non-compiled	[CE]  ')'  expected	149	None	add
187	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(v/2)/*B3*/;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(v/2)/*B3*/;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  -1  :  -(v/2)/*B3*/;	  int    k    =((    u&1)    ==    1)?    -1    :    -(v&2)/*B3*/;    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
188	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  0)?  31  -(u/2)/*B3*/);  [CE]  :  expected  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  0)?  31  -(u/2)/*B3*/);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  0)?  31  -(u/2)/*B3*/);	  int    k    =((    u&1)    ==    0)?    -1    -(u/2)/*B3*/);    	non-compiled	[CE]  :  expected	41	None	replace
189	[BUG]  [BUGGY]  while(u  <  31  &&  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2   ");  }  [CE]  illegal  start  of  type  [FE]        ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  <  31  &&  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2   ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  31  &&  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2   ");  }	  while(u    <    31    &&    v    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
190	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  0  :  -(v&2)/*B3*/;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  0  :  -(v&2)/*B3*/;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  0  :  -(v&2)/*B3*/;	  int    k    =((    u&1)    ==    1)?    0    :    -(u/2)/*B3*/;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
191	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >=    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >=        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }	  	compilable	  [FE]  ArithmeticException  	3	9	add
192	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >=    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >=    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >=        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }	  	compilable	  [FE]  ArithmeticException  	3	9	add
193	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >=    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >=        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }	  	compilable	  [FE]  ArithmeticException  	3	9	add
194	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >=    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >=    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >=        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }	  	compilable	  [FE]  ArithmeticException  	3	9	add
195	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >=    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]        ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >=    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException(  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >=        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
196	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >=    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]          ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >=    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException(  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >=        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
197	[BUG]  [BUGGY]  mutators.add( "Overflow:  gcd  is  2 ");  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  mutators.add( "Overflow:  gcd  is  2 ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	mutators.add( "Overflow:  gcd  is  2 ");	  mutators.add(   "overflow:    gcd    is    2    ==    31   ");    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
198	[BUG]  [BUGGY]  mutators.add( "u:  gcd  is  2  {  31 ");  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  mutators.add( "u:  gcd  is  2  {  31 ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	mutators.add( "u:  gcd  is  2  {  31 ");	  mutators.add(   "overflow:    gcd    is    2    ==    31   ");    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
199	[BUG]  [BUGGY]  if(u  ==  31  ||  v  ==  32)  {  if(u  ==  31  ||  v  ==  32)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  ==  31  ||  v  ==  32)  {  if(u  ==  31  ||  v  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    ==    31    ||    v    ==    32)    {    if(u  ==  31  ||  v  ==  32)  {	  	non-compiled	[CE]  illegal  start  of  expression	73	None	add
200	[BUG]  [BUGGY]  if(u  ==  31  ||  v  ==  32)  {  if(u  ==  31  ||  v!=  32)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  ==  31  ||  v  ==  32)  {  if(u  ==  31  ||  v!=  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    ==    31    ||    v    ==    32)    {    if(u  ==  31  ||  v!=  32)  {	  	non-compiled	[CE]  illegal  start  of  expression	73	None	add
201	[BUG]  [BUGGY]  if(u  ==  31  ||  v  ==  32)  {  if(u  >=  31  ||  v  ==  32)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  ==  31  ||  v  ==  32)  {  if(u  >=  31  ||  v  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    ==    31    ||    v    ==    32)    {    if(u  >=  31  ||  v  ==  32)  {	  	non-compiled	[CE]  illegal  start  of  expression	73	None	add
202	[BUG]  [BUGGY]  if(u  ==  31  ||  v  ==  32)  {  if(u!=  31  ||  v  ==  32)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  ==  31  ||  v  ==  32)  {  if(u!=  31  ||  v  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    ==    31    ||    v    ==    32)    {    if(u!=  31  ||  v  ==  32)  {	  	non-compiled	[CE]  illegal  start  of  expression	73	None	add
203	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    ==    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        ==        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }	  	compilable	  [FE]  ArithmeticException  	85	9	add
204	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    ==    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    ==    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        ==        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }	  	compilable	  [FE]  ArithmeticException  	85	9	add
205	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    ==    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    ==    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException(  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        ==        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
206	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    ==    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  Arithm  [CE]  '('  or  '['  expected  [FE]        ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    ==    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  Arithm  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        ==        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  Arithm	  	non-compiled	[CE]  '('  or  '['  expected	85	None	add
207	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    ==    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException  [CE]  '('  or  '['  expected  [FE]          ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    ==    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        ==        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException	  	non-compiled	[CE]  '('  or  '['  expected	85	None	add
208	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  <  31  ||  v  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(k  <  31  ||  v  ==  31)  {	  if(k    <    31    ||    u    ==    31)    {    	compilable	  [FE]  ArithmeticException  	141	9	replace
209	[BUG]  [BUGGY]  if(k  <  31  ||  v  ==  31)  {  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  <  31  ||  v  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  <  31  ||  v  ==  31)  {	  if(k    <    31    ||    u    ==    31)    {    	compilable	  [FE]  ArithmeticException  	141	9	replace
210	[BUG]  [BUGGY]  Neighbor  <  31  ||  k  ==  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  31 ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  Neighbor  <  31  ||  k  ==  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	Neighbor  <  31  ||  k  ==  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  31 ");  }	  If(k    ==    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    <    31   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	55	None	replace
211	[BUG]  [BUGGY]  Neighbor  <  31  ||  k  ==  0)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  <  31 ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  Neighbor  <  31  ||  k  ==  0)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  <  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	Neighbor  <  31  ||  k  ==  0)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  <  31 ");  }	  If(k    ==    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    <    31   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	55	None	replace
212	[BUG]  [BUGGY]  if(u  <  31  ||  k  >  32)  {  if(u  <  31  ||  k  >  32)  {  [CE]  illegal  start  of  expression  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31  ||  k  >  32)  {  if(u  <  31  ||  k  >  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    31    ||    k    >    32)    {    if(u  <  31  ||  k  >  32)  {	  	non-compiled	[CE]  illegal  start  of  expression	129	None	add
213	[BUG]  [BUGGY]  if(u  <  31  ||  k  >  32)  {  if(u  >=  31  ||  k  >  32)  {  [CE]  illegal  start  of  expression  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31  ||  k  >  32)  {  if(u  >=  31  ||  k  >  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    31    ||    k    >    32)    {    if(u  >=  31  ||  k  >  32)  {	  	non-compiled	[CE]  illegal  start  of  expression	129	None	add
214	[BUG]  [BUGGY]  if(u  <  31  ||  k  >  32)  {  If(u  <  31  ||  k  >  32)  {  [CE]  ';'  expected  [FE]        ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31  ||  k  >  32)  {  If(u  <  31  ||  k  >  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    31    ||    k    >    32)    {    If(u  <  31  ||  k  >  32)  {	  	non-compiled	[CE]  ';'  expected	129	None	add
215	[BUG]  [BUGGY]  if(u  <  31  ||  k  >  32)  {  if(u  <  31,  ||  k  >  32)  {  [CE]  ')'  expected  [FE]          ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31  ||  k  >  32)  {  if(u  <  31,  ||  k  >  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    31    ||    k    >    32)    {    if(u  <  31,  ||  k  >  32)  {	  	non-compiled	[CE]  ')'  expected	129	None	add
216	[BUG]  [BUGGY]  If(u  <  31  ||  k  ==  31)  {  [CE]  ';'  expected  [FE]        ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  If(u  <  31  ||  k  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	If(u  <  31  ||  k  ==  31)  {	  if(u    <    31    ||    k    ==    31)    {    If(u    <    31    ||    k    ==    31)    {    	non-compiled	[CE]  ';'  expected	112	None	replace
217	[BUG]  [BUGGY]  if(u  <  32  ||  k  ==  31)  {  If(u  <  32  ||  k  ==  31)  {  [CE]  ';'  expected  [FE]          ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  32  ||  k  ==  31)  {  If(u  <  32  ||  k  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  32  ||  k  ==  31)  {  If(u  <  32  ||  k  ==  31)  {	  if(u    <    31    ||    k    ==    31)    {    If(u    <    31    ||    k    ==    31)    {    	non-compiled	[CE]  ';'  expected	112	None	replace
218	[BUG]  [BUGGY]  if(k  ==  31)  {  If(u  <  31  ||  k  ==  31)  {  [CE]  ';'  expected  [FE]            ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  ==  31)  {  If(u  <  31  ||  k  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  ==  31)  {  If(u  <  31  ||  k  ==  31)  {	  if(u    <    31    ||    k    ==    31)    {    If(u    <    31    ||    k    ==    31)    {    	non-compiled	[CE]  ';'  expected	112	None	replace
219	[BUG]  [BUGGY]  aughtException( "Overflow:  gcd  is  2  {  31, ");  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  aughtException( "Overflow:  gcd  is  2  {  31, ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	aughtException( "Overflow:  gcd  is  2  {  31, ");	  aughtException(   "Overflow:    gcd    is    2    ==    31   ");    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
220	[BUG]  [BUGGY]  aughtException( "Overflow:  gcd  is  2  {  31   ");  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  aughtException( "Overflow:  gcd  is  2  {  31   ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	aughtException( "Overflow:  gcd  is  2  {  31   ");	  aughtException(   "Overflow:    gcd    is    2    ==    31   ");    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
221	[BUG]  [BUGGY]  aughtException( "Overflow:  gcd  is  2  {  31;n ");  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  aughtException( "Overflow:  gcd  is  2  {  31;n ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	aughtException( "Overflow:  gcd  is  2  {  31;n ");	  aughtException(   "Overflow:    gcd    is    2    ==    31   ");    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
222	[BUG]  [BUGGY]  aughtException( "Overflow:  gcd  is  2  {  31,  1  }   ");  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  aughtException( "Overflow:  gcd  is  2  {  31,  1  }   ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	aughtException( "Overflow:  gcd  is  2  {  31,  1  }   ");	  aughtException(   "Overflow:    gcd    is    2    ==    31   ");    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
223	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  ==  32  ||  v  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  ==  32  ||  v  ==  31)  {	  if(u    ==    31    ||    v    ==    32)    {    	compilable	  [FE]  AssertionFailedError  	74	1	replace
224	[BUG]  [BUGGY]  if(u  ==  32  ||  v  ==  31)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  ==  32  ||  v  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  ==  32  ||  v  ==  31)  {	  if(u    ==    31    ||    v    ==    32)    {    	compilable	  [FE]  AssertionFailedError  	74	1	replace
225	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  ==  31  ||  u  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(v  ==  31  ||  u  ==  32)  {	  if(u    ==    31    ||    v    ==    32)    {    	compilable	  [FE]  AssertionFailedError  	74	1	replace
226	[BUG]  [BUGGY]  if(v  ==  31  ||  u  ==  32)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  ==  31  ||  u  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v  ==  31  ||  u  ==  32)  {	  if(u    ==    31    ||    v    ==    32)    {    	compilable	  [FE]  AssertionFailedError  	74	1	replace
227	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  32  ||  v  >  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  <  32  ||  v  >  31)  {	  if(u    <    31    ||    v    >    31)    {    	compilable	  [FE]  ArithmeticException  	98	9	replace
228	[BUG]  [BUGGY]  if(u  <  32  ||  v  >  31)  {  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  32  ||  v  >  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  32  ||  v  >  31)  {	  if(u    <    31    ||    v    >    31)    {    	compilable	  [FE]  ArithmeticException  	98	9	replace
229	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  0)?  -1  -(u/2)/*B3*/,  denominator);  [CE]  :  expected  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  0)?  -1  -(u/2)/*B3*/,  denominator);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  0)?  -1  -(u/2)/*B3*/,  denominator);	  int    k    =((    u&1)    ==    0)?    -(u/2)/*B3*/,    denominator);    	non-compiled	[CE]  :  expected	117	None	replace
230	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  0)?  -(u/2)/*B3*/,  denominator,  v);  [CE]  :  expected  [FE]                    AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  0)?  -(u/2)/*B3*/,  denominator,  v);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  0)?  -(u/2)/*B3*/,  denominator,  v);	  int    k    =((    u&1)    ==    0)?    -(u/2)/*B3*/,    denominator);    	non-compiled	[CE]  :  expected	117	None	replace
231	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  0)?  -(u/2)/*B3*/,  numerator);  [CE]  :  expected  [FE]                      AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  0)?  -(u/2)/*B3*/,  numerator);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  0)?  -(u/2)/*B3*/,  numerator);	  int    k    =((    u&1)    ==    0)?    -(u/2)/*B3*/,    denominator);    	non-compiled	[CE]  :  expected	117	None	replace
232	[BUG]  [BUGGY]  if(u  {  31  ||  k  ==  32)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  {  31  ||  k  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  {  31  ||  k  ==  32)  {	  if(v    ==    31    ||    k    ==    32)    {    	non-compiled	[CE]  ')'  expected	76	None	replace
233	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  numerator);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  numerator);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  numerator);	  int    k    =((    u&1)    ==    1)?    -1    :    -(u/2)/*B3*/,    denominator);    	non-compiled	[CE]  ';'  expected	34	None	replace
234	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  0  :  -(u/2)/*B3*/,  denominator);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  0  :  -(u/2)/*B3*/,  denominator);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  0  :  -(u/2)/*B3*/,  denominator);	  int    k    =((    u&1)    ==    1)?    -1    :    -(u/2)/*B3*/,    denominator);    	non-compiled	[CE]  ';'  expected	34	None	replace
235	[BUG]  [BUGGY]  MutableToInteger  u  =  new  MutableToInteger(u);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  MutableToInteger  u  =  new  MutableToInteger(u);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	MutableToInteger  u  =  new  MutableToInteger(u);	  MutableToInteger    u    =    new    MutableToInteger(v);    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
236	[BUG]  [BUGGY]  MutableToInteger  u  =  new  MutableToInteger(0);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  MutableToInteger  u  =  new  MutableToInteger(0);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	MutableToInteger  u  =  new  MutableToInteger(0);	  MutableToInteger    u    =    new    MutableToInteger(v);    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
237	[BUG]  [BUGGY]  MutableToInteger  u  =  new  MutableToInteger(u,  v);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  MutableToInteger  u  =  new  MutableToInteger(u,  v);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	MutableToInteger  u  =  new  MutableToInteger(u,  v);	  MutableToInteger    u    =    new    MutableToInteger(v);    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
238	[BUG]  [BUGGY]  MutableToInteger  u  =  new  MutableToInteger(u.intValue());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  MutableToInteger  u  =  new  MutableToInteger(u.intValue());  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	MutableToInteger  u  =  new  MutableToInteger(u.intValue());	  MutableToInteger    u    =    new    MutableToInteger(v);    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
239	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31  ||  k  >=  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  <  31  ||  k  >=  32)  {	  if(u    <    31    ||    k    >    32)    {    	compilable	  [FE]  ArithmeticException  	130	9	replace
240	[BUG]  [BUGGY]  if(u  <  31  ||  k  >=  32)  {  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31  ||  k  >=  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  31  ||  k  >=  32)  {	  if(u    <    31    ||    k    >    32)    {    	compilable	  [FE]  ArithmeticException  	130	9	replace
241	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31  ||  k  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  <  31  ||  k  ==  32)  {	  if(u    <    31    ||    k    >    32)    {    	compilable	  [FE]  ArithmeticException  	130	9	replace
242	[BUG]  [BUGGY]  if(u  <  31  ||  k  ==  32)  {  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31  ||  k  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  31  ||  k  ==  32)  {	  if(u    <    31    ||    k    >    32)    {    	compilable	  [FE]  ArithmeticException  	130	9	replace
243	[BUG]  [BUGGY]  if(u  <  31  ||  v  ==  31)  {  if(u  <  31  ||  v  ==  31)  {  [CE]  illegal  start  of  expression  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31  ||  v  ==  31)  {  if(u  <  31  ||  v  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    31    ||    v    ==    31)    {    if(u  <  31  ||  v  ==  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	121	None	add
244	[BUG]  [BUGGY]  if(u  <  31  ||  v  ==  31)  {  if(u  <  31  ||  v  >=  31)  {  [CE]  illegal  start  of  expression  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31  ||  v  ==  31)  {  if(u  <  31  ||  v  >=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    31    ||    v    ==    31)    {    if(u  <  31  ||  v  >=  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	121	None	add
245	[BUG]  [BUGGY]  if(u  <  31  ||  v  ==  31)  {  if(u  <  31  ||  v!=  31)  {  [CE]  illegal  start  of  expression  [FE]        ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31  ||  v  ==  31)  {  if(u  <  31  ||  v!=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    31    ||    v    ==    31)    {    if(u  <  31  ||  v!=  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	121	None	add
246	[BUG]  [BUGGY]  if(u  <  31  ||  v  ==  31)  {  If(u  <  31  ||  v  ==  31)  {  [CE]  ';'  expected  [FE]          ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31  ||  v  ==  31)  {  If(u  <  31  ||  v  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    31    ||    v    ==    31)    {    If(u  <  31  ||  v  ==  31)  {	  	non-compiled	[CE]  ';'  expected	121	None	add
247	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >=    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >=        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }	  	compilable	  [FE]  ArithmeticException  	5	9	add
248	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >=    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >=    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >=        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }	  	compilable	  [FE]  ArithmeticException  	5	9	add
249	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >=    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >=        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }	  	compilable	  [FE]  ArithmeticException  	5	9	add
250	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >=    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >=    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >=        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }	  	compilable	  [FE]  ArithmeticException  	5	9	add
251	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >=    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]        ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >=    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException(  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >=        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
252	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >=    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]          ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >=    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException(  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >=        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
253	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  >=  31  ||  v  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  >=  31  ||  v  ==  32)  {	  if(k    ==    31    ||    v    ==    32)    {    if(k    >=    31    ||    v    ==    32)    {    	compilable	  [FE]  AssertionFailedError  	31	1	replace
254	[BUG]  [BUGGY]  if(u  >=  31  ||  v  ==  32)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  >=  31  ||  v  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  >=  31  ||  v  ==  32)  {	  if(k    ==    31    ||    v    ==    32)    {    if(k    >=    31    ||    v    ==    32)    {    	compilable	  [FE]  AssertionFailedError  	31	1	replace
255	[BUG]  [BUGGY]  while(u  <  31  ||  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [CE]  illegal  start  of  type  [FE]          ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  <  31  ||  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  31  ||  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }	  while(u    <    31    &&    k    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
256	[BUG]  [BUGGY]  while(u  <  31  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  [0]  {  1  }   ");  [CE]  unreachable  statement  [FE]            ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  <  31  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  [0]  {  1  }   ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  31  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  [0]  {  1  }   ");	  while(u    <    31    &&    k    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31   ");    }    	non-compiled	[CE]  unreachable  statement	53	None	replace
257	[BUG]  [BUGGY]  while(u  <  31  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  [1]  {  1  }   ");  [CE]  unreachable  statement  [FE]              ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  <  31  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  [1]  {  1  }   ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  31  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  [1]  {  1  }   ");	  while(u    <    31    &&    k    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31   ");    }    	non-compiled	[CE]  unreachable  statement	53	None	replace
258	[BUG]  [BUGGY]  if(k  <  31  ||  u  >  31)  {  if(k  <  31  ||  u  >  31)  {  [CE]  illegal  start  of  expression  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  <  31  ||  u  >  31)  {  if(k  <  31  ||  u  >  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k    <    31    ||    u    >    31)    {    if(k  <  31  ||  u  >  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
259	[BUG]  [BUGGY]  if(k  <  31  ||  u  >  31)  {  If(k  <  31  ||  u  >  31)  {  [CE]  ';'  expected  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  <  31  ||  u  >  31)  {  If(k  <  31  ||  u  >  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k    <    31    ||    u    >    31)    {    If(k  <  31  ||  u  >  31)  {	  	non-compiled	[CE]  ';'  expected	59	None	add
260	[BUG]  [BUGGY]  if(k  <  31  ||  u  >  31)  {  if(k  <  31  ||  u  >  31,)  {  [CE]  ')'  expected  [FE]        ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  <  31  ||  u  >  31)  {  if(k  <  31  ||  u  >  31,)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k    <    31    ||    u    >    31)    {    if(k  <  31  ||  u  >  31,)  {	  	non-compiled	[CE]  ')'  expected	59	None	add
261	[BUG]  [BUGGY]  if(k  <  31  ||  u  >  31)  {  int  k  <  31  ||  u  >  31)  {  [CE]  ';'  expected  [FE]          ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  <  31  ||  u  >  31)  {  int  k  <  31  ||  u  >  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k    <    31    ||    u    >    31)    {    int  k  <  31  ||  u  >  31)  {	  	non-compiled	[CE]  ';'  expected	59	None	add
262	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  32  ||  v  >  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  <  32  ||  v  >  32)  {	  if(u    <    31    ||    v    >    32)    {    	compilable	  [FE]  ArithmeticException  	104	9	replace
263	[BUG]  [BUGGY]  if(u  <  32  ||  v  >  32)  {  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  32  ||  v  >  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  32  ||  v  >  32)  {	  if(u    <    31    ||    v    >    32)    {    	compilable	  [FE]  ArithmeticException  	104	9	replace
264	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31  ||  v  >=  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  <  31  ||  v  >=  32)  {	  if(u    <    31    ||    v    >    32)    {    	compilable	  [FE]  ArithmeticException  	104	9	replace
265	[BUG]  [BUGGY]  if(u  <  31  ||  v  >=  32)  {  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31  ||  v  >=  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  31  ||  v  >=  32)  {	  if(u    <    31    ||    v    >    32)    {    	compilable	  [FE]  ArithmeticException  	104	9	replace
266	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]              AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u!=  31  ||  v  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u!=  31  ||  v  ==  32)  {	  if(k    ==    31    ||    v    ==    32)    {    if(k!=    31    ||    v    ==    32)    {    	compilable	  [FE]  ArithmeticException  	32	9	replace
267	[BUG]  [BUGGY]  if(u!=  31  ||  v  ==  32)  {  [FE]  ArithmeticException  [FE]              AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u!=  31  ||  v  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u!=  31  ||  v  ==  32)  {	  if(k    ==    31    ||    v    ==    32)    {    if(k!=    31    ||    v    ==    32)    {    	compilable	  [FE]  ArithmeticException  	32	9	replace
268	[BUG]  [BUGGY]  if(u  <  31  ||  v  >  31)  {  if(u  <  31  ||  v  >  31)  {  [CE]  illegal  start  of  expression  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31  ||  v  >  31)  {  if(u  <  31  ||  v  >  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    31    ||    v    >    31)    {    if(u  <  31  ||  v  >  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	97	None	add
269	[BUG]  [BUGGY]  if(u  <  31  ||  v  >  31)  {  If(u  <  31  ||  v  >  31)  {  [CE]  ';'  expected  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31  ||  v  >  31)  {  If(u  <  31  ||  v  >  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    31    ||    v    >    31)    {    If(u  <  31  ||  v  >  31)  {	  	non-compiled	[CE]  ';'  expected	97	None	add
270	[BUG]  [BUGGY]  if(u  <  31  ||  v  >  31)  {  if(u  >=  31  ||  v  >  31)  {  [CE]  illegal  start  of  expression  [FE]        ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31  ||  v  >  31)  {  if(u  >=  31  ||  v  >  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    31    ||    v    >    31)    {    if(u  >=  31  ||  v  >  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	97	None	add
271	[BUG]  [BUGGY]  while(u  <  31  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  [0]  {  1  }   ");  }  [CE]  illegal  start  of  type  [FE]              ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  <  31  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  [0]  {  1  }   ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  31  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  [0]  {  1  }   ");  }	  while(u    <    31    &&    k    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
272	[BUG]  [BUGGY]  if(u  <  31  ||  k  >=  31)  {  if(u  <  31  ||  k  >=  31)  {  [CE]  illegal  start  of  expression  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31  ||  k  >=  31)  {  if(u  <  31  ||  k  >=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    31    ||    k    >=    31)    {    if(u  <  31  ||  k  >=  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
273	[BUG]  [BUGGY]  if(u  <  31  ||  k  >=  31)  {  if(u  <  31  ||  k!=  31)  {  [CE]  illegal  start  of  expression  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31  ||  k  >=  31)  {  if(u  <  31  ||  k!=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    31    ||    k    >=    31)    {    if(u  <  31  ||  k!=  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
274	[BUG]  [BUGGY]  if(u  <  31  ||  k  >=  31)  {  if(u  <  31  ||  k  >>  31)  {  [CE]  illegal  start  of  expression  [FE]        ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31  ||  k  >=  31)  {  if(u  <  31  ||  k  >>  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    31    ||    k    >=    31)    {    if(u  <  31  ||  k  >>  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
275	[BUG]  [BUGGY]  if(u  <  31  ||  k  >=  31)  {  if(u  <  31  ||  k  ==  31)  {  [CE]  illegal  start  of  expression  [FE]          ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31  ||  k  >=  31)  {  if(u  <  31  ||  k  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    31    ||    k    >=    31)    {    if(u  <  31  ||  k  ==  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
276	[BUG]  [BUGGY]  while(u  <  31  ||  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }  [CE]  illegal  start  of  type  [FE]        ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  <  31  ||  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  31  ||  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }	  while(u    <    31    &&    v    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
277	[BUG]  [BUGGY]  while(u  <  31  &&  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  [1]  {  31, ");  }  [CE]  illegal  start  of  type  [FE]          ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  <  31  &&  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  [1]  {  31, ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  31  &&  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  [1]  {  31, ");  }	  while(u    <    31    &&    v    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
278	[BUG]  [BUGGY]  int  v  =  ((  u&1)  ==  1)?  0  :  -(u/2)/*B3*/;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  v  =  ((  u&1)  ==  1)?  0  :  -(u/2)/*B3*/;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  v  =  ((  u&1)  ==  1)?  0  :  -(u/2)/*B3*/;	  int    v    =    ((    u&1)    ==    1)?    v    :    -(u/2)/*B3*/;    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
279	[BUG]  [BUGGY]  int  v  =  ((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  v  =  ((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  v  =  ((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/;	  int    v    =    ((    u&1)    ==    1)?    v    :    -(u/2)/*B3*/;    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
280	[BUG]  [BUGGY]  while(u  <  31  ||  v  <  31)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  ==  31 ");  }  [CE]  illegal  start  of  type  [FE]        ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  <  31  ||  v  <  31)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  ==  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  31  ||  v  <  31)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  ==  31 ");  }	  while(u    <    31    &&    v    <    31)    {    throw    new    ArithmeticException(   "Overflow:    gcd    is    2    ==    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
281	[BUG]  [BUGGY]  while(u  <  31  &&  v  <  31)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2   ");  }  [CE]  illegal  start  of  type  [FE]          ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  <  31  &&  v  <  31)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2   ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  31  &&  v  <  31)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2   ");  }	  while(u    <    31    &&    v    <    31)    {    throw    new    ArithmeticException(   "Overflow:    gcd    is    2    ==    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
282	[BUG]  [BUGGY]  while(u  <  0  &&  v  <  31)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  ==  31 ");  }  [CE]  illegal  start  of  type  [FE]            ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  <  0  &&  v  <  31)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  ==  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  0  &&  v  <  31)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  ==  31 ");  }	  while(u    <    31    &&    v    <    31)    {    throw    new    ArithmeticException(   "Overflow:    gcd    is    2    ==    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
283	[BUG]  [BUGGY]  while(u  <  31  &&  v  <  31)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  [1]  {  31, ");  }  [CE]  illegal  start  of  type  [FE]              ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  <  31  &&  v  <  31)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  [1]  {  31, ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  31  &&  v  <  31)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  [1]  {  31, ");  }	  while(u    <    31    &&    v    <    31)    {    throw    new    ArithmeticException(   "Overflow:    gcd    is    2    ==    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
284	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  0)?  v  :  -(u/2)/*B3*/);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  0)?  v  :  -(u/2)/*B3*/);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  0)?  v  :  -(u/2)/*B3*/);	  int    k    =((    u&1)    ==    0)?    -1    :    -(u/2)/*B3*/);    	non-compiled	[CE]  ';'  expected	152	None	replace
285	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  0)?  -1  :  -(u/2)/*B3*/,  v);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  0)?  -1  :  -(u/2)/*B3*/,  v);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  0)?  -1  :  -(u/2)/*B3*/,  v);	  int    k    =((    u&1)    ==    0)?    -1    :    -(u/2)/*B3*/);    	non-compiled	[CE]  ';'  expected	152	None	replace
286	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  0)?  31  :  -(u/2)/*B3*/);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  0)?  31  :  -(u/2)/*B3*/);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  0)?  31  :  -(u/2)/*B3*/);	  int    k    =((    u&1)    ==    0)?    -1    :    -(u/2)/*B3*/);    	non-compiled	[CE]  ';'  expected	152	None	replace
287	[BUG]  [BUGGY]  mutator  <  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  {  31 ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  mutator  <  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  {  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	mutator  <  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  {  31 ");  }	          if(u    <    31)    {    throw    new    ArithmeticException(       "overflow:    gcd    is    2    ==    31       ");    }    if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31       ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	84	None	replace
288	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]        ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  ==  31  ||  u  <  31  ||  k  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(k  ==  31  ||  u  <  31  ||  k  ==  31)  {	  if(u    <    31    ||    k    ==    31)    {    if(u    <    31    ||    k    ==    31)    {    	compilable	  [FE]  ArithmeticException  	65	9	replace
289	[BUG]  [BUGGY]  if(k  ==  31  ||  u  <  31  ||  k  ==  31)  {  [FE]  ArithmeticException  [FE]        ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  ==  31  ||  u  <  31  ||  k  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  ==  31  ||  u  <  31  ||  k  ==  31)  {	  if(u    <    31    ||    k    ==    31)    {    if(u    <    31    ||    k    ==    31)    {    	compilable	  [FE]  ArithmeticException  	65	9	replace
290	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]          ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  ==  31  ||  u  <  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(k  ==  31  ||  u  <  31)  {	  if(u    <    31    ||    k    ==    31)    {    if(u    <    31    ||    k    ==    31)    {    	compilable	  [FE]  ArithmeticException  	65	9	replace
291	[BUG]  [BUGGY]  if(k  ==  31  ||  u  <  31)  {  [FE]  ArithmeticException  [FE]          ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  ==  31  ||  u  <  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  ==  31  ||  u  <  31)  {	  if(u    <    31    ||    k    ==    31)    {    if(u    <    31    ||    k    ==    31)    {    	compilable	  [FE]  ArithmeticException  	65	9	replace
292	[BUG]  [BUGGY]  aughtException( "Overflow:  gcd  is  2  ^  31;n ");  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  aughtException( "Overflow:  gcd  is  2  ^  31;n ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	aughtException( "Overflow:  gcd  is  2  ^  31;n ");	  aughtException(   "overflow:    gcd    is    2    >>    31   ");    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
293	[BUG]  [BUGGY]  aughtException( "Overflow:  gcd  is  2  ^  31, ");  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  aughtException( "Overflow:  gcd  is  2  ^  31, ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	aughtException( "Overflow:  gcd  is  2  ^  31, ");	  aughtException(   "overflow:    gcd    is    2    >>    31   ");    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
294	[BUG]  [BUGGY]  aughtException( "overflow:  gcd  is  2  ^  31;n ");  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  aughtException( "overflow:  gcd  is  2  ^  31;n ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	aughtException( "overflow:  gcd  is  2  ^  31;n ");	  aughtException(   "overflow:    gcd    is    2    >>    31   ");    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
295	[BUG]  [BUGGY]  aughtException( "Overflow:  gcd  is  2  ^  31,  hashCode= ");  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  aughtException( "Overflow:  gcd  is  2  ^  31,  hashCode= ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	aughtException( "Overflow:  gcd  is  2  ^  31,  hashCode= ");	  aughtException(   "overflow:    gcd    is    2    >>    31   ");    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
296	[BUG]  [BUGGY]  while(k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [CE]  illegal  start  of  type  [FE]        ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }	  while(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
297	[BUG]  [BUGGY]  int  k  =  ((  u&1)  ==  1)?  v  :  -(u/2)/*B4*/;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =  ((  u&1)  ==  1)?  v  :  -(u/2)/*B4*/;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =  ((  u&1)  ==  1)?  v  :  -(u/2)/*B4*/;	  int    k    =    ((    u&1)    ==    1)?    v    :    -(u/2)/*B2*/;    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
298	[BUG]  [BUGGY]  while(k  >=  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  31 ");  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(k  >=  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(k  >=  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  31 ");  }	  if(k    ==    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    <    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
299	[BUG]  [BUGGY]  while(k  ==  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  31 ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(k  ==  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(k  ==  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  31 ");  }	  if(k    ==    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    <    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
300	[BUG]  [BUGGY]  if(k  ==  31)  {  int  k  <  31)  {  [CE]  ';'  expected  [FE]              ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  ==  31)  {  int  k  <  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  ==  31)  {  int  k  <  31)  {	  if(k    <    31)    {    int    k    <    31)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
301	[BUG]  [BUGGY]  if(k  ==  31)  {  int  k  =  31;  [CE]  variable  k  is  already  defined  in  method  greatestCommonDivisor(int,int)  [FE]                ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  ==  31)  {  int  k  =  31;  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  ==  31)  {  int  k  =  31;	  if(k    <    31)    {    int    k    <    31)    {    	non-compiled	[CE]  variable  k  is  already  defined  in  method  greatestCommonDivisor(int,int)	28	None	replace
302	[BUG]  [BUGGY]  if(u  <  31)  {  int  k  =  31;  [CE]  variable  k  is  already  defined  in  method  greatestCommonDivisor(int,int)  [FE]                  ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31)  {  int  k  =  31;  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  31)  {  int  k  =  31;	  if(k    <    31)    {    int    k    <    31)    {    	non-compiled	[CE]  variable  k  is  already  defined  in  method  greatestCommonDivisor(int,int)	28	None	replace
303	[BUG]  [BUGGY]  MutableDenominator  u  =(MutableDenominator)nominator;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  MutableDenominator  u  =(MutableDenominator)nominator;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	MutableDenominator  u  =(MutableDenominator)nominator;	  MutableDenominator    u    =(MutableDenominator)denominator;    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
304	[BUG]  [BUGGY]  MutableDenominator  u  =(MutableDenominator)dim;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  MutableDenominator  u  =(MutableDenominator)dim;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	MutableDenominator  u  =(MutableDenominator)dim;	  MutableDenominator    u    =(MutableDenominator)denominator;    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
305	[BUG]  [BUGGY]  If(k  ==  31  ||  v  ==  32)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  If(k  ==  31  ||  v  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	If(k  ==  31  ||  v  ==  32)  {	  if(k    ==    31    ||    v    ==    32)    {    If(k    ==    31    ||    v    ==    32)    {    	non-compiled	[CE]  ';'  expected	113	None	replace
306	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  0)?  v  -(u/2)/*B3*/,  denominator);  [CE]  :  expected  [FE]                      AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  0)?  v  -(u/2)/*B3*/,  denominator);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  0)?  v  -(u/2)/*B3*/,  denominator);	  int    k    =((    u&1)    ==    0)?    v    -(u/2)/*B3*/);    	non-compiled	[CE]  :  expected	43	None	replace
307	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  0)?  v  /(u/2)/*B3*/);  [CE]  :  expected  [FE]                        AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  0)?  v  /(u/2)/*B3*/);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  0)?  v  /(u/2)/*B3*/);	  int    k    =((    u&1)    ==    0)?    v    -(u/2)/*B3*/);    	non-compiled	[CE]  :  expected	43	None	replace
308	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    ==    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  ==  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        ==        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }	  	compilable	  [FE]  ArithmeticException  	83	9	add
309	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    ==    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  ==  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    ==    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  ==  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        ==        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }	  	compilable	  [FE]  ArithmeticException  	83	9	add
310	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    ==    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  ==  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31  [CE]  unclosed  string  literal  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    ==    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  ==  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        ==        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31	  	non-compiled	[CE]  unclosed  string  literal	83	None	add
311	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    ==    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  ==  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]        ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    ==    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  ==  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException(  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        ==        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
312	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    ==    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  ==  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  Arithm  [CE]  '('  or  '['  expected  [FE]          ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    ==    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  ==  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  Arithm  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        ==        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  Arithm	  	non-compiled	[CE]  '('  or  '['  expected	83	None	add
313	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    ==    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  ==  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException  [CE]  '('  or  '['  expected  [FE]            ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    ==    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  ==  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        ==        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException	  	non-compiled	[CE]  '('  or  '['  expected	83	None	add
314	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  1  :  -(u/2)/*B3*/,  denominator;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  1  :  -(u/2)/*B3*/,  denominator;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  1  :  -(u/2)/*B3*/,  denominator;	  int    k    =((    u&1)    ==    1)?    1    :    -(u/2)/*B3*/;    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
315	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  1  :  -(u/2)/*B3;  [CE]  variable  k  is  already  defined  in  method  greatestCommonDivisor(int,int)  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  1  :  -(u/2)/*B3;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  1  :  -(u/2)/*B3;	  int    k    =((    u&1)    ==    1)?    1    :    -(u/2)/*B3*/;    	non-compiled	[CE]  variable  k  is  already  defined  in  method  greatestCommonDivisor(int,int)	145	None	replace
316	[BUG]  [BUGGY]  aughtException( "Overflow:  gcd  is  2  {  31;  }   ");  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  aughtException( "Overflow:  gcd  is  2  {  31;  }   ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	aughtException( "Overflow:  gcd  is  2  {  31;  }   ");	  aughtException(   "overflow:    gcd    is    2    ==    31   ");    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
317	[BUG]  [BUGGY]  if(u  <  31)  {  while(k  <  31)  {  [CE]  illegal  start  of  expression  [FE]        ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31)  {  while(k  <  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  31)  {  while(k  <  31)  {	  if(k    <    31)    {    while(k    <    31)    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
318	[BUG]  [BUGGY]  if(k  ==  31)  {  while(k  <  31)  {  [CE]  illegal  start  of  expression  [FE]          ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  ==  31)  {  while(k  <  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  ==  31)  {  while(k  <  31)  {	  if(k    <    31)    {    while(k    <    31)    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
319	[BUG]  [BUGGY]  if(t  ==  0)  {  while(k  <  31)  {  [CE]  illegal  start  of  expression  [FE]            ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(t  ==  0)  {  while(k  <  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(t  ==  0)  {  while(k  <  31)  {	  if(k    <    31)    {    while(k    <    31)    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
320	[BUG]  [BUGGY]  if(u  <  31)  {  while(v  <  31)  {  [CE]  illegal  start  of  expression  [FE]              ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31)  {  while(v  <  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  31)  {  while(v  <  31)  {	  if(k    <    31)    {    while(k    <    31)    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
321	[BUG]  [BUGGY]  if(k  >=  31)  {  if(k  >=  31)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  >=  31)  {  if(k  >=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k    >=    31)    {    if(k  >=  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
322	[BUG]  [BUGGY]  if(k  >=  31)  {  if(k!=  31)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  >=  31)  {  if(k!=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k    >=    31)    {    if(k!=  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
323	[BUG]  [BUGGY]  if(k  >=  31)  {  if(k  >>  31)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  >=  31)  {  if(k  >>  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k    >=    31)    {    if(k  >>  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
324	[BUG]  [BUGGY]  if(k  >=  31)  {  if(k  ==  31)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  >=  31)  {  if(k  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k    >=    31)    {    if(k  ==  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
325	[BUG]  [BUGGY]  if(v  ==  31  ||  k  ==  31)  {  if(v  ==  31  ||  k  ==  31)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  ==  31  ||  k  ==  31)  {  if(v  ==  31  ||  k  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v    ==    31    ||    k    ==    31)    {    if(v  ==  31  ||  k  ==  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
326	[BUG]  [BUGGY]  if(v  ==  31  ||  k  ==  31)  {  if(v  ==  31  ||  k  >=  31)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  ==  31  ||  k  ==  31)  {  if(v  ==  31  ||  k  >=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v    ==    31    ||    k    ==    31)    {    if(v  ==  31  ||  k  >=  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
327	[BUG]  [BUGGY]  if(v  ==  31  ||  k  ==  31)  {  if(v  ==  31  ||  k!=  31)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  ==  31  ||  k  ==  31)  {  if(v  ==  31  ||  k!=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v    ==    31    ||    k    ==    31)    {    if(v  ==  31  ||  k!=  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
328	[BUG]  [BUGGY]  if(v  ==  31  ||  k  ==  31)  {  if(v  >=  31  ||  k  ==  31)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  ==  31  ||  k  ==  31)  {  if(v  >=  31  ||  k  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v    ==    31    ||    k    ==    31)    {    if(v  >=  31  ||  k  ==  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
329	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  numerator;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  numerator;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  numerator;	  int    k    =((    u&1)    ==    1)?    -1    :    -(u/2)/*B3*/,    denominator;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
330	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  0  :  -(u/2)/*B3*/,  denominator;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  0  :  -(u/2)/*B3*/,  denominator;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  0  :  -(u/2)/*B3*/,  denominator;	  int    k    =((    u&1)    ==    1)?    -1    :    -(u/2)/*B3*/,    denominator;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
331	[BUG]  [BUGGY]  if(u  >=  31  ||  k  ==  31)  {  if(u  >=  31  ||  k  ==  31)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  >=  31  ||  k  ==  31)  {  if(u  >=  31  ||  k  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    >=    31    ||    k    ==    31)    {    if(u  >=  31  ||  k  ==  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	125	None	add
332	[BUG]  [BUGGY]  if(u  >=  31  ||  k  ==  31)  {  if(u  >>  31  ||  k  ==  31)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  >=  31  ||  k  ==  31)  {  if(u  >>  31  ||  k  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    >=    31    ||    k    ==    31)    {    if(u  >>  31  ||  k  ==  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	125	None	add
333	[BUG]  [BUGGY]  if(u  >=  31  ||  k  ==  31)  {  if(u!=  31  ||  k  ==  31)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  >=  31  ||  k  ==  31)  {  if(u!=  31  ||  k  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    >=    31    ||    k    ==    31)    {    if(u!=  31  ||  k  ==  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	125	None	add
334	[BUG]  [BUGGY]  if(u  >=  31  ||  k  ==  31)  {  if(u  ==  31  ||  k  ==  31)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  >=  31  ||  k  ==  31)  {  if(u  ==  31  ||  k  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    >=    31    ||    k    ==    31)    {    if(u  ==  31  ||  k  ==  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	125	None	add
335	[BUG]  [BUGGY]  aughtException( "Overflow:  gcd  is  2  {  31,  k  }   ");  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  aughtException( "Overflow:  gcd  is  2  {  31,  k  }   ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	aughtException( "Overflow:  gcd  is  2  {  31,  k  }   ");	  aughtException(   "overflow:    gcd    is    2    {    31   ");    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
336	[BUG]  [BUGGY]  Mutator  <  =  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2UNDEFINED   ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  Mutator  <  =  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2UNDEFINED   ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	Mutator  <  =  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2UNDEFINED   ");  }	  mutator    <    =    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	90	None	replace
337	[BUG]  [BUGGY]  ettyPrinter.println( "Overflow:  gcd  is  2  ^  31 ");  [CE]  illegal  start  of  type  [FE]          ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  ettyPrinter.println( "Overflow:  gcd  is  2  ^  31 ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	ettyPrinter.println( "Overflow:  gcd  is  2  ^  31 ");	  ettyPrinter.println(   "Overflow:    gcd    is    2    >>    31   ");    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
338	[BUG]  [BUGGY]  int  k  =  ((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/,  numerator;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =  ((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/,  numerator;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =  ((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/,  numerator;	  int    k    =    ((    u&1)    ==    1)?    v    :    -(u/2)/*B3*/,    denominator;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
339	[BUG]  [BUGGY]  int  k  =  ((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/,  hashCode;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =  ((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/,  hashCode;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =  ((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/,  hashCode;	  int    k    =    ((    u&1)    ==    1)?    v    :    -(u/2)/*B3*/,    denominator;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
340	[BUG]  [BUGGY]  Mutator  <  =  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31 ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  Mutator  <  =  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	Mutator  <  =  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31 ");  }	  mutator    <    =    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	90	None	replace
341	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >=    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException  [CE]  '('  or  '['  expected  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >=    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >=        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException	  	non-compiled	[CE]  '('  or  '['  expected	3	None	add
342	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >=    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException  [CE]  '('  or  '['  expected  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >=    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >=        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException	  	non-compiled	[CE]  '('  or  '['  expected	3	None	add
343	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >=    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException  [CE]  '('  or  '['  expected  [FE]        ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >=    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >=        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException	  	non-compiled	[CE]  '('  or  '['  expected	3	None	add
344	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >=    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]          ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >=    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException(  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >=        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
345	[BUG]  [BUGGY]  while(u  <  32)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [CE]  illegal  start  of  type  [FE]        ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  <  32)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  32)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }	  while(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
346	[BUG]  [BUGGY]  if(u>0)  {  if(k  <  31)  {  [CE]  illegal  start  of  expression  [FE]        ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u>0)  {  if(k  <  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u>0)  {  if(k  <  31)  {	  if(k    <    31)    {    if(k    <    31)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
347	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]          ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31  ||  v  >  0)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  <  31  ||  v  >  0)  {	  if(k    <    31)    {    if(k    <    31)    {    	compilable	  [FE]  ArithmeticException  	25	9	replace
348	[BUG]  [BUGGY]  if(u  <  31  ||  v  >  0)  {  [FE]  ArithmeticException  [FE]          ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31  ||  v  >  0)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  31  ||  v  >  0)  {	  if(k    <    31)    {    if(k    <    31)    {    	compilable	  [FE]  ArithmeticException  	25	9	replace
349	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >=    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException  [CE]  '('  or  '['  expected  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >=    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >=        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException	  	non-compiled	[CE]  '('  or  '['  expected	5	None	add
350	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >=    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException  [CE]  '('  or  '['  expected  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >=    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >=        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException	  	non-compiled	[CE]  '('  or  '['  expected	5	None	add
351	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >=    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException  [CE]  '('  or  '['  expected  [FE]        ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >=    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >=        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException	  	non-compiled	[CE]  '('  or  '['  expected	5	None	add
352	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  ==  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException  [CE]  '('  or  '['  expected  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  ==  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >>        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException	  	non-compiled	[CE]  '('  or  '['  expected	39	None	add
353	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  ==  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException  [CE]  '('  or  '['  expected  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  ==  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >>        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException	  	non-compiled	[CE]  '('  or  '['  expected	39	None	add
354	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  ==  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]        ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  ==  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException(  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >>        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
355	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  ==  31  ||  k  <  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  ==  31  ||  k  <  31)  {	  if(k    <    31    ||    u    ==    31)    {    	compilable	  [FE]  ArithmeticException  	141	9	replace
356	[BUG]  [BUGGY]  if(u  ==  31  ||  k  <  31)  {  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  ==  31  ||  k  <  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  ==  31  ||  k  <  31)  {	  if(k    <    31    ||    u    ==    31)    {    	compilable	  [FE]  ArithmeticException  	141	9	replace
357	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  ==  31  ||  k  >=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  ==  31  ||  k  >=  31)  {	  if(k    <    31    ||    u    ==    31)    {    	compilable	  [FE]  AssertionFailedError  	141	1	replace
358	[BUG]  [BUGGY]  if(u  ==  31  ||  k  >=  31)  {  [FE]  AssertionFailedError  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  ==  31  ||  k  >=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  ==  31  ||  k  >=  31)  {	  if(k    <    31    ||    u    ==    31)    {    	compilable	  [FE]  AssertionFailedError  	141	1	replace
359	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  1  :  -(u/2)/*B3/;  [CE]  variable  k  is  already  defined  in  method  greatestCommonDivisor(int,int)  [FE]                AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  1  :  -(u/2)/*B3/;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  1  :  -(u/2)/*B3/;	  int    k    =((    u&1)    ==    1)?    1    :    -(u/2)/*B3*/;    	non-compiled	[CE]  variable  k  is  already  defined  in  method  greatestCommonDivisor(int,int)	145	None	replace
360	[BUG]  [BUGGY]  Mutator  <  =  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  Mutator  <  =  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	Mutator  <  =  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }	  mutator    <    =    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	91	None	replace
361	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  0)?  1  -(u/2)/*B3*/);  [CE]  :  expected  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  0)?  1  -(u/2)/*B3*/);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  0)?  1  -(u/2)/*B3*/);	  int    k    =((    u&1)    ==    0)?    -1    -(u/2)/*B3*/);    	non-compiled	[CE]  :  expected	41	None	replace
362	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  ==  0)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(v  ==  0)  {	  if(u    ==    31    ||    k    ==    31)    {    if(u    ==    31    ||    k    >=    31)    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
363	[BUG]  [BUGGY]  if(v  ==  0)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  ==  0)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v  ==  0)  {	  if(u    ==    31    ||    k    ==    31)    {    if(u    ==    31    ||    k    >=    31)    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
364	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  >=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  >=  31)  {	  if(u    <    31)    {    	compilable	  [FE]  AssertionFailedError  	120	1	replace
365	[BUG]  [BUGGY]  if(u  >=  31)  {  [FE]  AssertionFailedError  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  >=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  >=  31)  {	  if(u    <    31)    {    	compilable	  [FE]  AssertionFailedError  	120	1	replace
366	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]          ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  <  31  &&  k  <  31)  {  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	while(u  <  31  &&  k  <  31)  {	  while(u    <    31    &&    k    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31   ");    }    	compilable	  [FE]  ArithmeticException  	53	9	replace
367	[BUG]  [BUGGY]  while(u  <  31  &&  k  <  31)  {  [FE]  ArithmeticException  [FE]          ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  <  31  &&  k  <  31)  {  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  31  &&  k  <  31)  {	  while(u    <    31    &&    k    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31   ");    }    	compilable	  [FE]  ArithmeticException  	53	9	replace
368	[BUG]  [BUGGY]  while(u  <  32  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [CE]  illegal  start  of  type  [FE]            ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  <  32  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  32  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }	  while(u    <    31    &&    k    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
369	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/  +  2;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/  +  2;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/  +  2;	  int    k    =((    u&1)    ==    1)?    -1    :    -(u/2)/*B3*/    +    1;    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
370	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/  +  3;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/  +  3;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/  +  3;	  int    k    =((    u&1)    ==    1)?    -1    :    -(u/2)/*B3*/    +    1;    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
371	[BUG]  [BUGGY]  if(v  ==  31  ||  u  ==  31)  {  If(v  ==  31  ||  u  ==  31)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  ==  31  ||  u  ==  31)  {  If(v  ==  31  ||  u  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v    ==    31    ||    u    ==    31)    {    If(v  ==  31  ||  u  ==  31)  {	  	non-compiled	[CE]  ';'  expected	123	None	add
372	[BUG]  [BUGGY]  if(v  ==  31  ||  u  ==  31)  {  if(v!=  31  ||  u  ==  31)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  ==  31  ||  u  ==  31)  {  if(v!=  31  ||  u  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v    ==    31    ||    u    ==    31)    {    if(v!=  31  ||  u  ==  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	123	None	add
373	[BUG]  [BUGGY]  if(u  <  31)  {  if(v  >=  31)  {  [CE]  illegal  start  of  expression  [FE]            ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31)  {  if(v  >=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  31)  {  if(v  >=  31)  {	  if(k    <    31)    {    if(k    >=    31)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
374	[BUG]  [BUGGY]  int  k  =  ((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/,  denominator  +  1;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =  ((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/,  denominator  +  1;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =  ((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/,  denominator  +  1;	  int    k    =    ((    u&1)    ==    1)?    v    :    -(u/2)/*B3*/,    denominator;    	non-compiled	[CE]  ';'  expected	19	None	replace
375	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  v  :  -(u/2)/*B5*/);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  v  :  -(u/2)/*B5*/);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  v  :  -(u/2)/*B5*/);	  int    k    =((    u&1)    ==    1)?    v    :    -(u/2)/*B4*/);    	non-compiled	[CE]  ';'  expected	51	None	replace
376	[BUG]  [BUGGY]  Integer  k=0;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  Integer  k=0;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	Integer  k=0;	  If(k    ==    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    <    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
377	[BUG]  [BUGGY]  Integer  u=0;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  Integer  u=0;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	Integer  u=0;	  If(k    ==    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    <    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
378	[BUG]  [BUGGY]  MutableToDenominator.checkState(k  ==  0);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  MutableToDenominator.checkState(k  ==  0);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	MutableToDenominator.checkState(k  ==  0);	  If(k    ==    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    <    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
379	[BUG]  [BUGGY]  MutableToDenominator.checkNotNull(v);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  MutableToDenominator.checkNotNull(v);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	MutableToDenominator.checkNotNull(v);	  If(k    ==    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    <    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
380	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]              ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  32  ||  k  >  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  <  32  ||  k  >  32)  {	  if(u    <    31    ||    k    >    31)    {    if(u    <    31    ||    k    >    31,)    {    	compilable	  [FE]  ArithmeticException  	82	9	replace
381	[BUG]  [BUGGY]  if(u  <  32  ||  k  >  32)  {  [FE]  ArithmeticException  [FE]              ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  32  ||  k  >  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  32  ||  k  >  32)  {	  if(u    <    31    ||    k    >    31)    {    if(u    <    31    ||    k    >    31,)    {    	compilable	  [FE]  ArithmeticException  	82	9	replace
382	[BUG]  [BUGGY]  if(gcd  ==  null)  {  [CE]  cannot  find  symbol  gcd  [FE]                ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(gcd  ==  null)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(gcd  ==  null)  {	  if(u    <    31    ||    k    >    31)    {    if(u    <    31    ||    k    >    31,)    {    	non-compiled	[CE]  cannot  find  symbol  gcd	82	None	replace
383	[BUG]  [BUGGY]  mutators.add( "overflow:  gcd  is  2  <  <  31 ");  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  mutators.add( "overflow:  gcd  is  2  <  <  31 ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	mutators.add( "overflow:  gcd  is  2  <  <  31 ");	  mutators.add(   "overflow:    gcd    is    2    ==    31   ");    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
384	[BUG]  [BUGGY]  mutators.add( "overflow:  gcd  is  2  {  31, ");  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  mutators.add( "overflow:  gcd  is  2  {  31, ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	mutators.add( "overflow:  gcd  is  2  {  31, ");	  mutators.add(   "overflow:    gcd    is    2    ==    31   ");    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
385	[BUG]  [BUGGY]  MutableToDenominator  u  =(MutableToDenominator)denominator;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  MutableToDenominator  u  =(MutableToDenominator)denominator;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	MutableToDenominator  u  =(MutableToDenominator)denominator;	  if(v    ==    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    <    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
386	[BUG]  [BUGGY]  MutableToInteger  v  =  new  MutableToInteger(u,  v);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  MutableToInteger  v  =  new  MutableToInteger(u,  v);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	MutableToInteger  v  =  new  MutableToInteger(u,  v);	  if(v    ==    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    <    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
387	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]            AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u!=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u!=  31)  {	  if(u    ==    31)    {    if(u!=    31)    {    	compilable	  [FE]  ArithmeticException  	17	9	replace
388	[BUG]  [BUGGY]  if(u!=  31)  {  [FE]  ArithmeticException  [FE]            AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u!=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u!=  31)  {	  if(u    ==    31)    {    if(u!=    31)    {    	compilable	  [FE]  ArithmeticException  	17	9	replace
389	[BUG]  [BUGGY]  Mutators.add(new  ArithmeticException( "overflow:  gcd  is  2 "));  [CE]  illegal  start  of  type  [FE]          ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  Mutators.add(new  ArithmeticException( "overflow:  gcd  is  2 "));  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	Mutators.add(new  ArithmeticException( "overflow:  gcd  is  2 "));	  mutators.add(new    ArithmeticException(   "overflow:    gcd    is    2   "));    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
390	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31  ||  v  >=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  <  31  ||  v  >=  31)  {	  if(u    <    31    ||    v    ==    31)    {    	compilable	  [FE]  ArithmeticException  	122	9	replace
391	[BUG]  [BUGGY]  if(u  <  31  ||  v  >=  31)  {  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31  ||  v  >=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  31  ||  v  >=  31)  {	  if(u    <    31    ||    v    ==    31)    {    	compilable	  [FE]  ArithmeticException  	122	9	replace
392	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  0)?  -1  :  -(u/2)/*B3*/,  denominator);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  0)?  -1  :  -(u/2)/*B3*/,  denominator);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  0)?  -1  :  -(u/2)/*B3*/,  denominator);	  int    k    =((    u&1)    ==    0)?    -1    :    -(u/2)/*B3*/);    	non-compiled	[CE]  ';'  expected	152	None	replace
393	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  <  31  ||  v  >  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(v  <  31  ||  v  >  32)  {	  if(u    <    31    ||    v    >    32)    {    	compilable	  [FE]  ArithmeticException  	104	9	replace
394	[BUG]  [BUGGY]  if(v  <  31  ||  v  >  32)  {  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  <  31  ||  v  >  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v  <  31  ||  v  >  32)  {	  if(u    <    31    ||    v    >    32)    {    	compilable	  [FE]  ArithmeticException  	104	9	replace
395	[BUG]  [BUGGY]  if(v  ==  31  ||  k  ==  31)  {  If(v  ==  31  ||  k  ==  31)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  ==  31  ||  k  ==  31)  {  If(v  ==  31  ||  k  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v    ==    31    ||    k    ==    31)    {    If(v  ==  31  ||  k  ==  31)  {	  	non-compiled	[CE]  ';'  expected	46	None	add
396	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(v  ==  31)  {	  if(k    >=    31)    {    	compilable	  [FE]  AssertionFailedError  	62	1	replace
397	[BUG]  [BUGGY]  if(v  ==  31)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v  ==  31)  {	  if(k    >=    31)    {    	compilable	  [FE]  AssertionFailedError  	62	1	replace
398	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  >=  0)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(v  >=  0)  {	  if(u    ==    31    ||    k    ==    31)    {    if(u    >=    31    ||    k    ==    31)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
399	[BUG]  [BUGGY]  if(v  >=  0)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  >=  0)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v  >=  0)  {	  if(u    ==    31    ||    k    ==    31)    {    if(u    >=    31    ||    k    ==    31)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
400	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]        ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  <  31  &&  v  <  31)  {  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	while(u  <  31  &&  v  <  31)  {	  while(u    <    31    &&    v    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31   ");    }    	compilable	  [FE]  ArithmeticException  	11	9	replace
401	[BUG]  [BUGGY]  while(u  <  31  &&  v  <  31)  {  [FE]  ArithmeticException  [FE]        ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  <  31  &&  v  <  31)  {  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  31  &&  v  <  31)  {	  while(u    <    31    &&    v    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31   ");    }    	compilable	  [FE]  ArithmeticException  	11	9	replace
402	[BUG]  [BUGGY]  while(u  <  0  &&  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }  [CE]  illegal  start  of  type  [FE]          ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  <  0  &&  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  0  &&  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }	  while(u    <    31    &&    v    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
403	[BUG]  [BUGGY]  while(u  <  31  &&  v  <  32)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }  [CE]  illegal  start  of  type  [FE]            ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  <  31  &&  v  <  32)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  31  &&  v  <  32)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }	  while(u    <    31    &&    v    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
404	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  >  31  ||  k  <  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  >  31  ||  k  <  31)  {	  if(k    <    31    ||    u    >    31)    {    	compilable	  [FE]  ArithmeticException  	60	9	replace
405	[BUG]  [BUGGY]  if(u  >  31  ||  k  <  31)  {  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  >  31  ||  k  <  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  >  31  ||  k  <  31)  {	  if(k    <    31    ||    u    >    31)    {    	compilable	  [FE]  ArithmeticException  	60	9	replace
406	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  >=  31  ||  k  <  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  >=  31  ||  k  <  31)  {	  if(k    <    31    ||    u    >    31)    {    	compilable	  [FE]  ArithmeticException  	60	9	replace
407	[BUG]  [BUGGY]  if(u  >=  31  ||  k  <  31)  {  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  >=  31  ||  k  <  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  >=  31  ||  k  <  31)  {	  if(k    <    31    ||    u    >    31)    {    	compilable	  [FE]  ArithmeticException  	60	9	replace
408	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  31  :  -(u/2)/*B3*/;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  31  :  -(u/2)/*B3*/;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  31  :  -(u/2)/*B3*/;	  int    k    =((    u&1)    ==    1)?    0    :    -(u/2)/*B3*/;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
409	[BUG]  [BUGGY]  if(v  ==  31  ||  k  ==  32)  {  If(v  ==  31  ||  k  ==  32)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  ==  31  ||  k  ==  32)  {  If(v  ==  31  ||  k  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v    ==    31    ||    k    ==    32)    {    If(v  ==  31  ||  k  ==  32)  {	  	non-compiled	[CE]  ';'  expected	75	None	add
410	[BUG]  [BUGGY]  ettyPrinter.println( "Overflow:  gcd  is  2  {  1  }   ");  [CE]  illegal  start  of  type  [FE]            ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  ettyPrinter.println( "Overflow:  gcd  is  2  {  1  }   ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	ettyPrinter.println( "Overflow:  gcd  is  2  {  1  }   ");	  ettyPrinter.println(   "Overflow:    gcd    is    2    ==    31   ");    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
411	[BUG]  [BUGGY]  ettyPrinter.println( "Overflow:  gcd  is  2  <  <  31 ");  [CE]  illegal  start  of  type  [FE]              ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  ettyPrinter.println( "Overflow:  gcd  is  2  <  <  31 ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	ettyPrinter.println( "Overflow:  gcd  is  2  <  <  31 ");	  ettyPrinter.println(   "Overflow:    gcd    is    2    ==    31   ");    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
412	[BUG]  [BUGGY]  ettyPrinter.println( "Overflow:  gcd  is  2  {  31;  }   ");  [CE]  illegal  start  of  type  [FE]                ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  ettyPrinter.println( "Overflow:  gcd  is  2  {  31;  }   ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	ettyPrinter.println( "Overflow:  gcd  is  2  {  31;  }   ");	  ettyPrinter.println(   "Overflow:    gcd    is    2    ==    31   ");    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
413	[BUG]  [BUGGY]  if(u  {  31  ||  v  ==  31)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  {  31  ||  v  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  {  31  ||  v  ==  31)  {	  if(k    ==    31    ||    v    ==    31)    {    	non-compiled	[CE]  ')'  expected	45	None	replace
414	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException  [CE]  '('  or  '['  expected  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >>        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException	  	non-compiled	[CE]  '('  or  '['  expected	37	None	add
415	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException(  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >>        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
416	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  Arithm  [CE]  '('  or  '['  expected  [FE]        ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  Arithm  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >>        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  Arithm	  	non-compiled	[CE]  '('  or  '['  expected	37	None	add
417	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException  [CE]  '('  or  '['  expected  [FE]          ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >>        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException	  	non-compiled	[CE]  '('  or  '['  expected	37	None	add
418	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]              ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  32  ||  k  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  <  32  ||  k  ==  32)  {	  if(u    <    31    ||    k    ==    31)    {    if(u    <    31    ||    k    >>    31)    {    	compilable	  [FE]  ArithmeticException  	68	9	replace
419	[BUG]  [BUGGY]  if(u  <  32  ||  k  ==  32)  {  [FE]  ArithmeticException  [FE]              ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  32  ||  k  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  32  ||  k  ==  32)  {	  if(u    <    31    ||    k    ==    31)    {    if(u    <    31    ||    k    >>    31)    {    	compilable	  [FE]  ArithmeticException  	68	9	replace
420	[BUG]  [BUGGY]  mutator  <  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  [Delete]  31 ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  mutator  <  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  [Delete]  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	mutator  <  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  [Delete]  31 ");  }	          if(u    <    31)    {    throw    new    ArithmeticException(       "overflow:    gcd    is    2    >=    31       ");    }    if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31       ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
421	[BUG]  [BUGGY]  mutators.add(new  ArithmeticException( "overflow:  gcd  is  2  <  <  31));  [CE]  unclosed  string  literal  [FE]        ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  mutators.add(new  ArithmeticException( "overflow:  gcd  is  2  <  <  31));  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	mutators.add(new  ArithmeticException( "overflow:  gcd  is  2  <  <  31));	  mutators.add(new    ArithmeticException(   "overflow:    gcd    is    2    <    <    31   "));    	non-compiled	[CE]  unclosed  string  literal	100	None	replace
422	[BUG]  [BUGGY]  ettyPrinter.println( "Overflow:  Gcd  is  2  <  31 ");  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  ettyPrinter.println( "Overflow:  Gcd  is  2  <  31 ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	ettyPrinter.println( "Overflow:  Gcd  is  2  <  31 ");	  if(k    ==    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    <    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
423	[BUG]  [BUGGY]  if(v  <  31)  {  int  v  <  31)  {  [CE]  ';'  expected  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  <  31)  {  int  v  <  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v    <    31)    {    int  v  <  31)  {	  	non-compiled	[CE]  ';'  expected	63	None	add
424	[BUG]  [BUGGY]  if(v  <  31)  {  while(v  <  31)  {  [CE]  illegal  start  of  expression  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  <  31)  {  while(v  <  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v    <    31)    {    while(v  <  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
425	[BUG]  [BUGGY]  Mutator  <  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  Mutator  <  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	Mutator  <  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }	  mutator    <    =    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	88	None	replace
426	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  a1);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  a1);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  a1);	  int    k    =((    u&1)    ==    1)?    -1    :    -(u/2)/*B3*/,    denominator);    	non-compiled	[CE]  ';'  expected	34	None	replace
427	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  negative);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  negative);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  negative);	  int    k    =((    u&1)    ==    1)?    -1    :    -(u/2)/*B3*/,    denominator);    	non-compiled	[CE]  ';'  expected	34	None	replace
428	[BUG]  [BUGGY]  if(u  <  32  ||  k  ==  32)  {  If(u  <  32  ||  k  ==  32)  {  [CE]  ';'  expected  [FE]        ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  32  ||  k  ==  32)  {  If(u  <  32  ||  k  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  32  ||  k  ==  32)  {  If(u  <  32  ||  k  ==  32)  {	  if(u    <    31    ||    k    ==    31)    {    If(u    <    31    ||    k    ==    31)    {    	non-compiled	[CE]  ';'  expected	112	None	replace
429	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  v  -(u/2)/*B4*/;  [CE]  :  expected  [FE]                    AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  v  -(u/2)/*B4*/;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  v  -(u/2)/*B4*/;	  int    k    =((    u&1)    ==    1)?    v    -(u/2)/*B3*/;    	non-compiled	[CE]  :  expected	56	None	replace
430	[BUG]  [BUGGY]  if(u  <  31)  {  If(u  >  31)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31)  {  If(u  >  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  31)  {  If(u  >  31)  {	  if(u    ==    31)    {    If(u    ==    31)    {    	non-compiled	[CE]  ';'  expected	132	None	replace
431	[BUG]  [BUGGY]  if(u  <  31)  {  If(u  >=  31)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31)  {  If(u  >=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  31)  {  If(u  >=  31)  {	  if(u    ==    31)    {    If(u    ==    31)    {    	non-compiled	[CE]  ';'  expected	132	None	replace
432	[BUG]  [BUGGY]  while(u  <  32  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }  [CE]  illegal  start  of  type  [FE]          ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  <  32  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  32  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }	  while(u    <    31    &&    k    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
433	[BUG]  [BUGGY]  while(u  <  0  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }  [CE]  illegal  start  of  type  [FE]            ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  <  0  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  0  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }	  while(u    <    31    &&    k    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
434	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  -(u/2)/*B3*/,  denominator;  [CE]  :  expected  [FE]                    AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  -(u/2)/*B3*/,  denominator;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  -1  -(u/2)/*B3*/,  denominator;	  int    k    =((    u&1)    ==    1)?    -1    -(u/2)/*B3*/;    	non-compiled	[CE]  :  expected	111	None	replace
435	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  31  -(u/2)/*B3*/;  [CE]  :  expected  [FE]                      AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  31  -(u/2)/*B3*/;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  31  -(u/2)/*B3*/;	  int    k    =((    u&1)    ==    1)?    -1    -(u/2)/*B3*/;    	non-compiled	[CE]  :  expected	111	None	replace
436	[BUG]  [BUGGY]  while(u  <  32  &&  v  <  31)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  ==  31 ");  }  [CE]  illegal  start  of  type  [FE]        ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  <  32  &&  v  <  31)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  ==  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  32  &&  v  <  31)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  ==  31 ");  }	  while(u    <    31    &&    v    <    31)    {    throw    new    ArithmeticException(   "Overflow:    gcd    is    2    ==    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
437	[BUG]  [BUGGY]  while(u  <  31  &&  v  <  32)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  ==  31 ");  }  [CE]  illegal  start  of  type  [FE]          ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  <  31  &&  v  <  32)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  ==  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  31  &&  v  <  32)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  ==  31 ");  }	  while(u    <    31    &&    v    <    31)    {    throw    new    ArithmeticException(   "Overflow:    gcd    is    2    ==    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
438	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  0,  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  0,  1);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  0,  1);	  int    k    =((    u&1)    ==    1)?    -1    :    -(u/2)/*B3*/,    1);    	non-compiled	[CE]  <identifier>  expected	116	None	replace
439	[BUG]  [BUGGY]  if(u  <  31)  {  If(k  >=  31)  {  [CE]  ';'  expected  [FE]          ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31)  {  If(k  >=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  31)  {  If(k  >=  31)  {	  if(k    <    31)    {    If(k    <    31)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
440	[BUG]  [BUGGY]  if(u  <  31)  {  If(k  >  31)  {  [CE]  ';'  expected  [FE]            ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31)  {  If(k  >  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  31)  {  If(k  >  31)  {	  if(k    <    31)    {    If(k    <    31)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
441	[BUG]  [BUGGY]  if(u>0)  {  If(k  <  31)  {  [CE]  ';'  expected  [FE]              ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u>0)  {  If(k  <  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u>0)  {  If(k  <  31)  {	  if(k    <    31)    {    If(k    <    31)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
442	[BUG]  [BUGGY]  if(u  <  31)  {  If(k  ==  31)  {  [CE]  ';'  expected  [FE]                ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31)  {  If(k  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  31)  {  If(k  ==  31)  {	  if(k    <    31)    {    If(k    <    31)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
443	[BUG]  [BUGGY]  if(u  ==  31  ||  v  ==  31)  {  If(u  ==  31  ||  v  ==  31)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  ==  31  ||  v  ==  31)  {  If(u  ==  31  ||  v  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    ==    31    ||    v    ==    31)    {    If(u  ==  31  ||  v  ==  31)  {	  	non-compiled	[CE]  ';'  expected	48	None	add
444	[BUG]  [BUGGY]  if(u  ==  31  ||  v  ==  31)  {  if(u!=  31  ||  v  ==  31)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  ==  31  ||  v  ==  31)  {  if(u!=  31  ||  v  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    ==    31    ||    v    ==    31)    {    if(u!=  31  ||  v  ==  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
445	[BUG]  [BUGGY]  aughtException( "overflow:  gcd  is  2  {  31;  }   ");  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  aughtException( "overflow:  gcd  is  2  {  31;  }   ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	aughtException( "overflow:  gcd  is  2  {  31;  }   ");	  aughtException(   "overflow:    gcd    is    2    ==    31   ");    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
446	[BUG]  [BUGGY]  aughtException( "Overflow:  gcd  is  2  {  31,  u  }   ");  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  aughtException( "Overflow:  gcd  is  2  {  31,  u  }   ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	aughtException( "Overflow:  gcd  is  2  {  31,  u  }   ");	  aughtException(   "overflow:    gcd    is    2    ==    31   ");    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
447	[BUG]  [BUGGY]  MutableToInteger  u  =  new  MutableToInteger(v,  k);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  MutableToInteger  u  =  new  MutableToInteger(v,  k);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	MutableToInteger  u  =  new  MutableToInteger(v,  k);	  MutableToInteger    u    =    new    MutableToInteger(v);    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
448	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  <  32  ||  k  >  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(v  <  32  ||  k  >  32)  {	  if(v    <    31    ||    k    >    31)    {    	compilable	  [FE]  ArithmeticException  	150	9	replace
449	[BUG]  [BUGGY]  if(v  <  32  ||  k  >  32)  {  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  <  32  ||  k  >  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v  <  32  ||  k  >  32)  {	  if(v    <    31    ||    k    >    31)    {    	compilable	  [FE]  ArithmeticException  	150	9	replace
450	[BUG]  [BUGGY]  ettyPrinter.println( "Overflow:  gcd  is  2  {  31  }   ");  [CE]  illegal  start  of  type  [FE]          ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  ettyPrinter.println( "Overflow:  gcd  is  2  {  31  }   ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	ettyPrinter.println( "Overflow:  gcd  is  2  {  31  }   ");	  ettyPrinter.println(   "Overflow:    gcd    is    2    >>    31   ");    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
451	[BUG]  [BUGGY]  aughtException( "Overflow:  gcd  is  2  {  31  }   ");  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  aughtException( "Overflow:  gcd  is  2  {  31  }   ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	aughtException( "Overflow:  gcd  is  2  {  31  }   ");	  aughtException(   "overflow:    gcd    is    2    >>    31   ");    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
452	[BUG]  [BUGGY]  aughtException( "overflow:  gcd  is  2  {  31  }   ");  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  aughtException( "overflow:  gcd  is  2  {  31  }   ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	aughtException( "overflow:  gcd  is  2  {  31  }   ");	  aughtException(   "overflow:    gcd    is    2    >>    31   ");    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
453	[BUG]  [BUGGY]  aughtException( "Overflow:  gcd  is  2  >>  31;n ");  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  aughtException( "Overflow:  gcd  is  2  >>  31;n ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	aughtException( "Overflow:  gcd  is  2  >>  31;n ");	  aughtException(   "overflow:    gcd    is    2    >>    31   ");    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
454	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException  [CE]  '('  or  '['  expected  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >>        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException	  	non-compiled	[CE]  '('  or  '['  expected	35	None	add
455	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException(  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >>        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
456	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  Arithm  [CE]  '('  or  '['  expected  [FE]        ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  Arithm  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >>        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  Arithm	  	non-compiled	[CE]  '('  or  '['  expected	35	None	add
457	[BUG]  [BUGGY]  while(u  <  31  &&  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >  31 ");  }  [CE]  illegal  start  of  type  [FE]        ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  <  31  &&  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  31  &&  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >  31 ");  }	  while(u    <    31    &&    v    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
458	[BUG]  [BUGGY]  while(u  <  32  &&  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [CE]  illegal  start  of  type  [FE]          ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  <  32  &&  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  32  &&  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }	  while(u    <    31    &&    v    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
459	[BUG]  [BUGGY]  while(u  <  0  &&  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [CE]  illegal  start  of  type  [FE]            ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  <  0  &&  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  0  &&  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }	  while(u    <    31    &&    v    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
460	[BUG]  [BUGGY]  int  k  =  ((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/,  negative);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =  ((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/,  negative);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =  ((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/,  negative);	  int    k    =    ((    u&1)    ==    1)?    v    :    -(u/2)/*B3*/,    denominator);    	non-compiled	[CE]  ';'  expected	20	None	replace
461	[BUG]  [BUGGY]  if(v  <  31  ||  k  >  31)  {  int  v  <  31  ||  k  >  31)  {  [CE]  ';'  expected  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  <  31  ||  k  >  31)  {  int  v  <  31  ||  k  >  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v    <    31    ||    k    >    31)    {    int  v  <  31  ||  k  >  31)  {	  	non-compiled	[CE]  ';'  expected	149	None	add
462	[BUG]  [BUGGY]  if(k  ==  31  ||  v  ==  31)  {  If(k  ==  31  ||  v  ==  31)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  ==  31  ||  v  ==  31)  {  If(k  ==  31  ||  v  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k    ==    31    ||    v    ==    31)    {    If(k  ==  31  ||  v  ==  31)  {	  	non-compiled	[CE]  ';'  expected	44	None	add
463	[BUG]  [BUGGY]  if(k  ==  31  ||  v  ==  31)  {  if(k!=  31  ||  v  ==  31)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  ==  31  ||  v  ==  31)  {  if(k!=  31  ||  v  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k    ==    31    ||    v    ==    31)    {    if(k!=  31  ||  v  ==  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
464	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  0)?  -(u/2)/*B3*/,  a1);  [CE]  :  expected  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  0)?  -(u/2)/*B3*/,  a1);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  0)?  -(u/2)/*B3*/,  a1);	  int    k    =((    u&1)    ==    0)?    -(u/2)/*B3*/,    denominator);    	non-compiled	[CE]  :  expected	117	None	replace
465	[BUG]  [BUGGY]  Mutators.add(new  ArithmeticException( "overflow:  gcd  is  2  {  31   "));  [CE]  illegal  start  of  type  [FE]        ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  Mutators.add(new  ArithmeticException( "overflow:  gcd  is  2  {  31   "));  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	Mutators.add(new  ArithmeticException( "overflow:  gcd  is  2  {  31   "));	  mutators.add(new    ArithmeticException(   "overflow:    gcd    is    2    {    31   "));    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
466	[BUG]  [BUGGY]  if(u  <  32  ||  k  >  32)  {  If(u  <  32  ||  k  >  32)  {  [CE]  ';'  expected  [FE]            ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  32  ||  k  >  32)  {  If(u  <  32  ||  k  >  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  32  ||  k  >  32)  {  If(u  <  32  ||  k  >  32)  {	  if(u    <    31    ||    k    >    31)    {    If(u    <    31    ||    k    >    31)    {    	non-compiled	[CE]  ';'  expected	81	None	replace
467	[BUG]  [BUGGY]  if(u  <  31  ||  k  ==  31)  {  If(u  >  31  ||  k  >=  31)  {  [CE]  ';'  expected  [FE]              ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31  ||  k  ==  31)  {  If(u  >  31  ||  k  >=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  31  ||  k  ==  31)  {  If(u  >  31  ||  k  >=  31)  {	  if(u    <    31    ||    k    >    31)    {    If(u    <    31    ||    k    >    31)    {    	non-compiled	[CE]  ';'  expected	81	None	replace
468	[BUG]  [BUGGY]  if(u  ==  31  ||  v  ==  32)  {  If(v  ==  31  ||  v  ==  32)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  ==  31  ||  v  ==  32)  {  If(v  ==  31  ||  v  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  ==  31  ||  v  ==  32)  {  If(v  ==  31  ||  v  ==  32)  {	  if(k    ==    31    ||    v    ==    32)    {    If(k    ==    31    ||    v    ==    32)    {    	non-compiled	[CE]  ';'  expected	113	None	replace
469	[BUG]  [BUGGY]  if(u  ==  32)  {  If(v  ==  32  ||  v  ==  32)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  ==  32)  {  If(v  ==  32  ||  v  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  ==  32)  {  If(v  ==  32  ||  v  ==  32)  {	  if(k    ==    31    ||    v    ==    32)    {    If(k    ==    31    ||    v    ==    32)    {    	non-compiled	[CE]  ';'  expected	113	None	replace
470	[BUG]  [BUGGY]  aughtException( "Overflow:  gcd  is  2  {  1  }   ");  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  aughtException( "Overflow:  gcd  is  2  {  1  }   ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	aughtException( "Overflow:  gcd  is  2  {  1  }   ");	  aughtException(   "Overflow:    gcd    is    2    ==    31   ");    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
471	[BUG]  [BUGGY]  aughtException( "Overflow:  gcd  is  2  <  <  31 ");  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  aughtException( "Overflow:  gcd  is  2  <  <  31 ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	aughtException( "Overflow:  gcd  is  2  <  <  31 ");	  aughtException(   "Overflow:    gcd    is    2    ==    31   ");    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
472	[BUG]  [BUGGY]  if(u  ==  32  ||  k  ==  32)  {  If(u  ==  32  ||  k  ==  32)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  ==  32  ||  k  ==  32)  {  If(u  ==  32  ||  k  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  ==  32  ||  k  ==  32)  {  If(u  ==  32  ||  k  ==  32)  {	  if(u    ==    31    ||    k    ==    31)    {    If(u    ==    31    ||    k    ==    31)    {    	non-compiled	[CE]  ';'  expected	114	None	replace
473	[BUG]  [BUGGY]  if(u  <  31)  {  while(k  >=  31)  {  [CE]  illegal  start  of  expression  [FE]        ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31)  {  while(k  >=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  31)  {  while(k  >=  31)  {	  if(k    <    31)    {    while(k    <    31)    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
474	[BUG]  [BUGGY]  if(u  <  31)  {  while(v  >=  31)  {  [CE]  illegal  start  of  expression  [FE]          ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31)  {  while(v  >=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  31)  {  while(v  >=  31)  {	  if(k    <    31)    {    while(k    <    31)    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
475	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  0)?  -(u/2)/*B3*/,  32);  [CE]  :  expected  [FE]                    AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  0)?  -(u/2)/*B3*/,  32);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  0)?  -(u/2)/*B3*/,  32);	  int    k    =((    u&1)    ==    0)?    -(u/2)/*B3*/,    v);    	non-compiled	[CE]  :  expected	42	None	replace
476	[BUG]  [BUGGY]  while(u  <  0  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [CE]  illegal  start  of  type  [FE]              ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  <  0  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  0  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }	  while(u    <    31    &&    k    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
477	[BUG]  [BUGGY]  mutator  <  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2!=  31 ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  mutator  <  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2!=  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	mutator  <  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2!=  31 ");  }	          if(u    <    31)    {    throw    new    ArithmeticException(       "overflow:    gcd    is    2    >=    31       ");    }    if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31       ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
478	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  32);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  32);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  32);	  int    k    =((    u&1)    ==    1)?    -1    :    -(u/2)/*B3*/,    v);    	non-compiled	[CE]  <identifier>  expected	115	None	replace
479	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  v  :  -(u/2)/*B1*/);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  v  :  -(u/2)/*B1*/);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  v  :  -(u/2)/*B1*/);	  int    k    =((    u&1)    ==    1)?    v    :    -(u/2)/*B2*/);    	non-compiled	[CE]  ';'  expected	50	None	replace
480	[BUG]  [BUGGY]  MutableDenominator  u  =(MutableDenominator)numerator;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  MutableDenominator  u  =(MutableDenominator)numerator;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	MutableDenominator  u  =(MutableDenominator)numerator;	  MutableDenominator    u    =(MutableDenominator)denominator;    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
481	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  0)?  v  -(u/2)/*B3*/,  1);  [CE]  :  expected  [FE]                      AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  0)?  v  -(u/2)/*B3*/,  1);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  0)?  v  -(u/2)/*B3*/,  1);	  int    k    =((    u&1)    ==    0)?    v    -(u/2)/*B3*/);    	non-compiled	[CE]  :  expected	43	None	replace
482	[BUG]  [BUGGY]  if(u  ==  31  ||  v  ==  32)  {  If(u  ==  31  ||  v  ==  32)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  ==  31  ||  v  ==  32)  {  If(u  ==  31  ||  v  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    ==    31    ||    v    ==    32)    {    If(u  ==  31  ||  v  ==  32)  {	  	non-compiled	[CE]  ';'  expected	73	None	add
483	[BUG]  [BUGGY]  aughtException( "overflow:  gcd  is  2  {  31, ");  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  aughtException( "overflow:  gcd  is  2  {  31, ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	aughtException( "overflow:  gcd  is  2  {  31, ");	  aughtException(   "overflow:    gcd    is    2    {    31   ");    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
484	[BUG]  [BUGGY]  aughtException( "overflow:  gcd  is  2  {  31,  u  {  1  }   ");  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  aughtException( "overflow:  gcd  is  2  {  31,  u  {  1  }   ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	aughtException( "overflow:  gcd  is  2  {  31,  u  {  1  }   ");	  aughtException(   "overflow:    gcd    is    2    {    31   ");    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
485	[BUG]  [BUGGY]  if(u  ==  31  ||  k  ==  32)  {  If(u  ==  31  ||  k  ==  32)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  ==  31  ||  k  ==  32)  {  If(u  ==  31  ||  k  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    ==    31    ||    k    ==    32)    {    If(u  ==  31  ||  k  ==  32)  {	  	non-compiled	[CE]  ';'  expected	77	None	add
486	[BUG]  [BUGGY]  while(v  <  31  &&  u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [CE]  illegal  start  of  type  [FE]            ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(v  <  31  &&  u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(v  <  31  &&  u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }	  while(u    <    31    &&    v    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
487	[BUG]  [BUGGY]  MutableToInteger  u  =(MutableToInteger)super.null;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  MutableToInteger  u  =(MutableToInteger)super.null;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	MutableToInteger  u  =(MutableToInteger)super.null;	  if(u    ==    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    <    31   ");    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
488	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  a1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  a1;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  a1;	  int    k    =((    u&1)    ==    1)?    -1    :    -(u/2)/*B3*/,    denominator;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
489	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  negative;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  negative;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  negative;	  int    k    =((    u&1)    ==    1)?    -1    :    -(u/2)/*B3*/,    denominator;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
490	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  denominator,  v);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  denominator,  v);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  denominator,  v);	  int    k    =((    u&1)    ==    1)?    -1    :    -(u/2)/*B3*/,    denominator);    	non-compiled	[CE]  ';'  expected	34	None	replace
491	[BUG]  [BUGGY]  if(u  {  31  ||  k  ==  31)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  {  31  ||  k  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  {  31  ||  k  ==  31)  {	  if(v    ==    31    ||    k    ==    31)    {    	non-compiled	[CE]  ')'  expected	47	None	replace
492	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  denominator  +  1;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  denominator  +  1;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  denominator  +  1;	  int    k    =((    u&1)    ==    1)?    -1    :    -(u/2)/*B3*/,    denominator;    	non-compiled	[CE]  ';'  expected	2	None	replace
493	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while((  u&1)  ==  1)  {  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	while((  u&1)  ==  1)  {  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }	          if(u    <    31)    {    throw    new    ArithmeticException(       "overflow:    gcd    is    2    >=    31       ");    }    if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31       ");    }    	compilable	  [FE]  ArithmeticException  	6	8	replace
494	[BUG]  [BUGGY]  while((  u&1)  ==  1)  {  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while((  u&1)  ==  1)  {  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while((  u&1)  ==  1)  {  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }	          if(u    <    31)    {    throw    new    ArithmeticException(       "overflow:    gcd    is    2    >=    31       ");    }    if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31       ");    }    	compilable	  [FE]  ArithmeticException  	6	8	replace
495	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while((  u&1)  ==  1)  {  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	while((  u&1)  ==  1)  {  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31 ");  }	          if(u    <    31)    {    throw    new    ArithmeticException(       "overflow:    gcd    is    2    >=    31       ");    }    if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31       ");    }    	compilable	  [FE]  ArithmeticException  	6	8	replace
496	[BUG]  [BUGGY]  while((  u&1)  ==  1)  {  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31 ");  }  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while((  u&1)  ==  1)  {  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while((  u&1)  ==  1)  {  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31 ");  }	          if(u    <    31)    {    throw    new    ArithmeticException(       "overflow:    gcd    is    2    >=    31       ");    }    if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31       ");    }    	compilable	  [FE]  ArithmeticException  	6	8	replace
497	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]        ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while((  u&1)  ==  1)  {  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2!=  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	while((  u&1)  ==  1)  {  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2!=  31 ");  }	          if(u    <    31)    {    throw    new    ArithmeticException(       "overflow:    gcd    is    2    >=    31       ");    }    if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31       ");    }    	compilable	  [FE]  ArithmeticException  	6	8	replace
498	[BUG]  [BUGGY]  while((  u&1)  ==  1)  {  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2!=  31 ");  }  [FE]  ArithmeticException  [FE]        ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while((  u&1)  ==  1)  {  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2!=  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while((  u&1)  ==  1)  {  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2!=  31 ");  }	          if(u    <    31)    {    throw    new    ArithmeticException(       "overflow:    gcd    is    2    >=    31       ");    }    if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31       ");    }    	compilable	  [FE]  ArithmeticException  	6	8	replace
499	[BUG]  [BUGGY]  int  v  =  ((  u&1)  ==  1)?  b  :  -(u/2)/*B3*/;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  v  =  ((  u&1)  ==  1)?  b  :  -(u/2)/*B3*/;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  v  =  ((  u&1)  ==  1)?  b  :  -(u/2)/*B3*/;	  int    v    =    ((    u&1)    ==    1)?    v    :    -(u/2)/*B3*/;    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
500	[BUG]  [BUGGY]  if(u  <  31)  {  int  k  <  31)  {  [CE]  ';'  expected  [FE]              ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31)  {  int  k  <  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  31)  {  int  k  <  31)  {	  if(k    <    31)    {    int    k    <    31)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
501	[BUG]  [BUGGY]  while(v  <  31  &&  u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }  [CE]  illegal  start  of  type  [FE]        ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(v  <  31  &&  u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(v  <  31  &&  u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }	  while(u    <    31    &&    v    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
502	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  0)?  1  :  -(u/2)/*B3*/);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  0)?  1  :  -(u/2)/*B3*/);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  0)?  1  :  -(u/2)/*B3*/);	  int    k    =((    u&1)    ==    0)?    -1    :    -(u/2)/*B3*/);    	non-compiled	[CE]  ';'  expected	152	None	replace
503	[BUG]  [BUGGY]  if(v  ==  32)  {  If(k  ==  31  ||  v  ==  32)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  ==  32)  {  If(k  ==  31  ||  v  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v  ==  32)  {  If(k  ==  31  ||  v  ==  32)  {	  if(k    ==    31    ||    v    ==    32)    {    If(k    ==    31    ||    v    ==    32)    {    	non-compiled	[CE]  ';'  expected	113	None	replace
504	[BUG]  [BUGGY]  If(k  ==  32  ||  v  ==  32)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  If(k  ==  32  ||  v  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	If(k  ==  32  ||  v  ==  32)  {	  if(k    ==    31    ||    v    ==    32)    {    If(k    ==    31    ||    v    ==    32)    {    	non-compiled	[CE]  ';'  expected	113	None	replace
505	[BUG]  [BUGGY]  if(u  ==  31)  {  If(k  ==  31  ||  u  ==  31)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  ==  31)  {  If(k  ==  31  ||  u  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  ==  31)  {  If(k  ==  31  ||  u  ==  31)  {	  if(k    ==    31    ||    u    ==    31)    {    If(k    ==    31    ||    u    ==    31)    {    	non-compiled	[CE]  ';'  expected	106	None	replace
506	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  1  :  -(v&2)/*B3*/);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  1  :  -(v&2)/*B3*/);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  1  :  -(v&2)/*B3*/);	  int    k    =((    u&1)    ==    1)?    1    :    -(u/2)/*B3*/);    	non-compiled	[CE]  ';'  expected	137	None	replace
507	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  >=  31  ||  u  <  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(k  >=  31  ||  u  <  31)  {	  if(u    <    31    ||    k    >=    31)    {    	compilable	  [FE]  ArithmeticException  	24	9	replace
508	[BUG]  [BUGGY]  if(k  >=  31  ||  u  <  31)  {  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  >=  31  ||  u  <  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  >=  31  ||  u  <  31)  {	  if(u    <    31    ||    k    >=    31)    {    	compilable	  [FE]  ArithmeticException  	24	9	replace
509	[BUG]  [BUGGY]  while(u  <  31  &&  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31. ");  }  [CE]  illegal  start  of  type  [FE]            ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  <  31  &&  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31. ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  31  &&  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31. ");  }	  while(u    <    31    &&    v    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
510	[BUG]  [BUGGY]  MutableToInteger  u  =  new  MutableToInteger(1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  MutableToInteger  u  =  new  MutableToInteger(1);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	MutableToInteger  u  =  new  MutableToInteger(1);	  MutableToInteger    u    =    new    MutableToInteger(v);    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
511	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  -(v&2)/*B3*/;  [CE]  :  expected  [FE]                    AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  -(v&2)/*B3*/;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  -1  -(v&2)/*B3*/;	  int    k    =((    u&1)    ==    1)?    -1    -(u/2)/*B3*/;    	non-compiled	[CE]  :  expected	111	None	replace
512	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  1  -(u/2)/*B3*/;  [CE]  :  expected  [FE]                      AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  1  -(u/2)/*B3*/;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  1  -(u/2)/*B3*/;	  int    k    =((    u&1)    ==    1)?    -1    -(u/2)/*B3*/;    	non-compiled	[CE]  :  expected	111	None	replace
513	[BUG]  [BUGGY]  aughtException( "overflow:  gcd  is  2  {  31,  u  }   ");  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  aughtException( "overflow:  gcd  is  2  {  31,  u  }   ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	aughtException( "overflow:  gcd  is  2  {  31,  u  }   ");	  aughtException(   "overflow:    gcd    is    2    ==    31   ");    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
514	[BUG]  [BUGGY]  Mutators.add(new  ArithmeticException( "overflow:  gcd  is  2  >>  31 "));  [CE]  illegal  start  of  type  [FE]          ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  Mutators.add(new  ArithmeticException( "overflow:  gcd  is  2  >>  31 "));  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	Mutators.add(new  ArithmeticException( "overflow:  gcd  is  2  >>  31 "));	  mutators.add(new    ArithmeticException(   "overflow:    gcd    is    2    >>    31   "));    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
515	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while((  u&1)  ==  1)  {  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	while((  u&1)  ==  1)  {  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }	          if(u    <    31)    {    throw    new    ArithmeticException(       "overflow:    gcd    is    2    >>    31       ");    }    if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31       ");    }    	compilable	  [FE]  ArithmeticException  	40	8	replace
516	[BUG]  [BUGGY]  while((  u&1)  ==  1)  {  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while((  u&1)  ==  1)  {  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while((  u&1)  ==  1)  {  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }	          if(u    <    31)    {    throw    new    ArithmeticException(       "overflow:    gcd    is    2    >>    31       ");    }    if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31       ");    }    	compilable	  [FE]  ArithmeticException  	40	8	replace
517	[BUG]  [BUGGY]  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  31 ");  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  31 ");  }	  if(v    ==    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    <    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
518	[BUG]  [BUGGY]  if(u  <  31)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  <  31 ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  <  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  31)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  <  31 ");  }	  if(v    ==    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    <    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
519	[BUG]  [BUGGY]  if(v  ==  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  <  31 ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  ==  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  <  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v  ==  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  <  31 ");  }	  if(v    ==    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    <    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
520	[BUG]  [BUGGY]  while(v  <  31  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }  [CE]  illegal  start  of  type  [FE]          ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(v  <  31  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(v  <  31  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }	  while(u    <    31    &&    k    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
521	[BUG]  [BUGGY]  while(k  <  31  &&  u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [CE]  illegal  start  of  type  [FE]            ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(k  <  31  &&  u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(k  <  31  &&  u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }	  while(u    <    31    &&    k    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
522	[BUG]  [BUGGY]  while(v  <  31  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [CE]  illegal  start  of  type  [FE]          ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(v  <  31  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(v  <  31  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }	  while(u    <    31    &&    k    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
523	[BUG]  [BUGGY]  MutableDenominator  u  =(MutableDenominator)this.denominator;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  MutableDenominator  u  =(MutableDenominator)this.denominator;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	MutableDenominator  u  =(MutableDenominator)this.denominator;	  MutableDenominator    u    =(MutableDenominator)denominator;    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
524	[BUG]  [BUGGY]  aughtException( "overflow:  gcd  is  2  <  <  31 ");  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  aughtException( "overflow:  gcd  is  2  <  <  31 ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	aughtException( "overflow:  gcd  is  2  <  <  31 ");	  aughtException(   "overflow:    gcd    is    2    >>    31   ");    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
525	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]        ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31  ||  k  >  0)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  <  31  ||  k  >  0)  {	  if(k    <    31)    {    if(k    <    31)    {    	compilable	  [FE]  ArithmeticException  	25	9	replace
526	[BUG]  [BUGGY]  if(u  <  31  ||  k  >  0)  {  [FE]  ArithmeticException  [FE]        ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31  ||  k  >  0)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  31  ||  k  >  0)  {	  if(k    <    31)    {    if(k    <    31)    {    	compilable	  [FE]  ArithmeticException  	25	9	replace
527	[BUG]  [BUGGY]  if(u  <  31  ||  v  >  a1  ||  k  <  31)  {  [CE]  cannot  find  symbol  a1  [FE]          ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31  ||  v  >  a1  ||  k  <  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  31  ||  v  >  a1  ||  k  <  31)  {	  if(k    <    31)    {    if(k    <    31)    {    	non-compiled	[CE]  cannot  find  symbol  a1	25	None	replace
528	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  4);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  4);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  4);	  int    k    =((    u&1)    ==    1)?    -1    :    -(u/2)/*B3*/,    1);    	non-compiled	[CE]  <identifier>  expected	116	None	replace
529	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  v  -(u/2)/*B3*/,  denominator);  [CE]  :  expected  [FE]                    AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  v  -(u/2)/*B3*/,  denominator);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  v  -(u/2)/*B3*/,  denominator);	  int    k    =((    u&1)    ==    1)?    v    -(u/2)/*B3*/;    	non-compiled	[CE]  :  expected	56	None	replace
530	[BUG]  [BUGGY]  if(k  ==  31  ||  v  ==  31)  {  if(k  ==  31  ||  v  ==  31,)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  ==  31  ||  v  ==  31)  {  if(k  ==  31  ||  v  ==  31,)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k    ==    31    ||    v    ==    31)    {    if(k  ==  31  ||  v  ==  31,)  {	  	non-compiled	[CE]  ')'  expected	44	None	add
531	[BUG]  [BUGGY]  while(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  31 ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  31 ");  }	  if(u    ==    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    <    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
532	[BUG]  [BUGGY]  while(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  31 ");  [CE]  unreachable  statement  [FE]                    AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  31 ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  31 ");	  if(u    ==    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    <    31   ");    }    	non-compiled	[CE]  unreachable  statement	109	None	replace
533	[BUG]  [BUGGY]  if(k  ==  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  <  31 ");  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  ==  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  <  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  ==  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  <  31 ");  }	  if(k    ==    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    <    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
534	[BUG]  [BUGGY]  if(u  <  31)  {  int  u  <  31)  {  [CE]  ';'  expected  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(u  <  31)  {  int  u  <  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    31)    {    int  u  <  31)  {	  	non-compiled	[CE]  ';'  expected	119	None	add
535	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k!=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(k!=  31)  {	  if(k    >=    31)    {    	compilable	  [FE]  ArithmeticException  	62	9	replace
536	[BUG]  [BUGGY]  if(k!=  31)  {  [FE]  ArithmeticException  [FE]    AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k!=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k!=  31)  {	  if(k    >=    31)    {    	compilable	  [FE]  ArithmeticException  	62	9	replace
537	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  1  :  -(v&2)/*B3*/;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  1  :  -(v&2)/*B3*/;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  1  :  -(v&2)/*B3*/;	  int    k    =((    u&1)    ==    1)?    1    :    -(u/2)/*B3*/;    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
538	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  <  32  ||  u  >  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(k  <  32  ||  u  >  32)  {	  if(u    <    31    ||    k    >    32)    {    	compilable	  [FE]  ArithmeticException  	130	9	replace
539	[BUG]  [BUGGY]  if(k  <  32  ||  u  >  32)  {  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  <  32  ||  u  >  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  <  32  ||  u  >  32)  {	  if(u    <    31    ||    k    >    32)    {    	compilable	  [FE]  ArithmeticException  	130	9	replace
540	[BUG]  [BUGGY]  Integer  u  =  new  Integer(v);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  Integer  u  =  new  Integer(v);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	Integer  u  =  new  Integer(v);	  If(k    ==    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    <    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
541	[BUG]  [BUGGY]  Integer  u  =  new  Integer(0);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  Integer  u  =  new  Integer(0);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	Integer  u  =  new  Integer(0);	  If(k    ==    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    <    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
542	[BUG]  [BUGGY]  Integer  u=1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  Integer  u=1;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	Integer  u=1;	  If(k    ==    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    <    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
543	[BUG]  [BUGGY]  while(u  <  31  &&  v  <  31)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  >>  31 ");  }  [CE]  illegal  start  of  type  [FE]        ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  <  31  &&  v  <  31)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  >>  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  31  &&  v  <  31)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  >>  31 ");  }	  while(u    <    31    &&    v    <    31)    {    throw    new    ArithmeticException(   "Overflow:    gcd    is    2    ==    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
544	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  0  :  -(v&2)/*B3*/);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  0  :  -(v&2)/*B3*/);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  0  :  -(v&2)/*B3*/);	  int    k    =((    u&1)    ==    1)?    0    :    -(u/2)/*B3*/);    	non-compiled	[CE]  ';'  expected	33	None	replace
545	[BUG]  [BUGGY]  mutator  <  =  0)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  ==  31 ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  mutator  <  =  0)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  ==  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	mutator  <  =  0)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  ==  31 ");  }	  mutator    <    =    0)    {    throw    new    ArithmeticException(   "Overflow:    gcd    is    2    >>    31   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	89	None	replace
546	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  0)?  -(u/2)/*B3*/,  v  +  1);  [CE]  :  expected  [FE]                    AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  0)?  -(u/2)/*B3*/,  v  +  1);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  0)?  -(u/2)/*B3*/,  v  +  1);	  int    k    =((    u&1)    ==    0)?    -(u/2)/*B3*/,    v);    	non-compiled	[CE]  :  expected	42	None	replace
547	[BUG]  [BUGGY]  while(v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [CE]  illegal  start  of  type  [FE]        ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }	  while(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
548	[BUG]  [BUGGY]  while(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }  [CE]  illegal  start  of  type  [FE]          ArithmeticException      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }	  while(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
549	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]          AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  ==  0)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(k  ==  0)  {	  if(u    ==    31    ||    k    ==    31)    {    if(u    ==    31    ||    k    >=    31)    {    	compilable	  [FE]  ArithmeticException  	8	9	replace
550	[BUG]  [BUGGY]  if(k  ==  0)  {  [FE]  ArithmeticException  [FE]          AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  ==  0)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  ==  0)  {	  if(u    ==    31    ||    k    ==    31)    {    if(u    ==    31    ||    k    >=    31)    {    	compilable	  [FE]  ArithmeticException  	8	9	replace
551	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  <  31  ||  u  >  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(v  <  31  ||  u  >  31)  {	  if(u    <    31    ||    v    >    31)    {    	compilable	  [FE]  ArithmeticException  	98	9	replace
552	[BUG]  [BUGGY]  if(v  <  31  ||  u  >  31)  {  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  <  31  ||  u  >  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v  <  31  ||  u  >  31)  {	  if(u    <    31    ||    v    >    31)    {    	compilable	  [FE]  ArithmeticException  	98	9	replace
553	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  ==  31  ||  u  <  32  ||  k  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(k  ==  31  ||  u  <  32  ||  k  ==  31)  {	  if(u    <    32    ||    k    ==    31)    {    	compilable	  [FE]  ArithmeticException  	22	9	replace
554	[BUG]  [BUGGY]  if(k  ==  31  ||  u  <  32  ||  k  ==  31)  {  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  ==  31  ||  u  <  32  ||  k  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  ==  31  ||  u  <  32  ||  k  ==  31)  {	  if(u    <    32    ||    k    ==    31)    {    	compilable	  [FE]  ArithmeticException  	22	9	replace
555	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  <  31  ||  u  <  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(k  <  31  ||  u  <  32)  {	  if(u    <    32    ||    k    ==    31)    {    	compilable	  [FE]  ArithmeticException  	22	9	replace
556	[BUG]  [BUGGY]  if(k  <  31  ||  u  <  32)  {  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  <  31  ||  u  <  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  <  31  ||  u  <  32)  {	  if(u    <    32    ||    k    ==    31)    {    	compilable	  [FE]  ArithmeticException  	22	9	replace
557	[BUG]  [BUGGY]  if(v  ==  0)  {  If(u  ==  0  ||  k  ==  31)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  ==  0)  {  If(u  ==  0  ||  k  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v  ==  0)  {  If(u  ==  0  ||  k  ==  31)  {	  if(u    ==    31    ||    k    ==    31)    {    If(u    ==    31    ||    k    ==    31)    {    	non-compiled	[CE]  ';'  expected	114	None	replace
558	[BUG]  [BUGGY]  if(k  ==  32)  {  If(u  ==  32  ||  k  ==  32)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  ==  32)  {  If(u  ==  32  ||  k  ==  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  ==  32)  {  If(u  ==  32  ||  k  ==  32)  {	  if(u    ==    31    ||    k    ==    31)    {    If(u    ==    31    ||    k    ==    31)    {    	non-compiled	[CE]  ';'  expected	114	None	replace
559	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  v  :  -(u/2)/*B2*/,  denominator);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  v  :  -(u/2)/*B2*/,  denominator);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  v  :  -(u/2)/*B2*/,  denominator);	  int    k    =((    u&1)    ==    1)?    v    :    -(u/2)/*B2*/);    	non-compiled	[CE]  ';'  expected	50	None	replace
560	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  v  :  -(u/2)/*B4*/,  denominator);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  v  :  -(u/2)/*B4*/,  denominator);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  v  :  -(u/2)/*B4*/,  denominator);	  int    k    =((    u&1)    ==    1)?    v    :    -(u/2)/*B4*/);    	non-compiled	[CE]  ';'  expected	51	None	replace
561	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  0)?  -(v&2)/*B3*/,  denominator);  [CE]  :  expected  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  0)?  -(v&2)/*B3*/,  denominator);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  0)?  -(v&2)/*B3*/,  denominator);	  int    k    =((    u&1)    ==    0)?    -(u/2)/*B3*/,    denominator);    	non-compiled	[CE]  :  expected	117	None	replace
562	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  >=  31  ||  u  >=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(k  >=  31  ||  u  >=  31)  {	  if(u    >=    31    ||    k    ==    31)    {    	compilable	  [FE]  AssertionFailedError  	126	1	replace
563	[BUG]  [BUGGY]  if(k  >=  31  ||  u  >=  31)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  >=  31  ||  u  >=  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  >=  31  ||  u  >=  31)  {	  if(u    >=    31    ||    k    ==    31)    {    	compilable	  [FE]  AssertionFailedError  	126	1	replace
564	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  >=  31  ||  u  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(k  >=  31  ||  u  ==  31)  {	  if(u    >=    31    ||    k    ==    31)    {    	compilable	  [FE]  AssertionFailedError  	126	1	replace
565	[BUG]  [BUGGY]  if(k  >=  31  ||  u  ==  31)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  >=  31  ||  u  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  >=  31  ||  u  ==  31)  {	  if(u    >=    31    ||    k    ==    31)    {    	compilable	  [FE]  AssertionFailedError  	126	1	replace
566	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while((  u&1)  ==  1)  {  if(u  <  31)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  >>  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	while((  u&1)  ==  1)  {  if(u  <  31)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  >>  31 ");  }	          if(u    <    31)    {    throw    new    ArithmeticException(       "overflow:    gcd    is    2    >>    31       ");    }    if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31       ");    }    	compilable	  [FE]  ArithmeticException  	38	8	replace
567	[BUG]  [BUGGY]  while((  u&1)  ==  1)  {  if(u  <  31)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  >>  31 ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while((  u&1)  ==  1)  {  if(u  <  31)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  >>  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while((  u&1)  ==  1)  {  if(u  <  31)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  >>  31 ");  }	          if(u    <    31)    {    throw    new    ArithmeticException(       "overflow:    gcd    is    2    >>    31       ");    }    if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31       ");    }    	compilable	  [FE]  ArithmeticException  	38	8	replace
568	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  <  31  ||  v  >  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(k  <  31  ||  v  >  32)  {	  if(u    <    31    ||    v    >    32)    {    	compilable	  [FE]  ArithmeticException  	104	9	replace
569	[BUG]  [BUGGY]  if(k  <  31  ||  v  >  32)  {  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(k  <  31  ||  v  >  32)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  <  31  ||  v  >  32)  {	  if(u    <    31    ||    v    >    32)    {    	compilable	  [FE]  ArithmeticException  	104	9	replace
570	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >=    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >=        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }	  	compilable	  [FE]  ArithmeticException  	5	9	add
571	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >=    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >=    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >=        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }	  	compilable	  [FE]  ArithmeticException  	5	9	add
572	[BUG]  [BUGGY]  aughtException( "Overflow:  gcd  is  2  >>  31 ");  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  aughtException( "Overflow:  gcd  is  2  >>  31 ");  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	aughtException( "Overflow:  gcd  is  2  >>  31 ");	  aughtException(   "Overflow:    gcd    is    2    ==    31   ");    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
573	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  1  :  -(u/2)/*B3*/  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  int  k  =((  u&1)  ==  1)?  1  :  -(u/2)/*B3*/  +  1;  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  1  :  -(u/2)/*B3*/  +  1;	  int    k    =((    u&1)    ==    1)?    -1    :    -(u/2)/*B3*/    +    1;    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
574	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >=    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >=        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }	  	compilable	  [FE]  ArithmeticException  	3	9	add
575	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >=    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >=    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >=        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }	  	compilable	  [FE]  ArithmeticException  	3	9	add
576	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >>        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }	  	compilable	  [FE]  ArithmeticException  	37	9	add
577	[BUG]  [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]          if(u    <    31)    {    throw    new    ArithmeticException(     "overflow:    gcd    is    2    >>    31     ");    }    if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31     ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	                if(u        <        31)        {        throw        new        ArithmeticException(       "overflow:        gcd        is        2        >>        31       ");        }        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31       ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }	  	compilable	  [FE]  ArithmeticException  	37	9	add
578	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  <  31  ||  k  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(v  <  31  ||  k  ==  31)  {	  if(v    <    31    ||    k    >    31)    {    	compilable	  [FE]  ArithmeticException  	150	9	replace
579	[BUG]  [BUGGY]  if(v  <  31  ||  k  ==  31)  {  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  if(v  <  31  ||  k  ==  31)  {  [BUGGY]      throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v  <  31  ||  k  ==  31)  {	  if(v    <    31    ||    k    >    31)    {    	compilable	  [FE]  ArithmeticException  	150	9	replace
580	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while((  u&1)  ==  1)  {  if(u  <  31)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  ==  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	while((  u&1)  ==  1)  {  if(u  <  31)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  ==  31 ");  }	          if(u    <    31)    {    throw    new    ArithmeticException(       "overflow:    gcd    is    2    ==    31       ");    }    if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31       ");    }    	compilable	  [FE]  ArithmeticException  	84	8	replace
581	[BUG]  [BUGGY]  while((  u&1)  ==  1)  {  if(u  <  31)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  ==  31 ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  while((  u&1)  ==  1)  {  if(u  <  31)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  ==  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while((  u&1)  ==  1)  {  if(u  <  31)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  ==  31 ");  }	          if(u    <    31)    {    throw    new    ArithmeticException(       "overflow:    gcd    is    2    ==    31       ");    }    if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31       ");    }    	compilable	  [FE]  ArithmeticException  	84	8	replace
582	[BUG]  [BUGGY]  mutator  <  =  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  <  31 ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  mutator  <  =  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  <  31 ");  }  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	mutator  <  =  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  <  31 ");  }	  mutator    <    =    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	90	None	replace
583	[BUG]  [BUGGY]  aughtException( "overflow:  gcd  is  2  {  31 ",  v);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  aughtException( "overflow:  gcd  is  2  {  31 ",  v);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	aughtException( "overflow:  gcd  is  2  {  31 ",  v);	  aughtException(   "overflow:    gcd    is    2    {    31   ");    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
584	[BUG]  [BUGGY]  aughtException( "overflow:  gcd  is  2  {  31 ",  u);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }      [BUGGY]  aughtException( "overflow:  gcd  is  2  {  31 ",  u);  [BUGGY]      if  (k==31)  {  throw  new  ArithmeticException(     "overflow:  gcd  is  2^31     ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	aughtException( "overflow:  gcd  is  2  {  31 ",  u);	  aughtException(   "overflow:    gcd    is    2    {    31   ");    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
