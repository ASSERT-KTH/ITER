bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    int  k  =((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/);  [CE]  ';'  expected  [FE]    AssertionFailedError  [CONTEXT]      if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }  [BUGGY]    int  k  =((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/);  [BUGGY]  if  (k==31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2^31 ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	    int  k  =((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/);		non-compiled	[CE]  ';'  expected	24	None	add
2	[BUG]  [BUGGY]    int  k  =  ((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/;  [CE]  variable  k  is  already  defined  in  method  greatestCommonDivisor(int,int)  [FE]      AssertionFailedError  [CONTEXT]      if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }  [BUGGY]    int  k  =  ((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/;  [BUGGY]  if  (k==31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2^31 ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	    int  k  =  ((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/;		non-compiled	[CE]  variable  k  is  already  defined  in  method  greatestCommonDivisor(int,int)	24	None	add
3	[BUG]  [BUGGY]    if(t  ==  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  31 ");  }  [CE]  cannot  find  symbol  t  [FE]        AssertionFailedError  [CONTEXT]      if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }  [BUGGY]    if(t  ==  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  31 ");  }  [BUGGY]  if  (k==31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2^31 ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	    if(t  ==  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  31 ");  }		non-compiled	[CE]  cannot  find  symbol  t	24	None	add
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]      if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }  [BUGGY]  if(u  ==  31  ||  k  ==  31)  {  [BUGGY]  throw  new  ArithmeticException( "overflow:  gcd  is  2^31 ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  ==  31  ||  k  ==  31)  {	if  (k==31)  {  	compilable	  [FE]  AssertionFailedError  	23	1	replace
5	[BUG]  [BUGGY]  if(u  ==  31  ||  k  ==  31)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]      if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }  [BUGGY]  if(u  ==  31  ||  k  ==  31)  {  [BUGGY]  throw  new  ArithmeticException( "overflow:  gcd  is  2^31 ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  ==  31  ||  k  ==  31)  {	if  (k==31)  {  	compilable	  [FE]  AssertionFailedError  	23	1	replace
6	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      AssertionFailedError  [CONTEXT]      if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }  [BUGGY]  if(u  <  31  ||  k  ==  31)  {  [BUGGY]  throw  new  ArithmeticException( "overflow:  gcd  is  2^31 ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  <  31  ||  k  ==  31)  {	if  (k==31)  {  	compilable	  [FE]  ArithmeticException  	23	9	replace
7	[BUG]  [BUGGY]  if(u  <  31  ||  k  ==  31)  {  [FE]  ArithmeticException  [FE]      AssertionFailedError  [CONTEXT]      if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }  [BUGGY]  if(u  <  31  ||  k  ==  31)  {  [BUGGY]  throw  new  ArithmeticException( "overflow:  gcd  is  2^31 ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  31  ||  k  ==  31)  {	if  (k==31)  {  	compilable	  [FE]  ArithmeticException  	23	9	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]      if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }  [BUGGY]  if(k  ==  31  ||  u  ==  31)  {  [BUGGY]  throw  new  ArithmeticException( "overflow:  gcd  is  2^31 ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(k  ==  31  ||  u  ==  31)  {	if  (k==31)  {  	compilable	  [FE]  AssertionFailedError  	23	1	replace
9	[BUG]  [BUGGY]  if(k  ==  31  ||  u  ==  31)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]      if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }  [BUGGY]  if(k  ==  31  ||  u  ==  31)  {  [BUGGY]  throw  new  ArithmeticException( "overflow:  gcd  is  2^31 ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  ==  31  ||  u  ==  31)  {	if  (k==31)  {  	compilable	  [FE]  AssertionFailedError  	23	1	replace
10	[BUG]  [BUGGY]    if(u  <  =  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]      if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }  [BUGGY]    if(u  <  =  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [BUGGY]  if  (k==31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2^31 ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	    if(u  <  =  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }		non-compiled	[CE]  illegal  start  of  expression	24	None	add
11	[BUG]  [BUGGY]    int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/;  [CE]  variable  k  is  already  defined  in  method  greatestCommonDivisor(int,int)  [FE]      AssertionFailedError  [CONTEXT]      if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }  [BUGGY]    int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/;  [BUGGY]  if  (k==31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2^31 ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	    int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/;		non-compiled	[CE]  variable  k  is  already  defined  in  method  greatestCommonDivisor(int,int)	24	None	add
12	[BUG]  [BUGGY]    int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/);  [CE]  ';'  expected  [FE]        AssertionFailedError  [CONTEXT]      if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }  [BUGGY]    int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/);  [BUGGY]  if  (k==31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2^31 ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	    int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/);		non-compiled	[CE]  ';'  expected	24	None	add
13	[BUG]  [BUGGY]    if(u  <  =  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]      if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }  [BUGGY]    if(u  <  =  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }  [BUGGY]  if  (k==31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2^31 ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	    if(u  <  =  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }		non-compiled	[CE]  illegal  start  of  expression	24	None	add
14	[BUG]  [BUGGY]    int  k  =((  u&1)  ==  1)?  -(u/2)/*B3*/;  [CE]  :  expected  [FE]            AssertionFailedError  [CONTEXT]      if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }  [BUGGY]    int  k  =((  u&1)  ==  1)?  -(u/2)/*B3*/;  [BUGGY]  if  (k==31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2^31 ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	    int  k  =((  u&1)  ==  1)?  -(u/2)/*B3*/;		non-compiled	[CE]  :  expected	24	None	add
15	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    AssertionFailedError  [CONTEXT]      if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }  [BUGGY]  if(u  <  31  ||  k  >  31)  {  [BUGGY]  throw  new  ArithmeticException( "overflow:  gcd  is  2^31 ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  <  31  ||  k  >  31)  {	if  (k==31)  {  	compilable	  [FE]  ArithmeticException  	23	9	replace
16	[BUG]  [BUGGY]  if(u  <  31  ||  k  >  31)  {  [FE]  ArithmeticException  [FE]    AssertionFailedError  [CONTEXT]      if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }  [BUGGY]  if(u  <  31  ||  k  >  31)  {  [BUGGY]  throw  new  ArithmeticException( "overflow:  gcd  is  2^31 ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  31  ||  k  >  31)  {	if  (k==31)  {  	compilable	  [FE]  ArithmeticException  	23	9	replace
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]      if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }  [BUGGY]  if(u  ==  31)  {  [BUGGY]  throw  new  ArithmeticException( "overflow:  gcd  is  2^31 ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  ==  31)  {	if  (k==31)  {  	compilable	  [FE]  AssertionFailedError  	23	1	replace
18	[BUG]  [BUGGY]  if(u  ==  31)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]      if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }  [BUGGY]  if(u  ==  31)  {  [BUGGY]  throw  new  ArithmeticException( "overflow:  gcd  is  2^31 ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  ==  31)  {	if  (k==31)  {  	compilable	  [FE]  AssertionFailedError  	23	1	replace
19	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    AssertionFailedError  [CONTEXT]      if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }  [BUGGY]  if(k  <  31)  {  [BUGGY]  throw  new  ArithmeticException( "overflow:  gcd  is  2^31 ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(k  <  31)  {	if  (k==31)  {  	compilable	  [FE]  ArithmeticException  	23	9	replace
20	[BUG]  [BUGGY]  if(k  <  31)  {  [FE]  ArithmeticException  [FE]    AssertionFailedError  [CONTEXT]      if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }  [BUGGY]  if(k  <  31)  {  [BUGGY]  throw  new  ArithmeticException( "overflow:  gcd  is  2^31 ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  <  31)  {	if  (k==31)  {  	compilable	  [FE]  ArithmeticException  	23	9	replace
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]      if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }  [BUGGY]  if(k  ==  31  ||  v  ==  32)  {  [BUGGY]  throw  new  ArithmeticException( "overflow:  gcd  is  2^31 ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(k  ==  31  ||  v  ==  32)  {	if  (k==31)  {  	compilable	  [FE]  AssertionFailedError  	23	1	replace
22	[BUG]  [BUGGY]  if(k  ==  31  ||  v  ==  32)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]      if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }  [BUGGY]  if(k  ==  31  ||  v  ==  32)  {  [BUGGY]  throw  new  ArithmeticException( "overflow:  gcd  is  2^31 ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  ==  31  ||  v  ==  32)  {	if  (k==31)  {  	compilable	  [FE]  AssertionFailedError  	23	1	replace
23	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    AssertionFailedError  [CONTEXT]      if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }  [BUGGY]    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [BUGGY]  if  (k==31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2^31 ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }		compilable	  [FE]  ArithmeticException  	24	9	add
24	[BUG]  [BUGGY]    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [FE]  ArithmeticException  [FE]    AssertionFailedError  [CONTEXT]      if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }  [BUGGY]    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [BUGGY]  if  (k==31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2^31 ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }		compilable	  [FE]  ArithmeticException  	24	9	add
25	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      AssertionFailedError  [CONTEXT]      if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }  [BUGGY]    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }  [BUGGY]  if  (k==31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2^31 ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }		compilable	  [FE]  ArithmeticException  	24	9	add
26	[BUG]  [BUGGY]    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }  [FE]  ArithmeticException  [FE]      AssertionFailedError  [CONTEXT]      if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }  [BUGGY]    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }  [BUGGY]  if  (k==31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2^31 ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }		compilable	  [FE]  ArithmeticException  	24	9	add
27	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]        AssertionFailedError  [CONTEXT]      if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }  [BUGGY]    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31 ");  }  [BUGGY]  if  (k==31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2^31 ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31 ");  }		compilable	  [FE]  ArithmeticException  	24	9	add
28	[BUG]  [BUGGY]    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31 ");  }  [FE]  ArithmeticException  [FE]        AssertionFailedError  [CONTEXT]      if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }  [BUGGY]    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31 ");  }  [BUGGY]  if  (k==31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2^31 ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31 ");  }		compilable	  [FE]  ArithmeticException  	24	9	add
29	[BUG]  [BUGGY]    int  k  =((  u&1)  ==  0)?  -(u/2)/*B3*/);  [CE]  :  expected  [FE]          AssertionFailedError  [CONTEXT]      if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }  [BUGGY]    int  k  =((  u&1)  ==  0)?  -(u/2)/*B3*/);  [BUGGY]  if  (k==31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2^31 ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	    int  k  =((  u&1)  ==  0)?  -(u/2)/*B3*/);		non-compiled	[CE]  :  expected	24	None	add
