bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  0  :  -(u/2)/*B3*/;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  int  k  =((  u&1)  ==  1)?  0  :  -(u/2)/*B3*/;  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  0  :  -(u/2)/*B3*/;	      int    k    =((    u&1)    ==    1)?    -1    :    -(u/2)/*B3*/;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
2	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  denominator;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  denominator;  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  denominator;	      int    k    =((    u&1)    ==    1)?    -1    :    -(u/2)/*B3*/;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
3	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]      if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31   ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }	  	compilable	  [FE]  ArithmeticException  	27	9	add
4	[BUG]  [BUGGY]      if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]      if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31   ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }	  	compilable	  [FE]  ArithmeticException  	27	9	add
5	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]      if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31   ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }	  	compilable	  [FE]  ArithmeticException  	27	9	add
6	[BUG]  [BUGGY]      if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]      if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >=  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31   ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }	  	compilable	  [FE]  ArithmeticException  	27	9	add
7	[BUG]  [BUGGY]  if(u  ==  31  ||  k  ==  31)  {  if(u  ==  31  ||  k  ==  31)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  ==  31  ||  k  ==  31)  {  if(u  ==  31  ||  k  ==  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    ==    31    ||    k    ==    31)    {    if(u  ==  31  ||  k  ==  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
8	[BUG]  [BUGGY]  if(u  ==  31  ||  k  ==  31)  {  if(u  ==  31  ||  k  >=  31)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  ==  31  ||  k  ==  31)  {  if(u  ==  31  ||  k  >=  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    ==    31    ||    k    ==    31)    {    if(u  ==  31  ||  k  >=  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
9	[BUG]  [BUGGY]  if(u  ==  31  ||  k  ==  31)  {  if(u  ==  31  ||  k!=  31)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  ==  31  ||  k  ==  31)  {  if(u  ==  31  ||  k!=  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    ==    31    ||    k    ==    31)    {    if(u  ==  31  ||  k!=  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
10	[BUG]  [BUGGY]  if(u  ==  31  ||  k  ==  31)  {  if(u  >=  31  ||  k  ==  31)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  ==  31  ||  k  ==  31)  {  if(u  >=  31  ||  k  ==  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    ==    31    ||    k    ==    31)    {    if(u  >=  31  ||  k  ==  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
11	[BUG]  [BUGGY]  while(u  <  31  &&  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }  [CE]  illegal  start  of  type  [FE]    ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  while(u  <  31  &&  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  31  &&  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }	      if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
12	[BUG]  [BUGGY]  while(u  <  31  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }  [CE]  illegal  start  of  type  [FE]      ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  while(u  <  31  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  31  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }	      if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
13	[BUG]  [BUGGY]  while(u  <  31  &&  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [CE]  illegal  start  of  type  [FE]        ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  while(u  <  31  &&  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  31  &&  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }	      if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
14	[BUG]  [BUGGY]  while(u  <  31  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [CE]  illegal  start  of  type  [FE]          ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  while(u  <  31  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  31  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }	      if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
15	[BUG]  [BUGGY]  if(u  ==  31)  {  if(u  ==  31)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  ==  31)  {  if(u  ==  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    ==    31)    {    if(u  ==  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
16	[BUG]  [BUGGY]  if(u  ==  31)  {  if(u  >=  31)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  ==  31)  {  if(u  >=  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    ==    31)    {    if(u  >=  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
17	[BUG]  [BUGGY]  if(u  ==  31)  {  if(u!=  31)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  ==  31)  {  if(u!=  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    ==    31)    {    if(u!=  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
18	[BUG]  [BUGGY]  if(u  ==  31)  {  if(u  ==  32)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  ==  31)  {  if(u  ==  32)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    ==    31)    {    if(u  ==  32)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
19	[BUG]  [BUGGY]  int  k  =  ((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/,  denominator;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  int  k  =  ((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/,  denominator;  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =  ((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/,  denominator;	      int    k    =    ((    u&1)    ==    1)?    v    :    -(u/2)/*B3*/;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
20	[BUG]  [BUGGY]  int  k  =  ((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/,  denominator);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  int  k  =  ((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/,  denominator);  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =  ((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/,  denominator);	      int    k    =    ((    u&1)    ==    1)?    v    :    -(u/2)/*B3*/;    	non-compiled	[CE]  ';'  expected	2	None	replace
21	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  <  32  ||  k  ==  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  <  32  ||  k  ==  31)  {	  if(u    <    31    ||    k    ==    31)    {    	compilable	  [FE]  ArithmeticException  	7	9	replace
22	[BUG]  [BUGGY]  if(u  <  32  ||  k  ==  31)  {  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  <  32  ||  k  ==  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  32  ||  k  ==  31)  {	  if(u    <    31    ||    k    ==    31)    {    	compilable	  [FE]  ArithmeticException  	7	9	replace
23	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  <  31  ||  k  >=  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  <  31  ||  k  >=  31)  {	  if(u    <    31    ||    k    ==    31)    {    	compilable	  [FE]  ArithmeticException  	7	9	replace
24	[BUG]  [BUGGY]  if(u  <  31  ||  k  >=  31)  {  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  <  31  ||  k  >=  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  31  ||  k  >=  31)  {	  if(u    <    31    ||    k    ==    31)    {    	compilable	  [FE]  ArithmeticException  	7	9	replace
25	[BUG]  [BUGGY]  if(k  <  31)  {  if(k  <  31)  {  [CE]  illegal  start  of  expression  [FE]    ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(k  <  31)  {  if(k  <  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k    <    31)    {    if(k  <  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
26	[BUG]  [BUGGY]  if(k  <  31)  {  If(k  <  31)  {  [CE]  ';'  expected  [FE]      ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(k  <  31)  {  If(k  <  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k    <    31)    {    If(k  <  31)  {	  	non-compiled	[CE]  ';'  expected	19	None	add
27	[BUG]  [BUGGY]  if(k  <  31)  {  if(k  >=  31)  {  [CE]  illegal  start  of  expression  [FE]        ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(k  <  31)  {  if(k  >=  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k    <    31)    {    if(k  >=  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
28	[BUG]  [BUGGY]  if(k  <  31)  {  int  k  <  31)  {  [CE]  ';'  expected  [FE]          ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(k  <  31)  {  int  k  <  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k    <    31)    {    int  k  <  31)  {	  	non-compiled	[CE]  ';'  expected	19	None	add
29	[BUG]  [BUGGY]  if(k  ==  31  ||  v  ==  32)  {  if(k  ==  31  ||  v  ==  32)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(k  ==  31  ||  v  ==  32)  {  if(k  ==  31  ||  v  ==  32)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k    ==    31    ||    v    ==    32)    {    if(k  ==  31  ||  v  ==  32)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
30	[BUG]  [BUGGY]  if(k  ==  31  ||  v  ==  32)  {  if(k  ==  31  ||  v!=  32)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(k  ==  31  ||  v  ==  32)  {  if(k  ==  31  ||  v!=  32)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k    ==    31    ||    v    ==    32)    {    if(k  ==  31  ||  v!=  32)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
31	[BUG]  [BUGGY]  if(k  ==  31  ||  v  ==  32)  {  if(k  >=  31  ||  v  ==  32)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(k  ==  31  ||  v  ==  32)  {  if(k  >=  31  ||  v  ==  32)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k    ==    31    ||    v    ==    32)    {    if(k  >=  31  ||  v  ==  32)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
32	[BUG]  [BUGGY]  if(k  ==  31  ||  v  ==  32)  {  if(k!=  31  ||  v  ==  32)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(k  ==  31  ||  v  ==  32)  {  if(k!=  31  ||  v  ==  32)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k    ==    31    ||    v    ==    32)    {    if(k!=  31  ||  v  ==  32)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
33	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  0  :  -(u/2)/*B3*/);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  int  k  =((  u&1)  ==  1)?  0  :  -(u/2)/*B3*/);  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  0  :  -(u/2)/*B3*/);	      int    k    =((    u&1)    ==    1)?    -1    :    -(u/2)/*B3*/);    	non-compiled	[CE]  ';'  expected	12	None	replace
34	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  denominator);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  denominator);  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  denominator);	      int    k    =((    u&1)    ==    1)?    -1    :    -(u/2)/*B3*/);    	non-compiled	[CE]  ';'  expected	12	None	replace
35	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]      if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31   ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }	  	compilable	  [FE]  ArithmeticException  	23	9	add
36	[BUG]  [BUGGY]      if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]      if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31   ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }	  	compilable	  [FE]  ArithmeticException  	23	9	add
37	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]      if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31   ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }	  	compilable	  [FE]  ArithmeticException  	23	9	add
38	[BUG]  [BUGGY]      if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]      if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31   ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31   ");  }	  	compilable	  [FE]  ArithmeticException  	23	9	add
39	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]        ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]      if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31   ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }	  	compilable	  [FE]  ArithmeticException  	23	9	add
40	[BUG]  [BUGGY]      if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  [FE]  ArithmeticException  [FE]        ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]      if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  >>  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31   ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }	  	compilable	  [FE]  ArithmeticException  	23	9	add
41	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  0)?  -1  -(u/2)/*B3*/);  [CE]  :  expected  [FE]              AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  int  k  =((  u&1)  ==  0)?  -1  -(u/2)/*B3*/);  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  0)?  -1  -(u/2)/*B3*/);	      int    k    =((    u&1)    ==    0)?    -(u/2)/*B3*/);    	non-compiled	[CE]  :  expected	29	None	replace
42	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  0)?  -(u/2)/*B3*/,  v);  [CE]  :  expected  [FE]                AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  int  k  =((  u&1)  ==  0)?  -(u/2)/*B3*/,  v);  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  0)?  -(u/2)/*B3*/,  v);	      int    k    =((    u&1)    ==    0)?    -(u/2)/*B3*/);    	non-compiled	[CE]  :  expected	29	None	replace
43	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  0)?  v  -(u/2)/*B3*/);  [CE]  :  expected  [FE]                  AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  int  k  =((  u&1)  ==  0)?  v  -(u/2)/*B3*/);  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  0)?  v  -(u/2)/*B3*/);	      int    k    =((    u&1)    ==    0)?    -(u/2)/*B3*/);    	non-compiled	[CE]  :  expected	29	None	replace
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(k  ==  31  ||  v  ==  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(k  ==  31  ||  v  ==  31)  {	  if(k    ==    31    ||    u    ==    31)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
45	[BUG]  [BUGGY]  if(k  ==  31  ||  v  ==  31)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(k  ==  31  ||  v  ==  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  ==  31  ||  v  ==  31)  {	  if(k    ==    31    ||    u    ==    31)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
46	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(v  ==  31  ||  k  ==  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(v  ==  31  ||  k  ==  31)  {	  if(k    ==    31    ||    u    ==    31)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
47	[BUG]  [BUGGY]  if(v  ==  31  ||  k  ==  31)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(v  ==  31  ||  k  ==  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v  ==  31  ||  k  ==  31)  {	  if(k    ==    31    ||    u    ==    31)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
48	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  ==  31  ||  v  ==  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  ==  31  ||  v  ==  31)  {	  if(u    ==    31    ||    k    ==    31)    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
49	[BUG]  [BUGGY]  if(u  ==  31  ||  v  ==  31)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  ==  31  ||  v  ==  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  ==  31  ||  v  ==  31)  {	  if(u    ==    31    ||    k    ==    31)    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
50	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  v  :  -(u/2)/*B2*/);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  int  k  =((  u&1)  ==  1)?  v  :  -(u/2)/*B2*/);  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  v  :  -(u/2)/*B2*/);	      int    k    =((    u&1)    ==    1)?    v    :    -(u/2)/*B3*/);    	non-compiled	[CE]  ';'  expected	1	None	replace
51	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  v  :  -(u/2)/*B4*/);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  int  k  =((  u&1)  ==  1)?  v  :  -(u/2)/*B4*/);  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  v  :  -(u/2)/*B4*/);	      int    k    =((    u&1)    ==    1)?    v    :    -(u/2)/*B3*/);    	non-compiled	[CE]  ';'  expected	1	None	replace
52	[BUG]  [BUGGY]  while(u  <  31  &&  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31 ");  }  [CE]  illegal  start  of  type  [FE]    ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  while(u  <  31  &&  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31 ");  }  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  31  &&  v  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31 ");  }	      if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
53	[BUG]  [BUGGY]  while(u  <  31  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31 ");  }  [CE]  illegal  start  of  type  [FE]      ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  while(u  <  31  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31 ");  }  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  31  &&  k  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31 ");  }	      if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
54	[BUG]  [BUGGY]  if(k  ==  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  31 ");  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(k  ==  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  31 ");  }  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  ==  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  31 ");  }	      if(t    ==    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    <    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
55	[BUG]  [BUGGY]  If(k  ==  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  31 ");  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  If(k  ==  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  31 ");  }  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	If(k  ==  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  31 ");  }	      if(t    ==    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    <    31   ");    }    	non-compiled	[CE]  	3	None	replace
56	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  v  -(u/2)/*B3*/;  [CE]  :  expected  [FE]                AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  int  k  =((  u&1)  ==  1)?  v  -(u/2)/*B3*/;  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  v  -(u/2)/*B3*/;	      int    k    =((    u&1)    ==    1)?    -(u/2)/*B3*/;    	non-compiled	[CE]  :  expected	14	None	replace
57	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  <  32  ||  k  >  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  <  32  ||  k  >  31)  {	  if(u    <    31    ||    k    >    31)    {    	compilable	  [FE]  ArithmeticException  	16	9	replace
58	[BUG]  [BUGGY]  if(u  <  32  ||  k  >  31)  {  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  <  32  ||  k  >  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  32  ||  k  >  31)  {	  if(u    <    31    ||    k    >    31)    {    	compilable	  [FE]  ArithmeticException  	16	9	replace
59	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(k  <  31  ||  u  >  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(k  <  31  ||  u  >  31)  {	  if(u    <    31    ||    k    >    31)    {    	compilable	  [FE]  ArithmeticException  	16	9	replace
60	[BUG]  [BUGGY]  if(k  <  31  ||  u  >  31)  {  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(k  <  31  ||  u  >  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  <  31  ||  u  >  31)  {	  if(u    <    31    ||    k    >    31)    {    	compilable	  [FE]  ArithmeticException  	16	9	replace
61	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(k  >=  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(k  >=  31)  {	  if(k    <    31)    {    	compilable	  [FE]  AssertionFailedError  	20	1	replace
62	[BUG]  [BUGGY]  if(k  >=  31)  {  [FE]  AssertionFailedError  [FE]    ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(k  >=  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  >=  31)  {	  if(k    <    31)    {    	compilable	  [FE]  AssertionFailedError  	20	1	replace
63	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(v  <  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(v  <  31)  {	  if(k    <    31)    {    	compilable	  [FE]  ArithmeticException  	20	9	replace
64	[BUG]  [BUGGY]  if(v  <  31)  {  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(v  <  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v  <  31)  {	  if(k    <    31)    {    	compilable	  [FE]  ArithmeticException  	20	9	replace
65	[BUG]  [BUGGY]  if(u  <  31  ||  k  ==  31)  {  if(u  <  31  ||  k  ==  31)  {  [CE]  illegal  start  of  expression  [FE]    ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  <  31  ||  k  ==  31)  {  if(u  <  31  ||  k  ==  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    31    ||    k    ==    31)    {    if(u  <  31  ||  k  ==  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
66	[BUG]  [BUGGY]  if(u  <  31  ||  k  ==  31)  {  if(u  <  31  ||  k  >=  31)  {  [CE]  illegal  start  of  expression  [FE]      ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  <  31  ||  k  ==  31)  {  if(u  <  31  ||  k  >=  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    31    ||    k    ==    31)    {    if(u  <  31  ||  k  >=  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
67	[BUG]  [BUGGY]  if(u  <  31  ||  k  ==  31)  {  if(u  <  31  ||  k!=  31)  {  [CE]  illegal  start  of  expression  [FE]        ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  <  31  ||  k  ==  31)  {  if(u  <  31  ||  k!=  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    31    ||    k    ==    31)    {    if(u  <  31  ||  k!=  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
68	[BUG]  [BUGGY]  if(u  <  31  ||  k  ==  31)  {  if(u  <  31  ||  k  >>  31)  {  [CE]  illegal  start  of  expression  [FE]          ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  <  31  ||  k  ==  31)  {  if(u  <  31  ||  k  >>  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    31    ||    k    ==    31)    {    if(u  <  31  ||  k  >>  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
69	[BUG]  [BUGGY]  if(k  ==  31  ||  u  ==  31)  {  if(k  ==  31  ||  u  ==  31)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(k  ==  31  ||  u  ==  31)  {  if(k  ==  31  ||  u  ==  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k    ==    31    ||    u    ==    31)    {    if(k  ==  31  ||  u  ==  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
70	[BUG]  [BUGGY]  if(k  ==  31  ||  u  ==  31)  {  if(k  ==  31  ||  u!=  31)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(k  ==  31  ||  u  ==  31)  {  if(k  ==  31  ||  u!=  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k    ==    31    ||    u    ==    31)    {    if(k  ==  31  ||  u!=  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
71	[BUG]  [BUGGY]  if(k  ==  31  ||  u  ==  31)  {  if(k  ==  31  ||  u  >=  31)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(k  ==  31  ||  u  ==  31)  {  if(k  ==  31  ||  u  >=  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k    ==    31    ||    u    ==    31)    {    if(k  ==  31  ||  u  >=  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
72	[BUG]  [BUGGY]  if(k  ==  31  ||  u  ==  31)  {  if(k  >=  31  ||  u  ==  31)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(k  ==  31  ||  u  ==  31)  {  if(k  >=  31  ||  u  ==  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k    ==    31    ||    u    ==    31)    {    if(k  >=  31  ||  u  ==  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
73	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  ==  31  ||  v  ==  32)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  ==  31  ||  v  ==  32)  {	  if(k    ==    31    ||    v    ==    32)    {    	compilable	  [FE]  AssertionFailedError  	22	1	replace
74	[BUG]  [BUGGY]  if(u  ==  31  ||  v  ==  32)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  ==  31  ||  v  ==  32)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  ==  31  ||  v  ==  32)  {	  if(k    ==    31    ||    v    ==    32)    {    	compilable	  [FE]  AssertionFailedError  	22	1	replace
75	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(v  ==  31  ||  k  ==  32)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(v  ==  31  ||  k  ==  32)  {	  if(k    ==    31    ||    v    ==    32)    {    	compilable	  [FE]  AssertionFailedError  	22	1	replace
76	[BUG]  [BUGGY]  if(v  ==  31  ||  k  ==  32)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(v  ==  31  ||  k  ==  32)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v  ==  31  ||  k  ==  32)  {	  if(k    ==    31    ||    v    ==    32)    {    	compilable	  [FE]  AssertionFailedError  	22	1	replace
77	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  ==  31  ||  k  ==  32)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  ==  31  ||  k  ==  32)  {	  if(k    ==    31    ||    v    ==    32)    {    	compilable	  [FE]  AssertionFailedError  	22	1	replace
78	[BUG]  [BUGGY]  if(u  ==  31  ||  k  ==  32)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  ==  31  ||  k  ==  32)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  ==  31  ||  k  ==  32)  {	  if(k    ==    31    ||    v    ==    32)    {    	compilable	  [FE]  AssertionFailedError  	22	1	replace
79	[BUG]  [BUGGY]  if(u  <  31  ||  k  >  31)  {  if(u  <  31  ||  k  >  31)  {  [CE]  illegal  start  of  expression  [FE]    ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  <  31  ||  k  >  31)  {  if(u  <  31  ||  k  >  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    31    ||    k    >    31)    {    if(u  <  31  ||  k  >  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
80	[BUG]  [BUGGY]  if(u  <  31  ||  k  >  31)  {  if(u  >=  31  ||  k  >  31)  {  [CE]  illegal  start  of  expression  [FE]      ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  <  31  ||  k  >  31)  {  if(u  >=  31  ||  k  >  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    31    ||    k    >    31)    {    if(u  >=  31  ||  k  >  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
81	[BUG]  [BUGGY]  if(u  <  31  ||  k  >  31)  {  If(u  <  31  ||  k  >  31)  {  [CE]  ';'  expected  [FE]        ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  <  31  ||  k  >  31)  {  If(u  <  31  ||  k  >  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    31    ||    k    >    31)    {    If(u  <  31  ||  k  >  31)  {	  	non-compiled	[CE]  ';'  expected	15	None	add
82	[BUG]  [BUGGY]  if(u  <  31  ||  k  >  31)  {  if(u  <  31  ||  k  >  31,)  {  [CE]  ')'  expected  [FE]          ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  <  31  ||  k  >  31)  {  if(u  <  31  ||  k  >  31,)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    31    ||    k    >    31)    {    if(u  <  31  ||  k  >  31,)  {	  	non-compiled	[CE]  ')'  expected	15	None	add
83	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]      if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31   ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }	  	compilable	  [FE]  ArithmeticException  	25	9	add
84	[BUG]  [BUGGY]      if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]      if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31   ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31   ");  }	  	compilable	  [FE]  ArithmeticException  	25	9	add
85	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]      if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31   ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }	  	compilable	  [FE]  ArithmeticException  	25	9	add
86	[BUG]  [BUGGY]      if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]      if(u  <  31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2  ==  31   ");  }  if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	        if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31   ");    }    if(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31   ");  }	  	compilable	  [FE]  ArithmeticException  	25	9	add
87	[BUG]  [BUGGY]  aughtException( "overflow:  gcd  is  2  >>  31 ");  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  aughtException( "overflow:  gcd  is  2  >>  31 ");  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	aughtException( "overflow:  gcd  is  2  >>  31 ");	      if(u    <    =    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
88	[BUG]  [BUGGY]  mutator  <  =  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  mutator  <  =  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	mutator  <  =  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }	      if(u    <    =    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
89	[BUG]  [BUGGY]  mutator  <  =  0)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  >>  31 ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  mutator  <  =  0)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  >>  31 ");  }  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	mutator  <  =  0)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  >>  31 ");  }	      if(u    <    =    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
90	[BUG]  [BUGGY]  mutator  <  =  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31 ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  mutator  <  =  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31 ");  }  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	mutator  <  =  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >=  31 ");  }	      if(u    <    =    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
91	[BUG]  [BUGGY]  mutator  <  =  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  mutator  <  =  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	mutator  <  =  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  ==  31 ");  }	      if(u    <    =    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
92	[BUG]  [BUGGY]  aughtException( "overflow:  gcd  is  2  {  31 ");  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  aughtException( "overflow:  gcd  is  2  {  31 ");  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	aughtException( "overflow:  gcd  is  2  {  31 ");	      if(u    <    =    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
93	[BUG]  [BUGGY]  mutators.add(new  ArithmeticException( "overflow:  gcd  is  2  {  31 "));  [CE]  illegal  start  of  type  [FE]    ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  mutators.add(new  ArithmeticException( "overflow:  gcd  is  2  {  31 "));  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	mutators.add(new  ArithmeticException( "overflow:  gcd  is  2  {  31 "));	      if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
94	[BUG]  [BUGGY]  mutators.add(new  ArithmeticException( "overflow:  gcd  is  2  >>  31 "));  [CE]  illegal  start  of  type  [FE]      ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  mutators.add(new  ArithmeticException( "overflow:  gcd  is  2  >>  31 "));  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	mutators.add(new  ArithmeticException( "overflow:  gcd  is  2  >>  31 "));	      if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
95	[BUG]  [BUGGY]  ettyPrinter.println( "Overflow:  gcd  is  2  ==  31 ");  [CE]  illegal  start  of  type  [FE]        ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  ettyPrinter.println( "Overflow:  gcd  is  2  ==  31 ");  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	ettyPrinter.println( "Overflow:  gcd  is  2  ==  31 ");	      if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
96	[BUG]  [BUGGY]  mutators.add(new  ArithmeticException( "overflow:  gcd  is  2  ==  31 "));  [CE]  illegal  start  of  type  [FE]          ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  mutators.add(new  ArithmeticException( "overflow:  gcd  is  2  ==  31 "));  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	mutators.add(new  ArithmeticException( "overflow:  gcd  is  2  ==  31 "));	      if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
97	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  <  31  ||  v  >  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  <  31  ||  v  >  31)  {	  if(u    <    31    ||    k    >    31)    {    	compilable	  [FE]  ArithmeticException  	16	9	replace
98	[BUG]  [BUGGY]  if(u  <  31  ||  v  >  31)  {  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  <  31  ||  v  >  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  31  ||  v  >  31)  {	  if(u    <    31    ||    k    >    31)    {    	compilable	  [FE]  ArithmeticException  	16	9	replace
99	[BUG]  [BUGGY]  aughtException( "overflow:  gcd  is  2  ==  31 ");  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  aughtException( "overflow:  gcd  is  2  ==  31 ");  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	aughtException( "overflow:  gcd  is  2  ==  31 ");	      if(u    <    =    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
100	[BUG]  [BUGGY]  mutators.add(new  ArithmeticException( "overflow:  gcd  is  2  <  <  31 "));  [CE]  illegal  start  of  type  [FE]    ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  mutators.add(new  ArithmeticException( "overflow:  gcd  is  2  <  <  31 "));  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	mutators.add(new  ArithmeticException( "overflow:  gcd  is  2  <  <  31 "));	      if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
101	[BUG]  [BUGGY]  mutators.add(new  ArithmeticException( "overflow:  gcd  is  2 "));  [CE]  illegal  start  of  type  [FE]      ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  mutators.add(new  ArithmeticException( "overflow:  gcd  is  2 "));  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	mutators.add(new  ArithmeticException( "overflow:  gcd  is  2 "));	      if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
102	[BUG]  [BUGGY]  mutators.add(new  ArithmeticException( "overflow:  gcd  is  2  >=  31 "));  [CE]  illegal  start  of  type  [FE]        ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  mutators.add(new  ArithmeticException( "overflow:  gcd  is  2  >=  31 "));  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	mutators.add(new  ArithmeticException( "overflow:  gcd  is  2  >=  31 "));	      if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >=    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
103	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  <  31  ||  v  >  32)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  <  31  ||  v  >  32)  {	  if(k    ==    31    ||    v    ==    32)    {    	compilable	  [FE]  ArithmeticException  	22	9	replace
104	[BUG]  [BUGGY]  if(u  <  31  ||  v  >  32)  {  [FE]  ArithmeticException  [FE]    AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  <  31  ||  v  >  32)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  31  ||  v  >  32)  {	  if(k    ==    31    ||    v    ==    32)    {    	compilable	  [FE]  ArithmeticException  	22	9	replace
105	[BUG]  [BUGGY]  if(u  {  31  ||  v  ==  32)  {  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  {  31  ||  v  ==  32)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  {  31  ||  v  ==  32)  {	  if(k    ==    31    ||    v    ==    32)    {    	non-compiled	[CE]  ')'  expected	22	None	replace
106	[BUG]  [BUGGY]  if(k  ==  31  ||  u  ==  31)  {  If(k  ==  31  ||  u  ==  31)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(k  ==  31  ||  u  ==  31)  {  If(k  ==  31  ||  u  ==  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k    ==    31    ||    u    ==    31)    {    If(k  ==  31  ||  u  ==  31)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
107	[BUG]  [BUGGY]  if(k  ==  31  ||  u  ==  31)  {  if(k!=  31  ||  u  ==  31)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(k  ==  31  ||  u  ==  31)  {  if(k!=  31  ||  u  ==  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k    ==    31    ||    u    ==    31)    {    if(k!=  31  ||  u  ==  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
108	[BUG]  [BUGGY]  if(v  ==  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  31 ");  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(v  ==  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  31 ");  }  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v  ==  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  31 ");  }	      if(t    ==    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    <    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
109	[BUG]  [BUGGY]  if(u  ==  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  31 ");  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  ==  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  31 ");  }  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  ==  0)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  <  31 ");  }	      if(t    ==    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    <    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
110	[BUG]  [BUGGY]  if(k  <  31)  {  while(k  <  31)  {  [CE]  illegal  start  of  expression  [FE]    ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(k  <  31)  {  while(k  <  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k    <    31)    {    while(k  <  31)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
111	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  -(u/2)/*B3*/;  [CE]  :  expected  [FE]                AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  -(u/2)/*B3*/;  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  -1  -(u/2)/*B3*/;	      int    k    =((    u&1)    ==    1)?    -(u/2)/*B3*/;    	non-compiled	[CE]  :  expected	14	None	replace
112	[BUG]  [BUGGY]  if(u  <  31  ||  k  ==  31)  {  If(u  <  31  ||  k  ==  31)  {  [CE]  ';'  expected  [FE]    ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  <  31  ||  k  ==  31)  {  If(u  <  31  ||  k  ==  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    <    31    ||    k    ==    31)    {    If(u  <  31  ||  k  ==  31)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
113	[BUG]  [BUGGY]  if(k  ==  31  ||  v  ==  32)  {  If(k  ==  31  ||  v  ==  32)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(k  ==  31  ||  v  ==  32)  {  If(k  ==  31  ||  v  ==  32)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k    ==    31    ||    v    ==    32)    {    If(k  ==  31  ||  v  ==  32)  {	  	non-compiled	[CE]  ';'  expected	21	None	add
114	[BUG]  [BUGGY]  if(u  ==  31  ||  k  ==  31)  {  If(u  ==  31  ||  k  ==  31)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  ==  31  ||  k  ==  31)  {  If(u  ==  31  ||  k  ==  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    ==    31    ||    k    ==    31)    {    If(u  ==  31  ||  k  ==  31)  {	  	non-compiled	[CE]  ';'  expected	4	None	add
115	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  v);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  v);  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  v);	      int    k    =((    u&1)    ==    1)?    -1    :    -(u/2)/*B3*/);    	non-compiled	[CE]  ';'  expected	12	None	replace
116	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  1);  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/,  1);	      int    k    =((    u&1)    ==    1)?    -1    :    -(u/2)/*B3*/);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
117	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  0)?  -(u/2)/*B3*/,  denominator);  [CE]  :  expected  [FE]              AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  int  k  =((  u&1)  ==  0)?  -(u/2)/*B3*/,  denominator);  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  0)?  -(u/2)/*B3*/,  denominator);	      int    k    =((    u&1)    ==    0)?    -(u/2)/*B3*/);    	non-compiled	[CE]  :  expected	29	None	replace
118	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/  +  1;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/  +  1;  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  -1  :  -(u/2)/*B3*/  +  1;	      int    k    =((    u&1)    ==    1)?    -1    :    -(u/2)/*B3*/;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
119	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  <  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  <  31)  {	  if(u    ==    31)    {    	compilable	  [FE]  ArithmeticException  	18	9	replace
120	[BUG]  [BUGGY]  if(u  <  31)  {  [FE]  ArithmeticException  [FE]    AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  <  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  31)  {	  if(u    ==    31)    {    	compilable	  [FE]  ArithmeticException  	18	9	replace
121	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  <  31  ||  v  ==  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  <  31  ||  v  ==  31)  {	  if(u    <    31    ||    k    ==    31)    {    	compilable	  [FE]  ArithmeticException  	7	9	replace
122	[BUG]  [BUGGY]  if(u  <  31  ||  v  ==  31)  {  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  <  31  ||  v  ==  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  31  ||  v  ==  31)  {	  if(u    <    31    ||    k    ==    31)    {    	compilable	  [FE]  ArithmeticException  	7	9	replace
123	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(v  ==  31  ||  u  ==  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(v  ==  31  ||  u  ==  31)  {	  if(k    ==    31    ||    u    ==    31)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
124	[BUG]  [BUGGY]  if(v  ==  31  ||  u  ==  31)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(v  ==  31  ||  u  ==  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v  ==  31  ||  u  ==  31)  {	  if(k    ==    31    ||    u    ==    31)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
125	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  >=  31  ||  k  ==  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  >=  31  ||  k  ==  31)  {	  if(k    ==    31    ||    u    ==    31)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
126	[BUG]  [BUGGY]  if(u  >=  31  ||  k  ==  31)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  >=  31  ||  k  ==  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  >=  31  ||  k  ==  31)  {	  if(k    ==    31    ||    u    ==    31)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
127	[BUG]  [BUGGY]  mutators.add(new  ArithmeticException( "overflow:  gcd  is  2  ^  31 "));  [CE]  illegal  start  of  type  [FE]    ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  mutators.add(new  ArithmeticException( "overflow:  gcd  is  2  ^  31 "));  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	mutators.add(new  ArithmeticException( "overflow:  gcd  is  2  ^  31 "));	      if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
128	[BUG]  [BUGGY]  ettyPrinter.println( "Overflow:  gcd  is  2  >>  31 ");  [CE]  illegal  start  of  type  [FE]      ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  ettyPrinter.println( "Overflow:  gcd  is  2  >>  31 ");  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	ettyPrinter.println( "Overflow:  gcd  is  2  >>  31 ");	      if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
129	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  <  31  ||  k  >  32)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(u  <  31  ||  k  >  32)  {	  if(k    <    31)    {    	compilable	  [FE]  ArithmeticException  	20	9	replace
130	[BUG]  [BUGGY]  if(u  <  31  ||  k  >  32)  {  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  <  31  ||  k  >  32)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u  <  31  ||  k  >  32)  {	  if(k    <    31)    {    	compilable	  [FE]  ArithmeticException  	20	9	replace
131	[BUG]  [BUGGY]  int  k  =  ((  u&1)  ==  1)?  v  :  -(u/2)/*B2*/;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  int  k  =  ((  u&1)  ==  1)?  v  :  -(u/2)/*B2*/;  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =  ((  u&1)  ==  1)?  v  :  -(u/2)/*B2*/;	      int    k    =    ((    u&1)    ==    1)?    v    :    -(u/2)/*B3*/;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
132	[BUG]  [BUGGY]  if(u  ==  31)  {  If(u  ==  31)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  ==  31)  {  If(u  ==  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    ==    31)    {    If(u  ==  31)  {	  	non-compiled	[CE]  ';'  expected	17	None	add
133	[BUG]  [BUGGY]  mutators.add( "overflow:  gcd  is  2  >>  31 ");  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  mutators.add( "overflow:  gcd  is  2  >>  31 ");  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	mutators.add( "overflow:  gcd  is  2  >>  31 ");	      if(u    <    =    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
134	[BUG]  [BUGGY]  MutableDenominator  u  =(MutableDenominator)denominator;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  MutableDenominator  u  =(MutableDenominator)denominator;  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	MutableDenominator  u  =(MutableDenominator)denominator;	      if(u    <    =    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
135	[BUG]  [BUGGY]  MutableToInteger  u  =  new  MutableToInteger(v);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  MutableToInteger  u  =  new  MutableToInteger(v);  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	MutableToInteger  u  =  new  MutableToInteger(v);	      if(u    <    =    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
136	[BUG]  [BUGGY]  if(u  ==  31)  {  if(u  {  31)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(u  ==  31)  {  if(u  {  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(u    ==    31)    {    if(u  {  31)  {	  	non-compiled	[CE]  ')'  expected	17	None	add
137	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  1  :  -(u/2)/*B3*/);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  int  k  =((  u&1)  ==  1)?  1  :  -(u/2)/*B3*/);  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  1  :  -(u/2)/*B3*/);	      int    k    =((    u&1)    ==    1)?    -1    :    -(u/2)/*B3*/);    	non-compiled	[CE]  ';'  expected	12	None	replace
138	[BUG]  [BUGGY]  while(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [CE]  illegal  start  of  type  [FE]    ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  while(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  31)  {  throw  new  ArithmeticException( "overflow:  gcd  is  2  >>  31 ");  }	      if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    >>    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
139	[BUG]  [BUGGY]  int  v  =  ((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  int  v  =  ((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/;  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  v  =  ((  u&1)  ==  1)?  v  :  -(u/2)/*B3*/;	      int    k    =    ((    u&1)    ==    1)?    v    :    -(u/2)/*B3*/;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
140	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(k  <  31  ||  u  ==  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(k  <  31  ||  u  ==  31)  {	  if(u    <    31    ||    k    ==    31)    {    	compilable	  [FE]  ArithmeticException  	7	9	replace
141	[BUG]  [BUGGY]  if(k  <  31  ||  u  ==  31)  {  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(k  <  31  ||  u  ==  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  <  31  ||  u  ==  31)  {	  if(u    <    31    ||    k    ==    31)    {    	compilable	  [FE]  ArithmeticException  	7	9	replace
142	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(k  <  31  ||  u  >=  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(k  <  31  ||  u  >=  31)  {	  if(u    <    31    ||    k    ==    31)    {    	compilable	  [FE]  ArithmeticException  	7	9	replace
143	[BUG]  [BUGGY]  if(k  <  31  ||  u  >=  31)  {  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(k  <  31  ||  u  >=  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  <  31  ||  u  >=  31)  {	  if(u    <    31    ||    k    ==    31)    {    	compilable	  [FE]  ArithmeticException  	7	9	replace
144	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(v&2)/*B3*/;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  int  k  =((  u&1)  ==  1)?  -1  :  -(v&2)/*B3*/;  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  -1  :  -(v&2)/*B3*/;	      int    k    =((    u&1)    ==    1)?    -1    :    -(u/2)/*B3*/;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
145	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  1  :  -(u/2)/*B3*/;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  int  k  =((  u&1)  ==  1)?  1  :  -(u/2)/*B3*/;  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  1  :  -(u/2)/*B3*/;	      int    k    =((    u&1)    ==    1)?    -1    :    -(u/2)/*B3*/;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
146	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  1)?  -(v&2)/*B3*/;  [CE]  :  expected  [FE]                AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  int  k  =((  u&1)  ==  1)?  -(v&2)/*B3*/;  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  1)?  -(v&2)/*B3*/;	      int    k    =((    u&1)    ==    1)?    -(u/2)/*B3*/;    	non-compiled	[CE]  :  expected	14	None	replace
147	[BUG]  [BUGGY]  aughtException( "Overflow:  gcd  is  2  ==  31 ");  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  aughtException( "Overflow:  gcd  is  2  ==  31 ");  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	aughtException( "Overflow:  gcd  is  2  ==  31 ");	      if(u    <    =    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
148	[BUG]  [BUGGY]  mutators.add( "overflow:  gcd  is  2  ==  31 ");  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  mutators.add( "overflow:  gcd  is  2  ==  31 ");  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	mutators.add( "overflow:  gcd  is  2  ==  31 ");	      if(u    <    =    0)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
149	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(v  <  31  ||  k  >  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	if(v  <  31  ||  k  >  31)  {	  if(u    <    31    ||    k    >    31)    {    	compilable	  [FE]  ArithmeticException  	16	9	replace
150	[BUG]  [BUGGY]  if(v  <  31  ||  k  >  31)  {  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(v  <  31  ||  k  >  31)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(v  <  31  ||  k  >  31)  {	  if(u    <    31    ||    k    >    31)    {    	compilable	  [FE]  ArithmeticException  	16	9	replace
151	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  0)?  -(v&2)/*B3*/);  [CE]  :  expected  [FE]              AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  int  k  =((  u&1)  ==  0)?  -(v&2)/*B3*/);  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  0)?  -(v&2)/*B3*/);	      int    k    =((    u&1)    ==    0)?    -(u/2)/*B3*/);    	non-compiled	[CE]  :  expected	29	None	replace
152	[BUG]  [BUGGY]  int  k  =((  u&1)  ==  0)?  -1  :  -(u/2)/*B3*/);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  int  k  =((  u&1)  ==  0)?  -1  :  -(u/2)/*B3*/);  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	int  k  =((  u&1)  ==  0)?  -1  :  -(u/2)/*B3*/);	      int    k    =((    u&1)    ==    0)?    -(u/2)/*B3*/);    	non-compiled	[CE]  ';'  expected	29	None	replace
153	[BUG]  [BUGGY]  if(k  <  31  ||  t  ==  0)  {  [CE]  cannot  find  symbol  t  [FE]    ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  if(k  <  31  ||  t  ==  0)  {  [BUGGY]    throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	if(k  <  31  ||  t  ==  0)  {	  if(k    <    31)    {    	non-compiled	[CE]  cannot  find  symbol  t	20	None	replace
154	[BUG]  [BUGGY]  while(u  <  31  &&  v  <  31)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  ==  31 ");  }  [CE]  illegal  start  of  type  [FE]    ArithmeticException    [CONTEXT]        if  (u>0)  {  u=-u;  }  //  make  u  negative  if  (v>0)  {  v=-v;  }  //  make  v  negative  int  k=0;  while  ((u&1)==0  &&  (v&1)==0  &&  k<31)  {  //  while  u  and  v  are  both  even...  u/=2;  v/=2;  k++;  //  cast  out  twos.  }    [BUGGY]  while(u  <  31  &&  v  <  31)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  ==  31 ");  }  [BUGGY]    if  (k==31)  {  throw  new  ArithmeticException(   "overflow:  gcd  is  2^31   ");  }    int  t  =  ((u&1)==1)  ?  v  :  -(u/2)/*B3*/;    do  {    [CLASS]  Fraction  [METHOD]  greatestCommonDivisor  [RETURN_TYPE]  int  int  u  int  v  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  f  String  str  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  a1  a2  denom  denom0  denom1  denom2  denominator  gcd  hashCode  i  k  numer  numer0  numer1  numer2  numerator  pos  power  sign  t  u  v  whole  wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	while(u  <  31  &&  v  <  31)  {  throw  new  ArithmeticException( "Overflow:  gcd  is  2  ==  31 ");  }	      if(u    <    31)    {    throw    new    ArithmeticException(   "overflow:    gcd    is    2    ==    31   ");    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
