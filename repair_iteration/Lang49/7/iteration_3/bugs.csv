bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  DesertionFailedToNegativeFraction(denominator,  numerator);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  DesertionFailedToNegativeFraction(denominator,  numerator);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	DesertionFailedToNegativeFraction(denominator,  numerator);	  DesertionFailedToNegativeFraction(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
2	[BUG]  [BUGGY]  DesominatorFailedToNegativeFraction(denominator,  numerator);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  DesominatorFailedToNegativeFraction(denominator,  numerator);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	DesominatorFailedToNegativeFraction(denominator,  numerator);	  DesertionFailedToNegativeFraction(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
3	[BUG]  [BUGGY]  DesominatorFailedToNegativeFraction(numerator,  denominator);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  DesominatorFailedToNegativeFraction(numerator,  denominator);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	DesominatorFailedToNegativeFraction(numerator,  denominator);	  DesertionFailedToNegativeFraction(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
4	[BUG]  [BUGGY]  DesertionFailedToNegativeFraction(numerator,  denominator,  hashCode);  [CE]  non-static  variable  hashCode  cannot  be  referenced  from  a  static  context  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  DesertionFailedToNegativeFraction(numerator,  denominator,  hashCode);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	DesertionFailedToNegativeFraction(numerator,  denominator,  hashCode);	  DesertionFailedToNegativeFraction(numerator,    denominator);    	non-compiled	[CE]  non-static  variable  hashCode  cannot  be  referenced  from  a  static  context	27	None	replace
5	[BUG]  [BUGGY]  lendemain(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [CE]  [FE]        ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  lendemain(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	lendemain(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	  lendemain(numerator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  	6	None	replace
6	[BUG]  [BUGGY]  lendemain(denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [CE]  [FE]          ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  lendemain(denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	lendemain(denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }	  lendemain(numerator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  	6	None	replace
7	[BUG]  [BUGGY]  lendemain(numerator  <  =  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [CE]  illegal  start  of  expression  [FE]            ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  lendemain(numerator  <  =  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	lendemain(numerator  <  =  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	  lendemain(numerator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
8	[BUG]  [BUGGY]  lendemain(numerator  <  0)  {  throw  new  ArithmeticException( "denominator  must  not  be  numeric. ");  }  [CE]  [FE]              ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  lendemain(numerator  <  0)  {  throw  new  ArithmeticException( "denominator  must  not  be  numeric. ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	lendemain(numerator  <  0)  {  throw  new  ArithmeticException( "denominator  must  not  be  numeric. ");  }	  lendemain(numerator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  	6	None	replace
9	[BUG]  [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.',  denominator);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.',  denominator);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  toProperString.lastIndexOf('.',  denominator);	  int    denominator    =    toProperString.lastIndexOf('.');    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	71	None	replace
10	[BUG]  [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.',  0);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.',  0);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  toProperString.lastIndexOf('.',  0);	  int    denominator    =    toProperString.lastIndexOf('.');    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	71	None	replace
11	[BUG]  [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.',  numerator);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.',  numerator);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  toProperString.lastIndexOf('.',  numerator);	  int    denominator    =    toProperString.lastIndexOf('.');    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	71	None	replace
12	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "overflow:    can't    negate     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   "overflow:  can't  negate     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	                if(denominator        <        0)        {        throw        new        ArithmeticException(       "overflow:        can't        negate       ");        }        if(denominator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate       ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	  	compilable	  [FE]  ArithmeticException  	33	3	add
13	[BUG]  [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "overflow:    can't    negate     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   "overflow:  can't  negate     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "overflow:    can't    negate     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   "overflow:  can't  negate     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	                if(denominator        <        0)        {        throw        new        ArithmeticException(       "overflow:        can't        negate       ");        }        if(denominator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate       ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	  	compilable	  [FE]  ArithmeticException  	33	3	add
14	[BUG]  [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "overflow:    can't    negate     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   "overflow:  can't  negate     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  if(denominator  <  [CE]  ')'  expected  [FE]      ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "overflow:    can't    negate     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   "overflow:  can't  negate     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  if(denominator  <  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	                if(denominator        <        0)        {        throw        new        ArithmeticException(       "overflow:        can't        negate       ");        }        if(denominator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate       ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  if(denominator  <  	  	non-compiled	[CE]  ')'  expected	33	None	add
15	[BUG]  [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "overflow:    can't    negate     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   "overflow:  can't  negate     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException  [CE]  '('  or  '['  expected  [FE]        ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "overflow:    can't    negate     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   "overflow:  can't  negate     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	                if(denominator        <        0)        {        throw        new        ArithmeticException(       "overflow:        can't        negate       ");        }        if(denominator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate       ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException	  	non-compiled	[CE]  '('  or  '['  expected	33	None	add
16	[BUG]  [BUGGY]  neminator  =  -denominator  +  1;  denominator  =  -denominator  +  1;  [CE]  cannot  find  symbol  neminator  [FE]        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  neminator  =  -denominator  +  1;  denominator  =  -denominator  +  1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	neminator  =  -denominator  +  1;  denominator  =  -denominator  +  1;	  denominator    =    -denominator    +    1;    desominator    =    -denominator    +    1;    	non-compiled	[CE]  cannot  find  symbol  neminator	56	None	replace
17	[BUG]  [BUGGY]  neminator  =  -1;  denominator  =  -1;  [CE]  cannot  find  symbol  neminator  [FE]          AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  neminator  =  -1;  denominator  =  -1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	neminator  =  -1;  denominator  =  -1;	  denominator    =    -1;    derominator    =    -1;    	non-compiled	[CE]  cannot  find  symbol  neminator	62	None	replace
18	[BUG]  [BUGGY]  lendemain(numerator  <  =  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [CE]  illegal  start  of  expression  [FE]          ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  lendemain(numerator  <  =  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	lendemain(numerator  <  =  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }	  lendemain(numerator    <    0)    {    throw    new    ArithmeticException(   "Overflow:    can't    negate   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
19	[BUG]  [BUGGY]  lendemain(numerator  ==  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [CE]  [FE]            ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  lendemain(numerator  ==  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	lendemain(numerator  ==  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }	  lendemain(numerator    <    0)    {    throw    new    ArithmeticException(   "Overflow:    can't    negate   ");    }    	non-compiled	[CE]  	7	None	replace
20	[BUG]  [BUGGY]  Numerator  denominator  =  -denominator.denominator;  [CE]  cannot  find  symbol  [FE]          ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Numerator  denominator  =  -denominator.denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Numerator  denominator  =  -denominator.denominator;	  Numerator    denominator    =    -denominator;    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
21	[BUG]  [BUGGY]  Denominator  denominator  =  -denominator;  [CE]  cannot  find  symbol  [FE]            ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Denominator  denominator  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Denominator  denominator  =  -denominator;	  Numerator    denominator    =    -denominator;    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
22	[BUG]  [BUGGY]  Numerator  denominator  =  -1;  [CE]  cannot  find  symbol  [FE]              ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Numerator  denominator  =  -1;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Numerator  denominator  =  -1;	  Numerator    denominator    =    -denominator;    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
23	[BUG]  [BUGGY]  Variant  <  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Variant  <  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Variant  <  0)  {  throw  new  ArithmeticException( " ");  }	  variant    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	25	None	replace
24	[BUG]  [BUGGY]  variant  <  0)  {  throw  new  ArithmeticException( " ",  numerator);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  variant  <  0)  {  throw  new  ArithmeticException( " ",  numerator);  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	variant  <  0)  {  throw  new  ArithmeticException( " ",  numerator);  }	  variant    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	25	None	replace
25	[BUG]  [BUGGY]  variant  <  0)  {  throw  new  ArithmeticException( " ",  denominator);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  variant  <  0)  {  throw  new  ArithmeticException( " ",  denominator);  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	variant  <  0)  {  throw  new  ArithmeticException( " ",  denominator);  }	  variant    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	25	None	replace
26	[BUG]  [BUGGY]  Variant  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Variant  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Variant  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }	  variant    <    0)    {    throw    new    ArithmeticException(   "Overflow:    can't    negate   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
27	[BUG]  [BUGGY]  Variable  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Variable  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Variable  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }	  variant    <    0)    {    throw    new    ArithmeticException(   "Overflow:    can't    negate   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
28	[BUG]  [BUGGY]  Variation  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Variation  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Variation  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }	  variant    <    0)    {    throw    new    ArithmeticException(   "Overflow:    can't    negate   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
29	[BUG]  [BUGGY]  int  denominator  =  getDenominator(numerator,  0);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  getDenominator(numerator,  0);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  getDenominator(numerator,  0);	  int    denominator    =    getDenominator(denominator,    0);    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	52	None	replace
30	[BUG]  [BUGGY]  int  denominator  =  getDenominator(numerator,  0,  denominator);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  getDenominator(numerator,  0,  denominator);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  getDenominator(numerator,  0,  denominator);	  int    denominator    =    getDenominator(denominator,    0);    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	52	None	replace
31	[BUG]  [BUGGY]  int  denominator  =  getDenominator(denominator,  0,  numerator);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  getDenominator(denominator,  0,  numerator);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  getDenominator(denominator,  0,  numerator);	  int    denominator    =    getDenominator(denominator,    0);    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	52	None	replace
32	[BUG]  [BUGGY]  nominator  =  numerator;  [CE]  cannot  find  symbol  nominator  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  nominator  =  numerator;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	nominator  =  numerator;	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  cannot  find  symbol  nominator	47	None	replace
33	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  numerator  =  -1;  denominator  =  -1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	numerator  =  -1;  denominator  =  -1;	  denominator    =    -1;    desominator    =    -1;    	compilable	  [FE]  AssertionFailedError  	61	5	replace
34	[BUG]  [BUGGY]  numerator  =  -1;  denominator  =  -1;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  numerator  =  -1;  denominator  =  -1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	numerator  =  -1;  denominator  =  -1;	  denominator    =    -1;    desominator    =    -1;    	compilable	  [FE]  AssertionFailedError  	61	5	replace
35	[BUG]  [BUGGY]  nominator  =  -denominator;  [CE]  cannot  find  symbol  nominator  [FE]          ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  nominator  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	nominator  =  -denominator;	  hingegenominator    =    -denominator;    	non-compiled	[CE]  cannot  find  symbol  nominator	26	None	replace
36	[BUG]  [BUGGY]  int  denominator  =  _denominator.longValue();  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  _denominator.longValue();  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  _denominator.longValue();	  int    denominator    =    _denominator.intValue();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	59	None	replace
37	[BUG]  [BUGGY]  int  denominator  =  _denominator.doubleValue();  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  _denominator.doubleValue();  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  _denominator.doubleValue();	  int    denominator    =    _denominator.intValue();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	59	None	replace
38	[BUG]  [BUGGY]  int  denominator  =  _denominator.intValue()  +  1;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  _denominator.intValue()  +  1;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  _denominator.intValue()  +  1;	  int    denominator    =    _denominator.intValue();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	59	None	replace
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  numerator  =  -1;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	numerator  =  -1;	  numerator    =    -denominator;    	compilable	  [FE]  AssertionFailedError  	68	4	replace
40	[BUG]  [BUGGY]  numerator  =  -1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  numerator  =  -1;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	numerator  =  -1;	  numerator    =    -denominator;    	compilable	  [FE]  AssertionFailedError  	68	4	replace
41	[BUG]  [BUGGY]  denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }	  hingeger    <    0)    {    throw    new    ArithmeticException(   "Overflow:    can't    negate   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	82	None	replace
42	[BUG]  [BUGGY]  Numerator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Numerator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Numerator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }	  hingeger    <    0)    {    throw    new    ArithmeticException(   "Overflow:    can't    negate   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	82	None	replace
43	[BUG]  [BUGGY]  termico  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  termico  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	termico  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }	  hingeger    <    0)    {    throw    new    ArithmeticException(   "Overflow:    can't    negate   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	82	None	replace
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	if(denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }	  	compilable	  [FE]  AssertionFailedError  	48	1	add
45	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	if(denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }	  	compilable	  [FE]  AssertionFailedError  	48	1	add
46	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator!=  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	if(denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    if(denominator!=  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }	  	compilable	  [FE]  ArithmeticException  	48	3	add
47	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator!=  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  [FE]  ArithmeticException  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator!=  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	if(denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    if(denominator!=  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }	  	compilable	  [FE]  ArithmeticException  	48	3	add
48	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  -denominator  *  1;  denominator  =  -denominator  *  1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	denominator    =    -denominator    *    1;    denominator  =  -denominator  *  1;	  	compilable	  [FE]  AssertionFailedError  	69	1	add
49	[BUG]  [BUGGY]  denominator  =  -denominator  *  1;  denominator  =  -denominator  *  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  -denominator  *  1;  denominator  =  -denominator  *  1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator    =    -denominator    *    1;    denominator  =  -denominator  *  1;	  	compilable	  [FE]  AssertionFailedError  	69	1	add
50	[BUG]  [BUGGY]  denominator  =  -denominator  *  1;  desnominator  =  -denominator  *  1;  [CE]  cannot  find  symbol  desnominator  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  -denominator  *  1;  desnominator  =  -denominator  *  1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator    =    -denominator    *    1;    desnominator  =  -denominator  *  1;	  	non-compiled	[CE]  cannot  find  symbol  desnominator	69	None	add
51	[BUG]  [BUGGY]  denominator  =  -denominator  *  1;  int  denominator  =  -denominator  *  1;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  -denominator  *  1;  int  denominator  =  -denominator  *  1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator    =    -denominator    *    1;    int  denominator  =  -denominator  *  1;	  	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	69	None	add
52	[BUG]  [BUGGY]  denominator  =  -denominator  *  1;  derominator  =  -denominator  *  1;  [CE]  cannot  find  symbol  derominator  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  -denominator  *  1;  derominator  =  -denominator  *  1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator    =    -denominator    *    1;    derominator  =  -denominator  *  1;	  	non-compiled	[CE]  cannot  find  symbol  derominator	69	None	add
53	[BUG]  [BUGGY]  Numerator  denominator  =  numerator.denominator;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Numerator  denominator  =  numerator.denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Numerator  denominator  =  numerator.denominator;	  Numerator    denominator    =    numerator;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
54	[BUG]  [BUGGY]  Numerator  denominator  =  ZERO;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Numerator  denominator  =  ZERO;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Numerator  denominator  =  ZERO;	  Numerator    denominator    =    numerator;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
55	[BUG]  [BUGGY]  denominator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( " ");  }	  hingeger    <    0    ||    denominator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	79	None	replace
56	[BUG]  [BUGGY]  denominator  <  0  ||  numerator  <  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  <  0  ||  numerator  <  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator  <  0  ||  numerator  <  0)  {  throw  new  ArithmeticException( " ");  }	  hingeger    <    0    ||    denominator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	79	None	replace
57	[BUG]  [BUGGY]  int  denominator  =  numerator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]            ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  numerator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  numerator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( " ");  }	  hingeger    <    0    ||    denominator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	79	None	replace
58	[BUG]  [BUGGY]  denominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator  <  0)  {  throw  new  ArithmeticException( " ");  }	  hingeger    <    0    ||    denominator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	79	None	replace
59	[BUG]  [BUGGY]  Variable  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Variable  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Variable  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	  variant    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
60	[BUG]  [BUGGY]  Variant  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Variant  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Variant  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	  variant    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
61	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate    	non-compiled	[CE]  unclosed  string  literal	77	None	replace
62	[BUG]  [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate    	non-compiled	[CE]  unclosed  string  literal	77	None	replace
63	[BUG]  [BUGGY]  if(denominator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "Overflow:  can't  negate  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  if(denominator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "Overflow:  can't  negate  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	if(denominator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "Overflow:  can't  negate	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate    	non-compiled	[CE]  unclosed  string  literal	77	None	replace
64	[BUG]  [BUGGY]  if(denominator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "Overflow:  can't  neg  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  if(denominator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "Overflow:  can't  neg  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	if(denominator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "Overflow:  can't  neg	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate    	non-compiled	[CE]  unclosed  string  literal	77	None	replace
65	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(     "     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	                if(denominator        <        0)        {        throw        new        ArithmeticException(       "       ");        }        if(denominator    <    0)    {    throw    new    ArithmeticException(       "       ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	23	3	add
66	[BUG]  [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(     "     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(     "     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	                if(denominator        <        0)        {        throw        new        ArithmeticException(       "       ");        }        if(denominator    <    0)    {    throw    new    ArithmeticException(       "       ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	23	3	add
67	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(     "     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	                if(denominator        <        0)        {        throw        new        ArithmeticException(       "       ");        }        if(denominator    <    0)    {    throw    new    ArithmeticException(       "       ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	23	3	add
68	[BUG]  [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(     "     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(     "     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	                if(denominator        <        0)        {        throw        new        ArithmeticException(       "       ");        }        if(denominator    <    0)    {    throw    new    ArithmeticException(       "       ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	23	3	add
69	[BUG]  [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(     "     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "  [CE]  unclosed  string  literal  [FE]        ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(     "     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	                if(denominator        <        0)        {        throw        new        ArithmeticException(       "       ");        }        if(denominator    <    0)    {    throw    new    ArithmeticException(       "       ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "	  	non-compiled	[CE]  unclosed  string  literal	23	None	add
70	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf('.',  numerator);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  toProperString.indexOf('.',  numerator);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  toProperString.indexOf('.',  numerator);	  int    denominator    =    toProperString.indexOf('.',    denominator);    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	63	None	replace
71	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf('.',  0,  denominator);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  toProperString.indexOf('.',  0,  denominator);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  toProperString.indexOf('.',  0,  denominator);	  int    denominator    =    toProperString.indexOf('.',    denominator);    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	63	None	replace
72	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf('.',  0);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  toProperString.indexOf('.',  0);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  toProperString.indexOf('.',  0);	  int    denominator    =    toProperString.indexOf('.',    denominator);    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	63	None	replace
73	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   ",     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException(   ",   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( ",   ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	                if(denominator        <        0)        {        throw        new        ArithmeticException(       "       ");        }        if(denominator    <    0)    {    throw    new    ArithmeticException(   ",       ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   ",   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( ",   ");  }	  	compilable	  [FE]  ArithmeticException  	42	3	add
74	[BUG]  [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   ",     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException(   ",   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( ",   ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   ",     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException(   ",   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( ",   ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	                if(denominator        <        0)        {        throw        new        ArithmeticException(       "       ");        }        if(denominator    <    0)    {    throw    new    ArithmeticException(   ",       ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   ",   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( ",   ");  }	  	compilable	  [FE]  ArithmeticException  	42	3	add
75	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   ",     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException(   ",   ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	                if(denominator        <        0)        {        throw        new        ArithmeticException(       "       ");        }        if(denominator    <    0)    {    throw    new    ArithmeticException(   ",       ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException(   ",   ");  }	  	compilable	  [FE]  ArithmeticException  	42	3	add
76	[BUG]  [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   ",     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException(   ",   ");  }  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   ",     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException(   ",   ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	                if(denominator        <        0)        {        throw        new        ArithmeticException(       "       ");        }        if(denominator    <    0)    {    throw    new    ArithmeticException(   ",       ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException(   ",   ");  }	  	compilable	  [FE]  ArithmeticException  	42	3	add
77	[BUG]  [BUGGY]  denominator  =  -1;  Denominator  =  -denominator  +  1;  [CE]  cannot  find  symbol  Denominator  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  -1;  Denominator  =  -denominator  +  1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator  =  -1;  Denominator  =  -denominator  +  1;	  denominator    =    -denominator    +    1;    Denominator    =    -denominator    +    1;    	non-compiled	[CE]  cannot  find  symbol  Denominator	19	None	replace
78	[BUG]  [BUGGY]  denominator  =  -denominator  +  2;  Denominator  =  -denominator  +  2;  [CE]  cannot  find  symbol  Denominator  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  -denominator  +  2;  Denominator  =  -denominator  +  2;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator  =  -denominator  +  2;  Denominator  =  -denominator  +  2;	  denominator    =    -denominator    +    1;    Denominator    =    -denominator    +    1;    	non-compiled	[CE]  cannot  find  symbol  Denominator	19	None	replace
79	[BUG]  [BUGGY]  variant  <  0)  {  throw  new  ArithmeticException( ", ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  variant  <  0)  {  throw  new  ArithmeticException( ", ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	variant  <  0)  {  throw  new  ArithmeticException( ", ");  }	          if(denominator    <    0)    {    throw    new    ArithmeticException(       "       ");    }    if(denominator    <    0)    {    throw    new    ArithmeticException(   ",       ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	43	None	replace
80	[BUG]  [BUGGY]  DesertionFailedError  e  =  getFraction(numerator,  denominator,  hashCode);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  DesertionFailedError  e  =  getFraction(numerator,  denominator,  hashCode);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	DesertionFailedError  e  =  getFraction(numerator,  denominator,  hashCode);	  DesertionFailedError    e    =    getFraction(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
81	[BUG]  [BUGGY]  DesertionFailedError  e  =  getFraction(numerator,  denominator,  numerator);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  DesertionFailedError  e  =  getFraction(numerator,  denominator,  numerator);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	DesertionFailedError  e  =  getFraction(numerator,  denominator,  numerator);	  DesertionFailedError    e    =    getFraction(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
82	[BUG]  [BUGGY]  DesertionFailedError  e  =  getFraction(numerator,  denominator,  denominator);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  DesertionFailedError  e  =  getFraction(numerator,  denominator,  denominator);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	DesertionFailedError  e  =  getFraction(numerator,  denominator,  denominator);	  DesertionFailedError    e    =    getFraction(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
83	[BUG]  [BUGGY]  DesertionFailedError  e  =  getFraction(numerator,  denominator,  false);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  DesertionFailedError  e  =  getFraction(numerator,  denominator,  false);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	DesertionFailedError  e  =  getFraction(numerator,  denominator,  false);	  DesertionFailedError    e    =    getFraction(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
84	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  Integer.MIN_VALUE  -  1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	denominator  =  Integer.MIN_VALUE  -  1;	  denominator    =    Integer.MIN_VALUE;    	compilable	  [FE]  AssertionFailedError  	73	3	replace
85	[BUG]  [BUGGY]  denominator  =  Integer.MIN_VALUE  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  Integer.MIN_VALUE  -  1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator  =  Integer.MIN_VALUE  -  1;	  denominator    =    Integer.MIN_VALUE;    	compilable	  [FE]  AssertionFailedError  	73	3	replace
86	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  Integer.MIN_VALUE  +  denominator;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	denominator  =  Integer.MIN_VALUE  +  denominator;	  denominator    =    Integer.MIN_VALUE;    	compilable	  [FE]  AssertionFailedError  	73	5	replace
87	[BUG]  [BUGGY]  denominator  =  Integer.MIN_VALUE  +  denominator;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  Integer.MIN_VALUE  +  denominator;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator  =  Integer.MIN_VALUE  +  denominator;	  denominator    =    Integer.MIN_VALUE;    	compilable	  [FE]  AssertionFailedError  	73	5	replace
88	[BUG]  [BUGGY]  Desominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Desominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Desominator  <  0)  {  throw  new  ArithmeticException( " ");  }	  DesertionFailedToDenominator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	65	None	replace
89	[BUG]  [BUGGY]  Desominator  <  0)  {  throw  new  ArithmeticException( " ",  numerator);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Desominator  <  0)  {  throw  new  ArithmeticException( " ",  numerator);  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Desominator  <  0)  {  throw  new  ArithmeticException( " ",  numerator);  }	  DesertionFailedToDenominator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	65	None	replace
90	[BUG]  [BUGGY]  Desominator  <  0)  {  throw  new  ArithmeticException( "Denominator  must  not  be  numeric. ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Desominator  <  0)  {  throw  new  ArithmeticException( "Denominator  must  not  be  numeric. ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Desominator  <  0)  {  throw  new  ArithmeticException( "Denominator  must  not  be  numeric. ");  }	  DesertionFailedToDenominator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	65	None	replace
91	[BUG]  [BUGGY]  int  denominator  =  numerator.length()  -  1;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  numerator.length()  -  1;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  numerator.length()  -  1;	  int    denominator    =    toProperString.length()    -    1;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	38	None	replace
92	[BUG]  [BUGGY]  echtsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  echtsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	echtsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    	non-compiled	[CE]  not  a  statement	89	None	replace
93	[BUG]  [BUGGY]  more  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  more  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	more  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr	  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    	non-compiled	[CE]  ';'  expected	89	None	replace
94	[BUG]  [BUGGY]  dsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  dsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	dsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    	non-compiled	[CE]  not  a  statement	89	None	replace
95	[BUG]  [BUGGY]  int  denominator  =  getDenominator().hashCode();  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  getDenominator().hashCode();  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  getDenominator().hashCode();	  int    denominator    =    getDenominator()    -    1;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	84	None	replace
96	[BUG]  [BUGGY]  int  denominator  =  getDenominator(0).denominator;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  getDenominator(0).denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  getDenominator(0).denominator;	  int    denominator    =    getDenominator(0);    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	41	None	replace
97	[BUG]  [BUGGY]  Numerator  denominator  =  getDenominator(denominator);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Numerator  denominator  =  getDenominator(denominator);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Numerator  denominator  =  getDenominator(denominator);	  Numerator    denominator    =    getDenominator();    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
98	[BUG]  [BUGGY]  Numerator  denominator  =  getDenominator().denominator;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Numerator  denominator  =  getDenominator().denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Numerator  denominator  =  getDenominator().denominator;	  Numerator    denominator    =    getDenominator();    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
99	[BUG]  [BUGGY]  Numerator  denominator  =  getDenominator(0);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Numerator  denominator  =  getDenominator(0);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Numerator  denominator  =  getDenominator(0);	  Numerator    denominator    =    getDenominator();    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
100	[BUG]  [BUGGY]  int  denominator  =  toProperString.length()  /  2;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  toProperString.length()  /  2;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  toProperString.length()  /  2;	  int    denominator    =    toProperString.length()    *    2;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	40	None	replace
101	[BUG]  [BUGGY]  variant  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  variant  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	variant  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	  if(denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	49	None	replace
102	[BUG]  [BUGGY]  variant  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  variant  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	variant  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  if(denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	49	None	replace
103	[BUG]  [BUGGY]  variant  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "Overflow:  can't  negate   ");  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  variant  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "Overflow:  can't  negate   ");  }  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	variant  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "Overflow:  can't  negate   ");  }	  if(denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	49	None	replace
104	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }	  	compilable	  [FE]  AssertionFailedError  	46	1	add
105	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }	  	compilable	  [FE]  AssertionFailedError  	46	1	add
106	[BUG]  [BUGGY]  int  denominator  =  toProperString.hashCode()  /  1;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  toProperString.hashCode()  /  1;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  toProperString.hashCode()  /  1;	  int    denominator    =    toProperString.hashCode()    +    1;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	36	None	replace
107	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	denominator  =  denominator;	  hingegenominator    =    numerator;    	compilable	  [FE]  AssertionFailedError  	4	4	replace
108	[BUG]  [BUGGY]  denominator  =  denominator;  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator  =  denominator;	  hingegenominator    =    numerator;    	compilable	  [FE]  AssertionFailedError  	4	4	replace
109	[BUG]  [BUGGY]  if(denominator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  if(denominator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	if(denominator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
110	[BUG]  [BUGGY]  if(denominator  ==  0  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  if(denominator  ==  0  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	if(denominator  ==  0  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
111	[BUG]  [BUGGY]  if(denominator  ==  0  ||  denominator  ==  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  if(denominator  ==  0  ||  denominator  ==  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	if(denominator  ==  0  ||  denominator  ==  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
112	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  Integer.MIN_VALUE;  denominator  =  Integer.MIN_VALUE;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	denominator    =    Integer.MIN_VALUE;    denominator  =  Integer.MIN_VALUE;	  	compilable	  [FE]  AssertionFailedError  	72	3	add
113	[BUG]  [BUGGY]  denominator  =  Integer.MIN_VALUE;  denominator  =  Integer.MIN_VALUE;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  Integer.MIN_VALUE;  denominator  =  Integer.MIN_VALUE;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator    =    Integer.MIN_VALUE;    denominator  =  Integer.MIN_VALUE;	  	compilable	  [FE]  AssertionFailedError  	72	3	add
114	[BUG]  [BUGGY]  denominator  =  Integer.MIN_VALUE;  desnominator  =  Integer.MIN_VALUE;  [CE]  cannot  find  symbol  desnominator  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  Integer.MIN_VALUE;  desnominator  =  Integer.MIN_VALUE;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator    =    Integer.MIN_VALUE;    desnominator  =  Integer.MIN_VALUE;	  	non-compiled	[CE]  cannot  find  symbol  desnominator	72	None	add
115	[BUG]  [BUGGY]  denominator  =  Integer.MIN_VALUE;  dernominator  =  Integer.MIN_VALUE;  [CE]  cannot  find  symbol  dernominator  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  Integer.MIN_VALUE;  dernominator  =  Integer.MIN_VALUE;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator    =    Integer.MIN_VALUE;    dernominator  =  Integer.MIN_VALUE;	  	non-compiled	[CE]  cannot  find  symbol  dernominator	72	None	add
116	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  -denominator  +  2;  denominator  =  -denominator  +  2;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	denominator    =    -denominator    +    2;    denominator  =  -denominator  +  2;	  	compilable	  [FE]  AssertionFailedError  	57	1	add
117	[BUG]  [BUGGY]  denominator  =  -denominator  +  2;  denominator  =  -denominator  +  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  -denominator  +  2;  denominator  =  -denominator  +  2;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator    =    -denominator    +    2;    denominator  =  -denominator  +  2;	  	compilable	  [FE]  AssertionFailedError  	57	1	add
118	[BUG]  [BUGGY]  denominator  =  -denominator  +  2;  desnominator  =  -denominator  +  2;  [CE]  cannot  find  symbol  desnominator  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  -denominator  +  2;  desnominator  =  -denominator  +  2;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator    =    -denominator    +    2;    desnominator  =  -denominator  +  2;	  	non-compiled	[CE]  cannot  find  symbol  desnominator	57	None	add
119	[BUG]  [BUGGY]  denominator  =  -denominator  +  2;  derominator  =  -denominator  +  2;  [CE]  cannot  find  symbol  derominator  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  -denominator  +  2;  derominator  =  -denominator  +  2;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator    =    -denominator    +    2;    derominator  =  -denominator  +  2;	  	non-compiled	[CE]  cannot  find  symbol  derominator	57	None	add
120	[BUG]  [BUGGY]  Denominator  <  Fraction>denominator  =  -denominator;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Denominator  <  Fraction>denominator  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Denominator  <  Fraction>denominator  =  -denominator;	  DesertionFunction    <    Fraction>denominator    =    -denominator;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	85	None	replace
121	[BUG]  [BUGGY]  Desominator  <  Fraction>denominator  =  -denominator;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Desominator  <  Fraction>denominator  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Desominator  <  Fraction>denominator  =  -denominator;	  DesertionFunction    <    Fraction>denominator    =    -denominator;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	85	None	replace
122	[BUG]  [BUGGY]  int  denominator  =  fromProperString.length();  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  fromProperString.length();  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  fromProperString.length();	  int    denominator    =    toProperString.length()    -    2;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	39	None	replace
123	[BUG]  [BUGGY]  denominator  =  toProperString.length();  [CE]  non-static  variable  toProperString  cannot  be  referenced  from  a  static  context  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  toProperString.length();  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator  =  toProperString.length();	  int    denominator    =    toProperString.length()    -    2;    	non-compiled	[CE]  non-static  variable  toProperString  cannot  be  referenced  from  a  static  context	39	None	replace
124	[BUG]  [BUGGY]  denominator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }	  hingeger    <    0    ||    denominator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate       ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	80	None	replace
125	[BUG]  [BUGGY]  denominator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	  hingeger    <    0    ||    denominator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate       ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	80	None	replace
126	[BUG]  [BUGGY]  denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	  hingeger    <    0    ||    denominator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate       ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	80	None	replace
127	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }	  	compilable	  [FE]  AssertionFailedError  	44	1	add
128	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }	  	compilable	  [FE]  AssertionFailedError  	44	1	add
129	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  ==  Integer.MIN_VALUE  ||  denominator!=  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  ==  Integer.MIN_VALUE  ||  denominator!=  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }	  	compilable	  [FE]  ArithmeticException  	44	3	add
130	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  ==  Integer.MIN_VALUE  ||  denominator!=  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  [FE]  ArithmeticException  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  ==  Integer.MIN_VALUE  ||  denominator!=  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  ==  Integer.MIN_VALUE  ||  denominator!=  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }	  	compilable	  [FE]  ArithmeticException  	44	3	add
131	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  -denominator  *  2;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	denominator  =  -denominator  *  2;	  denominator    =    -denominator    *    1;    	compilable	  [FE]  AssertionFailedError  	70	5	replace
132	[BUG]  [BUGGY]  denominator  =  -denominator  *  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  -denominator  *  2;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator  =  -denominator  *  2;	  denominator    =    -denominator    *    1;    	compilable	  [FE]  AssertionFailedError  	70	5	replace
133	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  0;  denominator  =  0;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	denominator    =    0;    denominator  =  0;	  	compilable	  [FE]  AssertionFailedError  	13	3	add
134	[BUG]  [BUGGY]  denominator  =  0;  denominator  =  0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  0;  denominator  =  0;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator    =    0;    denominator  =  0;	  	compilable	  [FE]  AssertionFailedError  	13	3	add
135	[BUG]  [BUGGY]  denominator  =  0;  desnominator  =  0;  [CE]  cannot  find  symbol  desnominator  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  0;  desnominator  =  0;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator    =    0;    desnominator  =  0;	  	non-compiled	[CE]  cannot  find  symbol  desnominator	13	None	add
136	[BUG]  [BUGGY]  denominator  =  0;  dernominator  =  0;  [CE]  cannot  find  symbol  dernominator  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  0;  dernominator  =  0;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator    =    0;    dernominator  =  0;	  	non-compiled	[CE]  cannot  find  symbol  dernominator	13	None	add
137	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator    =    -1;    denominator  =  -1;  denominator  =  -1;  denominator  =  -1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	denominator        =        -1;        denominator    =    -1;    denominator  =  -1;  denominator  =  -1;	  	compilable	  [FE]  AssertionFailedError  	28	4	add
138	[BUG]  [BUGGY]  denominator    =    -1;    denominator  =  -1;  denominator  =  -1;  denominator  =  -1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator    =    -1;    denominator  =  -1;  denominator  =  -1;  denominator  =  -1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator        =        -1;        denominator    =    -1;    denominator  =  -1;  denominator  =  -1;	  	compilable	  [FE]  AssertionFailedError  	28	4	add
139	[BUG]  [BUGGY]  denominator    =    -1;    denominator  =  -1;  desnominator  =  -1;  denominator  =  -1;  [CE]  cannot  find  symbol  desnominator  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator    =    -1;    denominator  =  -1;  desnominator  =  -1;  denominator  =  -1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator        =        -1;        denominator    =    -1;    desnominator  =  -1;  denominator  =  -1;	  	non-compiled	[CE]  cannot  find  symbol  desnominator	28	None	add
140	[BUG]  [BUGGY]  denominator    =    -1;    denominator  =  -1;  nominator  =  -1;  denominator  =  -1;  [CE]  cannot  find  symbol  nominator  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator    =    -1;    denominator  =  -1;  nominator  =  -1;  denominator  =  -1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator        =        -1;        denominator    =    -1;    nominator  =  -1;  denominator  =  -1;	  	non-compiled	[CE]  cannot  find  symbol  nominator	28	None	add
141	[BUG]  [BUGGY]  denominator    =    -1;    denominator  =  -1;  dernominator  =  -1;  denominator  =  -1;  [CE]  cannot  find  symbol  dernominator  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator    =    -1;    denominator  =  -1;  dernominator  =  -1;  denominator  =  -1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator        =        -1;        denominator    =    -1;    dernominator  =  -1;  denominator  =  -1;	  	non-compiled	[CE]  cannot  find  symbol  dernominator	28	None	add
142	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator    =    -denominator    +    1;    denominator  =  -denominator  +  1;  denominator  =  -denominator  +  1;  denominator  =  -denominator  +  1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	denominator        =        -denominator        +        1;        denominator    =    -denominator    +    1;    denominator  =  -denominator  +  1;  denominator  =  -denominator  +  1;	  	compilable	  [FE]  AssertionFailedError  	15	1	add
143	[BUG]  [BUGGY]  denominator    =    -denominator    +    1;    denominator  =  -denominator  +  1;  denominator  =  -denominator  +  1;  denominator  =  -denominator  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator    =    -denominator    +    1;    denominator  =  -denominator  +  1;  denominator  =  -denominator  +  1;  denominator  =  -denominator  +  1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator        =        -denominator        +        1;        denominator    =    -denominator    +    1;    denominator  =  -denominator  +  1;  denominator  =  -denominator  +  1;	  	compilable	  [FE]  AssertionFailedError  	15	1	add
144	[BUG]  [BUGGY]  denominator    =    -denominator    +    1;    denominator  =  -denominator  +  1;  desnominator  =  -denominator  +  1;  denominator  =  -denominator  +  1;  [CE]  cannot  find  symbol  desnominator  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator    =    -denominator    +    1;    denominator  =  -denominator  +  1;  desnominator  =  -denominator  +  1;  denominator  =  -denominator  +  1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator        =        -denominator        +        1;        denominator    =    -denominator    +    1;    desnominator  =  -denominator  +  1;  denominator  =  -denominator  +  1;	  	non-compiled	[CE]  cannot  find  symbol  desnominator	15	None	add
145	[BUG]  [BUGGY]  denominator    =    -denominator    +    1;    denominator  =  -denominator  +  1;  Denominator  =  -denominator  +  1;  denominator  =  -denominator  +  1;  [CE]  cannot  find  symbol  Denominator  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator    =    -denominator    +    1;    denominator  =  -denominator  +  1;  Denominator  =  -denominator  +  1;  denominator  =  -denominator  +  1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator        =        -denominator        +        1;        denominator    =    -denominator    +    1;    Denominator  =  -denominator  +  1;  denominator  =  -denominator  +  1;	  	non-compiled	[CE]  cannot  find  symbol  Denominator	15	None	add
146	[BUG]  [BUGGY]  denominator    =    -denominator    +    1;    denominator  =  -denominator  +  1;  derominator  =  -denominator  +  1;  denominator  =  -denominator  +  1;  [CE]  cannot  find  symbol  derominator  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator    =    -denominator    +    1;    denominator  =  -denominator  +  1;  derominator  =  -denominator  +  1;  denominator  =  -denominator  +  1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator        =        -denominator        +        1;        denominator    =    -denominator    +    1;    derominator  =  -denominator  +  1;  denominator  =  -denominator  +  1;	  	non-compiled	[CE]  cannot  find  symbol  derominator	15	None	add
147	[BUG]  [BUGGY]  desominator  =  -denominator  +  1;  [CE]  cannot  find  symbol  desominator  [FE]          AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  desominator  =  -denominator  +  1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	desominator  =  -denominator  +  1;	  denominator    =    -denominator    +    1;    desnominator    =    -denominator    +    1;    	non-compiled	[CE]  cannot  find  symbol  desominator	17	None	replace
148	[BUG]  [BUGGY]  nominator  =  -denominator  +  1;  [CE]  cannot  find  symbol  nominator  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  nominator  =  -denominator  +  1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	nominator  =  -denominator  +  1;	  denominator    =    -denominator    +    1;    desnominator    =    -denominator    +    1;    	non-compiled	[CE]  cannot  find  symbol  nominator	17	None	replace
149	[BUG]  [BUGGY]  int  denominator  =  numerator.intValue()  /  denominator;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  numerator.intValue()  /  denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  numerator.intValue()  /  denominator;	  int    denominator    =    numerator.intValue()    *    denominator;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	22	None	replace
150	[BUG]  [BUGGY]  int  denominator  =  numerator.intValue()  -  denominator;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  numerator.intValue()  -  denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  numerator.intValue()  -  denominator;	  int    denominator    =    numerator.intValue()    *    denominator;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	22	None	replace
151	[BUG]  [BUGGY]  int  denominator  =  numerator.longValue()  *  denominator;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  numerator.longValue()  *  denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  numerator.longValue()  *  denominator;	  int    denominator    =    numerator.intValue()    *    denominator;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	22	None	replace
152	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  &&  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	if(denominator  ==  Integer.MIN_VALUE  &&  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	45	4	replace
153	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  &&  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  &&  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	if(denominator  ==  Integer.MIN_VALUE  &&  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	45	4	replace
154	[BUG]  [BUGGY]  hingegenominator  =  numerator.intValue();  [CE]  cannot  find  symbol  hingegenominator  [FE]    ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  hingegenominator  =  numerator.intValue();  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	hingegenominator  =  numerator.intValue();	          if(denominator    <    0)    {    throw    new    ArithmeticException(       "overflow:    can't    negate       ");    }    if(denominator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate       ");    }    	non-compiled	[CE]  cannot  find  symbol  hingegenominator	34	None	replace
155	[BUG]  [BUGGY]  hingegenominator  =  numerator  +  denominator;  [CE]  cannot  find  symbol  hingegenominator  [FE]      ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  hingegenominator  =  numerator  +  denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	hingegenominator  =  numerator  +  denominator;	          if(denominator    <    0)    {    throw    new    ArithmeticException(       "overflow:    can't    negate       ");    }    if(denominator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate       ");    }    	non-compiled	[CE]  cannot  find  symbol  hingegenominator	34	None	replace
156	[BUG]  [BUGGY]  int  denominator  =  this.denominator.longValue();  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  this.denominator.longValue();  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  this.denominator.longValue();	  int    denominator    =    this.denominator.intValue();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	60	None	replace
157	[BUG]  [BUGGY]  int  denominator  =  this.denominator.doubleValue();  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  this.denominator.doubleValue();  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  this.denominator.doubleValue();	  int    denominator    =    this.denominator.intValue();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	60	None	replace
158	[BUG]  [BUGGY]  int  denominator  =  numerator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [CE]  [FE]            ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  numerator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  numerator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }	  hingeger    <    0    ||    denominator    <    0)    {    throw    new    ArithmeticException(   "Overflow:    can't    negate       ");    }    	non-compiled	[CE]  	81	None	replace
159	[BUG]  [BUGGY]  int  denominator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [CE]  [FE]              ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }	  hingeger    <    0    ||    denominator    <    0)    {    throw    new    ArithmeticException(   "Overflow:    can't    negate       ");    }    	non-compiled	[CE]  	81	None	replace
160	[BUG]  [BUGGY]  int  denominator  =  numerator.intValue()  *  1;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  numerator.intValue()  *  1;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  numerator.intValue()  *  1;	  int    denominator    =    numerator.intValue()    -    1;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	21	None	replace
161	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  numerator;  denominator  =  numerator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	denominator    =    numerator;    denominator  =  numerator;	  	compilable	  [FE]  AssertionFailedError  	1	5	add
162	[BUG]  [BUGGY]  denominator  =  numerator;  denominator  =  numerator;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  numerator;  denominator  =  numerator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator    =    numerator;    denominator  =  numerator;	  	compilable	  [FE]  AssertionFailedError  	1	5	add
163	[BUG]  [BUGGY]  denominator  =  numerator;  desnominator  =  numerator;  [CE]  cannot  find  symbol  desnominator  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  numerator;  desnominator  =  numerator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator    =    numerator;    desnominator  =  numerator;	  	non-compiled	[CE]  cannot  find  symbol  desnominator	1	None	add
164	[BUG]  [BUGGY]  denominator  =  numerator;  dernominator  =  numerator;  [CE]  cannot  find  symbol  dernominator  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  numerator;  dernominator  =  numerator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator    =    numerator;    dernominator  =  numerator;	  	non-compiled	[CE]  cannot  find  symbol  dernominator	1	None	add
165	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  numerator  =  -denominator;  numerator  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	numerator    =    -denominator;    numerator  =  -denominator;	  	compilable	  [FE]  AssertionFailedError  	67	5	add
166	[BUG]  [BUGGY]  numerator  =  -denominator;  numerator  =  -denominator;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  numerator  =  -denominator;  numerator  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	numerator    =    -denominator;    numerator  =  -denominator;	  	compilable	  [FE]  AssertionFailedError  	67	5	add
167	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  numerator  =  -denominator;  denominator  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	numerator    =    -denominator;    denominator  =  -denominator;	  	compilable	  [FE]  AssertionFailedError  	67	5	add
168	[BUG]  [BUGGY]  numerator  =  -denominator;  denominator  =  -denominator;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  numerator  =  -denominator;  denominator  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	numerator    =    -denominator;    denominator  =  -denominator;	  	compilable	  [FE]  AssertionFailedError  	67	5	add
169	[BUG]  [BUGGY]  numerator  =  -denominator;  nmerator  =  -denominator;  [CE]  cannot  find  symbol  nmerator  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  numerator  =  -denominator;  nmerator  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	numerator    =    -denominator;    nmerator  =  -denominator;	  	non-compiled	[CE]  cannot  find  symbol  nmerator	67	None	add
170	[BUG]  [BUGGY]  Integer  denominator  =  numerator.intValue();  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Integer  denominator  =  numerator.intValue();  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Integer  denominator  =  numerator.intValue();	  if(denominator    ==    Integer.MIN_VALUE)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	76	None	replace
171	[BUG]  [BUGGY]  Numerator  <  Integer>  denominator  =  numerator.intValue();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Numerator  <  Integer>  denominator  =  numerator.intValue();  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Numerator  <  Integer>  denominator  =  numerator.intValue();	  if(denominator    ==    Integer.MIN_VALUE)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	76	None	replace
172	[BUG]  [BUGGY]  Numerator  <  Integer>denominator  =  numerator.denominator;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Numerator  <  Integer>denominator  =  numerator.denominator;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Numerator  <  Integer>denominator  =  numerator.denominator;	  if(denominator    ==    Integer.MIN_VALUE)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	76	None	replace
173	[BUG]  [BUGGY]  Integer  denominator  =  numerator;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Integer  denominator  =  numerator;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Integer  denominator  =  numerator;	  if(denominator    ==    Integer.MIN_VALUE)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	76	None	replace
174	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  numerator  =  0;  denominator  =  0;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	numerator  =  0;  denominator  =  0;	  denominator    =    -1;    denominator    =    -1;    	compilable	  [FE]  AssertionFailedError  	29	4	replace
175	[BUG]  [BUGGY]  numerator  =  0;  denominator  =  0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  numerator  =  0;  denominator  =  0;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	numerator  =  0;  denominator  =  0;	  denominator    =    -1;    denominator    =    -1;    	compilable	  [FE]  AssertionFailedError  	29	4	replace
176	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  0;  denominator  =  -1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	denominator  =  0;  denominator  =  -1;	  denominator    =    -1;    denominator    =    -1;    	compilable	  [FE]  AssertionFailedError  	29	5	replace
177	[BUG]  [BUGGY]  denominator  =  0;  denominator  =  -1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  0;  denominator  =  -1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator  =  0;  denominator  =  -1;	  denominator    =    -1;    denominator    =    -1;    	compilable	  [FE]  AssertionFailedError  	29	5	replace
178	[BUG]  [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  hashCode);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  hashCode);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  getDenominator(numerator,  denominator,  hashCode);	  int    denominator    =    getDenominator(numerator,    denominator);    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	11	None	replace
179	[BUG]  [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  numerator);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  numerator);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  getDenominator(numerator,  denominator,  numerator);	  int    denominator    =    getDenominator(numerator,    denominator);    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	11	None	replace
180	[BUG]  [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  0);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  0);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  getDenominator(numerator,  denominator,  0);	  int    denominator    =    getDenominator(numerator,    denominator);    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	11	None	replace
181	[BUG]  [BUGGY]  int  denominator  =  numerator.hashCode();  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  numerator.hashCode();  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  numerator.hashCode();	  int    denominator    =    toString.hashCode();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	64	None	replace
182	[BUG]  [BUGGY]  int  denominator  =  this.toProperString.hashCode();  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  this.toProperString.hashCode();  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  this.toProperString.hashCode();	  int    denominator    =    toString.hashCode();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	64	None	replace
183	[BUG]  [BUGGY]  int  denominator  =  toProperString.size();  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  toProperString.size();  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  toProperString.size();	  int    denominator    =    toString.hashCode();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	64	None	replace
184	[BUG]  [BUGGY]  DesertionFailedError  f  =  getFraction(numerator,  denominator,  hashCode);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  DesertionFailedError  f  =  getFraction(numerator,  denominator,  hashCode);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	DesertionFailedError  f  =  getFraction(numerator,  denominator,  hashCode);	  DesertionFailedError    f    =    getFraction(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
185	[BUG]  [BUGGY]  DesertionFailedError  f  =  getFraction(numerator,  denominator,  numerator);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  DesertionFailedError  f  =  getFraction(numerator,  denominator,  numerator);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	DesertionFailedError  f  =  getFraction(numerator,  denominator,  numerator);	  DesertionFailedError    f    =    getFraction(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
186	[BUG]  [BUGGY]  DesertionFailedError  f  =  getFraction(numerator,  denominator,  denominator);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  DesertionFailedError  f  =  getFraction(numerator,  denominator,  denominator);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	DesertionFailedError  f  =  getFraction(numerator,  denominator,  denominator);	  DesertionFailedError    f    =    getFraction(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
187	[BUG]  [BUGGY]  DesertionFailedError  f  =  getFraction(numerator,  denominator,  desominator);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  DesertionFailedError  f  =  getFraction(numerator,  denominator,  desominator);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	DesertionFailedError  f  =  getFraction(numerator,  denominator,  desominator);	  DesertionFailedError    f    =    getFraction(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
188	[BUG]  [BUGGY]  DesertionFunction  <  Fraction>denominator  =  ZERO;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  DesertionFunction  <  Fraction>denominator  =  ZERO;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	DesertionFunction  <  Fraction>denominator  =  ZERO;	  DesertionFunction    <    Fraction>denominator    =    numerator;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	86	None	replace
189	[BUG]  [BUGGY]  DesertionFunction  <  Fraction>denominator  =  -1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  DesertionFunction  <  Fraction>denominator  =  -1;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	DesertionFunction  <  Fraction>denominator  =  -1;	  DesertionFunction    <    Fraction>denominator    =    numerator;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	86	None	replace
190	[BUG]  [BUGGY]  DesertionFunction  <  Fraction>denominator  =  FOUR_FIFTHS;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  DesertionFunction  <  Fraction>denominator  =  FOUR_FIFTHS;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	DesertionFunction  <  Fraction>denominator  =  FOUR_FIFTHS;	  DesertionFunction    <    Fraction>denominator    =    numerator;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	86	None	replace
191	[BUG]  [BUGGY]  int  denominator  =  toProperString.hashCode()  /  denominator;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  toProperString.hashCode()  /  denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  toProperString.hashCode()  /  denominator;	  int    denominator    =    toProperString.hashCode()    *    denominator;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	35	None	replace
192	[BUG]  [BUGGY]  int  denominator  =  toProperString.hashCode()  *  ZERO;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  toProperString.hashCode()  *  ZERO;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  toProperString.hashCode()  *  ZERO;	  int    denominator    =    toProperString.hashCode()    *    denominator;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	35	None	replace
193	[BUG]  [BUGGY]  int  denominator  =  toProperString.hashCode()  *  numerator;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  toProperString.hashCode()  *  numerator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  toProperString.hashCode()  *  numerator;	  int    denominator    =    toProperString.hashCode()    *    denominator;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	35	None	replace
194	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  -1;  denominator  =  -denominator  +  1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	denominator  =  -1;  denominator  =  -denominator  +  1;	  denominator    =    -denominator    +    1;    denominator    =    -denominator    +    1;    	compilable	  [FE]  AssertionFailedError  	16	5	replace
195	[BUG]  [BUGGY]  denominator  =  -1;  denominator  =  -denominator  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  -1;  denominator  =  -denominator  +  1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator  =  -1;  denominator  =  -denominator  +  1;	  denominator    =    -denominator    +    1;    denominator    =    -denominator    +    1;    	compilable	  [FE]  AssertionFailedError  	16	5	replace
196	[BUG]  [BUGGY]  nominator  =  -denominator  +  1;  denominator  =  -denominator  +  1;  [CE]  cannot  find  symbol  nominator  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  nominator  =  -denominator  +  1;  denominator  =  -denominator  +  1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	nominator  =  -denominator  +  1;  denominator  =  -denominator  +  1;	  denominator    =    -denominator    +    1;    denominator    =    -denominator    +    1;    	non-compiled	[CE]  cannot  find  symbol  nominator	16	None	replace
197	[BUG]  [BUGGY]  result(1)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [CE]  [FE]          ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  result(1)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	result(1)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	  hingeger    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  	83	None	replace
198	[BUG]  [BUGGY]  int  denominator  =  numerator.intValue()  /  1;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  numerator.intValue()  /  1;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  numerator.intValue()  /  1;	  int    denominator    =    numerator.intValue()    +    1;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	20	None	replace
199	[BUG]  [BUGGY]  termico  <  0?  numerator  :  new  Fraction(numerator,  denominator);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  termico  <  0?  numerator  :  new  Fraction(numerator,  denominator);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	termico  <  0?  numerator  :  new  Fraction(numerator,  denominator);	  termico    <    =    0?    numerator    :    new    Fraction(numerator,    denominator);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	51	None	replace
200	[BUG]  [BUGGY]  termico  <  =  0?  numerator  :  new  Fraction(numerator,  denominator,  hashCode);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  termico  <  =  0?  numerator  :  new  Fraction(numerator,  denominator,  hashCode);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	termico  <  =  0?  numerator  :  new  Fraction(numerator,  denominator,  hashCode);	  termico    <    =    0?    numerator    :    new    Fraction(numerator,    denominator);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	51	None	replace
201	[BUG]  [BUGGY]  termico  <  =  0?  denominator  :  new  Fraction(numerator,  denominator);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  termico  <  =  0?  denominator  :  new  Fraction(numerator,  denominator);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	termico  <  =  0?  denominator  :  new  Fraction(numerator,  denominator);	  termico    <    =    0?    numerator    :    new    Fraction(numerator,    denominator);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	51	None	replace
202	[BUG]  [BUGGY]  thensuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  thensuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	thensuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti    	non-compiled	[CE]  not  a  statement	88	None	replace
203	[BUG]  [BUGGY]  denominator    =    -1;    denominator  =  -1;  desominator  =  -1;  denominator  =  -1;  [CE]  cannot  find  symbol  desominator  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator    =    -1;    denominator  =  -1;  desominator  =  -1;  denominator  =  -1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator        =        -1;        denominator    =    -1;    desominator  =  -1;  denominator  =  -1;	  	non-compiled	[CE]  cannot  find  symbol  desominator	28	None	add
204	[BUG]  [BUGGY]  denominator    =    -1;    denominator  =  -1;  Denominator  =  -1;  denominator  =  -1;  [CE]  cannot  find  symbol  Denominator  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator    =    -1;    denominator  =  -1;  Denominator  =  -1;  denominator  =  -1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator        =        -1;        denominator    =    -1;    Denominator  =  -1;  denominator  =  -1;	  	non-compiled	[CE]  cannot  find  symbol  Denominator	28	None	add
205	[BUG]  [BUGGY]  denominator    =    -1;    denominator  =  -1;  derominator  =  -1;  denominator  =  -1;  [CE]  cannot  find  symbol  derominator  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator    =    -1;    denominator  =  -1;  derominator  =  -1;  denominator  =  -1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator        =        -1;        denominator    =    -1;    derominator  =  -1;  denominator  =  -1;	  	non-compiled	[CE]  cannot  find  symbol  derominator	28	None	add
206	[BUG]  [BUGGY]  termico  <  =  0?  numerator  :  new  Fraction(numerator,  denominator,  denominator);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  termico  <  =  0?  numerator  :  new  Fraction(numerator,  denominator,  denominator);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	termico  <  =  0?  numerator  :  new  Fraction(numerator,  denominator,  denominator);	  termico    <    =    0?    numerator    :    new    Fraction(numerator,    denominator);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	51	None	replace
207	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  numerator  =  -denominator  +  1;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	numerator  =  -denominator  +  1;	  numerator    =    -denominator;    	compilable	  [FE]  AssertionFailedError  	68	3	replace
208	[BUG]  [BUGGY]  numerator  =  -denominator  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  numerator  =  -denominator  +  1;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	numerator  =  -denominator  +  1;	  numerator    =    -denominator;    	compilable	  [FE]  AssertionFailedError  	68	3	replace
209	[BUG]  [BUGGY]  denominator  =  -denominator  *  1;  desominator  =  -denominator  *  1;  [CE]  cannot  find  symbol  desominator  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  -denominator  *  1;  desominator  =  -denominator  *  1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator    =    -denominator    *    1;    desominator  =  -denominator  *  1;	  	non-compiled	[CE]  cannot  find  symbol  desominator	69	None	add
210	[BUG]  [BUGGY]  denominator  =  -denominator  *  1;  Denominator  =  -denominator  *  1;  [CE]  cannot  find  symbol  Denominator  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  -denominator  *  1;  Denominator  =  -denominator  *  1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator    =    -denominator    *    1;    Denominator  =  -denominator  *  1;	  	non-compiled	[CE]  cannot  find  symbol  Denominator	69	None	add
211	[BUG]  [BUGGY]  denominator  =  0;  derominator  =  0;  [CE]  cannot  find  symbol  derominator  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  0;  derominator  =  0;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator    =    0;    derominator  =  0;	  	non-compiled	[CE]  cannot  find  symbol  derominator	13	None	add
212	[BUG]  [BUGGY]  denominator  =  0;  Denominator  =  0;  [CE]  cannot  find  symbol  Denominator  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  0;  Denominator  =  0;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator    =    0;    Denominator  =  0;	  	non-compiled	[CE]  cannot  find  symbol  Denominator	13	None	add
213	[BUG]  [BUGGY]  int  denominator  =  getDenominator(denominator,  -denominator);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  getDenominator(denominator,  -denominator);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  getDenominator(denominator,  -denominator);	  int    denominator    =    getDenominator(denominator,    denominator);    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	74	None	replace
214	[BUG]  [BUGGY]  Numerator  denominator  =  -denominator  +  1;  [CE]  cannot  find  symbol  [FE]          ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Numerator  denominator  =  -denominator  +  1;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Numerator  denominator  =  -denominator  +  1;	  Numerator    denominator    =    -denominator;    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
215	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf('.',  desominator);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  toProperString.indexOf('.',  desominator);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  toProperString.indexOf('.',  desominator);	  int    denominator    =    toProperString.indexOf('.',    denominator);    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	63	None	replace
216	[BUG]  [BUGGY]  Variable  <?>  variant  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Variable  <?>  variant  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Variable  <?>  variant  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	  variant    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
217	[BUG]  [BUGGY]  Variable  <  Integer>  variant  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Variable  <  Integer>  variant  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Variable  <  Integer>  variant  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	  variant    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
218	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  Integer.MIN_VALUE  -  denominator;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	denominator  =  Integer.MIN_VALUE  -  denominator;	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	compilable	  [FE]  AssertionFailedError  	47	5	replace
219	[BUG]  [BUGGY]  denominator  =  Integer.MIN_VALUE  -  denominator;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  Integer.MIN_VALUE  -  denominator;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator  =  Integer.MIN_VALUE  -  denominator;	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	compilable	  [FE]  AssertionFailedError  	47	5	replace
220	[BUG]  [BUGGY]  nominator  =  Integer.MIN_VALUE;  [CE]  cannot  find  symbol  nominator  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  nominator  =  Integer.MIN_VALUE;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	nominator  =  Integer.MIN_VALUE;	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  cannot  find  symbol  nominator	47	None	replace
221	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  Integer.MAX_VALUE;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	denominator  =  Integer.MAX_VALUE;	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	compilable	  [FE]  AssertionFailedError  	47	3	replace
222	[BUG]  [BUGGY]  denominator  =  Integer.MAX_VALUE;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  Integer.MAX_VALUE;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator  =  Integer.MAX_VALUE;	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	compilable	  [FE]  AssertionFailedError  	47	3	replace
223	[BUG]  [BUGGY]  int  denominator  =  toProperString.length()  *  denominator;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  toProperString.length()  *  denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  toProperString.length()  *  denominator;	  int    denominator    =    toProperString.hashCode()    *    denominator;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	35	None	replace
224	[BUG]  [BUGGY]  int  denominator  =  toProperString.hashCode()  *  FOUR_FIFTHS;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  toProperString.hashCode()  *  FOUR_FIFTHS;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  toProperString.hashCode()  *  FOUR_FIFTHS;	  int    denominator    =    toProperString.hashCode()    *    denominator;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	35	None	replace
225	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  -denominator  /  1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	denominator  =  -denominator  /  1;	  denominator    =    -denominator    *    1;    	compilable	  [FE]  AssertionFailedError  	70	1	replace
226	[BUG]  [BUGGY]  denominator  =  -denominator  /  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  -denominator  /  1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator  =  -denominator  /  1;	  denominator    =    -denominator    *    1;    	compilable	  [FE]  AssertionFailedError  	70	1	replace
227	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  -denominator  *  4;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	denominator  =  -denominator  *  4;	  denominator    =    -denominator    *    1;    	compilable	  [FE]  AssertionFailedError  	70	5	replace
228	[BUG]  [BUGGY]  denominator  =  -denominator  *  4;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  -denominator  *  4;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator  =  -denominator  *  4;	  denominator    =    -denominator    *    1;    	compilable	  [FE]  AssertionFailedError  	70	5	replace
229	[BUG]  [BUGGY]  DesertionFailedError  e  =  getFraction(numerator,  denominator,  desominator);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  DesertionFailedError  e  =  getFraction(numerator,  denominator,  desominator);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	DesertionFailedError  e  =  getFraction(numerator,  denominator,  desominator);	  DesertionFailedError    e    =    getFraction(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
230	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  Integer.MIN_VALUE  +  1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	denominator  =  Integer.MIN_VALUE  +  1;	  denominator    =    Integer.MIN_VALUE;    	compilable	  [FE]  AssertionFailedError  	73	4	replace
231	[BUG]  [BUGGY]  denominator  =  Integer.MIN_VALUE  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  Integer.MIN_VALUE  +  1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator  =  Integer.MIN_VALUE  +  1;	  denominator    =    Integer.MIN_VALUE;    	compilable	  [FE]  AssertionFailedError  	73	4	replace
232	[BUG]  [BUGGY]  Integer  denominator  =  toProperString.length();  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Integer  denominator  =  toProperString.length();  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Integer  denominator  =  toProperString.length();	  int    denominator    =    toProperString.length()    -    2;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	39	None	replace
233	[BUG]  [BUGGY]  denominator  =  -denominator  +  2;  desominator  =  -denominator  +  2;  [CE]  cannot  find  symbol  desominator  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  -denominator  +  2;  desominator  =  -denominator  +  2;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator    =    -denominator    +    2;    desominator  =  -denominator  +  2;	  	non-compiled	[CE]  cannot  find  symbol  desominator	57	None	add
234	[BUG]  [BUGGY]  datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatorita  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatorita  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatorita	  if(denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	49	None	replace
235	[BUG]  [BUGGY]  datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritapatternator  =  new  Arithmetic(numerator  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritapatternator  =  new  Arithmetic(numerator  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritapatternator  =  new  Arithmetic(numerator	  if(denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  ')'  expected	49	None	replace
236	[BUG]  [BUGGY]  datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritated  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritated  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritated	  if(denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	49	None	replace
237	[BUG]  [BUGGY]  datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritated();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritated();  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	datoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritadatoritated();	  if(denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
238	[BUG]  [BUGGY]  if(denominator  ==  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  if(denominator  ==  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	if(denominator  ==  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
239	[BUG]  [BUGGY]  if(denominator  <  0  ||  denominator  ==  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  if(denominator  <  0  ||  denominator  ==  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	if(denominator  <  0  ||  denominator  ==  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
240	[BUG]  [BUGGY]  int  denominator  =  toString.length();  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  toString.length();  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  toString.length();	  int    denominator    =    toProperString.length()    -    1;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	38	None	replace
241	[BUG]  [BUGGY]  int  denominator  =  getDenominator(denominator,  -1);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  getDenominator(denominator,  -1);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  getDenominator(denominator,  -1);	  int    denominator    =    getDenominator(denominator,    0);    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	52	None	replace
242	[BUG]  [BUGGY]  DesertionFailedToNegativeFraction(numerator,  denominator,  denominator);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  DesertionFailedToNegativeFraction(numerator,  denominator,  denominator);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	DesertionFailedToNegativeFraction(numerator,  denominator,  denominator);	  DesertionFailedToNegativeFraction(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
243	[BUG]  [BUGGY]  int  denominator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [CE]  [FE]          ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	  hingeger    <    0    ||    denominator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate       ");    }    	non-compiled	[CE]  	80	None	replace
244	[BUG]  [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "overflow:    can't    negate     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   "overflow:  can't  negate     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate  [CE]  unclosed  string  literal  [FE]    ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "overflow:    can't    negate     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   "overflow:  can't  negate     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	                if(denominator        <        0)        {        throw        new        ArithmeticException(       "overflow:        can't        negate       ");        }        if(denominator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate       ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate	  	non-compiled	[CE]  unclosed  string  literal	33	None	add
245	[BUG]  [BUGGY]  moresuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  moresuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	moresuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti    	non-compiled	[CE]  not  a  statement	87	None	replace
246	[BUG]  [BUGGY]  nsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  nsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	nsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti    	non-compiled	[CE]  not  a  statement	87	None	replace
247	[BUG]  [BUGGY]  int  denominator  =  getDenominator(denominator,  ZERO);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  getDenominator(denominator,  ZERO);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  getDenominator(denominator,  ZERO);	  int    denominator    =    getDenominator(denominator);    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	10	None	replace
248	[BUG]  [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.',  1);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.',  1);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  toProperString.lastIndexOf('.',  1);	  int    denominator    =    toProperString.lastIndexOf('.');    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	71	None	replace
249	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException  [CE]  '('  or  '['  expected  [FE]          AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate    	non-compiled	[CE]  '('  or  '['  expected	77	None	replace
250	[BUG]  [BUGGY]  if(denominator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  if(denominator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	if(denominator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate    	non-compiled	[CE]  unclosed  string  literal	77	None	replace
251	[BUG]  [BUGGY]  if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate    	non-compiled	[CE]  unclosed  string  literal	77	None	replace
252	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   ",     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException(   ",   ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	                if(denominator        <        0)        {        throw        new        ArithmeticException(       "       ");        }        if(denominator    <    0)    {    throw    new    ArithmeticException(   ",       ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException(   ",   ");  }	  	compilable	  [FE]  ArithmeticException  	42	3	add
253	[BUG]  [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   ",     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException(   ",   ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   ",     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException(   ",   ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	                if(denominator        <        0)        {        throw        new        ArithmeticException(       "       ");        }        if(denominator    <    0)    {    throw    new    ArithmeticException(   ",       ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException(   ",   ");  }	  	compilable	  [FE]  ArithmeticException  	42	3	add
254	[BUG]  [BUGGY]  denominator  =  numerator;  desominator  =  numerator;  [CE]  cannot  find  symbol  desominator  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  numerator;  desominator  =  numerator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator    =    numerator;    desominator  =  numerator;	  	non-compiled	[CE]  cannot  find  symbol  desominator	1	None	add
255	[BUG]  [BUGGY]  denominator  =  numerator;  Denominator  =  numerator;  [CE]  cannot  find  symbol  Denominator  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  numerator;  Denominator  =  numerator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator    =    numerator;    Denominator  =  numerator;	  	non-compiled	[CE]  cannot  find  symbol  Denominator	1	None	add
256	[BUG]  [BUGGY]  int  denominator  =  toProperString.length()  *  2  +  ZERO;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  toProperString.length()  *  2  +  ZERO;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  toProperString.length()  *  2  +  ZERO;	  int    denominator    =    toProperString.length()    *    2;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	40	None	replace
257	[BUG]  [BUGGY]  int  denominator  =  toProperString.length()  *  4;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  toProperString.length()  *  4;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  toProperString.length()  *  4;	  int    denominator    =    toProperString.length()    *    2;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	40	None	replace
258	[BUG]  [BUGGY]  neminator  =  -denominator;  [CE]  cannot  find  symbol  neminator  [FE]          ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  neminator  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	neminator  =  -denominator;	  hingegenominator    =    -denominator;    	non-compiled	[CE]  cannot  find  symbol  neminator	26	None	replace
259	[BUG]  [BUGGY]  Denominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Denominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Denominator  <  0)  {  throw  new  ArithmeticException( " ");  }	  DesertionFailedToDenominator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	65	None	replace
260	[BUG]  [BUGGY]  Denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }	  DesertionFailedToDenominator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	65	None	replace
261	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  if(denominator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	if(denominator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	compilable	  [FE]  ArithmeticException  	45	3	replace
262	[BUG]  [BUGGY]  if(denominator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [FE]  ArithmeticException  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  if(denominator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	if(denominator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	compilable	  [FE]  ArithmeticException  	45	3	replace
263	[BUG]  [BUGGY]  int  denominator  =  _denominator.intValue()  *  numerator;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  _denominator.intValue()  *  numerator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  _denominator.intValue()  *  numerator;	  int    denominator    =    numerator.intValue()    *    denominator;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	22	None	replace
264	[BUG]  [BUGGY]  int  denominator  =  desominator.intValue()  *  numerator;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  desominator.intValue()  *  numerator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  desominator.intValue()  *  numerator;	  int    denominator    =    numerator.intValue()    *    denominator;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	22	None	replace
265	[BUG]  [BUGGY]  denominator  =  -denominator  +  3;  Denominator  =  -denominator  +  3;  [CE]  cannot  find  symbol  Denominator  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  -denominator  +  3;  Denominator  =  -denominator  +  3;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator  =  -denominator  +  3;  Denominator  =  -denominator  +  3;	  denominator    =    -denominator    +    1;    Denominator    =    -denominator    +    1;    	non-compiled	[CE]  cannot  find  symbol  Denominator	19	None	replace
266	[BUG]  [BUGGY]  int  denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [CE]  [FE]          ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	  hingeger    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  	83	None	replace
267	[BUG]  [BUGGY]  Variable  <  Integer>  variant  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Variable  <  Integer>  variant  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Variable  <  Integer>  variant  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }	  variant    <    0)    {    throw    new    ArithmeticException(   "Overflow:    can't    negate   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
268	[BUG]  [BUGGY]  Variable  <?>  variant  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Variable  <?>  variant  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Variable  <?>  variant  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }	  variant    <    0)    {    throw    new    ArithmeticException(   "Overflow:    can't    negate   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
269	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf('.',  denominator)+  1;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  toProperString.indexOf('.',  denominator)+  1;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  toProperString.indexOf('.',  denominator)+  1;	  int    denominator    =    toProperString.hashCode()    +    1;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	36	None	replace
270	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf('.')+  1;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  toProperString.indexOf('.')+  1;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  toProperString.indexOf('.')+  1;	  int    denominator    =    toProperString.hashCode()    +    1;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	36	None	replace
271	[BUG]  [BUGGY]  Variable  <  Integer>  variant  <  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Variable  <  Integer>  variant  <  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Variable  <  Integer>  variant  <  0)  {  throw  new  ArithmeticException( " ");  }	  variant    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	25	None	replace
272	[BUG]  [BUGGY]  denominator    =    -denominator    +    1;    denominator  =  -denominator  +  1;  desominator  =  -denominator  +  1;  denominator  =  -denominator  +  1;  [CE]  cannot  find  symbol  desominator  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator    =    -denominator    +    1;    denominator  =  -denominator  +  1;  desominator  =  -denominator  +  1;  denominator  =  -denominator  +  1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator        =        -denominator        +        1;        denominator    =    -denominator    +    1;    desominator  =  -denominator  +  1;  denominator  =  -denominator  +  1;	  	non-compiled	[CE]  cannot  find  symbol  desominator	15	None	add
273	[BUG]  [BUGGY]  Desominator  <  Fraction>denominator  =  -1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Desominator  <  Fraction>denominator  =  -1;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Desominator  <  Fraction>denominator  =  -1;	  DesertionFunction    <    Fraction>denominator    =    -denominator;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	85	None	replace
274	[BUG]  [BUGGY]  int  denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [CE]  [FE]        ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }	  hingeger    <    0)    {    throw    new    ArithmeticException(   "Overflow:    can't    negate   ");    }    	non-compiled	[CE]  	82	None	replace
275	[BUG]  [BUGGY]  termico  <  =  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  termico  <  =  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	termico  <  =  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }	  hingeger    <    0)    {    throw    new    ArithmeticException(   "Overflow:    can't    negate   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	82	None	replace
276	[BUG]  [BUGGY]  int  denominator  =  toString.indexOf('.',  denominator);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  toString.indexOf('.',  denominator);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  toString.indexOf('.',  denominator);	  int    denominator    =    toString.hashCode();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	64	None	replace
277	[BUG]  [BUGGY]  denominator  =  Integer.MIN_VALUE;  Denominator  =  Integer.MIN_VALUE;  [CE]  cannot  find  symbol  Denominator  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  Integer.MIN_VALUE;  Denominator  =  Integer.MIN_VALUE;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator    =    Integer.MIN_VALUE;    Denominator  =  Integer.MIN_VALUE;	  	non-compiled	[CE]  cannot  find  symbol  Denominator	72	None	add
278	[BUG]  [BUGGY]  denominator  =  Integer.MIN_VALUE;  derominator  =  Integer.MIN_VALUE;  [CE]  cannot  find  symbol  derominator  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  Integer.MIN_VALUE;  derominator  =  Integer.MIN_VALUE;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator    =    Integer.MIN_VALUE;    derominator  =  Integer.MIN_VALUE;	  	non-compiled	[CE]  cannot  find  symbol  derominator	72	None	add
279	[BUG]  [BUGGY]  int  denominator  =  getDenominator().length  -  1;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  getDenominator().length  -  1;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  getDenominator().length  -  1;	  int    denominator    =    getDenominator()    -    1;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	84	None	replace
280	[BUG]  [BUGGY]  lendemain(numerator  ==  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [CE]  [FE]        ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  lendemain(numerator  ==  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	lendemain(numerator  ==  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	  lendemain(numerator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  	6	None	replace
281	[BUG]  [BUGGY]  DesertionFunction  <  Fraction>denominator  =  0;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  DesertionFunction  <  Fraction>denominator  =  0;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	DesertionFunction  <  Fraction>denominator  =  0;	  DesertionFunction    <    Fraction>denominator    =    numerator;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	86	None	replace
282	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  ==  Integer.MIN_VALUE  ||  desnominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  [CE]  cannot  find  symbol  desnominator  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  ==  Integer.MIN_VALUE  ||  desnominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  ==  Integer.MIN_VALUE  ||  desnominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }	  	non-compiled	[CE]  cannot  find  symbol  desnominator	44	None	add
283	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  numerator  =  -denominator;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	numerator    =    -denominator;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  }	  	compilable	  [FE]  AssertionFailedError  	67	5	add
284	[BUG]  [BUGGY]  numerator  =  -denominator;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  numerator  =  -denominator;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	numerator    =    -denominator;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  }	  	compilable	  [FE]  AssertionFailedError  	67	5	add
285	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  numerator  =  -denominator;  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	numerator    =    -denominator;    if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  ArithmeticException  	67	3	add
286	[BUG]  [BUGGY]  numerator  =  -denominator;  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }  [FE]  ArithmeticException  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  numerator  =  -denominator;  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	numerator    =    -denominator;    if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  ArithmeticException  	67	3	add
287	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  numerator  =  -denominator;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	numerator    =    -denominator;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	67	5	add
288	[BUG]  [BUGGY]  numerator  =  -denominator;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  numerator  =  -denominator;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	numerator    =    -denominator;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	67	5	add
289	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  numerator  =  -denominator;  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  }  else  {  denominator  =  -denominator;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	numerator    =    -denominator;    if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  }  else  {  denominator  =  -denominator;  }	  	compilable	  [FE]  AssertionFailedError  	67	5	add
290	[BUG]  [BUGGY]  numerator  =  -denominator;  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  }  else  {  denominator  =  -denominator;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  numerator  =  -denominator;  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  }  else  {  denominator  =  -denominator;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	numerator    =    -denominator;    if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  }  else  {  denominator  =  -denominator;  }	  	compilable	  [FE]  AssertionFailedError  	67	5	add
291	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetimunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiul  [CE]  not  a  statement  [FE]    ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetimunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiul  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetimunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiul	          if(denominator    <    0)    {    throw    new    ArithmeticException(       "       ");    }    if(denominator    <    0)    {    throw    new    ArithmeticException(   ",       ");    }    	non-compiled	[CE]  not  a  statement	43	None	replace
292	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  compozities  =  new  Fraction(denominator;  [CE]  ')'  expected  [FE]      ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  compozities  =  new  Fraction(denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  compozities  =  new  Fraction(denominator;	          if(denominator    <    0)    {    throw    new    ArithmeticException(       "       ");    }    if(denominator    <    0)    {    throw    new    ArithmeticException(   ",       ");    }    	non-compiled	[CE]  ')'  expected	43	None	replace
293	[BUG]  [BUGGY]  DeserionFailedToDenominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  DeserionFailedToDenominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	DeserionFailedToDenominator  <  0)  {  throw  new  ArithmeticException( " ");  }	  DesertionFailedToDenominator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	65	None	replace
294	[BUG]  [BUGGY]  DeserionFailedToDenominator  <  =  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  DeserionFailedToDenominator  <  =  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	DeserionFailedToDenominator  <  =  0)  {  throw  new  ArithmeticException( " ");  }	  DesertionFailedToDenominator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	65	None	replace
295	[BUG]  [BUGGY]  Numerator  <  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Numerator  <  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Numerator  <  0)  {  throw  new  ArithmeticException( " ");  }	  DesertionFailedToDenominator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	65	None	replace
296	[BUG]  [BUGGY]  Numerator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Numerator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Numerator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( " ");  }	  hingeger    <    0    ||    denominator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate       ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	80	None	replace
297	[BUG]  [BUGGY]  int  denominator  =  getDenominator(1);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  getDenominator(1);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  getDenominator(1);	  int    denominator    =    getDenominator(0);    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	41	None	replace
298	[BUG]  [BUGGY]  int  denominator  =  getDenominator().intValue();  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  getDenominator().intValue();  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  getDenominator().intValue();	  int    denominator    =    getDenominator()    -    1;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	84	None	replace
299	[BUG]  [BUGGY]  denominator  =  numerator;  derominator  =  numerator;  [CE]  cannot  find  symbol  derominator  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  numerator;  derominator  =  numerator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator    =    numerator;    derominator  =  numerator;	  	non-compiled	[CE]  cannot  find  symbol  derominator	1	None	add
300	[BUG]  [BUGGY]  termico  <  =  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  termico  <  =  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	termico  <  =  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	  hingeger    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	83	None	replace
301	[BUG]  [BUGGY]  Numerator  denominator  =  Integer.MIN_VALUE;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Numerator  denominator  =  Integer.MIN_VALUE;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Numerator  denominator  =  Integer.MIN_VALUE;	  Numerator    denominator    =    numerator;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
302	[BUG]  [BUGGY]  Numerator  denominator  =  Integer.MAX_VALUE;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Numerator  denominator  =  Integer.MAX_VALUE;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Numerator  denominator  =  Integer.MAX_VALUE;	  Numerator    denominator    =    numerator;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
303	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  Integer.MIN_VALUE;  denominator  =  -1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	denominator  =  Integer.MIN_VALUE;  denominator  =  -1;	  denominator    =    -1;    dernominator    =    -1;    	compilable	  [FE]  AssertionFailedError  	31	5	replace
304	[BUG]  [BUGGY]  denominator  =  Integer.MIN_VALUE;  denominator  =  -1;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  Integer.MIN_VALUE;  denominator  =  -1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator  =  Integer.MIN_VALUE;  denominator  =  -1;	  denominator    =    -1;    dernominator    =    -1;    	compilable	  [FE]  AssertionFailedError  	31	5	replace
305	[BUG]  [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  denominator);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  denominator);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  getDenominator(numerator,  denominator,  denominator);	  int    denominator    =    getDenominator(numerator,    denominator);    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	11	None	replace
306	[BUG]  [BUGGY]  int  denominator  =  _denominator.intValue()  *  denominator;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  _denominator.intValue()  *  denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  _denominator.intValue()  *  denominator;	  int    denominator    =    numerator.intValue()    *    denominator;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	22	None	replace
307	[BUG]  [BUGGY]  denominatorsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominatorsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominatorsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti    	non-compiled	[CE]  not  a  statement	88	None	replace
308	[BUG]  [BUGGY]  DesertionFailedToNegativeFraction(numerator,  denominator,  numerator);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  DesertionFailedToNegativeFraction(numerator,  denominator,  numerator);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	DesertionFailedToNegativeFraction(numerator,  denominator,  numerator);	  DesertionFailedToNegativeFraction(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
309	[BUG]  [BUGGY]  NegativeFraction(denominator,  numerator);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  NegativeFraction(denominator,  numerator);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	NegativeFraction(denominator,  numerator);	  DesertionFailedToNegativeFraction(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
310	[BUG]  [BUGGY]  DeserionFunction  <  Fraction>denominator  =  -denominator;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  DeserionFunction  <  Fraction>denominator  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	DeserionFunction  <  Fraction>denominator  =  -denominator;	  DesertionFunction    <    Fraction>denominator    =    -denominator;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	85	None	replace
311	[BUG]  [BUGGY]  Integer  denominator  =  getDenominator(numerator,  denominator);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Integer  denominator  =  getDenominator(numerator,  denominator);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Integer  denominator  =  getDenominator(numerator,  denominator);	  int    denominator    =    getDenominator(denominator,    numerator);    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	12	None	replace
312	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  compozities  =  -denominator;  [CE]  cannot  find  symbol  [FE]    ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  compozities  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  compozities  =  -denominator;	          if(denominator    <    0)    {    throw    new    ArithmeticException(       "overflow:    can't    negate       ");    }    if(denominator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate       ");    }    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
313	[BUG]  [BUGGY]  Numerator  denominator  =  getDenominator(numerator);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Numerator  denominator  =  getDenominator(numerator);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Numerator  denominator  =  getDenominator(numerator);	  Numerator    denominator    =    getDenominator();    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
314	[BUG]  [BUGGY]  int  denominator  =  _denominator.denominator;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  _denominator.denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  _denominator.denominator;	  int    denominator    =    _denominator.intValue();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	59	None	replace
315	[BUG]  [BUGGY]  int  denominator  =(this.denominator  ==  Integer.MIN_VALUE?  this.denominator  :  0);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =(this.denominator  ==  Integer.MIN_VALUE?  this.denominator  :  0);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =(this.denominator  ==  Integer.MIN_VALUE?  this.denominator  :  0);	  int    denominator    =    this.denominator.intValue();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	60	None	replace
316	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "overflow:    can't    negate     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   "overflow:  can't  negate     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	                if(denominator        <        0)        {        throw        new        ArithmeticException(       "overflow:        can't        negate       ");        }        if(denominator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate       ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }	  	compilable	  [FE]  ArithmeticException  	33	3	add
317	[BUG]  [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "overflow:    can't    negate     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   "overflow:  can't  negate     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "overflow:    can't    negate     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   "overflow:  can't  negate     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	                if(denominator        <        0)        {        throw        new        ArithmeticException(       "overflow:        can't        negate       ");        }        if(denominator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate       ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }	  	compilable	  [FE]  ArithmeticException  	33	3	add
318	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf('.')*  denominator;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  toProperString.indexOf('.')*  denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  toProperString.indexOf('.')*  denominator;	  int    denominator    =    toProperString.hashCode()    *    denominator;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	35	None	replace
319	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf('.',  numerator)*  denominator;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  toProperString.indexOf('.',  numerator)*  denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  toProperString.indexOf('.',  numerator)*  denominator;	  int    denominator    =    toProperString.hashCode()    *    denominator;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	35	None	replace
320	[BUG]  [BUGGY]  denominator    =    -denominator    +    1;    denominator  =  -denominator  +  1;  int  denominator  =  -denominator  +  1;  denominator  =  -denominator  +  1;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator    =    -denominator    +    1;    denominator  =  -denominator  +  1;  int  denominator  =  -denominator  +  1;  denominator  =  -denominator  +  1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator        =        -denominator        +        1;        denominator    =    -denominator    +    1;    int  denominator  =  -denominator  +  1;  denominator  =  -denominator  +  1;	  	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	15	None	add
321	[BUG]  [BUGGY]  numerator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  numerator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	numerator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }	  hingeger    <    0    ||    denominator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	79	None	replace
322	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  -denominator  /  2;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	denominator  =  -denominator  /  2;	  denominator    =    -denominator    +    2;    	compilable	  [FE]  AssertionFailedError  	58	3	replace
323	[BUG]  [BUGGY]  denominator  =  -denominator  /  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  denominator  =  -denominator  /  2;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator  =  -denominator  /  2;	  denominator    =    -denominator    +    2;    	compilable	  [FE]  AssertionFailedError  	58	3	replace
324	[BUG]  [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.',  -denominator);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.',  -denominator);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  toProperString.lastIndexOf('.',  -denominator);	  int    denominator    =    toProperString.lastIndexOf('.');    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	71	None	replace
325	[BUG]  [BUGGY]  derominator  =  -denominator  +  1;  [CE]  cannot  find  symbol  derominator  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  derominator  =  -denominator  +  1;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	derominator  =  -denominator  +  1;	  denominator    =    -denominator    +    1;    derominator    =    -denominator    +    1;    	non-compiled	[CE]  cannot  find  symbol  derominator	18	None	replace
326	[BUG]  [BUGGY]  int  denominator  =  -denominator;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]        ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  int  denominator  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  -denominator;	  variant    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	25	None	replace
327	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( ",   ");  }  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( ",   ");  }	  	compilable	  [FE]  AssertionFailedError  	44	1	add
328	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( ",   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( ",   ");  }  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( ",   ");  }	  	compilable	  [FE]  AssertionFailedError  	44	1	add
329	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	67	5	add
330	[BUG]  [BUGGY]  numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	67	5	add
331	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }	  	compilable	  [FE]  AssertionFailedError  	67	5	add
332	[BUG]  [BUGGY]  numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }	  	compilable	  [FE]  AssertionFailedError  	67	5	add
333	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }	  	compilable	  [FE]  AssertionFailedError  	67	5	add
334	[BUG]  [BUGGY]  numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }	  	compilable	  [FE]  AssertionFailedError  	67	5	add
335	[BUG]  [BUGGY]  termico  <  0?  numerator  :  new  Fraction(denominator,  denominator);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  termico  <  0?  numerator  :  new  Fraction(denominator,  denominator);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	termico  <  0?  numerator  :  new  Fraction(denominator,  denominator);	  termico    <    =    0?    numerator    :    new    Fraction(numerator,    denominator);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	51	None	replace
336	[BUG]  [BUGGY]  DesertionFailedError  denominator  =  getFraction(numerator,  denominator);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  DesertionFailedError  denominator  =  getFraction(numerator,  denominator);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	DesertionFailedError  denominator  =  getFraction(numerator,  denominator);	  DesertionFailedError    f    =    getFraction(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
337	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( ",   ");  }  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	if(denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( ",   ");  }	  	compilable	  [FE]  AssertionFailedError  	48	1	add
338	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( ",   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( ",   ");  }  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	if(denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( ",   ");  }	  	compilable	  [FE]  AssertionFailedError  	48	1	add
339	[BUG]  [BUGGY]  matically(denominator  ==  Integer.MIN_VALUE,  numerator))  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  matically(denominator  ==  Integer.MIN_VALUE,  numerator))  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	matically(denominator  ==  Integer.MIN_VALUE,  numerator))  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }	  if(denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	49	None	replace
340	[BUG]  [BUGGY]  matically(denominator  ==  Integer.MIN_VALUE,  denominator))  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  matically(denominator  ==  Integer.MIN_VALUE,  denominator))  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	matically(denominator  ==  Integer.MIN_VALUE,  denominator))  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }	  if(denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	49	None	replace
341	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  numerator  =  Integer.MIN_VALUE;  denominator  =  Integer.MIN_VALUE;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	numerator  =  Integer.MIN_VALUE;  denominator  =  Integer.MIN_VALUE;	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	compilable	  [FE]  ArithmeticException  	47	3	replace
342	[BUG]  [BUGGY]  numerator  =  Integer.MIN_VALUE;  denominator  =  Integer.MIN_VALUE;  [FE]  ArithmeticException  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  numerator  =  Integer.MIN_VALUE;  denominator  =  Integer.MIN_VALUE;  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	numerator  =  Integer.MIN_VALUE;  denominator  =  Integer.MIN_VALUE;	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	compilable	  [FE]  ArithmeticException  	47	3	replace
343	[BUG]  [BUGGY]  matically(denominator  ==  Integer.MIN_VALUE,  -denominator))  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  matically(denominator  ==  Integer.MIN_VALUE,  -denominator))  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	matically(denominator  ==  Integer.MIN_VALUE,  -denominator))  {  throw  new  ArithmeticException( " ");  }	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  	47	None	replace
344	[BUG]  [BUGGY]  matically(denominator  ==  Integer.MIN_VALUE,  0))  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  matically(denominator  ==  Integer.MIN_VALUE,  0))  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	matically(denominator  ==  Integer.MIN_VALUE,  0))  {  throw  new  ArithmeticException( " ");  }	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  	47	None	replace
345	[BUG]  [BUGGY]  matically(denominator  ==  Integer.MIN_VALUE,  numerator))  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  matically(denominator  ==  Integer.MIN_VALUE,  numerator))  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	matically(denominator  ==  Integer.MIN_VALUE,  numerator))  {  throw  new  ArithmeticException( " ");  }	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  	47	None	replace
346	[BUG]  [BUGGY]  Numerator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  Numerator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Numerator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }	  hingeger    <    0    ||    denominator    <    0)    {    throw    new    ArithmeticException(   "Overflow:    can't    negate       ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	81	None	replace
347	[BUG]  [BUGGY]  lendemain(denominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]        ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  lendemain(denominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	lendemain(denominator  <  0)  {  throw  new  ArithmeticException( " ");  }	  lendemain(numerator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  	6	None	replace
348	[BUG]  [BUGGY]  lendemain(numerator  <  0)  {  throw  new  ArithmeticException( "Denominator  must  not  be  negative. ");  }  [CE]  [FE]          ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;      [BUGGY]  lendemain(numerator  <  0)  {  throw  new  ArithmeticException( "Denominator  must  not  be  negative. ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	lendemain(numerator  <  0)  {  throw  new  ArithmeticException( "Denominator  must  not  be  negative. ");  }	  lendemain(numerator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  	6	None	replace
