bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  [BUGGY]  denominator  =  -denominator  +  1;  [BUGGY]  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	denominator  =  -denominator  +  1;	denominator  =  -denominator;  	compilable	  [FE]  AssertionFailedError  	13	3	replace
2	[BUG]  [BUGGY]  denominator  =  -denominator  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  [BUGGY]  denominator  =  -denominator  +  1;  [BUGGY]  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator  =  -denominator  +  1;	denominator  =  -denominator;  	compilable	  [FE]  AssertionFailedError  	13	3	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  [BUGGY]  denominator  =  -1;  [BUGGY]  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	denominator  =  -1;	denominator  =  -denominator;  	compilable	  [FE]  AssertionFailedError  	13	5	replace
4	[BUG]  [BUGGY]  denominator  =  -1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  [BUGGY]  denominator  =  -1;  [BUGGY]  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator  =  -1;	denominator  =  -denominator;  	compilable	  [FE]  AssertionFailedError  	13	5	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  [BUGGY]    [BUGGY]  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	  	denominator  =  -denominator;  	compilable	  [FE]  AssertionFailedError  	13	4	replace
6	[BUG]  [BUGGY]    [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  [BUGGY]    [BUGGY]  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	  	denominator  =  -denominator;  	compilable	  [FE]  AssertionFailedError  	13	4	replace
7	[BUG]  [BUGGY]    int  denominator  =  toProperString.hashCode();  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]    AssertionFailedError  [CONTEXT]  public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  [BUGGY]    int  denominator  =  toProperString.hashCode();  [BUGGY]  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	    int  denominator  =  toProperString.hashCode();		non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	14	None	add
8	[BUG]  [BUGGY]    int  denominator  =  numerator.intValue();  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]      AssertionFailedError  [CONTEXT]  public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  [BUGGY]    int  denominator  =  numerator.intValue();  [BUGGY]  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	    int  denominator  =  numerator.intValue();		non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	14	None	add
9	[BUG]  [BUGGY]    int  denominator  =  toProperString.length();  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]        AssertionFailedError  [CONTEXT]  public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  [BUGGY]    int  denominator  =  toProperString.length();  [BUGGY]  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	    int  denominator  =  toProperString.length();		non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	14	None	add
10	[BUG]  [BUGGY]    int  denominator  =  getDenominator();  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]          AssertionFailedError  [CONTEXT]  public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  [BUGGY]    int  denominator  =  getDenominator();  [BUGGY]  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	    int  denominator  =  getDenominator();		non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	14	None	add
11	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    AssertionFailedError  [CONTEXT]  public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  [BUGGY]    if(denominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	    if(denominator  <  0)  {  throw  new  ArithmeticException( " ");  }		compilable	  [FE]  ArithmeticException  	14	3	add
12	[BUG]  [BUGGY]    if(denominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [FE]  ArithmeticException  [FE]    AssertionFailedError  [CONTEXT]  public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  [BUGGY]    if(denominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	    if(denominator  <  0)  {  throw  new  ArithmeticException( " ");  }		compilable	  [FE]  ArithmeticException  	14	3	add
13	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      AssertionFailedError  [CONTEXT]  public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  [BUGGY]    if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	    if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }		compilable	  [FE]  ArithmeticException  	14	3	add
14	[BUG]  [BUGGY]    if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [FE]  ArithmeticException  [FE]      AssertionFailedError  [CONTEXT]  public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  [BUGGY]    if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	    if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }		compilable	  [FE]  ArithmeticException  	14	3	add
15	[BUG]  [BUGGY]    int  denominator  =  getDenominator(numerator);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]        AssertionFailedError  [CONTEXT]  public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  [BUGGY]    int  denominator  =  getDenominator(numerator);  [BUGGY]  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	    int  denominator  =  getDenominator(numerator);		non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	14	None	add
16	[BUG]  [BUGGY]    if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  [BUGGY]    if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	    if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
17	[BUG]  [BUGGY]    if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  [BUGGY]    if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	    if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
18	[BUG]  [BUGGY]    if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  [BUGGY]    if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [BUGGY]  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	    if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
