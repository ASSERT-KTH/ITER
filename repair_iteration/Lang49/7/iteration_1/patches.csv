bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  denominator  =  numerator;  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	denominator  =  numerator;	      if(denominator    <    0)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "Overflow:    can't    negate   ");    }    	compilable	  [FE]  AssertionFailedError  	18	5	replace
2	[BUG]  [BUGGY]  denominator  =  numerator;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  denominator  =  numerator;  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator  =  numerator;	      if(denominator    <    0)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "Overflow:    can't    negate   ");    }    	compilable	  [FE]  AssertionFailedError  	18	5	replace
3	[BUG]  [BUGGY]  Numerator  denominator  =  numerator;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  Numerator  denominator  =  numerator;  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Numerator  denominator  =  numerator;	      if(denominator    <    0)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "Overflow:    can't    negate   ");    }    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
4	[BUG]  [BUGGY]  hingegenominator  =  numerator;  [CE]  cannot  find  symbol  hingegenominator  [FE]                AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  hingegenominator  =  numerator;  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	hingegenominator  =  numerator;	      if(denominator    <    0)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "Overflow:    can't    negate   ");    }    	non-compiled	[CE]  cannot  find  symbol  hingegenominator	18	None	replace
5	[BUG]  [BUGGY]  denominator  =  -denominator  +  1L;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  denominator  =  -denominator  +  1L;  [BUGGY]    }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator  =  -denominator  +  1L;	  denominator    =    -denominator    +    1;    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
6	[BUG]  [BUGGY]  lendemain(numerator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [CE]  [FE]    ArithmeticException    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  lendemain(numerator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	lendemain(numerator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	      if(denominator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  	14	None	replace
7	[BUG]  [BUGGY]  lendemain(numerator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [CE]  [FE]      ArithmeticException    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  lendemain(numerator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	lendemain(numerator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }	      if(denominator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  	14	None	replace
8	[BUG]  [BUGGY]  variant  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        ArithmeticException    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  variant  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	variant  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	      if(denominator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
9	[BUG]  [BUGGY]  variant  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          ArithmeticException    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  variant  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	variant  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }	      if(denominator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
10	[BUG]  [BUGGY]  int  denominator  =  getDenominator(denominator);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]            AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  int  denominator  =  getDenominator(denominator);  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  getDenominator(denominator);	      int    denominator    =    getDenominator(numerator);    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	15	None	replace
11	[BUG]  [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]              AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator);  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  getDenominator(numerator,  denominator);	      int    denominator    =    getDenominator(numerator);    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	15	None	replace
12	[BUG]  [BUGGY]  int  denominator  =  getDenominator(denominator,  numerator);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  int  denominator  =  getDenominator(denominator,  numerator);  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  getDenominator(denominator,  numerator);	      int    denominator    =    getDenominator(numerator);    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	15	None	replace
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  denominator  =  0;  [BUGGY]    }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	denominator  =  0;	  denominator    =    -1;    	compilable	  [FE]  AssertionFailedError  	4	3	replace
14	[BUG]  [BUGGY]  denominator  =  0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  denominator  =  0;  [BUGGY]    }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator  =  0;	  denominator    =    -1;    	compilable	  [FE]  AssertionFailedError  	4	3	replace
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  denominator  =  -denominator  +  1;  denominator  =  -denominator  +  1;  [BUGGY]    }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	denominator    =    -denominator    +    1;    denominator  =  -denominator  +  1;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
16	[BUG]  [BUGGY]  denominator  =  -denominator  +  1;  denominator  =  -denominator  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  denominator  =  -denominator  +  1;  denominator  =  -denominator  +  1;  [BUGGY]    }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator    =    -denominator    +    1;    denominator  =  -denominator  +  1;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
17	[BUG]  [BUGGY]  denominator  =  -denominator  +  1;  desnominator  =  -denominator  +  1;  [CE]  cannot  find  symbol  desnominator  [FE]      AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  denominator  =  -denominator  +  1;  desnominator  =  -denominator  +  1;  [BUGGY]    }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator    =    -denominator    +    1;    desnominator  =  -denominator  +  1;	  	non-compiled	[CE]  cannot  find  symbol  desnominator	1	None	add
18	[BUG]  [BUGGY]  denominator  =  -denominator  +  1;  derominator  =  -denominator  +  1;  [CE]  cannot  find  symbol  derominator  [FE]        AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  denominator  =  -denominator  +  1;  derominator  =  -denominator  +  1;  [BUGGY]    }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator    =    -denominator    +    1;    derominator  =  -denominator  +  1;	  	non-compiled	[CE]  cannot  find  symbol  derominator	1	None	add
19	[BUG]  [BUGGY]  denominator  =  -denominator  +  1;  Denominator  =  -denominator  +  1;  [CE]  cannot  find  symbol  Denominator  [FE]          AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  denominator  =  -denominator  +  1;  Denominator  =  -denominator  +  1;  [BUGGY]    }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator    =    -denominator    +    1;    Denominator  =  -denominator  +  1;	  	non-compiled	[CE]  cannot  find  symbol  Denominator	1	None	add
20	[BUG]  [BUGGY]  int  denominator  =  numerator.intValue()  +  1;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]          AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  int  denominator  =  numerator.intValue()  +  1;  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  numerator.intValue()  +  1;	      int    denominator    =    numerator.intValue();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	8	None	replace
21	[BUG]  [BUGGY]  int  denominator  =  numerator.intValue()  -  1;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]            AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  int  denominator  =  numerator.intValue()  -  1;  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  numerator.intValue()  -  1;	      int    denominator    =    numerator.intValue();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	8	None	replace
22	[BUG]  [BUGGY]  int  denominator  =  numerator.intValue()  *  denominator;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]              AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  int  denominator  =  numerator.intValue()  *  denominator;  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  numerator.intValue()  *  denominator;	      int    denominator    =    numerator.intValue();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	8	None	replace
23	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]      if(denominator  <  0)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException(   "   ");  }  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	        if(denominator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   "   ");  }	  	compilable	  [FE]  ArithmeticException  	11	3	add
24	[BUG]  [BUGGY]      if(denominator  <  0)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException(   "   ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]      if(denominator  <  0)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException(   "   ");  }  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	        if(denominator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   "   ");  }	  	compilable	  [FE]  ArithmeticException  	11	3	add
25	[BUG]  [BUGGY]  variant  <  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    ArithmeticException    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  variant  <  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	variant  <  0)  {  throw  new  ArithmeticException( " ");  }	      if(denominator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
26	[BUG]  [BUGGY]  hingegenominator  =  -denominator;  [CE]  cannot  find  symbol  hingegenominator  [FE]      ArithmeticException    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  hingegenominator  =  -denominator;  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	hingegenominator  =  -denominator;	      if(denominator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  hingegenominator	12	None	replace
27	[BUG]  [BUGGY]  DesertionFailedToNegativeFraction(numerator,  denominator);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  DesertionFailedToNegativeFraction(numerator,  denominator);  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	DesertionFailedToNegativeFraction(numerator,  denominator);	      if(denominator    <    0)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  denominator  =  -1;  denominator  =  -1;  [BUGGY]    }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	denominator    =    -1;    denominator  =  -1;	  	compilable	  [FE]  AssertionFailedError  	3	4	add
29	[BUG]  [BUGGY]  denominator  =  -1;  denominator  =  -1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  denominator  =  -1;  denominator  =  -1;  [BUGGY]    }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator    =    -1;    denominator  =  -1;	  	compilable	  [FE]  AssertionFailedError  	3	4	add
30	[BUG]  [BUGGY]  denominator  =  -1;  desnominator  =  -1;  [CE]  cannot  find  symbol  desnominator  [FE]      AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  denominator  =  -1;  desnominator  =  -1;  [BUGGY]    }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator    =    -1;    desnominator  =  -1;	  	non-compiled	[CE]  cannot  find  symbol  desnominator	3	None	add
31	[BUG]  [BUGGY]  denominator  =  -1;  dernominator  =  -1;  [CE]  cannot  find  symbol  dernominator  [FE]        AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  denominator  =  -1;  dernominator  =  -1;  [BUGGY]    }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator    =    -1;    dernominator  =  -1;	  	non-compiled	[CE]  cannot  find  symbol  dernominator	3	None	add
32	[BUG]  [BUGGY]  denominator  =  -1;  Denominator  =  -1;  [CE]  cannot  find  symbol  Denominator  [FE]          AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  denominator  =  -1;  Denominator  =  -1;  [BUGGY]    }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator    =    -1;    Denominator  =  -1;	  	non-compiled	[CE]  cannot  find  symbol  Denominator	3	None	add
33	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]      if(denominator  <  0)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	        if(denominator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }	  	compilable	  [FE]  ArithmeticException  	13	3	add
34	[BUG]  [BUGGY]      if(denominator  <  0)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]      if(denominator  <  0)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	        if(denominator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }	  	compilable	  [FE]  ArithmeticException  	13	3	add
35	[BUG]  [BUGGY]  int  denominator  =  toProperString.hashCode()  *  denominator;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]        AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  int  denominator  =  toProperString.hashCode()  *  denominator;  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  toProperString.hashCode()  *  denominator;	      int    denominator    =    toProperString.hashCode();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	7	None	replace
36	[BUG]  [BUGGY]  int  denominator  =  toProperString.hashCode()  +  1;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]          AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  int  denominator  =  toProperString.hashCode()  +  1;  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  toProperString.hashCode()  +  1;	      int    denominator    =    toProperString.hashCode();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	7	None	replace
37	[BUG]  [BUGGY]  int  denominator  =  toProperString.length()  +  1;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]            AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  int  denominator  =  toProperString.length()  +  1;  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  toProperString.length()  +  1;	      int    denominator    =    toProperString.length();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	9	None	replace
38	[BUG]  [BUGGY]  int  denominator  =  toProperString.length()  -  1;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]              AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  int  denominator  =  toProperString.length()  -  1;  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  toProperString.length()  -  1;	      int    denominator    =    toProperString.length();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	9	None	replace
39	[BUG]  [BUGGY]  int  denominator  =  toProperString.length()  -  2;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  int  denominator  =  toProperString.length()  -  2;  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  toProperString.length()  -  2;	      int    denominator    =    toProperString.length();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	9	None	replace
40	[BUG]  [BUGGY]  int  denominator  =  toProperString.length()  *  2;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                  AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  int  denominator  =  toProperString.length()  *  2;  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  toProperString.length()  *  2;	      int    denominator    =    toProperString.length();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	9	None	replace
41	[BUG]  [BUGGY]  int  denominator  =  getDenominator(0);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]              AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  int  denominator  =  getDenominator(0);  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  getDenominator(0);	      int    denominator    =    getDenominator();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	10	None	replace
42	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]      if(denominator  <  0)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( ",   ");  }  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	        if(denominator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException( ",   ");  }	  	compilable	  [FE]  ArithmeticException  	11	3	add
43	[BUG]  [BUGGY]      if(denominator  <  0)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( ",   ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]      if(denominator  <  0)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( ",   ");  }  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	        if(denominator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException( ",   ");  }	  	compilable	  [FE]  ArithmeticException  	11	3	add
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	      	compilable	  [FE]  AssertionFailedError  	6	4	replace
45	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	      	compilable	  [FE]  AssertionFailedError  	6	4	replace
46	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]    }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	      	compilable	  [FE]  AssertionFailedError  	6	4	replace
47	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]    }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	      	compilable	  [FE]  AssertionFailedError  	6	4	replace
48	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  if(denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	if(denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	      	compilable	  [FE]  AssertionFailedError  	6	4	replace
49	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  if(denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	if(denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	      	compilable	  [FE]  AssertionFailedError  	6	4	replace
50	[BUG]  [BUGGY]  denominator  =  -1L;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  denominator  =  -1L;  [BUGGY]    }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator  =  -1L;	  denominator    =    -1;    	non-compiled	[CE]  possible  loss  of  precision	4	None	replace
51	[BUG]  [BUGGY]  termico  <  =  0?  numerator  :  new  Fraction(numerator,  denominator);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    ArithmeticException    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  termico  <  =  0?  numerator  :  new  Fraction(numerator,  denominator);  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	termico  <  =  0?  numerator  :  new  Fraction(numerator,  denominator);	      if(denominator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
52	[BUG]  [BUGGY]  int  denominator  =  getDenominator(denominator,  0);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]            AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  int  denominator  =  getDenominator(denominator,  0);  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  getDenominator(denominator,  0);	      int    denominator    =    getDenominator(numerator);    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	15	None	replace
53	[BUG]  [BUGGY]  Numerator  denominator  =  getDenominator();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  Numerator  denominator  =  getDenominator();  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Numerator  denominator  =  getDenominator();	      if(denominator    <    0)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
54	[BUG]  [BUGGY]  DesertionFailedError  f  =  getFraction(numerator,  denominator);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  DesertionFailedError  f  =  getFraction(numerator,  denominator);  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	DesertionFailedError  f  =  getFraction(numerator,  denominator);	      if(denominator    <    0)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
55	[BUG]  [BUGGY]  DesertionFailedError  e  =  getFraction(numerator,  denominator);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  DesertionFailedError  e  =  getFraction(numerator,  denominator);  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	DesertionFailedError  e  =  getFraction(numerator,  denominator);	      if(denominator    <    0)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
56	[BUG]  [BUGGY]  denominator  =  -denominator  +  1;  desominator  =  -denominator  +  1;  [CE]  cannot  find  symbol  desominator  [FE]    AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  denominator  =  -denominator  +  1;  desominator  =  -denominator  +  1;  [BUGGY]    }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator    =    -denominator    +    1;    desominator  =  -denominator  +  1;	  	non-compiled	[CE]  cannot  find  symbol  desominator	1	None	add
57	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  denominator  =  -denominator  +  2;  [BUGGY]    }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	denominator  =  -denominator  +  2;	  denominator    =    -denominator    +    1;    	compilable	  [FE]  AssertionFailedError  	2	4	replace
58	[BUG]  [BUGGY]  denominator  =  -denominator  +  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  denominator  =  -denominator  +  2;  [BUGGY]    }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator  =  -denominator  +  2;	  denominator    =    -denominator    +    1;    	compilable	  [FE]  AssertionFailedError  	2	4	replace
59	[BUG]  [BUGGY]  int  denominator  =  _denominator.intValue();  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]          AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  int  denominator  =  _denominator.intValue();  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  _denominator.intValue();	      int    denominator    =    numerator.intValue();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	8	None	replace
60	[BUG]  [BUGGY]  int  denominator  =  this.denominator.intValue();  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]            AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  int  denominator  =  this.denominator.intValue();  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  this.denominator.intValue();	      int    denominator    =    numerator.intValue();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	8	None	replace
61	[BUG]  [BUGGY]  denominator  =  -1;  desominator  =  -1;  [CE]  cannot  find  symbol  desominator  [FE]    AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  denominator  =  -1;  desominator  =  -1;  [BUGGY]    }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator    =    -1;    desominator  =  -1;	  	non-compiled	[CE]  cannot  find  symbol  desominator	3	None	add
62	[BUG]  [BUGGY]  denominator  =  -1;  derominator  =  -1;  [CE]  cannot  find  symbol  derominator  [FE]      AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  denominator  =  -1;  derominator  =  -1;  [BUGGY]    }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator    =    -1;    derominator  =  -1;	  	non-compiled	[CE]  cannot  find  symbol  derominator	3	None	add
63	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf('.',  denominator);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]        AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  int  denominator  =  toProperString.indexOf('.',  denominator);  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  toProperString.indexOf('.',  denominator);	      int    denominator    =    toProperString.hashCode();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	7	None	replace
64	[BUG]  [BUGGY]  int  denominator  =  toString.hashCode();  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]          AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  int  denominator  =  toString.hashCode();  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  toString.hashCode();	      int    denominator    =    toProperString.hashCode();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	7	None	replace
65	[BUG]  [BUGGY]  DesertionFailedToDenominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    ArithmeticException    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  DesertionFailedToDenominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	DesertionFailedToDenominator  <  0)  {  throw  new  ArithmeticException( " ");  }	      if(denominator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
66	[BUG]  [BUGGY]  Numerator  denominator  =  -denominator;  [CE]  cannot  find  symbol  [FE]      ArithmeticException    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  Numerator  denominator  =  -denominator;  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	Numerator  denominator  =  -denominator;	      if(denominator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
67	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  numerator  =  -denominator;  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	numerator  =  -denominator;	      if(denominator    <    0)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	compilable	  [FE]  AssertionFailedError  	17	5	replace
68	[BUG]  [BUGGY]  numerator  =  -denominator;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  numerator  =  -denominator;  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	numerator  =  -denominator;	      if(denominator    <    0)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	compilable	  [FE]  AssertionFailedError  	17	5	replace
69	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  denominator  =  -denominator  *  1;  [BUGGY]    }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	denominator  =  -denominator  *  1;	  denominator    =    -denominator    +    1;    	compilable	  [FE]  AssertionFailedError  	2	1	replace
70	[BUG]  [BUGGY]  denominator  =  -denominator  *  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  denominator  =  -denominator  *  1;  [BUGGY]    }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator  =  -denominator  *  1;	  denominator    =    -denominator    +    1;    	compilable	  [FE]  AssertionFailedError  	2	1	replace
71	[BUG]  [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.');  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]        AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.');  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  toProperString.lastIndexOf('.');	      int    denominator    =    toProperString.hashCode();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	7	None	replace
72	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  denominator  =  Integer.MIN_VALUE;  [BUGGY]    }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	denominator  =  Integer.MIN_VALUE;	  denominator    =    -1;    	compilable	  [FE]  AssertionFailedError  	4	3	replace
73	[BUG]  [BUGGY]  denominator  =  Integer.MIN_VALUE;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  denominator  =  Integer.MIN_VALUE;  [BUGGY]    }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator  =  Integer.MIN_VALUE;	  denominator    =    -1;    	compilable	  [FE]  AssertionFailedError  	4	3	replace
74	[BUG]  [BUGGY]  int  denominator  =  getDenominator(denominator,  denominator);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]            AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  int  denominator  =  getDenominator(denominator,  denominator);  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  getDenominator(denominator,  denominator);	      int    denominator    =    getDenominator(numerator);    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	15	None	replace
75	[BUG]  [BUGGY]  denominator  =  -1;  derenominator  =  -1;  [CE]  cannot  find  symbol  derenominator  [FE]    AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  denominator  =  -1;  derenominator  =  -1;  [BUGGY]    }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	denominator    =    -1;    derenominator  =  -1;	  	non-compiled	[CE]  cannot  find  symbol  derenominator	3	None	add
76	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  if(denominator  ==  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	if(denominator  ==  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
77	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate  [BUGGY]    }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate	      	non-compiled	[CE]  unclosed  string  literal	6	None	replace
78	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
79	[BUG]  [BUGGY]  hingeger  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    ArithmeticException    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  hingeger  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	hingeger  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( " ");  }	      if(denominator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
80	[BUG]  [BUGGY]  hingeger  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]      ArithmeticException    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  hingeger  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	hingeger  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }	      if(denominator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
81	[BUG]  [BUGGY]  hingeger  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate   ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        ArithmeticException    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  hingeger  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate   ");  }  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	hingeger  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate   ");  }	      if(denominator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
82	[BUG]  [BUGGY]  hingeger  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    ArithmeticException    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  hingeger  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	hingeger  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }	      if(denominator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
83	[BUG]  [BUGGY]  hingeger  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]      ArithmeticException    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  hingeger  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	hingeger  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	      if(denominator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
84	[BUG]  [BUGGY]  int  denominator  =  getDenominator()  -  1;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]              AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  int  denominator  =  getDenominator()  -  1;  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	int  denominator  =  getDenominator()  -  1;	      int    denominator    =    getDenominator();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	10	None	replace
85	[BUG]  [BUGGY]  DesertionFunction  <  Fraction>denominator  =  -denominator;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  DesertionFunction  <  Fraction>denominator  =  -denominator;  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	DesertionFunction  <  Fraction>denominator  =  -denominator;	      if(denominator    <    0)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
86	[BUG]  [BUGGY]  DesertionFunction  <  Fraction>denominator  =  numerator;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  DesertionFunction  <  Fraction>denominator  =  numerator;  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	DesertionFunction  <  Fraction>denominator  =  numerator;	      if(denominator    <    0)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
87	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	      if(denominator    <    0)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "Overflow:    can't    negate   ");    }    	non-compiled	[CE]  not  a  statement	18	None	replace
88	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	      if(denominator    <    0)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "Overflow:    can't    negate   ");    }    	non-compiled	[CE]  not  a  statement	18	None	replace
89	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr	      if(denominator    <    0)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "Overflow:    can't    negate   ");    }    	non-compiled	[CE]  ';'  expected	18	None	replace
90	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;    [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  [BUGGY]    denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr	      if(denominator    <    0)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "Overflow:    can't    negate   ");    }    	non-compiled	[CE]  ';'  expected	18	None	replace
