bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
11	[BUG] [BUGGY] numerator = -numerator; [FE] AssertionFailedError [CONTEXT] public static Fraction getFraction(int numerator, int denominator) { if (denominator == 0) { throw new ArithmeticException("The denominator must not be zero"); } if (denominator < 0) { if (numerator==Integer.MIN_VALUE || denominator==Integer.MIN_VALUE) { throw new ArithmeticException("overflow: can't negate"); } [BUGGY] numerator = -numerator; [BUGGY] denominator = -denominator; } return new Fraction(numerator, denominator); } [CLASS] Fraction [METHOD] getFraction [RETURN_TYPE] Fraction  int numerator int denominator [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO String toProperString toString boolean long serialVersionUID int denominator hashCode numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public static Fraction getFraction(int numerator, int denominator) { if (denominator == 0) { throw new ArithmeticException("The denominator must not be zero"); } if (denominator < 0) { if (numerator==Integer.MIN_VALUE || denominator==Integer.MIN_VALUE) { throw new ArithmeticException("overflow: can't negate"); } [BUGGY] [BUGGY] numerator = -numerator; denominator = -denominator; } return new Fraction(numerator, denominator); } [CLASS] Fraction [METHOD] getFraction [RETURN_TYPE] Fraction  int numerator int denominator [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO String toProperString toString boolean long serialVersionUID int denominator hashCode numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	
