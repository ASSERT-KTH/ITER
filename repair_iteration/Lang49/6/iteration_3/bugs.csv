bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }	  	compilable	  [FE]  AssertionFailedError  	5	3	add
2	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }	  	compilable	  [FE]  AssertionFailedError  	5	3	add
3	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  int  denominator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  int  denominator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    int  denominator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }	  	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	5	None	add
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }	  	compilable	  [FE]  AssertionFailedError  	5	3	add
5	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }	  	compilable	  [FE]  AssertionFailedError  	5	3	add
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }	  	compilable	  [FE]  AssertionFailedError  	5	3	add
7	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }	  	compilable	  [FE]  AssertionFailedError  	5	3	add
8	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  int  denominator  =  numerator;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]            AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  int  denominator  =  numerator;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    int  denominator  =  numerator;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }	  	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	5	None	add
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  -1;  denominator  =  -denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator  =  -1;  denominator  =  -denominator;	  numerator    =    numerator;    denominator    =    -denominator;    	compilable	  [FE]  AssertionFailedError  	66	4	replace
10	[BUG]  [BUGGY]  numerator  =  -1;  denominator  =  -denominator;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  -1;  denominator  =  -denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator  =  -1;  denominator  =  -denominator;	  numerator    =    numerator;    denominator    =    -denominator;    	compilable	  [FE]  AssertionFailedError  	66	4	replace
11	[BUG]  [BUGGY]  null  =  numerator;  denominator  =  -denominator;  [CE]  unexpected  type  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  null  =  numerator;  denominator  =  -denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	null  =  numerator;  denominator  =  -denominator;	  numerator    =    numerator;    denominator    =    -denominator;    	non-compiled	[CE]  unexpected  type	66	None	replace
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  -numerator;  denominator  =  -denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator  =  -numerator;  denominator  =  -denominator;	  numerator    =    numerator;    denominator    =    -denominator;    	compilable	  [FE]  AssertionFailedError  	66	4	replace
13	[BUG]  [BUGGY]  numerator  =  -numerator;  denominator  =  -denominator;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  -numerator;  denominator  =  -denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator  =  -numerator;  denominator  =  -denominator;	  numerator    =    numerator;    denominator    =    -denominator;    	compilable	  [FE]  AssertionFailedError  	66	4	replace
14	[BUG]  [BUGGY]  icallyTrue(denominator  <  0);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  icallyTrue(denominator  <  0);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	icallyTrue(denominator  <  0);	  maticallyTrue(numerator    <    0);isticallyTrue(denominator    <    0);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
15	[BUG]  [BUGGY]  isticallyTrue(denominator  <  0);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  isticallyTrue(denominator  <  0);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	isticallyTrue(denominator  <  0);	  maticallyTrue(numerator    <    0);isticallyTrue(denominator    <    0);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
16	[BUG]  [BUGGY]  systematicallyTrue(denominator  <  0);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  systematicallyTrue(denominator  <  0);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	systematicallyTrue(denominator  <  0);	  maticallyTrue(numerator    <    0);isticallyTrue(denominator    <    0);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
17	[BUG]  [BUGGY]  mostTrue(denominator  <  0);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  mostTrue(denominator  <  0);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	mostTrue(denominator  <  0);	  maticallyTrue(numerator    <    0);isticallyTrue(denominator    <    0);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
18	[BUG]  [BUGGY]  Integer  numerator  =  toProperString.length();  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Integer  numerator  =  toProperString.length();  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Integer  numerator  =  toProperString.length();	  int    numerator    =    toProperString.length()    -    1;    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	34	None	replace
19	[BUG]  [BUGGY]  int  numerator  =  fromProperString.length();  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  fromProperString.length();  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  fromProperString.length();	  int    numerator    =    toProperString.length()    -    1;    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	34	None	replace
20	[BUG]  [BUGGY]  int  numerator  =  toProperString.length()  /  denominator;  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  toProperString.length()  /  denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  toProperString.length()  /  denominator;	  int    numerator    =    toProperString.length()    +    denominator;    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	35	None	replace
21	[BUG]  [BUGGY]  int  numerator  =  toProperString.length()  *  denominator;  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  toProperString.length()  *  denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  toProperString.length()  *  denominator;	  int    numerator    =    toProperString.length()    +    denominator;    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	35	None	replace
22	[BUG]  [BUGGY]  denominator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	denominator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( " ");  }	  hingeger    <    0    ||    denominator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	86	None	replace
23	[BUG]  [BUGGY]  denominator  <  0  ||  numerator  <  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  <  0  ||  numerator  <  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	denominator  <  0  ||  numerator  <  0)  {  throw  new  ArithmeticException( " ");  }	  hingeger    <    0    ||    denominator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	86	None	replace
24	[BUG]  [BUGGY]  int  denominator  =  numerator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]              ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  numerator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  numerator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( " ");  }	  hingeger    <    0    ||    denominator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	86	None	replace
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  0;  numerator  =  0;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator    =    0;    numerator  =  0;	  	compilable	  [FE]  AssertionFailedError  	46	4	add
26	[BUG]  [BUGGY]  numerator  =  0;  numerator  =  0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  0;  numerator  =  0;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator    =    0;    numerator  =  0;	  	compilable	  [FE]  AssertionFailedError  	46	4	add
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  0;  denominator  =  0;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator    =    0;    denominator  =  0;	  	compilable	  [FE]  AssertionFailedError  	46	4	add
28	[BUG]  [BUGGY]  numerator  =  0;  denominator  =  0;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  0;  denominator  =  0;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator    =    0;    denominator  =  0;	  	compilable	  [FE]  AssertionFailedError  	46	4	add
29	[BUG]  [BUGGY]  numerator  =  0;  int  numerator  =  0;  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  0;  int  numerator  =  0;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator    =    0;    int  numerator  =  0;	  	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	46	None	add
30	[BUG]  [BUGGY]  numerator  =  0;  Numerator  =  0;  [CE]  cannot  find  symbol  Numerator  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  0;  Numerator  =  0;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator    =    0;    Numerator  =  0;	  	non-compiled	[CE]  cannot  find  symbol  Numerator	46	None	add
31	[BUG]  [BUGGY]  int  numerator  =  toProperString.hashCode()  /  denominator;  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  toProperString.hashCode()  /  denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  toProperString.hashCode()  /  denominator;	  int    numerator    =    toProperString.hashCode()    *    denominator;    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	33	None	replace
32	[BUG]  [BUGGY]  int  numerator  =  toProperString.hashCode()  *  denominator  +  1;  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  toProperString.hashCode()  *  denominator  +  1;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  toProperString.hashCode()  *  denominator  +  1;	  int    numerator    =    toProperString.hashCode()    *    denominator;    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	33	None	replace
33	[BUG]  [BUGGY]  int  denominator  =  numerator.hashCode();  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  numerator.hashCode();  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  numerator.hashCode();	  int    denominator    =    toString.hashCode();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	76	None	replace
34	[BUG]  [BUGGY]  int  denominator  =  toProperString.size();  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  toProperString.size();  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  toProperString.size();	  int    denominator    =    toString.hashCode();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	76	None	replace
35	[BUG]  [BUGGY]  int  denominator  =  ZERO.hashCode();  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  ZERO.hashCode();  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  ZERO.hashCode();	  int    denominator    =    toString.hashCode();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	76	None	replace
36	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf('.',  numerator);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  toProperString.indexOf('.',  numerator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  toProperString.indexOf('.',  numerator);	  int    denominator    =    toProperString.indexOf('.',    denominator);    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	77	None	replace
37	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf('.',  0,  denominator);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  toProperString.indexOf('.',  0,  denominator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  toProperString.indexOf('.',  0,  denominator);	  int    denominator    =    toProperString.indexOf('.',    denominator);    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	77	None	replace
38	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf('.',  0);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  toProperString.indexOf('.',  0);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  toProperString.indexOf('.',  0);	  int    denominator    =    toProperString.indexOf('.',    denominator);    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	77	None	replace
39	[BUG]  [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.',  denominator);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.',  denominator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  toProperString.lastIndexOf('.',  denominator);	  int    denominator    =    toProperString.indexOf('.',    denominator);    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	77	None	replace
40	[BUG]  [BUGGY]  int  denominator  =  getDenominator(denominator,  0);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  getDenominator(denominator,  0);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  getDenominator(denominator,  0);	  int    denominator    =    getDenominator(denominator);    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	28	None	replace
41	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  numerator;  denominator  =  -denominator;  numerator  =  numerator;  denominator  =  -denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator    =    numerator;    denominator    =    -denominator;    numerator  =  numerator;  denominator  =  -denominator;	  	compilable	  [FE]  AssertionFailedError  	65	1	add
42	[BUG]  [BUGGY]  numerator  =  numerator;  denominator  =  -denominator;  numerator  =  numerator;  denominator  =  -denominator;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  numerator;  denominator  =  -denominator;  numerator  =  numerator;  denominator  =  -denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator    =    numerator;    denominator    =    -denominator;    numerator  =  numerator;  denominator  =  -denominator;	  	compilable	  [FE]  AssertionFailedError  	65	1	add
43	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  numerator;  denominator  =  -denominator;  if(numerator  <  0)  {  numerator  =  numerator;  denominator  =  -denominator;  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator    =    numerator;    denominator    =    -denominator;    if(numerator  <  0)  {  numerator  =  numerator;  denominator  =  -denominator;  }	  	compilable	  [FE]  AssertionFailedError  	65	4	add
44	[BUG]  [BUGGY]  numerator  =  numerator;  denominator  =  -denominator;  if(numerator  <  0)  {  numerator  =  numerator;  denominator  =  -denominator;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  numerator;  denominator  =  -denominator;  if(numerator  <  0)  {  numerator  =  numerator;  denominator  =  -denominator;  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator    =    numerator;    denominator    =    -denominator;    if(numerator  <  0)  {  numerator  =  numerator;  denominator  =  -denominator;  }	  	compilable	  [FE]  AssertionFailedError  	65	4	add
45	[BUG]  [BUGGY]  numerator  =  numerator;  denominator  =  -denominator;  nmerator  =  numerator;  denominator  =  -denominator;  [CE]  cannot  find  symbol  nmerator  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  numerator;  denominator  =  -denominator;  nmerator  =  numerator;  denominator  =  -denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator    =    numerator;    denominator    =    -denominator;    nmerator  =  numerator;  denominator  =  -denominator;	  	non-compiled	[CE]  cannot  find  symbol  nmerator	65	None	add
46	[BUG]  [BUGGY]  numerator  =  numerator;  denominator  =  -denominator;  Numerator  =  numerator;  denominator  =  -denominator;  [CE]  cannot  find  symbol  Numerator  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  numerator;  denominator  =  -denominator;  Numerator  =  numerator;  denominator  =  -denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator    =    numerator;    denominator    =    -denominator;    Numerator  =  numerator;  denominator  =  -denominator;	  	non-compiled	[CE]  cannot  find  symbol  Numerator	65	None	add
47	[BUG]  [BUGGY]  int  denominator  =  getDenominator().hashCode();  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  getDenominator().hashCode();  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  getDenominator().hashCode();	  int    denominator    =    getDenominator()    -    1;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	82	None	replace
48	[BUG]  [BUGGY]  int  numerator  =  getNumerator().denominator  +  denominator;  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  getNumerator().denominator  +  denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  getNumerator().denominator  +  denominator;	  int    numerator    =    getNumerator().denominator;    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	11	None	replace
49	[BUG]  [BUGGY]  int  numerator  =  getNumerator().numerator;  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  getNumerator().numerator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  getNumerator().numerator;	  int    numerator    =    getNumerator().denominator;    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	11	None	replace
50	[BUG]  [BUGGY]  int  numerator  =  getNumerator().denominator  -  denominator;  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  getNumerator().denominator  -  denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  getNumerator().denominator  -  denominator;	  int    numerator    =    getNumerator().denominator;    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	11	None	replace
51	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  int  denominator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  int  denominator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    int  denominator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	3	None	add
52	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  int  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  int  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    int  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	3	None	add
53	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	3	3	add
54	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	3	3	add
55	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	3	3	add
56	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	3	3	add
57	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  int  numerator  =  -1;  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]            AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  int  numerator  =  -1;  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    int  numerator  =  -1;  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	3	None	add
58	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  =  denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	denominator  =  denominator;	  hingegenominator    =    numerator;    	compilable	  [FE]  AssertionFailedError  	42	2	replace
59	[BUG]  [BUGGY]  denominator  =  denominator;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  =  denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	denominator  =  denominator;	  hingegenominator    =    numerator;    	compilable	  [FE]  AssertionFailedError  	42	2	replace
60	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator  =  denominator;	  hingegenominator    =    numerator;    	compilable	  [FE]  AssertionFailedError  	42	5	replace
61	[BUG]  [BUGGY]  numerator  =  denominator;  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator  =  denominator;	  hingegenominator    =    numerator;    	compilable	  [FE]  AssertionFailedError  	42	5	replace
62	[BUG]  [BUGGY]  int  numerator  =  toProperString.indexOf('.',  0,  denominator);  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  toProperString.indexOf('.',  0,  denominator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  toProperString.indexOf('.',  0,  denominator);	  int    numerator    =    toProperString.indexOf('.',    denominator);    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	102	None	replace
63	[BUG]  [BUGGY]  int  numerator  =  toProperString.indexOf('.',  denominator,  hashCode);  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  toProperString.indexOf('.',  denominator,  hashCode);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  toProperString.indexOf('.',  denominator,  hashCode);	  int    numerator    =    toProperString.indexOf('.',    denominator);    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	102	None	replace
64	[BUG]  [BUGGY]  int  numerator  =  toProperString.indexOf('.',  denominator  -  1);  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  toProperString.indexOf('.',  denominator  -  1);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  toProperString.indexOf('.',  denominator  -  1);	  int    numerator    =    toProperString.indexOf('.',    denominator);    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	102	None	replace
65	[BUG]  [BUGGY]  int  numerator  =  toProperString.indexOf('.',  denominator  +  1);  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  toProperString.indexOf('.',  denominator  +  1);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  toProperString.indexOf('.',  denominator  +  1);	  int    numerator    =    toProperString.indexOf('.',    denominator);    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	102	None	replace
66	[BUG]  [BUGGY]  int  numerator  =  getNumber()  -  1;  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  getNumber()  -  1;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  getNumber()  -  1;	  int    numerator    =    getNumber();    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	13	None	replace
67	[BUG]  [BUGGY]  int  numerator  =  getNumber()  -  denominator;  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  getNumber()  -  denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  getNumber()  -  denominator;	  int    numerator    =    getNumber();    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	13	None	replace
68	[BUG]  [BUGGY]  int  numerator  =  getNumber()  +  denominator;  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  getNumber()  +  denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  getNumber()  +  denominator;	  int    numerator    =    getNumber();    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	13	None	replace
69	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -1;        if(denominator    <    0)    {    numerator    =    -1;    }    else    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	9	3	add
70	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    <    0)    {    numerator    =    -1;    }    else    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	9	3	add
71	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  int  denominator  =  -denominator;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  int  denominator  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    <    0)    {    numerator    =    -1;    }    else    {    throw    new    ArithmeticException(   "   ");    }    int  denominator  =  -denominator;	  	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	9	None	add
72	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  denominator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -1;        if(denominator    <    0)    {    numerator    =    -1;    }    else    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  <  0)  {  denominator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	9	4	add
73	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  denominator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  denominator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    <    0)    {    numerator    =    -1;    }    else    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  <  0)  {  denominator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	9	4	add
74	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -1;        if(denominator    <    0)    {    numerator    =    -1;    }    else    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  ArithmeticException  	9	3	add
75	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [FE]  ArithmeticException  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    <    0)    {    numerator    =    -1;    }    else    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  ArithmeticException  	9	3	add
76	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -1;        if(denominator    <    0)    {    numerator    =    -1;    }    else    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	9	5	add
77	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    <    0)    {    numerator    =    -1;    }    else    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	9	5	add
78	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   "     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	                if(denominator        <        0)        {        throw        new        ArithmeticException(       "       ");        }        if(denominator    <    0)    {    throw    new    ArithmeticException(   "       ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	18	3	add
79	[BUG]  [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   "     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   "     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	                if(denominator        <        0)        {        throw        new        ArithmeticException(       "       ");        }        if(denominator    <    0)    {    throw    new    ArithmeticException(   "       ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	18	3	add
80	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   "     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	                if(denominator        <        0)        {        throw        new        ArithmeticException(       "       ");        }        if(denominator    <    0)    {    throw    new    ArithmeticException(   "       ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	18	3	add
81	[BUG]  [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   "     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   "     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	                if(denominator        <        0)        {        throw        new        ArithmeticException(       "       ");        }        if(denominator    <    0)    {    throw    new    ArithmeticException(   "       ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	18	3	add
82	[BUG]  [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   "     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "  [CE]  unclosed  string  literal  [FE]        ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   "     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	                if(denominator        <        0)        {        throw        new        ArithmeticException(       "       ");        }        if(denominator    <    0)    {    throw    new    ArithmeticException(   "       ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "	  	non-compiled	[CE]  unclosed  string  literal	18	None	add
83	[BUG]  [BUGGY]  echtsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  echtsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	echtsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
84	[BUG]  [BUGGY]  more  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  more  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	more  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr	  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    	non-compiled	[CE]  ';'  expected	92	None	replace
85	[BUG]  [BUGGY]  dsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  dsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	dsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    incadr    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
86	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  =  -1;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	denominator  =  -1;	  numerator    =    -denominator;    denominator    =    -denominator;    	compilable	  [FE]  AssertionFailedError  	51	4	replace
87	[BUG]  [BUGGY]  denominator  =  -1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  =  -1;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	denominator  =  -1;	  numerator    =    -denominator;    denominator    =    -denominator;    	compilable	  [FE]  AssertionFailedError  	51	4	replace
88	[BUG]  [BUGGY]  mecanicicallyTrue(denominator  ==  Integer.MIN_VALUE,  denominator);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  mecanicicallyTrue(denominator  ==  Integer.MIN_VALUE,  denominator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	mecanicicallyTrue(denominator  ==  Integer.MIN_VALUE,  denominator);	  maticallyTrue(numerator    <    0);    mecanicicallyTrue(denominator    ==    Integer.MIN_VALUE,    denominator);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
89	[BUG]  [BUGGY]  mecanicicallyTrue(numerator  ==  Integer.MIN_VALUE,  denominator);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  mecanicicallyTrue(numerator  ==  Integer.MIN_VALUE,  denominator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	mecanicicallyTrue(numerator  ==  Integer.MIN_VALUE,  denominator);	  maticallyTrue(numerator    <    0);    mecanicicallyTrue(denominator    ==    Integer.MIN_VALUE,    denominator);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
90	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  mecanicicallyTrue(denominator,  denominator  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  mecanicicallyTrue(denominator,  denominator  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  mecanicicallyTrue(denominator,  denominator	  maticallyTrue(numerator    <    0);    mecanicicallyTrue(denominator    ==    Integer.MIN_VALUE,    denominator);    	non-compiled	[CE]  ';'  expected	80	None	replace
91	[BUG]  [BUGGY]  DesominatorFailedToNegative(numerator,  denominator);  [CE]  cannot  find  symbol  [FE]          ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  DesominatorFailedToNegative(numerator,  denominator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	DesominatorFailedToNegative(numerator,  denominator);	  DesertionFailedToNegative(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
92	[BUG]  [BUGGY]  DesominatorFailedToNegative(denominator,  numerator);  [CE]  cannot  find  symbol  [FE]            ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  DesominatorFailedToNegative(denominator,  numerator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	DesominatorFailedToNegative(denominator,  numerator);	  DesertionFailedToNegative(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
93	[BUG]  [BUGGY]  Denominator  denominator  =  denominator;  [CE]  cannot  find  symbol  [FE]              ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Denominator  denominator  =  denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Denominator  denominator  =  denominator;	  DesertionFailedToNegative(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
94	[BUG]  [BUGGY]  DesominatorFailedToNegative(denominator,  denominator);  [CE]  cannot  find  symbol  [FE]                ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  DesominatorFailedToNegative(denominator,  denominator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	DesominatorFailedToNegative(denominator,  denominator);	  DesertionFailedToNegative(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
95	[BUG]  [BUGGY]  int  denominator  =  toString.length()  -  1;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  toString.length()  -  1;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  toString.length()  -  1;	  int    denominator    =    toString.length();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	73	None	replace
96	[BUG]  [BUGGY]  int  denominator  =  toString.length()  +  1;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  toString.length()  +  1;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  toString.length()  +  1;	  int    denominator    =    toString.length();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	73	None	replace
97	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   ",     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( ",   ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	                if(denominator        <        0)        {        throw        new        ArithmeticException(       "       ");        }        if(denominator    <    0)    {    throw    new    ArithmeticException(   ",       ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( ",   ");  }	  	compilable	  [FE]  ArithmeticException  	74	3	add
98	[BUG]  [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   ",     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( ",   ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   ",     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( ",   ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	                if(denominator        <        0)        {        throw        new        ArithmeticException(       "       ");        }        if(denominator    <    0)    {    throw    new    ArithmeticException(   ",       ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( ",   ");  }	  	compilable	  [FE]  ArithmeticException  	74	3	add
99	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   ",     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException(   ",   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( ",   ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	                if(denominator        <        0)        {        throw        new        ArithmeticException(       "       ");        }        if(denominator    <    0)    {    throw    new    ArithmeticException(   ",       ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   ",   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( ",   ");  }	  	compilable	  [FE]  ArithmeticException  	74	3	add
100	[BUG]  [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   ",     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException(   ",   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( ",   ");  }  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   ",     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException(   ",   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( ",   ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	                if(denominator        <        0)        {        throw        new        ArithmeticException(       "       ");        }        if(denominator    <    0)    {    throw    new    ArithmeticException(   ",       ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   ",   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( ",   ");  }	  	compilable	  [FE]  ArithmeticException  	74	3	add
101	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    else    {    throw    new    ArithmeticException(   "   ");    }    numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  ArithmeticException  	7	3	add
102	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    else    {    throw    new    ArithmeticException(   "   ");    }    numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  ArithmeticException  	7	3	add
103	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    else    {    throw    new    ArithmeticException(   "   ");    }    numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  ArithmeticException  	7	3	add
104	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( " ");  }  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    else    {    throw    new    ArithmeticException(   "   ");    }    numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  ArithmeticException  	7	3	add
105	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]        ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    else    {    throw    new    ArithmeticException(   "   ");    }    numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	  	compilable	  [FE]  ArithmeticException  	7	3	add
106	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [FE]  ArithmeticException  [FE]        ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    else    {    throw    new    ArithmeticException(   "   ");    }    numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	  	compilable	  [FE]  ArithmeticException  	7	3	add
107	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]          ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    else    {    throw    new    ArithmeticException(   "   ");    }    numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  ArithmeticException  	7	3	add
108	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( " ");  }  [FE]  ArithmeticException  [FE]          ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    else    {    throw    new    ArithmeticException(   "   ");    }    numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  ArithmeticException  	7	3	add
109	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    denominator  =  -denominator;  numerator  =  -denominator;  denominator  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -denominator;        denominator    =    -denominator;    numerator  =  -denominator;  denominator  =  -denominator;	  	compilable	  [FE]  AssertionFailedError  	50	5	add
110	[BUG]  [BUGGY]  numerator    =    -denominator;    denominator  =  -denominator;  numerator  =  -denominator;  denominator  =  -denominator;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    denominator  =  -denominator;  numerator  =  -denominator;  denominator  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        denominator    =    -denominator;    numerator  =  -denominator;  denominator  =  -denominator;	  	compilable	  [FE]  AssertionFailedError  	50	5	add
111	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    denominator  =  -denominator;  denominator  =  -denominator;  denominator  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -denominator;        denominator    =    -denominator;    denominator  =  -denominator;  denominator  =  -denominator;	  	compilable	  [FE]  AssertionFailedError  	50	5	add
112	[BUG]  [BUGGY]  numerator    =    -denominator;    denominator  =  -denominator;  denominator  =  -denominator;  denominator  =  -denominator;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    denominator  =  -denominator;  denominator  =  -denominator;  denominator  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        denominator    =    -denominator;    denominator  =  -denominator;  denominator  =  -denominator;	  	compilable	  [FE]  AssertionFailedError  	50	5	add
113	[BUG]  [BUGGY]  numerator    =    -denominator;    denominator  =  -denominator;  int  denominator  =  -denominator;  denominator  =  -denominator;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    denominator  =  -denominator;  int  denominator  =  -denominator;  denominator  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        denominator    =    -denominator;    int  denominator  =  -denominator;  denominator  =  -denominator;	  	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	50	None	add
114	[BUG]  [BUGGY]  numerator    =    -denominator;    denominator  =  -denominator;  nmerator  =  -denominator;  denominator  =  -denominator;  [CE]  cannot  find  symbol  nmerator  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    denominator  =  -denominator;  nmerator  =  -denominator;  denominator  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        denominator    =    -denominator;    nmerator  =  -denominator;  denominator  =  -denominator;	  	non-compiled	[CE]  cannot  find  symbol  nmerator	50	None	add
115	[BUG]  [BUGGY]  null  =  numerator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  [CE]  unexpected  type  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  null  =  numerator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	null  =  numerator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }	  numerator    =    -denominator;    if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    return    new    Fraction(numerator,    denominator);    }    	non-compiled	[CE]  unexpected  type	98	None	replace
116	[BUG]  [BUGGY]  null  =  numerator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  [CE]  unexpected  type  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  null  =  numerator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	null  =  numerator;  if(denominator  <  0)  {  numerator  =  -denominator;  }	  numerator    =    -denominator;    if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    return    new    Fraction(numerator,    denominator);    }    	non-compiled	[CE]  unexpected  type	98	None	replace
117	[BUG]  [BUGGY]  null  =  numerator;  if(denominator  <  0)  {  denominator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  [CE]  unexpected  type  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  null  =  numerator;  if(denominator  <  0)  {  denominator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	null  =  numerator;  if(denominator  <  0)  {  denominator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }	  numerator    =    -denominator;    if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    return    new    Fraction(numerator,    denominator);    }    	non-compiled	[CE]  unexpected  type	98	None	replace
118	[BUG]  [BUGGY]  int  denominator  =  getDenominator(0).denominator;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  getDenominator(0).denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  getDenominator(0).denominator;	  int    denominator    =    getDenominator(0);    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	31	None	replace
119	[BUG]  [BUGGY]  denominatoricallyNull(numerator,  denominator);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominatoricallyNull(numerator,  denominator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	denominatoricallyNull(numerator,  denominator);	  maticallyNull(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
120	[BUG]  [BUGGY]  nominatoricallyNull(numerator,  denominator);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  nominatoricallyNull(numerator,  denominator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	nominatoricallyNull(numerator,  denominator);	  maticallyNull(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
121	[BUG]  [BUGGY]  Numerator  numerator  =  numerator.intValue();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Numerator  numerator  =  numerator.intValue();  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Numerator  numerator  =  numerator.intValue();	  maticallyNull(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
122	[BUG]  [BUGGY]  int  numerator  =  numerator.intValue();  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]                              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  numerator.intValue();  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  numerator.intValue();	  maticallyNull(numerator,    denominator);    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	17	None	replace
123	[BUG]  [BUGGY]  int  denominator  =  fromProperString.length();  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  fromProperString.length();  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  fromProperString.length();	  int    denominator    =    toProperString.length()    -    1;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	39	None	replace
124	[BUG]  [BUGGY]  int  denominator  =  numerator.length()  -  1;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  numerator.length()  -  1;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  numerator.length()  -  1;	  int    denominator    =    toProperString.length()    -    1;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	39	None	replace
125	[BUG]  [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.',  0);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.',  0);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  toProperString.lastIndexOf('.',  0);	  int    denominator    =    toProperString.lastIndexOf('.');    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	104	None	replace
126	[BUG]  [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.',  1);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.',  1);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  toProperString.lastIndexOf('.',  1);	  int    denominator    =    toProperString.lastIndexOf('.');    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	104	None	replace
127	[BUG]  [BUGGY]  int  numerator  =  toProperString.length()  -  1,  denominator;  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  toProperString.length()  -  1,  denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  toProperString.length()  -  1,  denominator;	  int    numerator    =    toProperString.length()    -    denominator;    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	37	None	replace
128	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  =  -denominator;  denominator  =  -denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	denominator    =    -denominator;    denominator  =  -denominator;	  	compilable	  [FE]  AssertionFailedError  	21	1	add
129	[BUG]  [BUGGY]  denominator  =  -denominator;  denominator  =  -denominator;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  =  -denominator;  denominator  =  -denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	denominator    =    -denominator;    denominator  =  -denominator;	  	compilable	  [FE]  AssertionFailedError  	21	1	add
130	[BUG]  [BUGGY]  denominator  =  -denominator;  desnominator  =  -denominator;  [CE]  cannot  find  symbol  desnominator  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  =  -denominator;  desnominator  =  -denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	denominator    =    -denominator;    desnominator  =  -denominator;	  	non-compiled	[CE]  cannot  find  symbol  desnominator	21	None	add
131	[BUG]  [BUGGY]  denominator  =  -denominator;  int  denominator  =  -denominator;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  =  -denominator;  int  denominator  =  -denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	denominator    =    -denominator;    int  denominator  =  -denominator;	  	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	21	None	add
132	[BUG]  [BUGGY]  denominator  =  -denominator;  dernominator  =  -denominator;  [CE]  cannot  find  symbol  dernominator  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  =  -denominator;  dernominator  =  -denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	denominator    =    -denominator;    dernominator  =  -denominator;	  	non-compiled	[CE]  cannot  find  symbol  dernominator	21	None	add
133	[BUG]  [BUGGY]  Numerator  <?>  numerator  =  -1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Numerator  <?>  numerator  =  -1;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Numerator  <?>  numerator  =  -1;	  Numerator    <?>    numerator    =    -denominator;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	83	None	replace
134	[BUG]  [BUGGY]  Numerator  <?>  numerator  =  -numerator;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Numerator  <?>  numerator  =  -numerator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Numerator  <?>  numerator  =  -numerator;	  Numerator    <?>    numerator    =    -denominator;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	83	None	replace
135	[BUG]  [BUGGY]  Numerator  <?>  numerator  =  -numerator;  denominator  =  -denominator;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Numerator  <?>  numerator  =  -numerator;  denominator  =  -denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Numerator  <?>  numerator  =  -numerator;  denominator  =  -denominator;	  Numerator    <?>    numerator    =    -denominator;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	83	None	replace
136	[BUG]  [BUGGY]  int  numerator  =  getNumerator(denominator,  0,  denominator);  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  getNumerator(denominator,  0,  denominator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  getNumerator(denominator,  0,  denominator);	  int    numerator    =    getNumerator(denominator,    hashCode);    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	55	None	replace
137	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }	  	compilable	  [FE]  AssertionFailedError  	93	5	add
138	[BUG]  [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }	  	compilable	  [FE]  AssertionFailedError  	93	5	add
139	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  denominator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    denominator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }	  	compilable	  [FE]  AssertionFailedError  	93	5	add
140	[BUG]  [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  denominator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  denominator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    denominator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }	  	compilable	  [FE]  AssertionFailedError  	93	5	add
141	[BUG]  [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  int  denominator  =  numerator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  int  denominator  =  numerator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    int  denominator  =  numerator;  if(denominator  <  0)  {  numerator  =  -denominator;  }	  	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	93	None	add
142	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  denominator  =  -denominator;  if(denominator  <  0)  {  denominator  =  -denominator;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    denominator  =  -denominator;  if(denominator  <  0)  {  denominator  =  -denominator;  }	  	compilable	  [FE]  AssertionFailedError  	93	5	add
143	[BUG]  [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  denominator  =  -denominator;  if(denominator  <  0)  {  denominator  =  -denominator;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  denominator  =  -denominator;  if(denominator  <  0)  {  denominator  =  -denominator;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    denominator  =  -denominator;  if(denominator  <  0)  {  denominator  =  -denominator;  }	  	compilable	  [FE]  AssertionFailedError  	93	5	add
144	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  numerator;  numerator  =  numerator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator    =    numerator;    numerator  =  numerator;	  	compilable	  [FE]  AssertionFailedError  	26	1	add
145	[BUG]  [BUGGY]  numerator  =  numerator;  numerator  =  numerator;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  numerator;  numerator  =  numerator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator    =    numerator;    numerator  =  numerator;	  	compilable	  [FE]  AssertionFailedError  	26	1	add
146	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  numerator;  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  numerator;  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator    =    numerator;    if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  numerator;  }	  	compilable	  [FE]  AssertionFailedError  	26	1	add
147	[BUG]  [BUGGY]  numerator  =  numerator;  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  numerator;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  numerator;  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  numerator;  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator    =    numerator;    if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  numerator;  }	  	compilable	  [FE]  AssertionFailedError  	26	1	add
148	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  numerator;  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  numerator;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator    =    numerator;    if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  numerator;  }  else  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  ArithmeticException  	26	3	add
149	[BUG]  [BUGGY]  numerator  =  numerator;  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  numerator;  }  else  {  throw  new  ArithmeticException( " ");  }  [FE]  ArithmeticException  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  numerator;  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  numerator;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator    =    numerator;    if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  numerator;  }  else  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  ArithmeticException  	26	3	add
150	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  numerator;  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  numerator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator    =    numerator;    if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  numerator;  }  else  {  return  new  Fraction(numerator,  denominator);  }	  	compilable	  [FE]  AssertionFailedError  	26	4	add
151	[BUG]  [BUGGY]  numerator  =  numerator;  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  numerator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  numerator;  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  numerator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator    =    numerator;    if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  numerator;  }  else  {  return  new  Fraction(numerator,  denominator);  }	  	compilable	  [FE]  AssertionFailedError  	26	4	add
152	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]            AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  numerator;  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  numerator  =  numerator;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator    =    numerator;    if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  numerator  =  numerator;  }  else  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  ArithmeticException  	26	3	add
153	[BUG]  [BUGGY]  numerator  =  numerator;  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  numerator  =  numerator;  }  else  {  throw  new  ArithmeticException( " ");  }  [FE]  ArithmeticException  [FE]            AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  numerator;  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  numerator  =  numerator;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator    =    numerator;    if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  numerator  =  numerator;  }  else  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  ArithmeticException  	26	3	add
154	[BUG]  [BUGGY]  Numerator  =  -1;  [CE]  cannot  find  symbol  Numerator  [FE]        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Numerator  =  -1;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Numerator  =  -1;	  numerator    =    -1;    Numerator    =    -1;    	non-compiled	[CE]  cannot  find  symbol  Numerator	59	None	replace
155	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    numerator  =  -denominator;  numerator  =  -denominator;  numerator  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -denominator;        numerator    =    -denominator;    numerator  =  -denominator;  numerator  =  -denominator;	  	compilable	  [FE]  AssertionFailedError  	48	5	add
156	[BUG]  [BUGGY]  numerator    =    -denominator;    numerator  =  -denominator;  numerator  =  -denominator;  numerator  =  -denominator;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    numerator  =  -denominator;  numerator  =  -denominator;  numerator  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        numerator    =    -denominator;    numerator  =  -denominator;  numerator  =  -denominator;	  	compilable	  [FE]  AssertionFailedError  	48	5	add
157	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    numerator  =  -denominator;  denominator  =  -denominator;  numerator  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -denominator;        numerator    =    -denominator;    denominator  =  -denominator;  numerator  =  -denominator;	  	compilable	  [FE]  AssertionFailedError  	48	5	add
158	[BUG]  [BUGGY]  numerator    =    -denominator;    numerator  =  -denominator;  denominator  =  -denominator;  numerator  =  -denominator;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    numerator  =  -denominator;  denominator  =  -denominator;  numerator  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        numerator    =    -denominator;    denominator  =  -denominator;  numerator  =  -denominator;	  	compilable	  [FE]  AssertionFailedError  	48	5	add
159	[BUG]  [BUGGY]  numerator    =    -denominator;    numerator  =  -denominator;  Numerator  =  -denominator;  numerator  =  -denominator;  [CE]  cannot  find  symbol  Numerator  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    numerator  =  -denominator;  Numerator  =  -denominator;  numerator  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        numerator    =    -denominator;    Numerator  =  -denominator;  numerator  =  -denominator;	  	non-compiled	[CE]  cannot  find  symbol  Numerator	48	None	add
160	[BUG]  [BUGGY]  numerator    =    -denominator;    numerator  =  -denominator;  nmerator  =  -denominator;  numerator  =  -denominator;  [CE]  cannot  find  symbol  nmerator  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    numerator  =  -denominator;  nmerator  =  -denominator;  numerator  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        numerator    =    -denominator;    nmerator  =  -denominator;  numerator  =  -denominator;	  	non-compiled	[CE]  cannot  find  symbol  nmerator	48	None	add
161	[BUG]  [BUGGY]  DesominatorFailedToNegativeFraction(denominator,  numerator);  [CE]  cannot  find  symbol  [FE]        ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  DesominatorFailedToNegativeFraction(denominator,  numerator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	DesominatorFailedToNegativeFraction(denominator,  numerator);	  DesertionFailedToNegativeFraction(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
162	[BUG]  [BUGGY]  DesominatorFailedToNegativeFraction(numerator,  denominator);  [CE]  cannot  find  symbol  [FE]          ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  DesominatorFailedToNegativeFraction(numerator,  denominator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	DesominatorFailedToNegativeFraction(numerator,  denominator);	  DesertionFailedToNegativeFraction(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
163	[BUG]  [BUGGY]  DesominatorFailedToNegativeFraction(numerator,  denominator,  hashCode);  [CE]  non-static  variable  hashCode  cannot  be  referenced  from  a  static  context  [FE]            ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  DesominatorFailedToNegativeFraction(numerator,  denominator,  hashCode);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	DesominatorFailedToNegativeFraction(numerator,  denominator,  hashCode);	  DesertionFailedToNegativeFraction(numerator,    denominator);    	non-compiled	[CE]  non-static  variable  hashCode  cannot  be  referenced  from  a  static  context	63	None	replace
164	[BUG]  [BUGGY]  DesominatorFailedToNegativeFraction(numerator,  denominator,  numerator);  [CE]  cannot  find  symbol  [FE]              ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  DesominatorFailedToNegativeFraction(numerator,  denominator,  numerator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	DesominatorFailedToNegativeFraction(numerator,  denominator,  numerator);	  DesertionFailedToNegativeFraction(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
165	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf('.',  denominator)+  1;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  toProperString.indexOf('.',  denominator)+  1;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  toProperString.indexOf('.',  denominator)+  1;	  int    denominator    =    toProperString.indexOf('.')+    1;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	105	None	replace
166	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf('.')/  1;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  toProperString.indexOf('.')/  1;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  toProperString.indexOf('.')/  1;	  int    denominator    =    toProperString.indexOf('.')+    1;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	105	None	replace
167	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf('.')+  2;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  toProperString.indexOf('.')+  2;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  toProperString.indexOf('.')+  2;	  int    denominator    =    toProperString.indexOf('.')+    1;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	105	None	replace
168	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  =  0;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	denominator  =  0;	  denominator    =    numerator;    	compilable	  [FE]  AssertionFailedError  	25	3	replace
169	[BUG]  [BUGGY]  denominator  =  0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  =  0;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	denominator  =  0;	  denominator    =    numerator;    	compilable	  [FE]  AssertionFailedError  	25	3	replace
170	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  =  Integer.MIN_VALUE;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	denominator  =  Integer.MIN_VALUE;	  denominator    =    numerator;    	compilable	  [FE]  AssertionFailedError  	25	3	replace
171	[BUG]  [BUGGY]  denominator  =  Integer.MIN_VALUE;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  =  Integer.MIN_VALUE;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	denominator  =  Integer.MIN_VALUE;	  denominator    =    numerator;    	compilable	  [FE]  AssertionFailedError  	25	3	replace
172	[BUG]  [BUGGY]  int  desnominator  =  toProperString.length();  [CE]  non-static  variable  toProperString  cannot  be  referenced  from  a  static  context  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  desnominator  =  toProperString.length();  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  desnominator  =  toProperString.length();	  int    denominator    =    toProperString.length()    -    2;    	non-compiled	[CE]  non-static  variable  toProperString  cannot  be  referenced  from  a  static  context	40	None	replace
173	[BUG]  [BUGGY]  int  numerator  =  getNumerator(0).denominator;  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  getNumerator(0).denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  getNumerator(0).denominator;	  int    numerator    =    getNumerator(0);    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	12	None	replace
174	[BUG]  [BUGGY]  int  numerator  =  getDenominator(0);  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  getDenominator(0);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  getDenominator(0);	  int    numerator    =    getNumerator(0);    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	12	None	replace
175	[BUG]  [BUGGY]  Numerator  numerator  =  ZERO;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Numerator  numerator  =  ZERO;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Numerator  numerator  =  ZERO;	  Numerator    numerator    =    numerator;    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
176	[BUG]  [BUGGY]  Numerator  numerator  =  -1;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Numerator  numerator  =  -1;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Numerator  numerator  =  -1;	  Numerator    numerator    =    numerator;    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
177	[BUG]  [BUGGY]  Numerator  numerator  =  denominator;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Numerator  numerator  =  denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Numerator  numerator  =  denominator;	  Numerator    numerator    =    numerator;    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
178	[BUG]  [BUGGY]  Numerator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Numerator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Numerator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }	  hingeger    <    0    ||    denominator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate       ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	87	None	replace
179	[BUG]  [BUGGY]  denominator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	denominator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }	  hingeger    <    0    ||    denominator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate       ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	87	None	replace
180	[BUG]  [BUGGY]  hingegenominator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  hingegenominator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	hingegenominator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }	  hingeger    <    0    ||    denominator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate       ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	87	None	replace
181	[BUG]  [BUGGY]  denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	denominator  <  0)  {  throw  new  ArithmeticException( "Overflow:  can't  negate ");  }	  hingeger    <    0    ||    denominator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate       ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	87	None	replace
182	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  0;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator  =  0;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }	  numerator    =    -1;    if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    	compilable	  [FE]  AssertionFailedError  	6	4	replace
183	[BUG]  [BUGGY]  numerator  =  0;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  0;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator  =  0;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }	  numerator    =    -1;    if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    	compilable	  [FE]  AssertionFailedError  	6	4	replace
184	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  0;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator  =  0;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  }	  numerator    =    -1;    if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    	compilable	  [FE]  AssertionFailedError  	6	4	replace
185	[BUG]  [BUGGY]  numerator  =  0;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  0;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator  =  0;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  }	  numerator    =    -1;    if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    	compilable	  [FE]  AssertionFailedError  	6	4	replace
186	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  }	  numerator    =    -1;    if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    	compilable	  [FE]  AssertionFailedError  	6	3	replace
187	[BUG]  [BUGGY]  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  }	  numerator    =    -1;    if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    	compilable	  [FE]  AssertionFailedError  	6	3	replace
188	[BUG]  [BUGGY]  variant  <  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  variant  <  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	variant  <  0)  {  throw  new  ArithmeticException( " ");  }	          if(denominator    <    0)    {    throw    new    ArithmeticException(       "       ");    }    if(denominator    <    0)    {    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
189	[BUG]  [BUGGY]  variant  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]      ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  variant  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	variant  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	          if(denominator    <    0)    {    throw    new    ArithmeticException(       "       ");    }    if(denominator    <    0)    {    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
190	[BUG]  [BUGGY]  variant  <  0)  {  throw  new  ArithmeticException( " ",  denominator);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  variant  <  0)  {  throw  new  ArithmeticException( " ",  denominator);  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	variant  <  0)  {  throw  new  ArithmeticException( " ",  denominator);  }	          if(denominator    <    0)    {    throw    new    ArithmeticException(       "       ");    }    if(denominator    <    0)    {    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
191	[BUG]  [BUGGY]  Numerator  numerator  =  -numerator;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Numerator  numerator  =  -numerator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Numerator  numerator  =  -numerator;	  Numerator    numerator    =    -denominator;    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
192	[BUG]  [BUGGY]  Numerator  denominator  =  -denominator;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Numerator  denominator  =  -denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Numerator  denominator  =  -denominator;	  Numerator    numerator    =    -denominator;    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
193	[BUG]  [BUGGY]  DesertionFailedError  f  =  getFraction(numerator,  denominator,  hashCode);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  DesertionFailedError  f  =  getFraction(numerator,  denominator,  hashCode);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	DesertionFailedError  f  =  getFraction(numerator,  denominator,  hashCode);	  DesertionFailedError    f    =    getFraction(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
194	[BUG]  [BUGGY]  DesertionFailedError  f  =  getFraction(numerator,  denominator,  numerator);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  DesertionFailedError  f  =  getFraction(numerator,  denominator,  numerator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	DesertionFailedError  f  =  getFraction(numerator,  denominator,  numerator);	  DesertionFailedError    f    =    getFraction(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
195	[BUG]  [BUGGY]  DesertionFailedError  f  =  getFraction(numerator,  denominator,  denominator);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  DesertionFailedError  f  =  getFraction(numerator,  denominator,  denominator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	DesertionFailedError  f  =  getFraction(numerator,  denominator,  denominator);	  DesertionFailedError    f    =    getFraction(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
196	[BUG]  [BUGGY]  DesertionFailedError  numerator  =  getFraction(numerator,  denominator);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  DesertionFailedError  numerator  =  getFraction(numerator,  denominator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	DesertionFailedError  numerator  =  getFraction(numerator,  denominator);	  DesertionFailedError    f    =    getFraction(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
197	[BUG]  [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  hashCode);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  hashCode);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  getDenominator(numerator,  denominator,  hashCode);	  int    denominator    =    getDenominator(numerator,    denominator);    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	29	None	replace
198	[BUG]  [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  numerator);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  numerator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  getDenominator(numerator,  denominator,  numerator);	  int    denominator    =    getDenominator(numerator,    denominator);    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	29	None	replace
199	[BUG]  [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  0);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  0);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  getDenominator(numerator,  denominator,  0);	  int    denominator    =    getDenominator(numerator,    denominator);    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	29	None	replace
200	[BUG]  [BUGGY]  Integer  denominator  =  getDenominator(0);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Integer  denominator  =  getDenominator(0);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Integer  denominator  =  getDenominator(0);	  Integer    denominator    =    getDenominator();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	14	None	replace
201	[BUG]  [BUGGY]  Integer  denominator  =  getDenominator(denominator);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Integer  denominator  =  getDenominator(denominator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Integer  denominator  =  getDenominator(denominator);	  Integer    denominator    =    getDenominator();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	14	None	replace
202	[BUG]  [BUGGY]  Integer  denominator  =  getDenominator().denominator;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Integer  denominator  =  getDenominator().denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Integer  denominator  =  getDenominator().denominator;	  Integer    denominator    =    getDenominator();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	14	None	replace
203	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  =  numerator;  denominator  =  numerator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	denominator    =    numerator;    denominator  =  numerator;	  	compilable	  [FE]  AssertionFailedError  	24	5	add
204	[BUG]  [BUGGY]  denominator  =  numerator;  denominator  =  numerator;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  =  numerator;  denominator  =  numerator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	denominator    =    numerator;    denominator  =  numerator;	  	compilable	  [FE]  AssertionFailedError  	24	5	add
205	[BUG]  [BUGGY]  denominator  =  numerator;  desnominator  =  numerator;  [CE]  cannot  find  symbol  desnominator  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  =  numerator;  desnominator  =  numerator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	denominator    =    numerator;    desnominator  =  numerator;	  	non-compiled	[CE]  cannot  find  symbol  desnominator	24	None	add
206	[BUG]  [BUGGY]  denominator  =  numerator;  int  denominator  =  numerator;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  =  numerator;  int  denominator  =  numerator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	denominator    =    numerator;    int  denominator  =  numerator;	  	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	24	None	add
207	[BUG]  [BUGGY]  denominator  =  numerator;  dernominator  =  numerator;  [CE]  cannot  find  symbol  dernominator  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  =  numerator;  dernominator  =  numerator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	denominator    =    numerator;    dernominator  =  numerator;	  	non-compiled	[CE]  cannot  find  symbol  dernominator	24	None	add
208	[BUG]  [BUGGY]  int  numerator  =  toProperString.indexOf(denominator,  0);  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  toProperString.indexOf(denominator,  0);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  toProperString.indexOf(denominator,  0);	  int    numerator    =    toProperString.indexOf(denominator);    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	72	None	replace
209	[BUG]  [BUGGY]  int  numerator  =  toProperString.lastIndexOf(denominator);  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  toProperString.lastIndexOf(denominator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  toProperString.lastIndexOf(denominator);	  int    numerator    =    toProperString.indexOf(denominator);    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	72	None	replace
210	[BUG]  [BUGGY]  int  numerator  =  toProperString.indexOf(denominator,  hashCode);  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  toProperString.indexOf(denominator,  hashCode);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  toProperString.indexOf(denominator,  hashCode);	  int    numerator    =    toProperString.indexOf(denominator);    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	72	None	replace
211	[BUG]  [BUGGY]  int  numerator  =  toProperString.indexOf(numerator,  denominator);  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  toProperString.indexOf(numerator,  denominator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  toProperString.indexOf(numerator,  denominator);	  int    numerator    =    toProperString.indexOf(denominator);    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	72	None	replace
212	[BUG]  [BUGGY]  int  denominator  =  toProperString.hashCode()  /  denominator;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  toProperString.hashCode()  /  denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  toProperString.hashCode()  /  denominator;	  int    denominator    =    toProperString.hashCode()    *    denominator;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	58	None	replace
213	[BUG]  [BUGGY]  int  denominator  =  toProperString.hashCode()  *  ZERO;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  toProperString.hashCode()  *  ZERO;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  toProperString.hashCode()  *  ZERO;	  int    denominator    =    toProperString.hashCode()    *    denominator;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	58	None	replace
214	[BUG]  [BUGGY]  int  denominator  =  toProperString.hashCode()  *  numerator;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  toProperString.hashCode()  *  numerator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  toProperString.hashCode()  *  numerator;	  int    denominator    =    toProperString.hashCode()    *    denominator;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	58	None	replace
215	[BUG]  [BUGGY]  int  numerator  =  getDenominator(denominator);  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  getDenominator(denominator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  getDenominator(denominator);	  int    numerator    =    getNumerator(numerator);    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	88	None	replace
216	[BUG]  [BUGGY]  int  numerator  =  getNumber(denominator);  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  getNumber(denominator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  getNumber(denominator);	  int    numerator    =    getNumerator(numerator);    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	88	None	replace
217	[BUG]  [BUGGY]  moresuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  moresuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	moresuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
218	[BUG]  [BUGGY]  Numerator  denominator  =  -1;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Numerator  denominator  =  -1;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Numerator  denominator  =  -1;	  numerator    =    -1;    if(denominator    <    0)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "overflow:    can't    negate   ");    }    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
219	[BUG]  [BUGGY]  mecanicicallyTrue(denominator  <  0);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  mecanicicallyTrue(denominator  <  0);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	mecanicicallyTrue(denominator  <  0);	  maticallyTrue(numerator    <    0);    mecanicicallyTrue(denominator    <    0);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
220	[BUG]  [BUGGY]  mecanicicallyTrue(numerator  <  0);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  mecanicicallyTrue(numerator  <  0);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	mecanicicallyTrue(numerator  <  0);	  maticallyTrue(numerator    <    0);    mecanicicallyTrue(denominator    <    0);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
221	[BUG]  [BUGGY]  mecanicicallyTrue(numerator  <  0,  denominator);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  mecanicicallyTrue(numerator  <  0,  denominator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	mecanicicallyTrue(numerator  <  0,  denominator);	  maticallyTrue(numerator    <    0);    mecanicicallyTrue(denominator    <    0);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
222	[BUG]  [BUGGY]  maticicallyTrue(denominator  <  0);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  maticicallyTrue(denominator  <  0);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	maticicallyTrue(denominator  <  0);	  maticallyTrue(numerator    <    0);    mecanicicallyTrue(denominator    <    0);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
223	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  =  -numerator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	denominator  =  -numerator;	  hingegenominator    =    -denominator;    	compilable	  [FE]  AssertionFailedError  	43	5	replace
224	[BUG]  [BUGGY]  denominator  =  -numerator;  [FE]  AssertionFailedError  [FE]        ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  =  -numerator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	denominator  =  -numerator;	  hingegenominator    =    -denominator;    	compilable	  [FE]  AssertionFailedError  	43	5	replace
225	[BUG]  [BUGGY]  municipiulsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  municipiulsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	municipiulsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetimunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiul    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
226	[BUG]  [BUGGY]  ffesuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  ffesuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	ffesuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetimunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiul    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
227	[BUG]  [BUGGY]  int  numerator  =  getNumerator(numerator,  denominator,  hashCode);  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  getNumerator(numerator,  denominator,  hashCode);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  getNumerator(numerator,  denominator,  hashCode);	  int    numerator    =    getNumerator(denominator,    denominator);    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	54	None	replace
228	[BUG]  [BUGGY]  int  numerator  =  getNumerator(numerator,  denominator,  ZERO);  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  getNumerator(numerator,  denominator,  ZERO);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  getNumerator(numerator,  denominator,  ZERO);	  int    numerator    =    getNumerator(denominator,    denominator);    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	54	None	replace
229	[BUG]  [BUGGY]  int  numerator  =  getNumerator(numerator,  denominator,  0);  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  getNumerator(numerator,  denominator,  0);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  getNumerator(numerator,  denominator,  0);	  int    numerator    =    getNumerator(denominator,    denominator);    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	54	None	replace
230	[BUG]  [BUGGY]  int  denominator  =  toProperString.hashCode()  /  1;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  toProperString.hashCode()  /  1;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  toProperString.hashCode()  /  1;	  int    denominator    =    toProperString.hashCode()    +    1;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	57	None	replace
231	[BUG]  [BUGGY]  Integer  denominator  =  getDenominator(numerator,  denominator);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Integer  denominator  =  getDenominator(numerator,  denominator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Integer  denominator  =  getDenominator(numerator,  denominator);	  Integer    denominator    =    getDenominator(numerator);    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	15	None	replace
232	[BUG]  [BUGGY]  Integer  denominator  =  getDenominator(denominator,  numerator);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Integer  denominator  =  getDenominator(denominator,  numerator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Integer  denominator  =  getDenominator(denominator,  numerator);	  Integer    denominator    =    getDenominator(numerator);    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	15	None	replace
233	[BUG]  [BUGGY]  Integer  denominator  =  getDenominator(denominator,  0);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Integer  denominator  =  getDenominator(denominator,  0);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Integer  denominator  =  getDenominator(denominator,  0);	  Integer    denominator    =    getDenominator(numerator);    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	15	None	replace
234	[BUG]  [BUGGY]  int  denominator  =  toProperString.length()  /  2;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  toProperString.length()  /  2;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  toProperString.length()  /  2;	  int    denominator    =    toProperString.length()    *    2;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	41	None	replace
235	[BUG]  [BUGGY]  int  numerator  =  getNumerator(denominator,  numerator);  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  getNumerator(denominator,  numerator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  getNumerator(denominator,  numerator);	  int    numerator    =    getNumerator(numerator,    denominator);    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	53	None	replace
236	[BUG]  [BUGGY]  Numerator  <  0  ||  denominator  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Numerator  <  0  ||  denominator  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Numerator  <  0  ||  denominator  ==  0)  {  throw  new  ArithmeticException( " ");  }	  Numerator    <    0    ||    denominator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	85	None	replace
237	[BUG]  [BUGGY]  Numerator  <  0  ||  denominator  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Numerator  <  0  ||  denominator  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Numerator  <  0  ||  denominator  >=  0)  {  throw  new  ArithmeticException( " ");  }	  Numerator    <    0    ||    denominator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	85	None	replace
238	[BUG]  [BUGGY]  Numerator  <  0  ||  denominator  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Numerator  <  0  ||  denominator  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Numerator  <  0  ||  denominator  >  0)  {  throw  new  ArithmeticException( " ");  }	  Numerator    <    0    ||    denominator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	85	None	replace
239	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  =  numerator  +  denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	denominator  =  numerator  +  denominator;	  hingegenominator    =    numerator    +    denominator;    	compilable	  [FE]  AssertionFailedError  	45	3	replace
240	[BUG]  [BUGGY]  denominator  =  numerator  +  denominator;  [FE]  AssertionFailedError  [FE]            ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  =  numerator  +  denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	denominator  =  numerator  +  denominator;	  hingegenominator    =    numerator    +    denominator;    	compilable	  [FE]  AssertionFailedError  	45	3	replace
241	[BUG]  [BUGGY]  nominator  =  numerator  +  denominator;  [CE]  cannot  find  symbol  nominator  [FE]              ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  nominator  =  numerator  +  denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	nominator  =  numerator  +  denominator;	  hingegenominator    =    numerator    +    denominator;    	non-compiled	[CE]  cannot  find  symbol  nominator	45	None	replace
242	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  numerator  +  denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator  =  numerator  +  denominator;	  hingegenominator    =    numerator    +    denominator;    	compilable	  [FE]  AssertionFailedError  	45	3	replace
243	[BUG]  [BUGGY]  numerator  =  numerator  +  denominator;  [FE]  AssertionFailedError  [FE]                ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  numerator  +  denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator  =  numerator  +  denominator;	  hingegenominator    =    numerator    +    denominator;    	compilable	  [FE]  AssertionFailedError  	45	3	replace
244	[BUG]  [BUGGY]  Numerator  numerator  =  -1;  denominator  =  numerator;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Numerator  numerator  =  -1;  denominator  =  numerator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Numerator  numerator  =  -1;  denominator  =  numerator;	  Numerator    numerator    =    numerator;    denominator    =    numerator;    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
245	[BUG]  [BUGGY]  Numerator  numerator  =  0;  denominator  =  numerator;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Numerator  numerator  =  0;  denominator  =  numerator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Numerator  numerator  =  0;  denominator  =  numerator;	  Numerator    numerator    =    numerator;    denominator    =    numerator;    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
246	[BUG]  [BUGGY]  Numerator  numerator  =  numerator;  denominator  =  -denominator;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Numerator  numerator  =  numerator;  denominator  =  -denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Numerator  numerator  =  numerator;  denominator  =  -denominator;	  Numerator    numerator    =    numerator;    denominator    =    numerator;    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
247	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  denominator  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    return    new    Fraction(numerator,    denominator);    }    denominator  =  -denominator;	  	compilable	  [FE]  AssertionFailedError  	97	5	add
248	[BUG]  [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  denominator  =  -denominator;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  denominator  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    return    new    Fraction(numerator,    denominator);    }    denominator  =  -denominator;	  	compilable	  [FE]  AssertionFailedError  	97	5	add
249	[BUG]  [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  int  denominator  =  numerator.intValue();  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  int  denominator  =  numerator.intValue();  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    return    new    Fraction(numerator,    denominator);    }    int  denominator  =  numerator.intValue();	  	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	97	None	add
250	[BUG]  [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  int  denominator  =  getDenominator();  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  int  denominator  =  getDenominator();  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    return    new    Fraction(numerator,    denominator);    }    int  denominator  =  getDenominator();	  	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	97	None	add
251	[BUG]  [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  int  denominator  =  numerator;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  int  denominator  =  numerator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    return    new    Fraction(numerator,    denominator);    }    int  denominator  =  numerator;	  	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	97	None	add
252	[BUG]  [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  int  denominator  =  getDenominator(numerator);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]            AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  int  denominator  =  getDenominator(numerator);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    return    new    Fraction(numerator,    denominator);    }    int  denominator  =  getDenominator(numerator);	  	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	97	None	add
253	[BUG]  [BUGGY]  Integer  denominator  =  numerator.intValue()  +  1;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Integer  denominator  =  numerator.intValue()  +  1;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Integer  denominator  =  numerator.intValue()  +  1;	  Integer    denominator    =    numerator.intValue();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	16	None	replace
254	[BUG]  [BUGGY]  Integer  denominator  =  ZERO.intValue();  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Integer  denominator  =  ZERO.intValue();  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Integer  denominator  =  ZERO.intValue();	  Integer    denominator    =    numerator.intValue();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	16	None	replace
255	[BUG]  [BUGGY]  Integer  denominator  =  numerator.intValue()  -  1;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Integer  denominator  =  numerator.intValue()  -  1;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Integer  denominator  =  numerator.intValue()  -  1;	  Integer    denominator    =    numerator.intValue();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	16	None	replace
256	[BUG]  [BUGGY]  Integer  denominator  =  numerator.intValue()  *  denominator;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Integer  denominator  =  numerator.intValue()  *  denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Integer  denominator  =  numerator.intValue()  *  denominator;	  Integer    denominator    =    numerator.intValue();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	16	None	replace
257	[BUG]  [BUGGY]  int  denominator  =  -denominator;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  -denominator;	  numerator    =    -denominator;    int    denominator    =    -denominator;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	52	None	replace
258	[BUG]  [BUGGY]  null  =  numerator;  int  denominator  =  -denominator;  [CE]  unexpected  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  null  =  numerator;  int  denominator  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	null  =  numerator;  int  denominator  =  -denominator;	  numerator    =    -denominator;    int    denominator    =    -denominator;    	non-compiled	[CE]  unexpected  type	52	None	replace
259	[BUG]  [BUGGY]  null  denominator  =  -denominator;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  null  denominator  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	null  denominator  =  -denominator;	  numerator    =    -denominator;    int    denominator    =    -denominator;    	non-compiled	[CE]  not  a  statement	52	None	replace
260	[BUG]  [BUGGY]  variant  <  0)  {  throw  new  ArithmeticException( " ",  numerator);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  variant  <  0)  {  throw  new  ArithmeticException( " ",  numerator);  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	variant  <  0)  {  throw  new  ArithmeticException( " ",  numerator);  }	          if(denominator    <    0)    {    throw    new    ArithmeticException(       "       ");    }    if(denominator    <    0)    {    throw    new    ArithmeticException(   ",       ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	75	None	replace
261	[BUG]  [BUGGY]  variant  <  0)  {  throw  new  ArithmeticException( ", ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]      ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  variant  <  0)  {  throw  new  ArithmeticException( ", ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	variant  <  0)  {  throw  new  ArithmeticException( ", ");  }	          if(denominator    <    0)    {    throw    new    ArithmeticException(       "       ");    }    if(denominator    <    0)    {    throw    new    ArithmeticException(   ",       ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	75	None	replace
262	[BUG]  [BUGGY]  numerator  =  0;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( "overflow:  can't  negate  [CE]  unclosed  string  literal  [FE]    ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  0;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( "overflow:  can't  negate  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator  =  0;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( "overflow:  can't  negate	  numerator    =    -1;    if(denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    else    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	8	None	replace
263	[BUG]  [BUGGY]  numerator  =  0;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( "Overflow:  can't  negate  [CE]  unclosed  string  literal  [FE]      ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  0;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( "Overflow:  can't  negate  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator  =  0;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( "Overflow:  can't  negate	  numerator    =    -1;    if(denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    else    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	8	None	replace
264	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]        ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  0;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator  =  0;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }	  numerator    =    -1;    if(denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    else    {    throw    new    ArithmeticException(   "   ");    }    	compilable	  [FE]  ArithmeticException  	8	3	replace
265	[BUG]  [BUGGY]  numerator  =  0;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [FE]  ArithmeticException  [FE]        ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  0;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator  =  0;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }	  numerator    =    -1;    if(denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    else    {    throw    new    ArithmeticException(   "   ");    }    	compilable	  [FE]  ArithmeticException  	8	3	replace
266	[BUG]  [BUGGY]  int  numerator  =  -1;  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]          AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  -1;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  -1;	  numerator    =    -1;    int    numerator    =    -1;    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	60	None	replace
267	[BUG]  [BUGGY]  null  numerator  =  -1;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  null  numerator  =  -1;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	null  numerator  =  -1;	  numerator    =    -1;    int    numerator    =    -1;    	non-compiled	[CE]  not  a  statement	60	None	replace
268	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  0;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator  =  0;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  numerator    =    -1;    if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	4	4	replace
269	[BUG]  [BUGGY]  numerator  =  0;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  0;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator  =  0;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  numerator    =    -1;    if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	4	4	replace
270	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  0;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator  =  0;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	  numerator    =    -1;    if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	4	4	replace
271	[BUG]  [BUGGY]  numerator  =  0;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  0;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator  =  0;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	  numerator    =    -1;    if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	4	4	replace
272	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    numerator  =  -1;  numerator  =  -1;  numerator  =  -1;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -1;        numerator    =    -1;    numerator  =  -1;  numerator  =  -1;	  	compilable	  [FE]  AssertionFailedError  	1	3	add
273	[BUG]  [BUGGY]  numerator    =    -1;    numerator  =  -1;  numerator  =  -1;  numerator  =  -1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    numerator  =  -1;  numerator  =  -1;  numerator  =  -1;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        numerator    =    -1;    numerator  =  -1;  numerator  =  -1;	  	compilable	  [FE]  AssertionFailedError  	1	3	add
274	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    numerator  =  -1;  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  numerator  =  -1;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -1;        numerator    =    -1;    if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  numerator  =  -1;  }	  	compilable	  [FE]  AssertionFailedError  	1	3	add
275	[BUG]  [BUGGY]  numerator    =    -1;    numerator  =  -1;  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  numerator  =  -1;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    numerator  =  -1;  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  numerator  =  -1;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        numerator    =    -1;    if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  numerator  =  -1;  }	  	compilable	  [FE]  AssertionFailedError  	1	3	add
276	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    numerator  =  -1;  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -1;        numerator    =    -1;    if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	1	3	add
277	[BUG]  [BUGGY]  numerator    =    -1;    numerator  =  -1;  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    numerator  =  -1;  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        numerator    =    -1;    if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	1	3	add
278	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    numerator  =  -1;  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  numerator  =  -1;  numerator  =  -1;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -1;        numerator    =    -1;    if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  numerator  =  -1;  numerator  =  -1;  }	  	compilable	  [FE]  AssertionFailedError  	1	3	add
279	[BUG]  [BUGGY]  numerator    =    -1;    numerator  =  -1;  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  numerator  =  -1;  numerator  =  -1;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    numerator  =  -1;  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  numerator  =  -1;  numerator  =  -1;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        numerator    =    -1;    if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  numerator  =  -1;  numerator  =  -1;  }	  	compilable	  [FE]  AssertionFailedError  	1	3	add
280	[BUG]  [BUGGY]  mutator  =  getFraction(numerator,  denominator);  [CE]  cannot  find  symbol  mutator  [FE]          ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  mutator  =  getFraction(numerator,  denominator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	mutator  =  getFraction(numerator,  denominator);	          if(denominator    <    0)    {    throw    new    ArithmeticException(       "       ");    }    if(denominator    <    0)    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  cannot  find  symbol  mutator	20	None	replace
281	[BUG]  [BUGGY]  mutation(numerator,  denominator);  [CE]  cannot  find  symbol  [FE]            ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  mutation(numerator,  denominator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	mutation(numerator,  denominator);	          if(denominator    <    0)    {    throw    new    ArithmeticException(       "       ");    }    if(denominator    <    0)    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
282	[BUG]  [BUGGY]  numerator  =  -1;  Numerator  =  -denominator;  [CE]  cannot  find  symbol  Numerator  [FE]        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  -1;  Numerator  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator  =  -1;  Numerator  =  -denominator;	  numerator    =    -denominator;    Numerator    =    -denominator;    	non-compiled	[CE]  cannot  find  symbol  Numerator	68	None	replace
283	[BUG]  [BUGGY]  int  numerator  =  toProperString.hashCode()  -  denominator;  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  toProperString.hashCode()  -  denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  toProperString.hashCode()  -  denominator;	  int    numerator    =    toProperString.hashCode()    +    denominator;    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	32	None	replace
284	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    denominator  =  -1;  numerator  =  -1;  denominator  =  -1;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -1;        denominator    =    -1;    numerator  =  -1;  denominator  =  -1;	  	compilable	  [FE]  AssertionFailedError  	61	5	add
285	[BUG]  [BUGGY]  numerator    =    -1;    denominator  =  -1;  numerator  =  -1;  denominator  =  -1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    denominator  =  -1;  numerator  =  -1;  denominator  =  -1;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        denominator    =    -1;    numerator  =  -1;  denominator  =  -1;	  	compilable	  [FE]  AssertionFailedError  	61	5	add
286	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    denominator  =  -1;  if(denominator  <  0)  {  numerator  =  -1;  denominator  =  -1;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -1;        denominator    =    -1;    if(denominator  <  0)  {  numerator  =  -1;  denominator  =  -1;  }	  	compilable	  [FE]  AssertionFailedError  	61	5	add
287	[BUG]  [BUGGY]  numerator    =    -1;    denominator  =  -1;  if(denominator  <  0)  {  numerator  =  -1;  denominator  =  -1;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    denominator  =  -1;  if(denominator  <  0)  {  numerator  =  -1;  denominator  =  -1;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        denominator    =    -1;    if(denominator  <  0)  {  numerator  =  -1;  denominator  =  -1;  }	  	compilable	  [FE]  AssertionFailedError  	61	5	add
288	[BUG]  [BUGGY]  numerator    =    -1;    denominator  =  -1;  int  numerator  =  -1;  denominator  =  -1;  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    denominator  =  -1;  int  numerator  =  -1;  denominator  =  -1;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        denominator    =    -1;    int  numerator  =  -1;  denominator  =  -1;	  	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	61	None	add
289	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    denominator  =  -1;  denominator  =  -1;  denominator  =  -1;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -1;        denominator    =    -1;    denominator  =  -1;  denominator  =  -1;	  	compilable	  [FE]  AssertionFailedError  	61	5	add
290	[BUG]  [BUGGY]  numerator    =    -1;    denominator  =  -1;  denominator  =  -1;  denominator  =  -1;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    denominator  =  -1;  denominator  =  -1;  denominator  =  -1;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        denominator    =    -1;    denominator  =  -1;  denominator  =  -1;	  	compilable	  [FE]  AssertionFailedError  	61	5	add
291	[BUG]  [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException(   "   ");  }  int  denominator  =  numerator.intValue();  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException(   "   ");  }  int  denominator  =  numerator.intValue();  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    throw    new    ArithmeticException(   "   ");    }    int  denominator  =  numerator.intValue();	  	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	95	None	add
292	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException(   "   ");  }  denominator  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    throw    new    ArithmeticException(   "   ");    }    denominator  =  -denominator;	  	compilable	  [FE]  AssertionFailedError  	95	5	add
293	[BUG]  [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException(   "   ");  }  denominator  =  -denominator;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException(   "   ");  }  denominator  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    throw    new    ArithmeticException(   "   ");    }    denominator  =  -denominator;	  	compilable	  [FE]  AssertionFailedError  	95	5	add
294	[BUG]  [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException(   "   ");  }  int  denominator  =  toProperString.length();  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException(   "   ");  }  int  denominator  =  toProperString.length();  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    throw    new    ArithmeticException(   "   ");    }    int  denominator  =  toProperString.length();	  	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	95	None	add
295	[BUG]  [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException(   "   ");  }  int  denominator  =  toProperString.hashCode();  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException(   "   ");  }  int  denominator  =  toProperString.hashCode();  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    throw    new    ArithmeticException(   "   ");    }    int  denominator  =  toProperString.hashCode();	  	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	95	None	add
296	[BUG]  [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException(   "   ");  }  int  denominator  =  numerator;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]            AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException(   "   ");  }  int  denominator  =  numerator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    throw    new    ArithmeticException(   "   ");    }    int  denominator  =  numerator;	  	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	95	None	add
297	[BUG]  [BUGGY]  DesominatorFailedToNegativeFraction(numerator,  denominator,  denominator);  [CE]  cannot  find  symbol  [FE]        ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  DesominatorFailedToNegativeFraction(numerator,  denominator,  denominator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	DesominatorFailedToNegativeFraction(numerator,  denominator,  denominator);	  DesertionFailedToNegativeFraction(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
298	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]    ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    else    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
299	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    else    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  }	  	compilable	  [FE]  ArithmeticException  	7	3	add
300	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  }  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    else    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  }	  	compilable	  [FE]  ArithmeticException  	7	3	add
301	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]        ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( " ");  }  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    else    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( " ");  }  }	  	compilable	  [FE]  ArithmeticException  	7	3	add
302	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( " ");  }  }  [FE]  ArithmeticException  [FE]        ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( " ");  }  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    else    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( " ");  }  }	  	compilable	  [FE]  ArithmeticException  	7	3	add
303	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate  [CE]  unclosed  string  literal  [FE]          ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    else    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate	  	non-compiled	[CE]  unclosed  string  literal	7	None	add
304	[BUG]  [BUGGY]  nominator  =  -denominator;  [CE]  cannot  find  symbol  nominator  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  nominator  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	nominator  =  -denominator;	  numerator    =    -denominator;    if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  nominator	96	None	replace
305	[BUG]  [BUGGY]  int  numerator  =  getNumeratorCount(denominator);  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  getNumeratorCount(denominator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  getNumeratorCount(denominator);	  int    numerator    =    getNumerator(0);    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	12	None	replace
306	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  int  denominator  =  getDenominator();  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  int  denominator  =  getDenominator();  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    <    0)    {    numerator    =    -1;    }    else    {    throw    new    ArithmeticException(   "   ");    }    int  denominator  =  getDenominator();	  	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	9	None	add
307	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  Integer  denominator  =  -denominator;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  Integer  denominator  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    <    0)    {    numerator    =    -1;    }    else    {    throw    new    ArithmeticException(   "   ");    }    Integer  denominator  =  -denominator;	  	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	9	None	add
308	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  int  denominator  =  getDenominator(numerator);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  int  denominator  =  getDenominator(numerator);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    <    0)    {    numerator    =    -1;    }    else    {    throw    new    ArithmeticException(   "   ");    }    int  denominator  =  getDenominator(numerator);	  	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	9	None	add
309	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  int  denominator  =  numerator;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  int  denominator  =  numerator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    <    0)    {    numerator    =    -1;    }    else    {    throw    new    ArithmeticException(   "   ");    }    int  denominator  =  numerator;	  	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	9	None	add
310	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  Numerator  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  Numerator  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    Numerator  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
311	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
312	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  }	  	compilable	  [FE]  AssertionFailedError  	3	3	add
313	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  }	  	compilable	  [FE]  AssertionFailedError  	3	3	add
314	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	  	compilable	  [FE]  AssertionFailedError  	3	3	add
315	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	  	compilable	  [FE]  AssertionFailedError  	3	3	add
316	[BUG]  [BUGGY]  numerator    =    -1;    denominator  =  -1;  Numerator  =  -1;  denominator  =  -1;  [CE]  cannot  find  symbol  Numerator  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    denominator  =  -1;  Numerator  =  -1;  denominator  =  -1;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        denominator    =    -1;    Numerator  =  -1;  denominator  =  -1;	  	non-compiled	[CE]  cannot  find  symbol  Numerator	61	None	add
317	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    denominator  =  -1;  if(denominator  ==  0)  {  numerator  =  -1;  denominator  =  -1;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -1;        denominator    =    -1;    if(denominator  ==  0)  {  numerator  =  -1;  denominator  =  -1;  }	  	compilable	  [FE]  AssertionFailedError  	61	5	add
318	[BUG]  [BUGGY]  numerator    =    -1;    denominator  =  -1;  if(denominator  ==  0)  {  numerator  =  -1;  denominator  =  -1;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    denominator  =  -1;  if(denominator  ==  0)  {  numerator  =  -1;  denominator  =  -1;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        denominator    =    -1;    if(denominator  ==  0)  {  numerator  =  -1;  denominator  =  -1;  }	  	compilable	  [FE]  AssertionFailedError  	61	5	add
319	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  if(denominator  <  0)  {  numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    if(denominator  <  0)  {  numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  }	  	compilable	  [FE]  AssertionFailedError  	93	5	add
320	[BUG]  [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  if(denominator  <  0)  {  numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  if(denominator  <  0)  {  numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    if(denominator  <  0)  {  numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  }	  	compilable	  [FE]  AssertionFailedError  	93	5	add
321	[BUG]  [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  if(denominator  <  0)  {  numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  if(denominator  <  0)  {  numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    if(denominator  <  0)  {  numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }	  	non-compiled	[CE]  illegal  start  of  expression	93	None	add
322	[BUG]  [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  if(denominator  <  0)  {  numerator  =  -denominator;  if(denominator  <  0)  {  denominator  =  -denominator;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  if(denominator  <  0)  {  numerator  =  -denominator;  if(denominator  <  0)  {  denominator  =  -denominator;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    if(denominator  <  0)  {  numerator  =  -denominator;  if(denominator  <  0)  {  denominator  =  -denominator;  }	  	non-compiled	[CE]  illegal  start  of  expression	93	None	add
323	[BUG]  [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  if(denominator  <  0)  {  numerator  =  -denominator;  if(denominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  if(denominator  <  0)  {  numerator  =  -denominator;  if(denominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    if(denominator  <  0)  {  numerator  =  -denominator;  if(denominator  <  0)  {  throw  new  ArithmeticException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	93	None	add
324	[BUG]  [BUGGY]  denominator  =  maticallyNull(numerator,  denominator);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  =  maticallyNull(numerator,  denominator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	denominator  =  maticallyNull(numerator,  denominator);	  maticallyNull(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
325	[BUG]  [BUGGY]  denominatorotwithstandingNull(numerator,  denominator);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominatorotwithstandingNull(numerator,  denominator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	denominatorotwithstandingNull(numerator,  denominator);	  maticallyNull(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
326	[BUG]  [BUGGY]  Numerator  numerator  =  denominator.evaluate(numerator);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Numerator  numerator  =  denominator.evaluate(numerator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Numerator  numerator  =  denominator.evaluate(numerator);	  maticallyNull(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
327	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  =  -denominator  +  1;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	denominator  =  -denominator  +  1;	  denominator    =    -denominator;    	compilable	  [FE]  AssertionFailedError  	22	3	replace
328	[BUG]  [BUGGY]  denominator  =  -denominator  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  =  -denominator  +  1;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	denominator  =  -denominator  +  1;	  denominator    =    -denominator;    	compilable	  [FE]  AssertionFailedError  	22	3	replace
329	[BUG]  [BUGGY]  denominator  =  numerator;  derominator  =  numerator;  [CE]  cannot  find  symbol  derominator  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  =  numerator;  derominator  =  numerator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	denominator    =    numerator;    derominator  =  numerator;	  	non-compiled	[CE]  cannot  find  symbol  derominator	24	None	add
330	[BUG]  [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException(   "   ");  }  int  denominator  =  getDenominator();  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException(   "   ");  }  int  denominator  =  getDenominator();  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    throw    new    ArithmeticException(   "   ");    }    int  denominator  =  getDenominator();	  	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	95	None	add
331	[BUG]  [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException(   "   ");  }  int  denominator  =  getDenominator(numerator);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException(   "   ");  }  int  denominator  =  getDenominator(numerator);  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    throw    new    ArithmeticException(   "   ");    }    int  denominator  =  getDenominator(numerator);	  	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	95	None	add
332	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException(   "   ");  }  numerator  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    throw    new    ArithmeticException(   "   ");    }    numerator  =  -denominator;	  	compilable	  [FE]  AssertionFailedError  	95	5	add
333	[BUG]  [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException(   "   ");  }  numerator  =  -denominator;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException(   "   ");  }  numerator  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    throw    new    ArithmeticException(   "   ");    }    numerator  =  -denominator;	  	compilable	  [FE]  AssertionFailedError  	95	5	add
334	[BUG]  [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException(   "   ");  }  Integer  denominator  =  getDenominator();  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException(   "   ");  }  Integer  denominator  =  getDenominator();  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    throw    new    ArithmeticException(   "   ");    }    Integer  denominator  =  getDenominator();	  	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	95	None	add
335	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  if(denominator  <  0)  {  numerator  =  numerator;  denominator  =  -denominator;  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	if(denominator  <  0)  {  numerator  =  numerator;  denominator  =  -denominator;  }	  numerator    =    numerator;    denominator    =    -denominator;    	compilable	  [FE]  AssertionFailedError  	66	4	replace
336	[BUG]  [BUGGY]  if(denominator  <  0)  {  numerator  =  numerator;  denominator  =  -denominator;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  if(denominator  <  0)  {  numerator  =  numerator;  denominator  =  -denominator;  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	if(denominator  <  0)  {  numerator  =  numerator;  denominator  =  -denominator;  }	  numerator    =    numerator;    denominator    =    -denominator;    	compilable	  [FE]  AssertionFailedError  	66	4	replace
337	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  if(denominator  <  0)  {  numerator  =  numerator;  denominator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	if(denominator  <  0)  {  numerator  =  numerator;  denominator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }	  numerator    =    numerator;    denominator    =    -denominator;    	compilable	  [FE]  AssertionFailedError  	66	4	replace
338	[BUG]  [BUGGY]  if(denominator  <  0)  {  numerator  =  numerator;  denominator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  if(denominator  <  0)  {  numerator  =  numerator;  denominator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	if(denominator  <  0)  {  numerator  =  numerator;  denominator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }	  numerator    =    numerator;    denominator    =    -denominator;    	compilable	  [FE]  AssertionFailedError  	66	4	replace
339	[BUG]  [BUGGY]  int  numerator  =  getNumerator(numerator,  denominator,  denominator);  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  getNumerator(numerator,  denominator,  denominator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  getNumerator(numerator,  denominator,  denominator);	  int    numerator    =    getNumerator(numerator,    denominator);    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	53	None	replace
340	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  numerator  =  -1;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -1;        numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  numerator  =  -1;  }	  	compilable	  [FE]  AssertionFailedError  	1	3	add
341	[BUG]  [BUGGY]  numerator    =    -1;    numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  numerator  =  -1;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  numerator  =  -1;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  numerator  =  -1;  }	  	compilable	  [FE]  AssertionFailedError  	1	3	add
342	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -1;        numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	1	3	add
343	[BUG]  [BUGGY]  numerator    =    -1;    numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	1	3	add
344	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  numerator  =  -1;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -1;        numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  numerator  =  -1;  }	  	compilable	  [FE]  AssertionFailedError  	1	3	add
345	[BUG]  [BUGGY]  numerator    =    -1;    numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  numerator  =  -1;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  numerator  =  -1;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  numerator  =  -1;  }	  	compilable	  [FE]  AssertionFailedError  	1	3	add
346	[BUG]  [BUGGY]  int  numerator  =  toString.length();  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  toString.length();  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  toString.length();	  int    numerator    =    toProperString.length()    -    1;    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	34	None	replace
347	[BUG]  [BUGGY]  mutator  =  getFraction(numerator);  [CE]  cannot  find  symbol  mutator  [FE]    ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  mutator  =  getFraction(numerator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	mutator  =  getFraction(numerator);	          if(denominator    <    0)    {    throw    new    ArithmeticException(       "       ");    }    if(denominator    <    0)    {    throw    new    ArithmeticException(   ",       ");    }    	non-compiled	[CE]  cannot  find  symbol  mutator	75	None	replace
348	[BUG]  [BUGGY]  mostnotablyTrue(denominator  <  0);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  mostnotablyTrue(denominator  <  0);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	mostnotablyTrue(denominator  <  0);	  maticallyTrue(numerator    <    0);isticallyTrue(denominator    <    0);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
349	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  if(denominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    return    new    Fraction(numerator,    denominator);    }    if(denominator  <  0)  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  ArithmeticException  	97	3	add
350	[BUG]  [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  if(denominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [FE]  ArithmeticException  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  if(denominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    return    new    Fraction(numerator,    denominator);    }    if(denominator  <  0)  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  ArithmeticException  	97	3	add
351	[BUG]  [BUGGY]  int  denominator  =  toProperString.hashCode()  *  FOUR_FIFTHS;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  toProperString.hashCode()  *  FOUR_FIFTHS;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  toProperString.hashCode()  *  FOUR_FIFTHS;	  int    denominator    =    toProperString.hashCode()    *    denominator;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	58	None	replace
352	[BUG]  [BUGGY]  int  denominator  =  toProperString.length()  *  denominator;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  toProperString.length()  *  denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  toProperString.length()  *  denominator;	  int    denominator    =    toProperString.hashCode()    *    denominator;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	58	None	replace
353	[BUG]  [BUGGY]  int  denominator  =  getDenominator(denominator,  -denominator);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  getDenominator(denominator,  -denominator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  getDenominator(denominator,  -denominator);	  int    denominator    =    getDenominator(denominator,    numerator);    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	30	None	replace
354	[BUG]  [BUGGY]  Integer  denominator  =  _denominator.intValue();  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Integer  denominator  =  _denominator.intValue();  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Integer  denominator  =  _denominator.intValue();	  Integer    denominator    =    numerator.intValue();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	16	None	replace
355	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
356	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  }	  	compilable	  [FE]  AssertionFailedError  	5	3	add
357	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  }	  	compilable	  [FE]  AssertionFailedError  	5	3	add
358	[BUG]  [BUGGY]  denominator  =  ZERO;  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  =  ZERO;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	denominator  =  ZERO;	  hingegenominator    =    numerator;    	non-compiled	[CE]  incompatible  types	42	None	replace
359	[BUG]  [BUGGY]  mutators.add(numerator);  [CE]  cannot  find  symbol  mutators  [FE]          ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  mutators.add(numerator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	mutators.add(numerator);	          if(denominator    <    0)    {    throw    new    ArithmeticException(       "       ");    }    if(denominator    <    0)    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  cannot  find  symbol  mutators	20	None	replace
360	[BUG]  [BUGGY]  int  numerator  =  toProperString.indexOf(denominator,  denominator);  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  toProperString.indexOf(denominator,  denominator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  toProperString.indexOf(denominator,  denominator);	  int    numerator    =    toProperString.indexOf(denominator);    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	72	None	replace
361	[BUG]  [BUGGY]  int  denominator  =  toString.indexOf('.',  denominator);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  toString.indexOf('.',  denominator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  toString.indexOf('.',  denominator);	  int    denominator    =    toString.hashCode();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	76	None	replace
362	[BUG]  [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  ZERO);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  ZERO);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  getDenominator(numerator,  denominator,  ZERO);	  int    denominator    =    getDenominator(numerator,    denominator);    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	29	None	replace
363	[BUG]  [BUGGY]  Numerator  numerator  =  FOUR_FIFTHS;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Numerator  numerator  =  FOUR_FIFTHS;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Numerator  numerator  =  FOUR_FIFTHS;	  Numerator    numerator    =    numerator;    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
364	[BUG]  [BUGGY]  Numerator  numerator  =  FOUR_FIFTHS.get(numerator);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Numerator  numerator  =  FOUR_FIFTHS.get(numerator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Numerator  numerator  =  FOUR_FIFTHS.get(numerator);	  Numerator    numerator    =    numerator;    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
365	[BUG]  [BUGGY]  nsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  nsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	nsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
366	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  Integer.MIN_VALUE;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator  =  Integer.MIN_VALUE;	  numerator    =    numerator;    	compilable	  [FE]  ArithmeticException  	27	3	replace
367	[BUG]  [BUGGY]  numerator  =  Integer.MIN_VALUE;  [FE]  ArithmeticException  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  Integer.MIN_VALUE;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator  =  Integer.MIN_VALUE;	  numerator    =    numerator;    	compilable	  [FE]  ArithmeticException  	27	3	replace
368	[BUG]  [BUGGY]  numerator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	  hingeger    <    0    ||    denominator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	86	None	replace
369	[BUG]  [BUGGY]  denominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	denominator  <  0)  {  throw  new  ArithmeticException( " ");  }	  hingeger    <    0    ||    denominator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	86	None	replace
370	[BUG]  [BUGGY]  termicominator  =  numerator  +  denominator;  [CE]  cannot  find  symbol  termicominator  [FE]            ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  termicominator  =  numerator  +  denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	termicominator  =  numerator  +  denominator;	  hingegenominator    =    numerator    +    denominator;    	non-compiled	[CE]  cannot  find  symbol  termicominator	45	None	replace
371	[BUG]  [BUGGY]  int  numerator  =  getNumber().intValue();  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  getNumber().intValue();  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  getNumber().intValue();	  int    numerator    =    getNumber();    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	13	None	replace
372	[BUG]  [BUGGY]  Numerator  numerator  =  ZERO;  denominator  =  numerator;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Numerator  numerator  =  ZERO;  denominator  =  numerator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Numerator  numerator  =  ZERO;  denominator  =  numerator;	  Numerator    numerator    =    numerator;    denominator    =    numerator;    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
373	[BUG]  [BUGGY]  numerator  =  0;  Numerator  =  -1;  [CE]  cannot  find  symbol  Numerator  [FE]        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  0;  Numerator  =  -1;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator  =  0;  Numerator  =  -1;	  numerator    =    -1;    Numerator    =    -1;    	non-compiled	[CE]  cannot  find  symbol  Numerator	59	None	replace
374	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    numerator  =  -denominator;  numerator  =  -1;  numerator  =  -1;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -denominator;        numerator    =    -denominator;    numerator  =  -1;  numerator  =  -1;	  	compilable	  [FE]  AssertionFailedError  	48	3	add
375	[BUG]  [BUGGY]  numerator    =    -denominator;    numerator  =  -denominator;  numerator  =  -1;  numerator  =  -1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    numerator  =  -denominator;  numerator  =  -1;  numerator  =  -1;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        numerator    =    -denominator;    numerator  =  -1;  numerator  =  -1;	  	compilable	  [FE]  AssertionFailedError  	48	3	add
376	[BUG]  [BUGGY]  int  numerator  =  toProperString.indexOf('.',  denominator,  0);  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  toProperString.indexOf('.',  denominator,  0);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  toProperString.indexOf('.',  denominator,  0);	  int    numerator    =    toProperString.indexOf('.',    denominator);    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	102	None	replace
377	[BUG]  [BUGGY]  nominator  =  0;  [CE]  cannot  find  symbol  nominator  [FE]          ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  nominator  =  0;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	nominator  =  0;	  hingegenominator    =    0;    	non-compiled	[CE]  cannot  find  symbol  nominator	44	None	replace
378	[BUG]  [BUGGY]  denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	  hingeger    <    0    ||    denominator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate       ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	87	None	replace
379	[BUG]  [BUGGY]  denominator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	denominator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	  hingeger    <    0    ||    denominator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate       ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	87	None	replace
380	[BUG]  [BUGGY]  DesertionFailedError  f  =  getFraction(numerator,  denominator,  desominator);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  DesertionFailedError  f  =  getFraction(numerator,  denominator,  desominator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	DesertionFailedError  f  =  getFraction(numerator,  denominator,  desominator);	  DesertionFailedError    f    =    getFraction(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
381	[BUG]  [BUGGY]  neminator  =  -denominator;  [CE]  cannot  find  symbol  neminator  [FE]        ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  neminator  =  -denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	neminator  =  -denominator;	  hingegenominator    =    -denominator;    	non-compiled	[CE]  cannot  find  symbol  neminator	43	None	replace
382	[BUG]  [BUGGY]  if(denominator  <  0)  {  numerator  =  -1;  int  numerator  =  -1;  }  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]          AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  if(denominator  <  0)  {  numerator  =  -1;  int  numerator  =  -1;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	if(denominator  <  0)  {  numerator  =  -1;  int  numerator  =  -1;  }	  numerator    =    -1;    int    numerator    =    -1;    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	60	None	replace
383	[BUG]  [BUGGY]  if(denominator  ==  0)  {  numerator  =  -1;  int  numerator  =  -1;  }  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  if(denominator  ==  0)  {  numerator  =  -1;  int  numerator  =  -1;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	if(denominator  ==  0)  {  numerator  =  -1;  int  numerator  =  -1;  }	  numerator    =    -1;    int    numerator    =    -1;    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	60	None	replace
384	[BUG]  [BUGGY]  if(denominator  <  0)  {  numerator  =  -1;  int  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  if(denominator  <  0)  {  numerator  =  -1;  int  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	if(denominator  <  0)  {  numerator  =  -1;  int  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( " ");  }	  numerator    =    -1;    int    numerator    =    -1;    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	60	None	replace
385	[BUG]  [BUGGY]  int  numerator  =  getNumerator(denominator,  -1);  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  getNumerator(denominator,  -1);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  getNumerator(denominator,  -1);	  int    numerator    =    getNumerator(denominator,    0);    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	56	None	replace
386	[BUG]  [BUGGY]  int  numerator  =  getDenominator()  -  denominator;  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  getDenominator()  -  denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  getDenominator()  -  denominator;	  int    numerator    =    getDenominator();    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	78	None	replace
387	[BUG]  [BUGGY]  DeserionFailedToNegative(denominator,  numerator);  [CE]  cannot  find  symbol  [FE]          ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  DeserionFailedToNegative(denominator,  numerator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	DeserionFailedToNegative(denominator,  numerator);	  DesertionFailedToNegative(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
388	[BUG]  [BUGGY]  DeserionFailedToNegative(numerator,  denominator,  numerator);  [CE]  cannot  find  symbol  [FE]            ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  DeserionFailedToNegative(numerator,  denominator,  numerator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	DeserionFailedToNegative(numerator,  denominator,  numerator);	  DesertionFailedToNegative(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
389	[BUG]  [BUGGY]  int  denominator  =  toProperString.length()  *  2  +  ZERO;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  toProperString.length()  *  2  +  ZERO;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  toProperString.length()  *  2  +  ZERO;	  int    denominator    =    toProperString.length()    *    2;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	41	None	replace
390	[BUG]  [BUGGY]  int  denominator  =  toProperString.length()  *  4;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  toProperString.length()  *  4;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  toProperString.length()  *  4;	  int    denominator    =    toProperString.length()    *    2;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	41	None	replace
391	[BUG]  [BUGGY]  int  denominator  =  toProperString.length()  *  2  +  1;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  toProperString.length()  *  2  +  1;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  toProperString.length()  *  2  +  1;	  int    denominator    =    toProperString.length()    *    2;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	41	None	replace
392	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  numerator;  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator    =    numerator;    if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	26	1	add
393	[BUG]  [BUGGY]  numerator  =  numerator;  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  numerator;  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator    =    numerator;    if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	26	1	add
394	[BUG]  [BUGGY]  int  desominator  =  toProperString.length();  [CE]  non-static  variable  toProperString  cannot  be  referenced  from  a  static  context  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  desominator  =  toProperString.length();  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  desominator  =  toProperString.length();	  int    denominator    =    toProperString.length()    -    2;    	non-compiled	[CE]  non-static  variable  toProperString  cannot  be  referenced  from  a  static  context	40	None	replace
395	[BUG]  [BUGGY]  denominator  =  toProperString.length();  [CE]  non-static  variable  toProperString  cannot  be  referenced  from  a  static  context  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  =  toProperString.length();  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	denominator  =  toProperString.length();	  int    denominator    =    toProperString.length()    -    2;    	non-compiled	[CE]  non-static  variable  toProperString  cannot  be  referenced  from  a  static  context	40	None	replace
396	[BUG]  [BUGGY]  mașinicallyTrue(denominator  <  0);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  mașinicallyTrue(denominator  <  0);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	mașinicallyTrue(denominator  <  0);	  maticallyTrue(numerator    <    0);    mecanicicallyTrue(denominator    <    0);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
397	[BUG]  [BUGGY]  numerator    =    -denominator;    denominator  =  -denominator;  Numerator  =  -denominator;  denominator  =  -denominator;  [CE]  cannot  find  symbol  Numerator  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    denominator  =  -denominator;  Numerator  =  -denominator;  denominator  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        denominator    =    -denominator;    Numerator  =  -denominator;  denominator  =  -denominator;	  	non-compiled	[CE]  cannot  find  symbol  Numerator	50	None	add
398	[BUG]  [BUGGY]  int  numerator  =  toProperString.length()  -  denominator  +  1;  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  toProperString.length()  -  denominator  +  1;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  toProperString.length()  -  denominator  +  1;	  int    numerator    =    toProperString.length()    -    denominator;    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	37	None	replace
399	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf('.',  desominator);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  toProperString.indexOf('.',  desominator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  toProperString.indexOf('.',  desominator);	  int    denominator    =    toProperString.indexOf('.',    denominator);    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	77	None	replace
400	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  numerator;  denominator  =  -denominator;  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  numerator;  denominator  =  -denominator;  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator    =    numerator;    denominator    =    -denominator;    if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  numerator;  denominator  =  -denominator;  }	  	compilable	  [FE]  AssertionFailedError  	65	4	add
401	[BUG]  [BUGGY]  numerator  =  numerator;  denominator  =  -denominator;  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  numerator;  denominator  =  -denominator;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  numerator;  denominator  =  -denominator;  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  numerator;  denominator  =  -denominator;  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator    =    numerator;    denominator    =    -denominator;    if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  numerator;  denominator  =  -denominator;  }	  	compilable	  [FE]  AssertionFailedError  	65	4	add
402	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  numerator;  denominator  =  -denominator;  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  numerator  =  numerator;  denominator  =  -denominator;  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator    =    numerator;    denominator    =    -denominator;    if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  numerator  =  numerator;  denominator  =  -denominator;  }	  	compilable	  [FE]  AssertionFailedError  	65	3	add
403	[BUG]  [BUGGY]  numerator  =  numerator;  denominator  =  -denominator;  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  numerator  =  numerator;  denominator  =  -denominator;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  numerator;  denominator  =  -denominator;  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  numerator  =  numerator;  denominator  =  -denominator;  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator    =    numerator;    denominator    =    -denominator;    if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  numerator  =  numerator;  denominator  =  -denominator;  }	  	compilable	  [FE]  AssertionFailedError  	65	3	add
404	[BUG]  [BUGGY]  Numerator  =  -denominator;  [CE]  cannot  find  symbol  Numerator  [FE]        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Numerator  =  -denominator;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Numerator  =  -denominator;	  numerator    =    -denominator;    Numerator    =    -denominator;    	non-compiled	[CE]  cannot  find  symbol  Numerator	68	None	replace
405	[BUG]  [BUGGY]  int  denominator  =  getDenominator().length  -  1;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  getDenominator().length  -  1;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  getDenominator().length  -  1;	  int    denominator    =    getDenominator()    -    1;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	82	None	replace
406	[BUG]  [BUGGY]  Numerator  <?>  numerator  =  -denominator  +  denominator;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Numerator  <?>  numerator  =  -denominator  +  denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Numerator  <?>  numerator  =  -denominator  +  denominator;	  Numerator    <?>    numerator    =    -denominator;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	83	None	replace
407	[BUG]  [BUGGY]  Numerator  <  0  ||  denominator  ==  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Numerator  <  0  ||  denominator  ==  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Numerator  <  0  ||  denominator  ==  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	  Numerator    <    0    ||    denominator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	85	None	replace
408	[BUG]  [BUGGY]  Numerator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Numerator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Numerator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	  Numerator    <    0    ||    denominator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	85	None	replace
409	[BUG]  [BUGGY]  Numerator  <  0  ||  denominator  >=  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Numerator  <  0  ||  denominator  >=  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Numerator  <  0  ||  denominator  >=  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	  Numerator    <    0    ||    denominator    <    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	85	None	replace
410	[BUG]  [BUGGY]  int  numerator  =  getNumerator().denominator  -  1;  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  getNumerator().denominator  -  1;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  getNumerator().denominator  -  1;	  int    numerator    =    getNumerator().denominator;    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	11	None	replace
411	[BUG]  [BUGGY]  denominator  =  -denominator;  derominator  =  -denominator;  [CE]  cannot  find  symbol  derominator  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  =  -denominator;  derominator  =  -denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	denominator    =    -denominator;    derominator  =  -denominator;	  	non-compiled	[CE]  cannot  find  symbol  derominator	21	None	add
412	[BUG]  [BUGGY]  denominator  =  -denominator;  Denominator  =  -denominator;  [CE]  cannot  find  symbol  Denominator  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  =  -denominator;  Denominator  =  -denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	denominator    =    -denominator;    Denominator  =  -denominator;	  	non-compiled	[CE]  cannot  find  symbol  Denominator	21	None	add
413	[BUG]  [BUGGY]  DeserionFailedToNegative(numerator,  denominator,  denominator);  [CE]  cannot  find  symbol  [FE]          ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  DeserionFailedToNegative(numerator,  denominator,  denominator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	DeserionFailedToNegative(numerator,  denominator,  denominator);	  DesertionFailedToNegative(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
414	[BUG]  [BUGGY]  DeserionFailedToNegative(numerator,  denominator,  hashCode);  [CE]  non-static  variable  hashCode  cannot  be  referenced  from  a  static  context  [FE]            ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  DeserionFailedToNegative(numerator,  denominator,  hashCode);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	DeserionFailedToNegative(numerator,  denominator,  hashCode);	  DesertionFailedToNegative(numerator,    denominator);    	non-compiled	[CE]  non-static  variable  hashCode  cannot  be  referenced  from  a  static  context	64	None	replace
415	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }	  numerator    =    -denominator;    if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    return    new    Fraction(numerator,    denominator);    }    	compilable	  [FE]  AssertionFailedError  	98	5	replace
416	[BUG]  [BUGGY]  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }	  numerator    =    -denominator;    if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    return    new    Fraction(numerator,    denominator);    }    	compilable	  [FE]  AssertionFailedError  	98	5	replace
417	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  if(denominator  <  0)  {  numerator  =  -denominator;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	if(denominator  <  0)  {  numerator  =  -denominator;  }	  numerator    =    -denominator;    if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    return    new    Fraction(numerator,    denominator);    }    	compilable	  [FE]  AssertionFailedError  	98	5	replace
418	[BUG]  [BUGGY]  if(denominator  <  0)  {  numerator  =  -denominator;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  if(denominator  <  0)  {  numerator  =  -denominator;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	if(denominator  <  0)  {  numerator  =  -denominator;  }	  numerator    =    -denominator;    if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    return    new    Fraction(numerator,    denominator);    }    	compilable	  [FE]  AssertionFailedError  	98	5	replace
419	[BUG]  [BUGGY]  }  else  if(denominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  type  [FE]          ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  }  else  if(denominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	}  else  if(denominator  <  0)  {  throw  new  ArithmeticException( " ");  }	          if(denominator    <    0)    {    throw    new    ArithmeticException(       "       ");    }    if(denominator    <    0)    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
420	[BUG]  [BUGGY]  }  else  if(numerator  <  denominator)  {  if(denominator  <  0)throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  type  [FE]            ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  }  else  if(numerator  <  denominator)  {  if(denominator  <  0)throw  new  ArithmeticException( " ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	}  else  if(numerator  <  denominator)  {  if(denominator  <  0)throw  new  ArithmeticException( " ");  }	          if(denominator    <    0)    {    throw    new    ArithmeticException(       "       ");    }    if(denominator    <    0)    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
421	[BUG]  [BUGGY]  }  else  if(denominator  <  =  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]              ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  }  else  if(denominator  <  =  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	}  else  if(denominator  <  =  0)  {  throw  new  ArithmeticException( " ");  }	          if(denominator    <    0)    {    throw    new    ArithmeticException(       "       ");    }    if(denominator    <    0)    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
422	[BUG]  [BUGGY]  }  else  if(numerator  <  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  type  [FE]                ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  }  else  if(numerator  <  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	}  else  if(numerator  <  0)  {  throw  new  ArithmeticException( " ");  }	          if(denominator    <    0)    {    throw    new    ArithmeticException(       "       ");    }    if(denominator    <    0)    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
423	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    numerator  =  -1;  if(denominator  <  0)  {  numerator  =  -1;  numerator  =  -1;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -1;        numerator    =    -1;    if(denominator  <  0)  {  numerator  =  -1;  numerator  =  -1;  }	  	compilable	  [FE]  AssertionFailedError  	1	3	add
424	[BUG]  [BUGGY]  numerator    =    -1;    numerator  =  -1;  if(denominator  <  0)  {  numerator  =  -1;  numerator  =  -1;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    numerator  =  -1;  if(denominator  <  0)  {  numerator  =  -1;  numerator  =  -1;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        numerator    =    -1;    if(denominator  <  0)  {  numerator  =  -1;  numerator  =  -1;  }	  	compilable	  [FE]  AssertionFailedError  	1	3	add
425	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    numerator  =  -1;  denominator  =  -1;  numerator  =  -1;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -1;        numerator    =    -1;    denominator  =  -1;  numerator  =  -1;	  	compilable	  [FE]  AssertionFailedError  	1	5	add
426	[BUG]  [BUGGY]  numerator    =    -1;    numerator  =  -1;  denominator  =  -1;  numerator  =  -1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    numerator  =  -1;  denominator  =  -1;  numerator  =  -1;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        numerator    =    -1;    denominator  =  -1;  numerator  =  -1;	  	compilable	  [FE]  AssertionFailedError  	1	5	add
427	[BUG]  [BUGGY]  numerator    =    -1;    numerator  =  -1;  Numerator  =  -1;  numerator  =  -1;  [CE]  cannot  find  symbol  Numerator  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    numerator  =  -1;  Numerator  =  -1;  numerator  =  -1;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        numerator    =    -1;    Numerator  =  -1;  numerator  =  -1;	  	non-compiled	[CE]  cannot  find  symbol  Numerator	1	None	add
428	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  numerator;  if(numerator  ==  Integer.MIN_VALUE)  {  numerator  =  numerator;  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator    =    numerator;    if(numerator  ==  Integer.MIN_VALUE)  {  numerator  =  numerator;  }	  	compilable	  [FE]  AssertionFailedError  	26	1	add
429	[BUG]  [BUGGY]  numerator  =  numerator;  if(numerator  ==  Integer.MIN_VALUE)  {  numerator  =  numerator;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  numerator;  if(numerator  ==  Integer.MIN_VALUE)  {  numerator  =  numerator;  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator    =    numerator;    if(numerator  ==  Integer.MIN_VALUE)  {  numerator  =  numerator;  }	  	compilable	  [FE]  AssertionFailedError  	26	1	add
430	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  numerator;  if(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  numerator;  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator    =    numerator;    if(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  numerator;  }	  	compilable	  [FE]  AssertionFailedError  	26	1	add
431	[BUG]  [BUGGY]  numerator  =  numerator;  if(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  numerator;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  numerator;  if(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  numerator;  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator    =    numerator;    if(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  numerator;  }	  	compilable	  [FE]  AssertionFailedError  	26	1	add
432	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
433	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	95	5	add
434	[BUG]  [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	95	5	add
435	[BUG]  [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  <  0)  {  numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	95	None	add
436	[BUG]  [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  numerator  =  -1;  if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  numerator  =  -1;  if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  <  0)  {  numerator  =  -1;  if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	95	None	add
437	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  <  0)  {  numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }  }	  	compilable	  [FE]  AssertionFailedError  	95	5	add
438	[BUG]  [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  <  0)  {  numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }  }	  	compilable	  [FE]  AssertionFailedError  	95	5	add
439	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	  	compilable	  [FE]  AssertionFailedError  	95	5	add
440	[BUG]  [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	  	compilable	  [FE]  AssertionFailedError  	95	5	add
441	[BUG]  [BUGGY]  numerator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator  <  0  ||  denominator  <  0)  {  throw  new  ArithmeticException( " ");  }	  hingeger    <    0    ||    denominator    <    0)    {    throw    new    ArithmeticException(   "overflow:    can't    negate       ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	87	None	replace
442	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   "     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	                if(denominator        <        0)        {        throw        new        ArithmeticException(       "       ");        }        if(denominator    <    0)    {    throw    new    ArithmeticException(   "       ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }	  	compilable	  [FE]  ArithmeticException  	18	3	add
443	[BUG]  [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   "     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]          if(denominator    <    0)    {    throw    new    ArithmeticException(     "     ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException(   "     ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	                if(denominator        <        0)        {        throw        new        ArithmeticException(       "       ");        }        if(denominator    <    0)    {    throw    new    ArithmeticException(   "       ");    }    if(denominator  <  0)  {  throw  new  ArithmeticException( "   ");  }  if(denominator  <  0)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }	  	compilable	  [FE]  ArithmeticException  	18	3	add
444	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    return    new    Fraction(numerator,    denominator);    }    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }	  	compilable	  [FE]  AssertionFailedError  	97	5	add
445	[BUG]  [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    return    new    Fraction(numerator,    denominator);    }    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }	  	compilable	  [FE]  AssertionFailedError  	97	5	add
446	[BUG]  [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    return    new    Fraction(numerator,    denominator);    }    if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	97	None	add
447	[BUG]  [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  if(denominator  <  0)  {  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  if(denominator  <  0)  {  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    return    new    Fraction(numerator,    denominator);    }    if(denominator  <  0)  {  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	97	None	add
448	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  if(denominator  <  0)  {  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    return    new    Fraction(numerator,    denominator);    }    if(denominator  <  0)  {  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  }	  	compilable	  [FE]  AssertionFailedError  	97	5	add
449	[BUG]  [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  if(denominator  <  0)  {  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  if(denominator  <  0)  {  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    return    new    Fraction(numerator,    denominator);    }    if(denominator  <  0)  {  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  }	  	compilable	  [FE]  AssertionFailedError  	97	5	add
450	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  if(denominator  <  0)  {  numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    return    new    Fraction(numerator,    denominator);    }    if(denominator  <  0)  {  numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  }	  	compilable	  [FE]  AssertionFailedError  	97	5	add
451	[BUG]  [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  if(denominator  <  0)  {  numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  if(denominator  <  0)  {  numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    return    new    Fraction(numerator,    denominator);    }    if(denominator  <  0)  {  numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  return  new  Fraction(numerator,  denominator);  }  }	  	compilable	  [FE]  AssertionFailedError  	97	5	add
452	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti(3)  {  [Delete]  [CE]  ';'  expected  [FE]    ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti(3)  {  [Delete]  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti(3)  {  [Delete]	          if(denominator    <    0)    {    throw    new    ArithmeticException(       "       ");    }    if(denominator    <    0)    {    throw    new    ArithmeticException(   ",       ");    }    	non-compiled	[CE]  ';'  expected	75	None	replace
453	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf('.')*  denominator;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  toProperString.indexOf('.')*  denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  toProperString.indexOf('.')*  denominator;	  int    denominator    =    toProperString.hashCode()    *    denominator;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	58	None	replace
454	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  =  Integer.MAX_VALUE;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	denominator  =  Integer.MAX_VALUE;	  denominator    =    numerator;    	compilable	  [FE]  AssertionFailedError  	25	4	replace
455	[BUG]  [BUGGY]  denominator  =  Integer.MAX_VALUE;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  =  Integer.MAX_VALUE;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	denominator  =  Integer.MAX_VALUE;	  denominator    =    numerator;    	compilable	  [FE]  AssertionFailedError  	25	4	replace
456	[BUG]  [BUGGY]  if(denominator  <  0)  {  numerator  =  -1;  if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  if(denominator  <  0)  {  numerator  =  -1;  if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	if(denominator  <  0)  {  numerator  =  -1;  if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate	  numerator    =    -1;    if(denominator    <    0)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	99	None	replace
457	[BUG]  [BUGGY]  if(denominator  ==  0)  {  numerator  =  -1;  if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  if(denominator  ==  0)  {  numerator  =  -1;  if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	if(denominator  ==  0)  {  numerator  =  -1;  if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate	  numerator    =    -1;    if(denominator    <    0)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	99	None	replace
458	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  0;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  0;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator    =    0;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	46	4	add
459	[BUG]  [BUGGY]  numerator  =  0;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  0;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  0;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  0;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator    =    0;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	46	4	add
460	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  0;  if(denominator  <  0)  {  numerator  =  0;  }  else  {  denominator  =  -denominator;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator    =    0;    if(denominator  <  0)  {  numerator  =  0;  }  else  {  denominator  =  -denominator;  }	  	compilable	  [FE]  AssertionFailedError  	46	4	add
461	[BUG]  [BUGGY]  numerator  =  0;  if(denominator  <  0)  {  numerator  =  0;  }  else  {  denominator  =  -denominator;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  0;  if(denominator  <  0)  {  numerator  =  0;  }  else  {  denominator  =  -denominator;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator    =    0;    if(denominator  <  0)  {  numerator  =  0;  }  else  {  denominator  =  -denominator;  }	  	compilable	  [FE]  AssertionFailedError  	46	4	add
462	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  if(denominator  <  0)  {  numerator  =  -denominator;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    if(denominator  <  0)  {  numerator  =  -denominator;  }	  	compilable	  [FE]  AssertionFailedError  	93	5	add
463	[BUG]  [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  if(denominator  <  0)  {  numerator  =  -denominator;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  if(denominator  <  0)  {  numerator  =  -denominator;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    if(denominator  <  0)  {  numerator  =  -denominator;  }	  	compilable	  [FE]  AssertionFailedError  	93	5	add
464	[BUG]  [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  int  denominator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  }  int  denominator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        if(denominator    <    0)    {    numerator    =    -denominator;    }    int  denominator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }	  	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	93	None	add
465	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  mecanicicallyTrue(denominator);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  mecanicicallyTrue(denominator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  mecanicicallyTrue(denominator);	  maticallyTrue(numerator    <    0);    mecanicicallyTrue(denominator    <    0);    	non-compiled	[CE]  ';'  expected	79	None	replace
466	[BUG]  [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  denominator);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator,  denominator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  getDenominator(numerator,  denominator,  denominator);	  int    denominator    =    getDenominator(numerator,    denominator);    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	29	None	replace
467	[BUG]  [BUGGY]  if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }	  numerator    =    -1;    if(denominator    <    0)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
468	[BUG]  [BUGGY]  if(denominator  <  0)  {  numerator  =  -1;  if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  if(denominator  <  0)  {  numerator  =  -1;  if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	if(denominator  <  0)  {  numerator  =  -1;  if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate	  numerator    =    -1;    if(denominator    <    0)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	101	None	replace
469	[BUG]  [BUGGY]  if(denominator  ==  0)  {  numerator  =  -1;  if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  if(denominator  ==  0)  {  numerator  =  -1;  if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	if(denominator  ==  0)  {  numerator  =  -1;  if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate	  numerator    =    -1;    if(denominator    <    0)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	101	None	replace
470	[BUG]  [BUGGY]  denominatorsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominatorsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	denominatorsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
471	[BUG]  [BUGGY]  int  numerator  =  this.toProperString.length();  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  this.toProperString.length();  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  this.toProperString.length();	  int    numerator    =    toProperString.length()    -    1;    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	34	None	replace
472	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  =  numerator;  numerator  =  numerator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	denominator    =    numerator;    numerator  =  numerator;	  	compilable	  [FE]  AssertionFailedError  	24	5	add
473	[BUG]  [BUGGY]  denominator  =  numerator;  numerator  =  numerator;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  denominator  =  numerator;  numerator  =  numerator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	denominator    =    numerator;    numerator  =  numerator;	  	compilable	  [FE]  AssertionFailedError  	24	5	add
474	[BUG]  [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.')+  1;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.')+  1;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  toProperString.lastIndexOf('.')+  1;	  int    denominator    =    toProperString.indexOf('.')+    1;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	105	None	replace
475	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    denominator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  denominator  =  -denominator;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -denominator;        denominator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  denominator  =  -denominator;  }	  	compilable	  [FE]  AssertionFailedError  	50	5	add
476	[BUG]  [BUGGY]  numerator    =    -denominator;    denominator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  denominator  =  -denominator;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    denominator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  denominator  =  -denominator;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        denominator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  denominator  =  -denominator;  }	  	compilable	  [FE]  AssertionFailedError  	50	5	add
477	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  denominator  +  numerator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator  =  denominator  +  numerator;	  hingegenominator    =    numerator    +    denominator;    	compilable	  [FE]  AssertionFailedError  	45	3	replace
478	[BUG]  [BUGGY]  numerator  =  denominator  +  numerator;  [FE]  AssertionFailedError  [FE]            ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  denominator  +  numerator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator  =  denominator  +  numerator;	  hingegenominator    =    numerator    +    denominator;    	compilable	  [FE]  AssertionFailedError  	45	3	replace
479	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [CE]  illegal  start  of  expression  [FE]    ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    else    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
480	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( "overflow:  can't  negate  [CE]  unclosed  string  literal  [FE]      ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( "overflow:  can't  negate  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    else    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( "overflow:  can't  negate	  	non-compiled	[CE]  unclosed  string  literal	7	None	add
481	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]        ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    else    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  }	  	compilable	  [FE]  ArithmeticException  	7	3	add
482	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  }  [FE]  ArithmeticException  [FE]        ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    else    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  }	  	compilable	  [FE]  ArithmeticException  	7	3	add
483	[BUG]  [BUGGY]  if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }	  numerator    =    -1;    if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
484	[BUG]  [BUGGY]  if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  }	  numerator    =    -1;    if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
485	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  if(denominator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	if(denominator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }	  numerator    =    -1;    if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    	compilable	  [FE]  AssertionFailedError  	6	3	replace
486	[BUG]  [BUGGY]  if(denominator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  if(denominator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	if(denominator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  }	  numerator    =    -1;    if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    	compilable	  [FE]  AssertionFailedError  	6	3	replace
487	[BUG]  [BUGGY]  if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  numerator    =    -1;    if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    numerator    =    -1;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
488	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( "overflow:  can't  negate  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( "overflow:  can't  negate  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( "overflow:  can't  negate	  numerator    =    -denominator;    if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	96	None	replace
489	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }	  numerator    =    -denominator;    if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    throw    new    ArithmeticException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	96	5	replace
490	[BUG]  [BUGGY]  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }	  numerator    =    -denominator;    if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    throw    new    ArithmeticException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	96	5	replace
491	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( "Overflow:  can't  negate  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( "Overflow:  can't  negate  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( "Overflow:  can't  negate	  numerator    =    -denominator;    if(denominator    <    0)    {    numerator    =    -denominator;    }    else    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	96	None	replace
492	[BUG]  [BUGGY]  Integer  denominator  =  intValue();  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Integer  denominator  =  intValue();  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Integer  denominator  =  intValue();	  Integer    denominator    =    numerator.intValue();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	16	None	replace
493	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  numerator  =  -1;  if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  numerator  =  -1;  if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    <    0)    {    numerator    =    -1;    }    else    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  <  0)  {  numerator  =  -1;  if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
494	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -1;        if(denominator    <    0)    {    numerator    =    -1;    }    else    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	  	compilable	  [FE]  AssertionFailedError  	9	3	add
495	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    <    0)    {    numerator    =    -1;    }    else    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  <  0)  {  numerator  =  -1;  }  else  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }	  	compilable	  [FE]  AssertionFailedError  	9	3	add
496	[BUG]  [BUGGY]  numerator    =    -1;    denominator  =  -1;  int  denominator  =  -1;  denominator  =  -1;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    denominator  =  -1;  int  denominator  =  -1;  denominator  =  -1;  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        denominator    =    -1;    int  denominator  =  -1;  denominator  =  -1;	  	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	61	None	add
497	[BUG]  [BUGGY]  numerator  =  numerator;  denominator  =  -denominator;  int  numerator  =  numerator;  denominator  =  -denominator;  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  numerator;  denominator  =  -denominator;  int  numerator  =  numerator;  denominator  =  -denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator    =    numerator;    denominator    =    -denominator;    int  numerator  =  numerator;  denominator  =  -denominator;	  	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	65	None	add
498	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  numerator;  denominator  =  -denominator;  denominator  =  numerator;  denominator  =  -denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator    =    numerator;    denominator    =    -denominator;    denominator  =  numerator;  denominator  =  -denominator;	  	compilable	  [FE]  AssertionFailedError  	65	5	add
499	[BUG]  [BUGGY]  numerator  =  numerator;  denominator  =  -denominator;  denominator  =  numerator;  denominator  =  -denominator;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator  =  numerator;  denominator  =  -denominator;  denominator  =  numerator;  denominator  =  -denominator;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator    =    numerator;    denominator    =    -denominator;    denominator  =  numerator;  denominator  =  -denominator;	  	compilable	  [FE]  AssertionFailedError  	65	5	add
500	[BUG]  [BUGGY]  Numerator  numerator  =  denominator.doubleValue();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Numerator  numerator  =  denominator.doubleValue();  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Numerator  numerator  =  denominator.doubleValue();	  maticallyNull(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
501	[BUG]  [BUGGY]  Numerator  numerator  =  denominator.computeValue(getProperty(),  numerator);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Numerator  numerator  =  denominator.computeValue(getProperty(),  numerator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Numerator  numerator  =  denominator.computeValue(getProperty(),  numerator);	  maticallyNull(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
502	[BUG]  [BUGGY]  Numerator  numerator  =  denominator.negate();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  Numerator  numerator  =  denominator.negate();  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	Numerator  numerator  =  denominator.negate();	  maticallyNull(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
503	[BUG]  [BUGGY]  DeserionFailedToNegativeFraction(denominator,  numerator);  [CE]  cannot  find  symbol  [FE]        ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  DeserionFailedToNegativeFraction(denominator,  numerator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	DeserionFailedToNegativeFraction(denominator,  numerator);	  DesertionFailedToNegativeFraction(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
504	[BUG]  [BUGGY]  DeserionFailedToNegativeFraction(numerator,  denominator,  numerator);  [CE]  cannot  find  symbol  [FE]          ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  DeserionFailedToNegativeFraction(numerator,  denominator,  numerator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	DeserionFailedToNegativeFraction(numerator,  denominator,  numerator);	  DesertionFailedToNegativeFraction(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
505	[BUG]  [BUGGY]  NegativeFraction(denominator,  numerator);  [CE]  cannot  find  symbol  [FE]            ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  NegativeFraction(denominator,  numerator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	NegativeFraction(denominator,  numerator);	  DesertionFailedToNegativeFraction(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
506	[BUG]  [BUGGY]  NegativeFraction(numerator,  denominator,  numerator);  [CE]  cannot  find  symbol  [FE]              ArithmeticException      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  NegativeFraction(numerator,  denominator,  numerator);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	NegativeFraction(numerator,  denominator,  numerator);	  DesertionFailedToNegativeFraction(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
507	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  int  numerator  =  -1;  }  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]          AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  int  numerator  =  -1;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	if(denominator  ==  Integer.MIN_VALUE)  {  numerator  =  -1;  int  numerator  =  -1;  }	  numerator    =    -1;    int    numerator    =    -1;    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	60	None	replace
508	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  numerator  =  -denominator;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -denominator;        numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  numerator  =  -denominator;  }	  	compilable	  [FE]  AssertionFailedError  	48	5	add
509	[BUG]  [BUGGY]  numerator    =    -denominator;    numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  numerator  =  -denominator;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  numerator  =  -denominator;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  numerator  =  -denominator;  }	  	compilable	  [FE]  AssertionFailedError  	48	5	add
510	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -denominator;        numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	48	5	add
511	[BUG]  [BUGGY]  numerator    =    -denominator;    numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -denominator;    numerator  =  -denominator;  if(denominator  <  0)  {  numerator  =  -denominator;  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -denominator;        numerator    =    -denominator;    if(denominator  <  0)  {  numerator  =  -denominator;  numerator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	48	5	add
512	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  if(denominator  <  0)  {  numerator  =  -denominator;  denominator  =  -denominator;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	if(denominator  <  0)  {  numerator  =  -denominator;  denominator  =  -denominator;  }	  numerator    =    -denominator;    int    denominator    =    -denominator;    	compilable	  [FE]  AssertionFailedError  	52	5	replace
513	[BUG]  [BUGGY]  if(denominator  <  0)  {  numerator  =  -denominator;  denominator  =  -denominator;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  if(denominator  <  0)  {  numerator  =  -denominator;  denominator  =  -denominator;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	if(denominator  <  0)  {  numerator  =  -denominator;  denominator  =  -denominator;  }	  numerator    =    -denominator;    int    denominator    =    -denominator;    	compilable	  [FE]  AssertionFailedError  	52	5	replace
514	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  if(denominator  ==  0)  {  numerator  =  -denominator;  denominator  =  -denominator;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	if(denominator  ==  0)  {  numerator  =  -denominator;  denominator  =  -denominator;  }	  numerator    =    -denominator;    int    denominator    =    -denominator;    	compilable	  [FE]  AssertionFailedError  	52	2	replace
515	[BUG]  [BUGGY]  if(denominator  ==  0)  {  numerator  =  -denominator;  denominator  =  -denominator;  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  if(denominator  ==  0)  {  numerator  =  -denominator;  denominator  =  -denominator;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	if(denominator  ==  0)  {  numerator  =  -denominator;  denominator  =  -denominator;  }	  numerator    =    -denominator;    int    denominator    =    -denominator;    	compilable	  [FE]  AssertionFailedError  	52	2	replace
516	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  if(denominator  <  0)  {  numerator  =  -denominator;  denominator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	if(denominator  <  0)  {  numerator  =  -denominator;  denominator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }	  numerator    =    -denominator;    int    denominator    =    -denominator;    	compilable	  [FE]  AssertionFailedError  	52	5	replace
517	[BUG]  [BUGGY]  if(denominator  <  0)  {  numerator  =  -denominator;  denominator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  if(denominator  <  0)  {  numerator  =  -denominator;  denominator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	if(denominator  <  0)  {  numerator  =  -denominator;  denominator  =  -denominator;  }  else  {  throw  new  ArithmeticException( " ");  }	  numerator    =    -denominator;    int    denominator    =    -denominator;    	compilable	  [FE]  AssertionFailedError  	52	5	replace
518	[BUG]  [BUGGY]  int  denominator  =  getDenominator().intValue();  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  getDenominator().intValue();  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  getDenominator().intValue();	  int    denominator    =    getDenominator()    -    1;    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	82	None	replace
519	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
520	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  }	  	compilable	  [FE]  AssertionFailedError  	3	3	add
521	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  }	  	compilable	  [FE]  AssertionFailedError  	3	3	add
522	[BUG]  [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  numerator    =    -1;    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "   ");  }  if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	numerator        =        -1;        if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
523	[BUG]  [BUGGY]  if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate	  numerator    =    -1;    if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	4	None	replace
524	[BUG]  [BUGGY]  if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	if(denominator  <  0)  {  numerator  =  -1;  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate   ");  }	  numerator    =    -1;    if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
525	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  if(denominator  <  0)  {  numerator  =  -1;  denominator  =  -1;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	if(denominator  <  0)  {  numerator  =  -1;  denominator  =  -1;  }	  numerator    =    -1;    denominator    =    -1;    	compilable	  [FE]  AssertionFailedError  	62	5	replace
526	[BUG]  [BUGGY]  if(denominator  <  0)  {  numerator  =  -1;  denominator  =  -1;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  if(denominator  <  0)  {  numerator  =  -1;  denominator  =  -1;  }  [BUGGY]      denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	if(denominator  <  0)  {  numerator  =  -1;  denominator  =  -1;  }	  numerator    =    -1;    denominator    =    -1;    	compilable	  [FE]  AssertionFailedError  	62	5	replace
527	[BUG]  [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.',  -1);  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.',  -1);  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  toProperString.lastIndexOf('.',  -1);	  int    denominator    =    toProperString.lastIndexOf('.');    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	104	None	replace
528	[BUG]  [BUGGY]  int  numerator  =  getDenominator()  -  1;  [CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  numerator  =  getDenominator()  -  1;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  numerator  =  getDenominator()  -  1;	  int    numerator    =    getDenominator();    	non-compiled	[CE]  variable  numerator  is  already  defined  in  method  getFraction(int,int)	78	None	replace
529	[BUG]  [BUGGY]  int  denominator  =  toString.indexOf('.')+  1;  [CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }      [BUGGY]  int  denominator  =  toString.indexOf('.')+  1;  [BUGGY]      numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	int  denominator  =  toString.indexOf('.')+  1;	  int    denominator    =    toString.hashCode();    	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  getFraction(int,int)	76	None	replace
