bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Numerator  denominator  =  getNumerator(denominator);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  Numerator  denominator  =  getNumerator(denominator);  [BUGGY]    if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  denominator  =  getNumerator(denominator);	      Numerator    numerator    =    getNumerator(denominator);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
2	[BUG]  [BUGGY]  Numerator  numerator  =  getNumerator(denominator,  denominator);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  Numerator  numerator  =  getNumerator(denominator,  denominator);  [BUGGY]    if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  numerator  =  getNumerator(denominator,  denominator);	      Numerator    numerator    =    getNumerator(denominator);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
3	[BUG]  [BUGGY]  int  numerator  =  getNumerator(denominator);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  int  numerator  =  getNumerator(denominator);  [BUGGY]    if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  numerator  =  getNumerator(denominator);	      int    numerator    =    getNumerator(numerator);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
4	[BUG]  [BUGGY]  int  numerator  =  getNumerator(numerator,  denominator);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  int  numerator  =  getNumerator(numerator,  denominator);  [BUGGY]    if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  numerator  =  getNumerator(numerator,  denominator);	      int    numerator    =    getNumerator(numerator);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
5	[BUG]  [BUGGY]  int  numerator  =  getDenominator(denominator);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  int  numerator  =  getDenominator(denominator);  [BUGGY]    if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  numerator  =  getDenominator(denominator);	      int    numerator    =    getNumerator(numerator);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
6	[BUG]  [BUGGY]  int  numerator  =  getNumber(denominator);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  int  numerator  =  getNumber(denominator);  [BUGGY]    if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  numerator  =  getNumber(denominator);	      int    numerator    =    getNumerator(numerator);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
7	[BUG]  [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  if(numerator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  if(numerator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [BUGGY]    denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    if(numerator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
8	[BUG]  [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  If(numerator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  If(numerator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [BUGGY]    denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    If(numerator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	15	None	add
9	[BUG]  [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  if(numerator  <  Integer.MIN_VALUE  ||  desnominator  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  if(numerator  <  Integer.MIN_VALUE  ||  desnominator  >  Integer.MAX_VALUE)  {  [BUGGY]    denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    if(numerator  <  Integer.MIN_VALUE  ||  desnominator  >  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
10	[BUG]  [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  if(numerator  <  Integer.MIN_VALUE  ||  dedenator  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  if(numerator  <  Integer.MIN_VALUE  ||  dedenator  >  Integer.MAX_VALUE)  {  [BUGGY]    denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    if(numerator  <  Integer.MIN_VALUE  ||  dedenator  >  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
11	[BUG]  [BUGGY]  if  (denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if  (denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  if  (denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if  (denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [BUGGY]    denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if    (denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if  (denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
12	[BUG]  [BUGGY]  if  (denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if  (denominator  ==  Integer.MIN_VALUE  ||  denominator!=  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  if  (denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if  (denominator  ==  Integer.MIN_VALUE  ||  denominator!=  Integer.MIN_VALUE)  {  [BUGGY]    denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if    (denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if  (denominator  ==  Integer.MIN_VALUE  ||  denominator!=  Integer.MIN_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
13	[BUG]  [BUGGY]  if  (denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  If  (denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  if  (denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  If  (denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [BUGGY]    denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if    (denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    If  (denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [BUGGY]    denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	add	if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {	  if(numerator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	16	2	replace
15	[BUG]  [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [BUGGY]    denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {	  if(numerator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	16	2	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  if(denominator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [BUGGY]    denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	add	if(denominator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {	  if(numerator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	16	2	replace
17	[BUG]  [BUGGY]  if(denominator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  if(denominator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [BUGGY]    denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(denominator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {	  if(numerator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	16	2	replace
18	[BUG]  [BUGGY]  if(numerator  <  =  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  if(numerator  <  =  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [BUGGY]    denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator  <  =  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {	  if(numerator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
19	[BUG]  [BUGGY]  int  denominator  =  getDenominator().denominator;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  int  denominator  =  getDenominator().denominator;  [BUGGY]    if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  getDenominator().denominator;	      int    denominator    =    getDenominator();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
20	[BUG]  [BUGGY]  int  denominator  =  getDenominator(0);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  int  denominator  =  getDenominator(0);  [BUGGY]    if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  getDenominator(0);	      int    denominator    =    getDenominator();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [BUGGY]    denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	add	if(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {	  if(numerator    <    =    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	14	1	replace
22	[BUG]  [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [BUGGY]    denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {	  if(numerator    <    =    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	14	1	replace
23	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]          AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  if(numerator!=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [BUGGY]    denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	add	if(numerator!=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {	  if(numerator    <    =    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    	compilable	  [FE]  ArithmeticException  	14	3	replace
24	[BUG]  [BUGGY]  if(numerator!=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [FE]  ArithmeticException  [FE]          AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  if(numerator!=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [BUGGY]    denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator!=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {	  if(numerator    <    =    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    	compilable	  [FE]  ArithmeticException  	14	3	replace
25	[BUG]  [BUGGY]  int  denominator  =  toProperString.length();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  int  denominator  =  toProperString.length();  [BUGGY]    denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.length();	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
26	[BUG]  [BUGGY]  int  denominator  =  getNumerator(numerator);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  int  denominator  =  getNumerator(numerator);  [BUGGY]    denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  getNumerator(numerator);	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [BUGGY]    denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	add	if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
28	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [BUGGY]    denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
29	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [BUGGY]    denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	add	if(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	2	2	replace
30	[BUG]  [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [BUGGY]    denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	2	2	replace
31	[BUG]  [BUGGY]  int  denominator  =  toProperString.hashCode()  *  denominator;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  int  denominator  =  toProperString.hashCode()  *  denominator;  [BUGGY]    if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.hashCode()  *  denominator;	      int    denominator    =    toProperString.hashCode();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
32	[BUG]  [BUGGY]  int  denominator  =  toProperString.hashCode()  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  int  denominator  =  toProperString.hashCode()  +  1;  [BUGGY]    if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.hashCode()  +  1;	      int    denominator    =    toProperString.hashCode();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
33	[BUG]  [BUGGY]  Numerator  numerator  =  numerator.equals(ZERO);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  Numerator  numerator  =  numerator.equals(ZERO);  [BUGGY]    if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  numerator  =  numerator.equals(ZERO);	      Numerator    numerator    =    ZERO.equals(numerator);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
34	[BUG]  [BUGGY]  Numerator  numerator  =  denominator.equals(ZERO);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  Numerator  numerator  =  denominator.equals(ZERO);  [BUGGY]    if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  numerator  =  denominator.equals(ZERO);	      Numerator    numerator    =    ZERO.equals(numerator);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
35	[BUG]  [BUGGY]  Numerator  numerator  =  ZERO.equals(denominator);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  Numerator  numerator  =  ZERO.equals(denominator);  [BUGGY]    if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  numerator  =  ZERO.equals(denominator);	      Numerator    numerator    =    ZERO.equals(numerator);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
36	[BUG]  [BUGGY]  Numerator  denominator  =  getNumerator(numerator);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  Numerator  denominator  =  getNumerator(numerator);  [BUGGY]    if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  denominator  =  getNumerator(numerator);	      Numerator    numerator    =    getNumerator(numerator);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
37	[BUG]  [BUGGY]  Numerator  denominator  =  getNumerator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  Numerator  denominator  =  getNumerator();  [BUGGY]    if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  denominator  =  getNumerator();	      Numerator    numerator    =    getNumerator();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
38	[BUG]  [BUGGY]  Numerator  denominator  =  getDenominator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  Numerator  denominator  =  getDenominator();  [BUGGY]    if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  denominator  =  getDenominator();	      Numerator    numerator    =    getNumerator();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
39	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf(denominator,  0);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  int  denominator  =  toProperString.indexOf(denominator,  0);  [BUGGY]    if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.indexOf(denominator,  0);	      int    denominator    =    toProperString.indexOf(denominator);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
40	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf(numerator,  denominator);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  int  denominator  =  toProperString.indexOf(numerator,  denominator);  [BUGGY]    if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.indexOf(numerator,  denominator);	      int    denominator    =    toProperString.indexOf(denominator);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
41	[BUG]  [BUGGY]  int  denominator  =  toProperString.lastIndexOf(denominator);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  int  denominator  =  toProperString.lastIndexOf(denominator);  [BUGGY]    if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.lastIndexOf(denominator);	      int    denominator    =    toProperString.indexOf(denominator);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
42	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf(denominator,  hashCode);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  int  denominator  =  toProperString.indexOf(denominator,  hashCode);  [BUGGY]    if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.indexOf(denominator,  hashCode);	      int    denominator    =    toProperString.indexOf(denominator);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
43	[BUG]  [BUGGY]  int  numerator  =  getNumerator().denominator;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  int  numerator  =  getNumerator().denominator;  [BUGGY]    if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  numerator  =  getNumerator().denominator;	      int    numerator    =    getNumerator();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
44	[BUG]  [BUGGY]  int  numerator  =  getDenominator();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  int  numerator  =  getDenominator();  [BUGGY]    if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  numerator  =  getDenominator();	      int    numerator    =    getNumerator();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
45	[BUG]  [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [BUGGY]    denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
46	[BUG]  [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator!=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator!=  Integer.MAX_VALUE)  {  [BUGGY]    denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    if(numerator  ==  Integer.MIN_VALUE  ||  denominator!=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
47	[BUG]  [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  If(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  If(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [BUGGY]    denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    If(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
48	[BUG]  [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  if(numerator!=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  if(numerator!=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [BUGGY]    denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    if(numerator!=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
49	[BUG]  [BUGGY]  int  denominator  =  getDenominator(denominator);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  int  denominator  =  getDenominator(denominator);  [BUGGY]    if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  getDenominator(denominator);	      int    denominator    =    getDenominator();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
50	[BUG]  [BUGGY]  int  denominator  =  getDenominator(numerator);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  int  denominator  =  getDenominator(numerator);  [BUGGY]    if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  getDenominator(numerator);	      int    denominator    =    getDenominator();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
51	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf(numerator);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  int  denominator  =  toProperString.indexOf(numerator);  [BUGGY]    if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.indexOf(numerator);	      int    denominator    =    toProperString.indexOf(denominator);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
52	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf(denominator,  numerator);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  int  denominator  =  toProperString.indexOf(denominator,  numerator);  [BUGGY]    if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.indexOf(denominator,  numerator);	      int    denominator    =    toProperString.indexOf(denominator);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
53	[BUG]  [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  desnominator  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  desnominator  ==  Integer.MAX_VALUE)  {  [BUGGY]    denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    if(numerator  ==  Integer.MIN_VALUE  ||  desnominator  ==  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
54	[BUG]  [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  desominator  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  desominator  ==  Integer.MAX_VALUE)  {  [BUGGY]    denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    if(numerator  ==  Integer.MIN_VALUE  ||  desominator  ==  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
55	[BUG]  [BUGGY]  Numerator  numerator  =  toProperString.equals(numerator);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  Numerator  numerator  =  toProperString.equals(numerator);  [BUGGY]    if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  numerator  =  toProperString.equals(numerator);	      Numerator    numerator    =    ZERO.equals(numerator);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
56	[BUG]  [BUGGY]  int  numerator  =  getNumerator(denominator,  denominator);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  int  numerator  =  getNumerator(denominator,  denominator);  [BUGGY]    if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  numerator  =  getNumerator(denominator,  denominator);	      int    numerator    =    getNumerator(numerator);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
57	[BUG]  [BUGGY]  if(denominator  <  =  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  if(denominator  <  =  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [BUGGY]    denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(denominator  <  =  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {	  if(numerator    <    =    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
58	[BUG]  [BUGGY]  Numerator  numerator  =  getNumerator().denominator;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  Numerator  numerator  =  getNumerator().denominator;  [BUGGY]    if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  numerator  =  getNumerator().denominator;	      Numerator    numerator    =    getNumerator();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
59	[BUG]  [BUGGY]  Numerator  numerator  =  getDenominator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  Numerator  numerator  =  getDenominator();  [BUGGY]    if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  numerator  =  getDenominator();	      Numerator    numerator    =    getNumerator();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
60	[BUG]  [BUGGY]  Numerator  numerator  =  getNumerator(numerator,  denominator);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  Numerator  numerator  =  getNumerator(numerator,  denominator);  [BUGGY]    if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  numerator  =  getNumerator(numerator,  denominator);	      Numerator    numerator    =    getNumerator(numerator);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
61	[BUG]  [BUGGY]  int  denominator  =  toString.hashCode();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  int  denominator  =  toString.hashCode();  [BUGGY]    if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toString.hashCode();	      int    denominator    =    toProperString.hashCode();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
62	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf('.',  denominator);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  int  denominator  =  toProperString.indexOf('.',  denominator);  [BUGGY]    if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.indexOf('.',  denominator);	      int    denominator    =    toProperString.hashCode();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
63	[BUG]  [BUGGY]  if(numerator  <  =  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  if(numerator  <  =  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [BUGGY]    denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator  <  =  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  &&  denominator  ==  Integer.MAX_VALUE)  {  [BUGGY]    denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	add	if(numerator  ==  Integer.MIN_VALUE  &&  denominator  ==  Integer.MAX_VALUE)  {	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	2	2	replace
65	[BUG]  [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  &&  denominator  ==  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  &&  denominator  ==  Integer.MAX_VALUE)  {  [BUGGY]    denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator  ==  Integer.MIN_VALUE  &&  denominator  ==  Integer.MAX_VALUE)  {	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	2	2	replace
66	[BUG]  [BUGGY]  if  (denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if  (denominator  ==  Integer.MIN_VALUE  ||  desominator  ==  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  if  (denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if  (denominator  ==  Integer.MIN_VALUE  ||  desominator  ==  Integer.MIN_VALUE)  {  [BUGGY]    denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if    (denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if  (denominator  ==  Integer.MIN_VALUE  ||  desominator  ==  Integer.MIN_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
67	[BUG]  [BUGGY]  int  denominator  =  getNumerator();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  int  denominator  =  getNumerator();  [BUGGY]    denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  getNumerator();	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
68	[BUG]  [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.');  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.');  [BUGGY]    denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.lastIndexOf('.');	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
69	[BUG]  [BUGGY]  Numerator  numerator  =  getDenominator(numerator);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  Numerator  numerator  =  getDenominator(numerator);  [BUGGY]    if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  numerator  =  getDenominator(numerator);	      Numerator    numerator    =    getNumerator(numerator);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
70	[BUG]  [BUGGY]  Numerator  numerator  =  numerator.equals(numerator);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  Numerator  numerator  =  numerator.equals(numerator);  [BUGGY]    if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  numerator  =  numerator.equals(numerator);	      Numerator    numerator    =    ZERO.equals(numerator);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
71	[BUG]  [BUGGY]  Numerator  numerator  =  denominator.equals(numerator);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  Numerator  numerator  =  denominator.equals(numerator);  [BUGGY]    if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  numerator  =  denominator.equals(numerator);	      Numerator    numerator    =    ZERO.equals(numerator);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
72	[BUG]  [BUGGY]  if  (denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if  (numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  if  (denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if  (numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [BUGGY]    denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if    (denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if  (numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
73	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf('.',  numerator);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(   "The  denominator  must  not  be  zero   ");  }  if  (denominator  <  0)  {    [BUGGY]  int  denominator  =  toProperString.indexOf('.',  numerator);  [BUGGY]    if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.indexOf('.',  numerator);	      int    denominator    =    toProperString.hashCode();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
