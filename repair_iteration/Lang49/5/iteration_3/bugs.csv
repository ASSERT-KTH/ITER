bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]          AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  ==  numerator  ||  denominator  ==  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	add	if(numerator  ==  numerator  ||  denominator  ==  Integer.MIN_VALUE)  {	  if    (denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if    (denominator    ==    Integer.MIN_VALUE    ||    denominator!=    Integer.MIN_VALUE)    {    	compilable	  [FE]  ArithmeticException  	12	3	replace
2	[BUG]  [BUGGY]  if(numerator  ==  numerator  ||  denominator  ==  Integer.MIN_VALUE)  {  [FE]  ArithmeticException  [FE]          AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  ==  numerator  ||  denominator  ==  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator  ==  numerator  ||  denominator  ==  Integer.MIN_VALUE)  {	  if    (denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if    (denominator    ==    Integer.MIN_VALUE    ||    denominator!=    Integer.MIN_VALUE)    {    	compilable	  [FE]  ArithmeticException  	12	3	replace
3	[BUG]  [BUGGY]  int  denominator  =  toProperString.lastIndexOf(denominator,  0);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toProperString.lastIndexOf(denominator,  0);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.lastIndexOf(denominator,  0);	  int    denominator    =    toProperString.lastIndexOf(denominator);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
4	[BUG]  [BUGGY]  int  denominator  =  toProperString.lastIndexOf(denominator,  numerator);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toProperString.lastIndexOf(denominator,  numerator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.lastIndexOf(denominator,  numerator);	  int    denominator    =    toProperString.lastIndexOf(denominator);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
5	[BUG]  [BUGGY]  int  denominator  =  toProperString.lastIndexOf(denominator,  hashCode);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toProperString.lastIndexOf(denominator,  hashCode);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.lastIndexOf(denominator,  hashCode);	  int    denominator    =    toProperString.lastIndexOf(denominator);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
6	[BUG]  [BUGGY]  int  denominator  =  toProperString.lastIndexOf(numerator);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toProperString.lastIndexOf(numerator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.lastIndexOf(numerator);	  int    denominator    =    toProperString.lastIndexOf(denominator);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
7	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  desominator  ==  Integer.MAX_VALUE)  {  [CE]  cannot  find  symbol  desominator  [FE]          AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  desominator  ==  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(denominator  ==  Integer.MIN_VALUE  ||  desominator  ==  Integer.MAX_VALUE)  {	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    if(numerator    ==    Integer.MIN_VALUE    ||    desominator    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  cannot  find  symbol  desominator	54	None	replace
8	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	add	if(denominator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {	  if    (denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if    (numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    	compilable	  [FE]  ArithmeticException  	72	3	replace
9	[BUG]  [BUGGY]  if(denominator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  [FE]  ArithmeticException  [FE]        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(denominator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {	  if    (denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if    (numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    	compilable	  [FE]  ArithmeticException  	72	3	replace
10	[BUG]  [BUGGY]  Numerator  denominator  =  ZERO.equals(denominator);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  denominator  =  ZERO.equals(denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  denominator  =  ZERO.equals(denominator);	  Numerator    numerator    =    ZERO.equals(denominator);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
11	[BUG]  [BUGGY]  Numerator  numerator  =  numerator.equals(denominator);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  numerator  =  numerator.equals(denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  numerator  =  numerator.equals(denominator);	  Numerator    numerator    =    ZERO.equals(denominator);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
12	[BUG]  [BUGGY]  Numerator  denominator  =  numerator.equals(denominator);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  denominator  =  numerator.equals(denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  denominator  =  numerator.equals(denominator);	  Numerator    numerator    =    ZERO.equals(denominator);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
13	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf('.',  0,  denominator);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toProperString.indexOf('.',  0,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.indexOf('.',  0,  denominator);	  int    denominator    =    toProperString.indexOf('.',    numerator);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
14	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf('.',  numerator  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toProperString.indexOf('.',  numerator  +  1);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.indexOf('.',  numerator  +  1);	  int    denominator    =    toProperString.indexOf('.',    numerator);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
15	[BUG]  [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.',  numerator);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.',  numerator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.lastIndexOf('.',  numerator);	  int    denominator    =    toProperString.indexOf('.',    numerator);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
16	[BUG]  [BUGGY]  if(numerator!=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]    ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator!=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator!=    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
17	[BUG]  [BUGGY]  if(numerator!=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator!=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]      ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator!=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator!=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator!=    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if(numerator!=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
18	[BUG]  [BUGGY]  if(numerator!=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  >=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]        ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator!=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  >=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator!=    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if(numerator  >=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
19	[BUG]  [BUGGY]  if(denominator  <  =  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  <  =  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(denominator  <  =  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {	  if(numerator    <    =    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
20	[BUG]  [BUGGY]  int  numerator  =  getNumerator().denominator  +  denominator;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  numerator  =  getNumerator().denominator  +  denominator;  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  numerator  =  getNumerator().denominator  +  denominator;	  int    numerator    =    getNumerator().denominator;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
21	[BUG]  [BUGGY]  int  numerator  =  getNumerator().denominator  -  denominator;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  numerator  =  getNumerator().denominator  -  denominator;  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  numerator  =  getNumerator().denominator  -  denominator;	  int    numerator    =    getNumerator().denominator;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
22	[BUG]  [BUGGY]  int  numerator  =  getNumerator().numerator;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  numerator  =  getNumerator().numerator;  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  numerator  =  getNumerator().numerator;	  int    numerator    =    getNumerator().denominator;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
23	[BUG]  [BUGGY]  int  numerator  =  getNumerator(denominator,  hashCode);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  numerator  =  getNumerator(denominator,  hashCode);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  numerator  =  getNumerator(denominator,  hashCode);	  int    numerator    =    getNumerator(denominator);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
24	[BUG]  [BUGGY]  int  numerator  =  getNumerator(denominator,  ZERO);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  numerator  =  getNumerator(denominator,  ZERO);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  numerator  =  getNumerator(denominator,  ZERO);	  int    numerator    =    getNumerator(denominator);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
25	[BUG]  [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.',  denominator);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.',  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.lastIndexOf('.',  denominator);	  int    denominator    =    toProperString.indexOf('.',    denominator);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
26	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf('.',  0);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toProperString.indexOf('.',  0);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.indexOf('.',  0);	  int    denominator    =    toProperString.indexOf('.',    denominator);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
27	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  ==  numerator  ||  denominator  ==  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	add	if(numerator  ==  numerator  ||  denominator  ==  Integer.MAX_VALUE)  {	  if(numerator    ==    Integer.MIN_VALUE    &&    denominator    ==    Integer.MAX_VALUE)    {    	compilable	  [FE]  ArithmeticException  	65	3	replace
28	[BUG]  [BUGGY]  if(numerator  ==  numerator  ||  denominator  ==  Integer.MAX_VALUE)  {  [FE]  ArithmeticException  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  ==  numerator  ||  denominator  ==  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator  ==  numerator  ||  denominator  ==  Integer.MAX_VALUE)  {	  if(numerator    ==    Integer.MIN_VALUE    &&    denominator    ==    Integer.MAX_VALUE)    {    	compilable	  [FE]  ArithmeticException  	65	3	replace
29	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator!=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	add	if(numerator!=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {	  if(numerator    ==    Integer.MIN_VALUE    &&    denominator    ==    Integer.MAX_VALUE)    {    	compilable	  [FE]  ArithmeticException  	65	3	replace
30	[BUG]  [BUGGY]  if(numerator!=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [FE]  ArithmeticException  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator!=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator!=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {	  if(numerator    ==    Integer.MIN_VALUE    &&    denominator    ==    Integer.MAX_VALUE)    {    	compilable	  [FE]  ArithmeticException  	65	3	replace
31	[BUG]  [BUGGY]  int  numerator  =  getNumber();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  numerator  =  getNumber();  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  numerator  =  getNumber();	  int    numerator    =    getDenominator();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
32	[BUG]  [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  ||  desominator  ==  Integer.MIN_VALUE)  {  [CE]  cannot  find  symbol  desominator  [FE]        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  ||  desominator  ==  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator  ==  Integer.MIN_VALUE  ||  desominator  ==  Integer.MIN_VALUE)  {	  if    (denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if    (denominator    ==    Integer.MIN_VALUE    ||    desominator    ==    Integer.MIN_VALUE)    {    	non-compiled	[CE]  cannot  find  symbol  desominator	66	None	replace
33	[BUG]  [BUGGY]  Numerator  numerator  =  getNumerator().denominator  +  denominator;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  numerator  =  getNumerator().denominator  +  denominator;  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  numerator  =  getNumerator().denominator  +  denominator;	  Numerator    numerator    =    getNumerator().denominator;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
34	[BUG]  [BUGGY]  Numerator  denominator  =  getNumerator().denominator;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  denominator  =  getNumerator().denominator;  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  denominator  =  getNumerator().denominator;	  Numerator    numerator    =    getNumerator().denominator;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
35	[BUG]  [BUGGY]  Numerator  numerator  =  getNumerator().denominator  -  denominator;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  numerator  =  getNumerator().denominator  -  denominator;  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  numerator  =  getNumerator().denominator  -  denominator;	  Numerator    numerator    =    getNumerator().denominator;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
36	[BUG]  [BUGGY]  int  denominator  =  toProperString.hashCode()  /  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toProperString.hashCode()  /  1;  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.hashCode()  /  1;	  int    denominator    =    toProperString.hashCode()    +    1;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
37	[BUG]  [BUGGY]  Numerator  denominator  =  getNumerator(numerator,  denominator);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  denominator  =  getNumerator(numerator,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  denominator  =  getNumerator(numerator,  denominator);	  Numerator    numerator    =    getNumerator(denominator,    denominator);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
38	[BUG]  [BUGGY]  Numerator  numerator  =  getNumerator(numerator,  denominator,  hashCode);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  numerator  =  getNumerator(numerator,  denominator,  hashCode);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  numerator  =  getNumerator(numerator,  denominator,  hashCode);	  Numerator    numerator    =    getNumerator(denominator,    denominator);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
39	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf(denominator,  denominator);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toProperString.indexOf(denominator,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.indexOf(denominator,  denominator);	  int    denominator    =    toProperString.indexOf(denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
40	[BUG]  [BUGGY]  int  denominator  =  toProperString.lastIndexOf(denominator,  denominator);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toProperString.lastIndexOf(denominator,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.lastIndexOf(denominator,  denominator);	  int    denominator    =    toProperString.indexOf(denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
41	[BUG]  [BUGGY]  int  numerator  =  getNumerator(numerator,  denominator,  hashCode);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  numerator  =  getNumerator(numerator,  denominator,  hashCode);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  numerator  =  getNumerator(numerator,  denominator,  hashCode);	  int    numerator    =    getNumerator(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
42	[BUG]  [BUGGY]  int  numerator  =  getNumerator(numerator,  denominator,  ZERO);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  numerator  =  getNumerator(numerator,  denominator,  ZERO);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  numerator  =  getNumerator(numerator,  denominator,  ZERO);	  int    numerator    =    getNumerator(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
43	[BUG]  [BUGGY]  int  numerator  =  getNumerator(numerator,  denominator,  0);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  numerator  =  getNumerator(numerator,  denominator,  0);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  numerator  =  getNumerator(numerator,  denominator,  0);	  int    numerator    =    getNumerator(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
44	[BUG]  [BUGGY]  int  numerator  =  getDenominator(numerator,  denominator);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  numerator  =  getDenominator(numerator,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  numerator  =  getDenominator(numerator,  denominator);	  int    numerator    =    getNumerator(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
45	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf(numerator,  denominator,  hashCode);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toProperString.indexOf(numerator,  denominator,  hashCode);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.indexOf(numerator,  denominator,  hashCode);	  int    denominator    =    toProperString.indexOf(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
46	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf(numerator,  denominator,  0);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toProperString.indexOf(numerator,  denominator,  0);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.indexOf(numerator,  denominator,  0);	  int    denominator    =    toProperString.indexOf(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
47	[BUG]  [BUGGY]  Numerator  denominator  =  getNumber();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  denominator  =  getNumber();  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  denominator  =  getNumber();	  Numerator    denominator    =    getNumerator();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
48	[BUG]  [BUGGY]  Numerator  numerator  =  denominator.equals(denominator);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  numerator  =  denominator.equals(denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  numerator  =  denominator.equals(denominator);	  Numerator    numerator    =    denominator.equals(ZERO);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
49	[BUG]  [BUGGY]  int  denominator  =  getNumerator().denominator;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  getNumerator().denominator;  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  getNumerator().denominator;	  int    denominator    =    getNumerator();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
50	[BUG]  [BUGGY]  int  denominator  =  getNegativeNumerator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  getNegativeNumerator();  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  getNegativeNumerator();	  int    denominator    =    getNumerator();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
51	[BUG]  [BUGGY]  Numerator  denominator  =  getDenominator(denominator);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  denominator  =  getDenominator(denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  denominator  =  getDenominator(denominator);	  Numerator    denominator    =    getDenominator();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
52	[BUG]  [BUGGY]  Numerator  denominator  =  getDenominator().denominator;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  denominator  =  getDenominator().denominator;  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  denominator  =  getDenominator().denominator;	  Numerator    denominator    =    getDenominator();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
53	[BUG]  [BUGGY]  Numerator  denominator  =  getDenominator(0);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  denominator  =  getDenominator(0);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  denominator  =  getDenominator(0);	  Numerator    denominator    =    getDenominator();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
54	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  <  0  ||  denominator  >  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	add	if(numerator  <  0  ||  denominator  >  Integer.MAX_VALUE)  {	  if(numerator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    if(numerator    <    Integer.MIN_VALUE    ||    dedenator    >    Integer.MAX_VALUE)    {    	compilable	  [FE]  ArithmeticException  	10	2	replace
55	[BUG]  [BUGGY]  if(numerator  <  0  ||  denominator  >  Integer.MAX_VALUE)  {  [FE]  ArithmeticException  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  <  0  ||  denominator  >  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator  <  0  ||  denominator  >  Integer.MAX_VALUE)  {	  if(numerator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    if(numerator    <    Integer.MIN_VALUE    ||    dedenator    >    Integer.MAX_VALUE)    {    	compilable	  [FE]  ArithmeticException  	10	2	replace
56	[BUG]  [BUGGY]  Numerator  numerator  =  getNegativeNumerator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  numerator  =  getNegativeNumerator();  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  numerator  =  getNegativeNumerator();	  Numerator    numerator    =    getDenominator();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
57	[BUG]  [BUGGY]  int  denominator  =  numerator.hashCode();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  numerator.hashCode();  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  numerator.hashCode();	  int    denominator    =    toString.hashCode();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
58	[BUG]  [BUGGY]  int  denominator  =  getDenominator(0).denominator;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  getDenominator(0).denominator;  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  getDenominator(0).denominator;	  int    denominator    =    getDenominator(0);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
59	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
60	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  if(denominator  ==  Integer.MIN_VALUE  ||  denominator!=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  if(denominator  ==  Integer.MIN_VALUE  ||  denominator!=  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    if(denominator  ==  Integer.MIN_VALUE  ||  denominator!=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
61	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  If(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  If(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    If(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	27	None	add
62	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  if(denominator  ==  Integer.MIN_VALUE  ||  desnominator  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  if(denominator  ==  Integer.MIN_VALUE  ||  desnominator  ==  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    if(denominator  ==  Integer.MIN_VALUE  ||  desnominator  ==  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
63	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	add	if(denominator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	28	2	replace
64	[BUG]  [BUGGY]  if(denominator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(denominator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {	  if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	28	2	replace
65	[BUG]  [BUGGY]  int  denominator  =  toProperString.hashCode()  /  denominator;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toProperString.hashCode()  /  denominator;  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.hashCode()  /  denominator;	  int    denominator    =    toProperString.hashCode()    *    denominator;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
66	[BUG]  [BUGGY]  int  denominator  =  toProperString.hashCode()  *  numerator;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toProperString.hashCode()  *  numerator;  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.hashCode()  *  numerator;	  int    denominator    =    toProperString.hashCode()    *    denominator;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
67	[BUG]  [BUGGY]  int  denominator  =  toProperString.hashCode()  *  ZERO;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toProperString.hashCode()  *  ZERO;  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.hashCode()  *  ZERO;	  int    denominator    =    toProperString.hashCode()    *    denominator;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
68	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  desnominator  ==  Integer.MAX_VALUE)  {  [CE]  cannot  find  symbol  desnominator  [FE]        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  desnominator  ==  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(denominator  ==  Integer.MIN_VALUE  ||  desnominator  ==  Integer.MAX_VALUE)  {	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    if(numerator    ==    Integer.MIN_VALUE    ||    desnominator    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  cannot  find  symbol  desnominator	53	None	replace
69	[BUG]  [BUGGY]  Numerator  numerator  =  toProperString.equals(denominator);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  numerator  =  toProperString.equals(denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  numerator  =  toProperString.equals(denominator);	  Numerator    numerator    =    toProperString.equals(numerator);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
70	[BUG]  [BUGGY]  Numerator  numerator  =  toProperString.equals(numerator,  denominator);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  numerator  =  toProperString.equals(numerator,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  numerator  =  toProperString.equals(numerator,  denominator);	  Numerator    numerator    =    toProperString.equals(numerator);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
71	[BUG]  [BUGGY]  Numerator  denominator  =  toProperString.equals(denominator);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  denominator  =  toProperString.equals(denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  denominator  =  toProperString.equals(denominator);	  Numerator    numerator    =    toProperString.equals(numerator);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
72	[BUG]  [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  if(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  if(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator    <    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    if(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
73	[BUG]  [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  if(numerator  <  Integer.MIN_VALUE  ||  denominator!=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  if(numerator  <  Integer.MIN_VALUE  ||  denominator!=  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator    <    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    if(numerator  <  Integer.MIN_VALUE  ||  denominator!=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
74	[BUG]  [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  If(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  If(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator    <    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    If(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	29	None	add
75	[BUG]  [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  if(numerator  <  Integer.MIN_VALUE  ||  denominator  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  if(numerator  <  Integer.MIN_VALUE  ||  denominator  >=  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator    <    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    if(numerator  <  Integer.MIN_VALUE  ||  denominator  >=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
76	[BUG]  [BUGGY]  int  denominator  =  getDenominator().denominator  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  getDenominator().denominator  +  1;  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  getDenominator().denominator  +  1;	  int    denominator    =    getDenominator().denominator;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
77	[BUG]  [BUGGY]  int  denominator  =  getDenominator().denominator  -  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  getDenominator().denominator  -  1;  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  getDenominator().denominator  -  1;	  int    denominator    =    getDenominator().denominator;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
78	[BUG]  [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  &&  denominator  ==  Integer.MAX_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  &&  denominator  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  &&  denominator  ==  Integer.MAX_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  &&  denominator  ==  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator    ==    Integer.MIN_VALUE    &&    denominator    ==    Integer.MAX_VALUE)    {    if(numerator  ==  Integer.MIN_VALUE  &&  denominator  ==  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
79	[BUG]  [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  &&  denominator  ==  Integer.MAX_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  &&  denominator!=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  &&  denominator  ==  Integer.MAX_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  &&  denominator!=  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator    ==    Integer.MIN_VALUE    &&    denominator    ==    Integer.MAX_VALUE)    {    if(numerator  ==  Integer.MIN_VALUE  &&  denominator!=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
80	[BUG]  [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  &&  denominator  ==  Integer.MAX_VALUE)  {  If(numerator  ==  Integer.MIN_VALUE  &&  denominator  ==  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  &&  denominator  ==  Integer.MAX_VALUE)  {  If(numerator  ==  Integer.MIN_VALUE  &&  denominator  ==  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator    ==    Integer.MIN_VALUE    &&    denominator    ==    Integer.MAX_VALUE)    {    If(numerator  ==  Integer.MIN_VALUE  &&  denominator  ==  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	64	None	add
81	[BUG]  [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  &&  denominator  ==  Integer.MAX_VALUE)  {  if(numerator!=  Integer.MIN_VALUE  &&  denominator  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  &&  denominator  ==  Integer.MAX_VALUE)  {  if(numerator!=  Integer.MIN_VALUE  &&  denominator  ==  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator    ==    Integer.MIN_VALUE    &&    denominator    ==    Integer.MAX_VALUE)    {    if(numerator!=  Integer.MIN_VALUE  &&  denominator  ==  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
82	[BUG]  [BUGGY]  int  denominator  =  getNumerator(numerator,  denominator);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  getNumerator(numerator,  denominator);  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  getNumerator(numerator,  denominator);	  int    denominator    =    getNumerator(numerator);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
83	[BUG]  [BUGGY]  int  denominator  =  getNumerator(denominator);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  getNumerator(denominator);  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  getNumerator(denominator);	  int    denominator    =    getNumerator(numerator);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
84	[BUG]  [BUGGY]  if(denominator  <  Integer.MIN_VALUE  ||  desnominator  >  Integer.MAX_VALUE)  {  [CE]  cannot  find  symbol  desnominator  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  <  Integer.MIN_VALUE  ||  desnominator  >  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(denominator  <  Integer.MIN_VALUE  ||  desnominator  >  Integer.MAX_VALUE)  {	  if(numerator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    if(numerator    <    Integer.MIN_VALUE    ||    desnominator    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  cannot  find  symbol  desnominator	9	None	replace
85	[BUG]  [BUGGY]  Numerator  numerator  =  getFraction(numerator,  denominator);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  numerator  =  getFraction(numerator,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  numerator  =  getFraction(numerator,  denominator);	  Numerator    numerator    =    getNumerator(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
86	[BUG]  [BUGGY]  int  denominator  =  getDenominator(denominator,  numerator);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  getDenominator(denominator,  numerator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  getDenominator(denominator,  numerator);	  int    denominator    =    getDenominator(denominator);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
87	[BUG]  [BUGGY]  int  denominator  =  getDenominator(denominator,  0);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  getDenominator(denominator,  0);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  getDenominator(denominator,  0);	  int    denominator    =    getDenominator(denominator);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
88	[BUG]  [BUGGY]  int  denominator  =  getDenominator(denominator,  hashCode);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  getDenominator(denominator,  hashCode);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  getDenominator(denominator,  hashCode);	  int    denominator    =    getDenominator(denominator);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
89	[BUG]  [BUGGY]  Numerator  denominator  =  getNumerator(denominator,  numerator);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  denominator  =  getNumerator(denominator,  numerator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  denominator  =  getNumerator(denominator,  numerator);	  Numerator    denominator    =    getNumerator(denominator);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
90	[BUG]  [BUGGY]  Numerator  denominator  =  getDenominator(numerator);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  denominator  =  getDenominator(numerator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  denominator  =  getDenominator(numerator);	  Numerator    denominator    =    getNumerator(numerator);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
91	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  <  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	add	if(numerator  ==  Integer.MIN_VALUE  ||  denominator  <  Integer.MAX_VALUE)  {	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    	compilable	  [FE]  ArithmeticException  	15	3	replace
92	[BUG]  [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  <  Integer.MAX_VALUE)  {  [FE]  ArithmeticException  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  <  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator  ==  Integer.MIN_VALUE  ||  denominator  <  Integer.MAX_VALUE)  {	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    	compilable	  [FE]  ArithmeticException  	15	3	replace
93	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	add	if(denominator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	15	1	replace
94	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(denominator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	15	1	replace
95	[BUG]  [BUGGY]  int  denominator  =  toProperString.length()  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toProperString.length()  +  1;  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.length()  +  1;	  int    denominator    =    toProperString.length();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
96	[BUG]  [BUGGY]  int  denominator  =  toProperString.length()  -  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toProperString.length()  -  1;  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.length()  -  1;	  int    denominator    =    toProperString.length();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
97	[BUG]  [BUGGY]  int  denominator  =  toProperString.length()  *  denominator;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toProperString.length()  *  denominator;  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.length()  *  denominator;	  int    denominator    =    toProperString.length();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
98	[BUG]  [BUGGY]  int  denominator  =  toProperString.length()  -  2;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toProperString.length()  -  2;  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.length()  -  2;	  int    denominator    =    toProperString.length();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
99	[BUG]  [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator    <    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
100	[BUG]  [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  <  Integer.MIN_VALUE  ||  denominator!=  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  <  Integer.MIN_VALUE  ||  denominator!=  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator    <    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if(numerator  <  Integer.MIN_VALUE  ||  denominator!=  Integer.MIN_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
101	[BUG]  [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  If(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  If(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator    <    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    If(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {	  	non-compiled	[CE]  ';'  expected	21	None	add
102	[BUG]  [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  <  Integer.MIN_VALUE  ||  denominator  >=  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  <  Integer.MIN_VALUE  ||  denominator  >=  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator    <    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if(numerator  <  Integer.MIN_VALUE  ||  denominator  >=  Integer.MIN_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
103	[BUG]  [BUGGY]  int  numerator  =  getNumerator(denominator,  denominator,  hashCode);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  numerator  =  getNumerator(denominator,  denominator,  hashCode);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  numerator  =  getNumerator(denominator,  denominator,  hashCode);	  int    numerator    =    getNumerator(denominator,    denominator);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
104	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]          AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator!=  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	add	if(denominator  ==  Integer.MIN_VALUE  ||  denominator!=  Integer.MAX_VALUE)  {	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator!=    Integer.MAX_VALUE)    {    	compilable	  [FE]  ArithmeticException  	46	3	replace
105	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator!=  Integer.MAX_VALUE)  {  [FE]  ArithmeticException  [FE]          AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator!=  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(denominator  ==  Integer.MIN_VALUE  ||  denominator!=  Integer.MAX_VALUE)  {	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator!=    Integer.MAX_VALUE)    {    	compilable	  [FE]  ArithmeticException  	46	3	replace
106	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  <  0  ||  numerator  ==  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	add	if(denominator  <  0  ||  numerator  ==  Integer.MIN_VALUE)  {	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator!=    Integer.MAX_VALUE)    {    	compilable	  [FE]  ArithmeticException  	46	3	replace
107	[BUG]  [BUGGY]  if(denominator  <  0  ||  numerator  ==  Integer.MIN_VALUE)  {  [FE]  ArithmeticException  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  <  0  ||  numerator  ==  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(denominator  <  0  ||  numerator  ==  Integer.MIN_VALUE)  {	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator!=    Integer.MAX_VALUE)    {    	compilable	  [FE]  ArithmeticException  	46	3	replace
108	[BUG]  [BUGGY]  Numerator  numerator  =  getDenominator(denominator);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  numerator  =  getDenominator(denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  numerator  =  getDenominator(denominator);	  Numerator    numerator    =    getDenominator(numerator);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
109	[BUG]  [BUGGY]  Numerator  numerator  =  getFraction(numerator);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  numerator  =  getFraction(numerator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  numerator  =  getFraction(numerator);	  Numerator    numerator    =    getDenominator(numerator);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
110	[BUG]  [BUGGY]  int  numerator  =  getDenominator(denominator,  denominator);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  numerator  =  getDenominator(denominator,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  numerator  =  getDenominator(denominator,  denominator);	  int    numerator    =    getDenominator(denominator);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
111	[BUG]  [BUGGY]  int  numerator  =  getDenominator(denominator,  hashCode);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  numerator  =  getDenominator(denominator,  hashCode);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  numerator  =  getDenominator(denominator,  hashCode);	  int    numerator    =    getDenominator(denominator);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
112	[BUG]  [BUGGY]  int  numerator  =  getDenominator(denominator,  0);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  numerator  =  getDenominator(denominator,  0);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  numerator  =  getDenominator(denominator,  0);	  int    numerator    =    getDenominator(denominator);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
113	[BUG]  [BUGGY]  if(numerator  ==  numerator  ||  denominator  ==  Integer.MIN_VALUE)  {  If(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  ==  numerator  ||  denominator  ==  Integer.MIN_VALUE)  {  If(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator  ==  numerator  ||  denominator  ==  Integer.MIN_VALUE)  {  If(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {	  if    (denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    If    (denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
114	[BUG]  [BUGGY]  If  (denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  If  (denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	If  (denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {	  if    (denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    If    (denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
115	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf(numerator,  0);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toProperString.indexOf(numerator,  0);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.indexOf(numerator,  0);	  int    denominator    =    toProperString.indexOf(denominator,    0);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
116	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf(denominator,  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toProperString.indexOf(denominator,  1);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.indexOf(denominator,  1);	  int    denominator    =    toProperString.indexOf(denominator,    0);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
117	[BUG]  [BUGGY]  If(numerator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  If(numerator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	If(numerator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {	  if(numerator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    If(numerator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
118	[BUG]  [BUGGY]  If(denominator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  If(denominator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	If(denominator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {	  if(numerator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    If(numerator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
119	[BUG]  [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.',  0);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toProperString.lastIndexOf('.',  0);  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.lastIndexOf('.',  0);	  int    denominator    =    toProperString.lastIndexOf('.');    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
120	[BUG]  [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator    ==    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
121	[BUG]  [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  If(numerator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  If(numerator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator    ==    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    If(numerator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
122	[BUG]  [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  if(numerator!=  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  if(numerator!=  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator    ==    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    if(numerator!=  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
123	[BUG]  [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  if(numerator  >=  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  if(numerator  >=  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator    ==    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    if(numerator  >=  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
124	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	add	if(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {	  if    (denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if    (denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    	compilable	  [FE]  ArithmeticException  	11	2	replace
125	[BUG]  [BUGGY]  if(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  [FE]  ArithmeticException  [FE]        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator  <  0  ||  denominator  ==  Integer.MIN_VALUE)  {	  if    (denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if    (denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    	compilable	  [FE]  ArithmeticException  	11	2	replace
126	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  >=  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	add	if(numerator  <  Integer.MIN_VALUE  ||  denominator  >=  Integer.MAX_VALUE)  {	  if(denominator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	17	2	replace
127	[BUG]  [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  >=  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  >=  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator  <  Integer.MIN_VALUE  ||  denominator  >=  Integer.MAX_VALUE)  {	  if(denominator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	17	2	replace
128	[BUG]  [BUGGY]  if(denominator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  if(denominator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  if(denominator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(denominator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    if(denominator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
129	[BUG]  [BUGGY]  if(denominator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  If(denominator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  If(denominator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(denominator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    If(denominator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
130	[BUG]  [BUGGY]  if(denominator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  if(denominator  <  Integer.MIN_VALUE  ||  desnominator  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  if(denominator  <  Integer.MIN_VALUE  ||  desnominator  >  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(denominator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    if(denominator  <  Integer.MIN_VALUE  ||  desnominator  >  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
131	[BUG]  [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  getDenominator(numerator,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  getDenominator(numerator,  denominator);	  int    denominator    =    getDenominator(numerator);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
132	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  >=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	add	if(numerator  >=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {	  if(numerator    <    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    	compilable	  [FE]  ArithmeticException  	22	3	replace
133	[BUG]  [BUGGY]  if(numerator  >=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [FE]  ArithmeticException  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  >=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator  >=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {	  if(numerator    <    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    	compilable	  [FE]  ArithmeticException  	22	3	replace
134	[BUG]  [BUGGY]  If(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  If(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	If(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    If(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  ';'  expected	47	None	replace
135	[BUG]  [BUGGY]  int  numerator  =  getNumber(denominator,  denominator);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  numerator  =  getNumber(denominator,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  numerator  =  getNumber(denominator,  denominator);	  int    numerator    =    getNumber(denominator);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
136	[BUG]  [BUGGY]  int  numerator  =  getNumber(numerator,  denominator);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  numerator  =  getNumber(numerator,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  numerator  =  getNumber(numerator,  denominator);	  int    numerator    =    getNumber(denominator);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
137	[BUG]  [BUGGY]  int  numerator  =  getNumber(denominator,  hashCode);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  numerator  =  getNumber(denominator,  hashCode);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  numerator  =  getNumber(denominator,  hashCode);	  int    numerator    =    getNumber(denominator);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
138	[BUG]  [BUGGY]  int  numerator  =  getNumber(denominator,  0);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  numerator  =  getNumber(denominator,  0);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  numerator  =  getNumber(denominator,  0);	  int    numerator    =    getNumber(denominator);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
139	[BUG]  [BUGGY]  if(denominator  <  0  ||  numerator  >  Integer.MIN_VALUE)  {  If(numerator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  <  0  ||  numerator  >  Integer.MIN_VALUE)  {  If(numerator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(denominator  <  0  ||  numerator  >  Integer.MIN_VALUE)  {  If(numerator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {	  if(numerator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    If(numerator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
140	[BUG]  [BUGGY]  if(denominator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  If(numerator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  If(numerator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(denominator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  If(numerator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {	  if(numerator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    If(numerator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
141	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  If(numerator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  If(numerator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(denominator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  If(numerator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {	  if(numerator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    If(numerator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
142	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf(denominator,  -1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toProperString.indexOf(denominator,  -1);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.indexOf(denominator,  -1);	  int    denominator    =    toProperString.indexOf(denominator,    0);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
143	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf(denominator,  0)+  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toProperString.indexOf(denominator,  0)+  1;  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.indexOf(denominator,  0)+  1;	  int    denominator    =    toProperString.indexOf(denominator,    0);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
144	[BUG]  [BUGGY]  int  denominator  =  toProperString.lastIndexOf(denominator  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toProperString.lastIndexOf(denominator  +  1);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.lastIndexOf(denominator  +  1);	  int    denominator    =    toProperString.lastIndexOf(denominator);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
145	[BUG]  [BUGGY]  int  denominator  =  toProperString.lastIndexOf(denominator  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toProperString.lastIndexOf(denominator  -  1);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.lastIndexOf(denominator  -  1);	  int    denominator    =    toProperString.lastIndexOf(denominator);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
146	[BUG]  [BUGGY]  int  numerator  =  getNumerator().denominator  -  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  numerator  =  getNumerator().denominator  -  1;  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  numerator  =  getNumerator().denominator  -  1;	  int    numerator    =    getNumerator().denominator;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
147	[BUG]  [BUGGY]  int  numerator  =  getNumerator().denominator  *  denominator;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  numerator  =  getNumerator().denominator  *  denominator;  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  numerator  =  getNumerator().denominator  *  denominator;	  int    numerator    =    getNumerator().denominator;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
148	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  <  0)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	add	if(denominator  <  0)  {	  if(numerator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    if(numerator    <    Integer.MIN_VALUE    ||    dedenator    >    Integer.MAX_VALUE)    {    	compilable	  [FE]  ArithmeticException  	10	3	replace
149	[BUG]  [BUGGY]  if(denominator  <  0)  {  [FE]  ArithmeticException  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  <  0)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(denominator  <  0)  {	  if(numerator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    if(numerator    <    Integer.MIN_VALUE    ||    dedenator    >    Integer.MAX_VALUE)    {    	compilable	  [FE]  ArithmeticException  	10	3	replace
150	[BUG]  [BUGGY]  if(denominator  <  =  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  <  =  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(denominator  <  =  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {	  if(numerator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    if(numerator    <    Integer.MIN_VALUE    ||    dedenator    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
151	[BUG]  [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  if(numerator  <  Integer.MIN_VALUE  ||  desnominator  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  if(numerator  <  Integer.MIN_VALUE  ||  desnominator  ==  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator    <    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    if(numerator  <  Integer.MIN_VALUE  ||  desnominator  ==  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
152	[BUG]  [BUGGY]  if(numerator  ==  numerator  ||  denominator  ==  Integer.MIN_VALUE)  {  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  ==  numerator  ||  denominator  ==  Integer.MIN_VALUE)  {  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator  ==  numerator  ||  denominator  ==  Integer.MIN_VALUE)  {  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {	  if    (denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if    (denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
153	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  numerator  ==  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	add	if(denominator  ==  Integer.MIN_VALUE  ||  numerator  ==  Integer.MIN_VALUE)  {	  if(numerator!=    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	24	1	replace
154	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  numerator  ==  Integer.MIN_VALUE)  {  [FE]  AssertionFailedError  [FE]    ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  numerator  ==  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(denominator  ==  Integer.MIN_VALUE  ||  numerator  ==  Integer.MIN_VALUE)  {	  if(numerator!=    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	24	1	replace
155	[BUG]  [BUGGY]  int  denominator  =  toString.length();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toString.length();  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toString.length();	  int    denominator    =    toString.hashCode();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
156	[BUG]  [BUGGY]  int  denominator  =  toString.indexOf('.',  denominator);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toString.indexOf('.',  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toString.indexOf('.',  denominator);	  int    denominator    =    toString.hashCode();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
157	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  &&  numerator  ==  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	add	if(denominator  ==  Integer.MIN_VALUE  &&  numerator  ==  Integer.MAX_VALUE)  {	  if(numerator    ==    Integer.MIN_VALUE    &&    denominator    ==    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	65	2	replace
158	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  &&  numerator  ==  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  &&  numerator  ==  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(denominator  ==  Integer.MIN_VALUE  &&  numerator  ==  Integer.MAX_VALUE)  {	  if(numerator    ==    Integer.MIN_VALUE    &&    denominator    ==    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	65	2	replace
159	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  &&  denominator  ==  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	add	if(denominator  ==  Integer.MIN_VALUE  &&  denominator  ==  Integer.MAX_VALUE)  {	  if(numerator    ==    Integer.MIN_VALUE    &&    denominator    ==    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	65	2	replace
160	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  &&  denominator  ==  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  &&  denominator  ==  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(denominator  ==  Integer.MIN_VALUE  &&  denominator  ==  Integer.MAX_VALUE)  {	  if(numerator    ==    Integer.MIN_VALUE    &&    denominator    ==    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	65	2	replace
161	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	add	if(denominator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {	  if(numerator    <    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	22	1	replace
162	[BUG]  [BUGGY]  if(denominator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(denominator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {	  if(numerator    <    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	22	1	replace
163	[BUG]  [BUGGY]  Numerator  numerator  =  denominator.equals(fn);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  numerator  =  denominator.equals(fn);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  numerator  =  denominator.equals(fn);	  Numerator    numerator    =    denominator.equals(ZERO);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
164	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf(numerator,  denominator  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toProperString.indexOf(numerator,  denominator  -  1);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.indexOf(numerator,  denominator  -  1);	  int    denominator    =    toProperString.indexOf(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
165	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator!=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	add	if(denominator!=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    if(numerator!=    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    	compilable	  [FE]  ArithmeticException  	48	3	replace
166	[BUG]  [BUGGY]  if(denominator!=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [FE]  ArithmeticException  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator!=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(denominator!=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    if(numerator!=    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    	compilable	  [FE]  ArithmeticException  	48	3	replace
167	[BUG]  [BUGGY]  int  numerator  =  getDenominator()  -  denominator;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  numerator  =  getDenominator()  -  denominator;  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  numerator  =  getDenominator()  -  denominator;	  int    numerator    =    getDenominator();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
168	[BUG]  [BUGGY]  int  numerator  =  getNumerator(denominator,  denominator,  ZERO);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  numerator  =  getNumerator(denominator,  denominator,  ZERO);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  numerator  =  getNumerator(denominator,  denominator,  ZERO);	  int    numerator    =    getNumerator(denominator,    denominator);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
169	[BUG]  [BUGGY]  int  numerator  =  getNumerator(numerator,  denominator,  denominator);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  numerator  =  getNumerator(numerator,  denominator,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  numerator  =  getNumerator(numerator,  denominator,  denominator);	  int    numerator    =    getNumerator(denominator,    denominator);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
170	[BUG]  [BUGGY]  int  numerator  =  getDenominator(denominator,  ZERO);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  numerator  =  getDenominator(denominator,  ZERO);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  numerator  =  getDenominator(denominator,  ZERO);	  int    numerator    =    getDenominator(denominator);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
171	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  <  0  ||  numerator  >  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	add	if(denominator  <  0  ||  numerator  >  Integer.MIN_VALUE)  {	  if(numerator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    if(numerator    <    Integer.MIN_VALUE    ||    desnominator    >    Integer.MAX_VALUE)    {    	compilable	  [FE]  ArithmeticException  	9	3	replace
172	[BUG]  [BUGGY]  if(denominator  <  0  ||  numerator  >  Integer.MIN_VALUE)  {  [FE]  ArithmeticException  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  <  0  ||  numerator  >  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(denominator  <  0  ||  numerator  >  Integer.MIN_VALUE)  {	  if(numerator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    if(numerator    <    Integer.MIN_VALUE    ||    desnominator    >    Integer.MAX_VALUE)    {    	compilable	  [FE]  ArithmeticException  	9	3	replace
173	[BUG]  [BUGGY]  Numerator  numerator  =  toProperString.equals(ZERO);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  numerator  =  toProperString.equals(ZERO);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  numerator  =  toProperString.equals(ZERO);	  Numerator    numerator    =    numerator.equals(ZERO);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
174	[BUG]  [BUGGY]  Numerator  numerator  =  getNumerator().numerator;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  numerator  =  getNumerator().numerator;  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  numerator  =  getNumerator().numerator;	  Numerator    numerator    =    getNumerator().denominator;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
175	[BUG]  [BUGGY]  Numerator  numerator  =  getNumerator().denominator  *  denominator;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  numerator  =  getNumerator().denominator  *  denominator;  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  numerator  =  getNumerator().denominator  *  denominator;	  Numerator    numerator    =    getNumerator().denominator;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
176	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  If(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  If(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  If(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    If(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  ';'  expected	47	None	replace
177	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    If(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
178	[BUG]  [BUGGY]  int  numerator  =  getNumber(numerator);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  numerator  =  getNumber(numerator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  numerator  =  getNumber(numerator);	  int    numerator    =    getNumber(denominator);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
179	[BUG]  [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  <  Integer.MIN_VALUE  ||  desominator  ==  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  <  Integer.MIN_VALUE  ||  desominator  ==  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator    <    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if(numerator  <  Integer.MIN_VALUE  ||  desominator  ==  Integer.MIN_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
180	[BUG]  [BUGGY]  Numerator  numerator  =  toProperString.get(numerator);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  numerator  =  toProperString.get(numerator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  numerator  =  toProperString.get(numerator);	  Numerator    numerator    =    toProperString.equals(numerator);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
181	[BUG]  [BUGGY]  Numerator  numerator  =  toProperString.get(denominator);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  numerator  =  toProperString.get(denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  numerator  =  toProperString.get(denominator);	  Numerator    numerator    =    toProperString.equals(numerator);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
182	[BUG]  [BUGGY]  int  numerator  =  getNumerator(denominator,  numerator);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  numerator  =  getNumerator(denominator,  numerator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  numerator  =  getNumerator(denominator,  numerator);	  int    numerator    =    getNumerator(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
183	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf(denominator,  0,  numerator);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toProperString.indexOf(denominator,  0,  numerator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.indexOf(denominator,  0,  numerator);	  int    denominator    =    toProperString.indexOf(denominator,    hashCode);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
184	[BUG]  [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  If(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  If(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  If(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {	  if    (denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    If    (denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
185	[BUG]  [BUGGY]  int  denominator  =  getDenominator(denominator,  denominator);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  getDenominator(denominator,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  getDenominator(denominator,  denominator);	  int    denominator    =    getDenominator(numerator);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
186	[BUG]  [BUGGY]  int  denominator  =  toProperString.hashCode()  *  2;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toProperString.hashCode()  *  2;  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.hashCode()  *  2;	  int    denominator    =    toProperString.hashCode()    *    denominator;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
187	[BUG]  [BUGGY]  if(numerator!=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  >>  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]    ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator!=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator  >>  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator!=    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if(numerator  >>  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
188	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf('.',  desominator);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toProperString.indexOf('.',  desominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.indexOf('.',  desominator);	  int    denominator    =    toProperString.indexOf('.',    denominator);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
189	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  if(denominator  ==  Integer.MIN_VALUE  ||  desominator  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  if(denominator  ==  Integer.MIN_VALUE  ||  desominator  ==  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    if(denominator  ==  Integer.MIN_VALUE  ||  desominator  ==  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
190	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  if(denominator!=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  if(denominator!=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    if(denominator!=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
191	[BUG]  [BUGGY]  if(numerator  ==  numerator  ||  denominator  ==  Integer.MIN_VALUE)  {  if(denominator  ==  Integer.MIN_VALUE  ||  denominator!=  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  ==  numerator  ||  denominator  ==  Integer.MIN_VALUE)  {  if(denominator  ==  Integer.MIN_VALUE  ||  denominator!=  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator  ==  numerator  ||  denominator  ==  Integer.MIN_VALUE)  {  if(denominator  ==  Integer.MIN_VALUE  ||  denominator!=  Integer.MIN_VALUE)  {	  if    (denominator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if    (denominator    ==    Integer.MIN_VALUE    ||    denominator!=    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
192	[BUG]  [BUGGY]  Numerator  numerator  =  getDenominator(numerator,  denominator);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  numerator  =  getDenominator(numerator,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  numerator  =  getDenominator(numerator,  denominator);	  Numerator    numerator    =    getDenominator(numerator);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
193	[BUG]  [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  desnominator  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  desnominator  >  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator    ==    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    if(numerator  ==  Integer.MIN_VALUE  ||  desnominator  >  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
194	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf(denominator)+  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toProperString.indexOf(denominator)+  1;  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.indexOf(denominator)+  1;	  int    denominator    =    toProperString.hashCode()    +    1;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
195	[BUG]  [BUGGY]  int  denominator  =  getDenominator(denominator  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  getDenominator(denominator  +  1);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  getDenominator(denominator  +  1);	  int    denominator    =    getDenominator(denominator);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
196	[BUG]  [BUGGY]  Numerator  numerator  =  getNumerator(numerator,  denominator,  ZERO);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  numerator  =  getNumerator(numerator,  denominator,  ZERO);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  numerator  =  getNumerator(numerator,  denominator,  ZERO);	  Numerator    numerator    =    getNumerator(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
197	[BUG]  [BUGGY]  if(numerator  <  =  Integer.MIN_VALUE  &&  denominator  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  <  =  Integer.MIN_VALUE  &&  denominator  ==  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator  <  =  Integer.MIN_VALUE  &&  denominator  ==  Integer.MAX_VALUE)  {	  if(numerator    ==    Integer.MIN_VALUE    &&    denominator    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
198	[BUG]  [BUGGY]  int  denominator  =  toString.lastIndexOf('.');  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toString.lastIndexOf('.');  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toString.lastIndexOf('.');	  int    denominator    =    toString.hashCode();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
199	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf('.')+  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toProperString.indexOf('.')+  1;  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.indexOf('.')+  1;	  int    denominator    =    toProperString.hashCode()    +    1;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
200	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf('.',  denominator)+  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toProperString.indexOf('.',  denominator)+  1;  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.indexOf('.',  denominator)+  1;	  int    denominator    =    toProperString.hashCode()    +    1;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
201	[BUG]  [BUGGY]  int  denominator  =  toProperString.lastIndexOf(denominator,  -1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toProperString.lastIndexOf(denominator,  -1);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.lastIndexOf(denominator,  -1);	  int    denominator    =    toProperString.lastIndexOf(denominator);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
202	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	add	if(denominator  ==  Integer.MIN_VALUE)  {	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	45	1	replace
203	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(denominator  ==  Integer.MIN_VALUE)  {	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	45	1	replace
204	[BUG]  [BUGGY]  Numerator  numerator  =  denominator  <  0?  numerator  :  numerator.equals(denominator);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  numerator  =  denominator  <  0?  numerator  :  numerator.equals(denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  numerator  =  denominator  <  0?  numerator  :  numerator.equals(denominator);	  Numerator    numerator    =    numerator.equals(numerator);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
205	[BUG]  [BUGGY]  Numerator  numerator  =  denominator.equals(FOUR_FIFTHS);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  numerator  =  denominator.equals(FOUR_FIFTHS);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  numerator  =  denominator.equals(FOUR_FIFTHS);	  Numerator    numerator    =    denominator.equals(ZERO);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
206	[BUG]  [BUGGY]  int  numerator  =  getNumerator().denominator  /  denominator;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  numerator  =  getNumerator().denominator  /  denominator;  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  numerator  =  getNumerator().denominator  /  denominator;	  int    numerator    =    getNumerator().denominator;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
207	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  <  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	add	if(denominator  ==  Integer.MIN_VALUE  ||  denominator  <  Integer.MAX_VALUE)  {	  if(numerator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    if(numerator    <    Integer.MIN_VALUE    ||    dedenator    >    Integer.MAX_VALUE)    {    	compilable	  [FE]  ArithmeticException  	10	3	replace
208	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  <  Integer.MAX_VALUE)  {  [FE]  ArithmeticException  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  <  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(denominator  ==  Integer.MIN_VALUE  ||  denominator  <  Integer.MAX_VALUE)  {	  if(numerator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    if(numerator    <    Integer.MIN_VALUE    ||    dedenator    >    Integer.MAX_VALUE)    {    	compilable	  [FE]  ArithmeticException  	10	3	replace
209	[BUG]  [BUGGY]  Numerator  numerator  =  toProperString.trim().equals(denominator);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  numerator  =  toProperString.trim().equals(denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  numerator  =  toProperString.trim().equals(denominator);	  Numerator    numerator    =    toProperString.equals(numerator);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
210	[BUG]  [BUGGY]  Numerator  numerator  =  toProperString.toLowerCase().equals(denominator);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  numerator  =  toProperString.toLowerCase().equals(denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  numerator  =  toProperString.toLowerCase().equals(denominator);	  Numerator    numerator    =    toProperString.equals(numerator);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
211	[BUG]  [BUGGY]  If(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  If(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	If(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    If(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  ';'  expected	47	None	replace
212	[BUG]  [BUGGY]  Numerator  denominator  =  getDenominator(numerator,  denominator);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  denominator  =  getDenominator(numerator,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  denominator  =  getDenominator(numerator,  denominator);	  Numerator    numerator    =    getNumerator(denominator,    denominator);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
213	[BUG]  [BUGGY]  Numerator  denominator  =  getNumerator(denominator,  denominator);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  denominator  =  getNumerator(denominator,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  denominator  =  getNumerator(denominator,  denominator);	  Numerator    numerator    =    getNumerator(denominator,    denominator);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
214	[BUG]  [BUGGY]  Numerator  numerator  =  getNumerator().denominator  -  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  numerator  =  getNumerator().denominator  -  1;  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  numerator  =  getNumerator().denominator  -  1;	  Numerator    numerator    =    getNumerator().denominator;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
215	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  <  0  ||  numerator  >  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	add	if(denominator  <  0  ||  numerator  >  Integer.MAX_VALUE)  {	  if(numerator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    if(numerator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    	compilable	  [FE]  ArithmeticException  	7	3	replace
216	[BUG]  [BUGGY]  if(denominator  <  0  ||  numerator  >  Integer.MAX_VALUE)  {  [FE]  ArithmeticException  [FE]        AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  <  0  ||  numerator  >  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(denominator  <  0  ||  numerator  >  Integer.MAX_VALUE)  {	  if(numerator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    if(numerator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    	compilable	  [FE]  ArithmeticException  	7	3	replace
217	[BUG]  [BUGGY]  if(numerator!=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator!=  Integer.MIN_VALUE  ||  desominator  ==  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]    ArithmeticException    [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator!=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  if(numerator!=  Integer.MIN_VALUE  ||  desominator  ==  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	if(numerator!=    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    if(numerator!=  Integer.MIN_VALUE  ||  desominator  ==  Integer.MIN_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
218	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf('.')*  denominator;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toProperString.indexOf('.')*  denominator;  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.indexOf('.')*  denominator;	  int    denominator    =    toProperString.hashCode()    *    denominator;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
219	[BUG]  [BUGGY]  int  denominator  =  toProperString.hashCode()  *  FOUR_FIFTHS;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toProperString.hashCode()  *  FOUR_FIFTHS;  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.hashCode()  *  FOUR_FIFTHS;	  int    denominator    =    toProperString.hashCode()    *    denominator;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
220	[BUG]  [BUGGY]  Numerator  numerator  =  getNumerator(numerator,  denominator,  denominator);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  numerator  =  getNumerator(numerator,  denominator,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	Numerator  numerator  =  getNumerator(numerator,  denominator,  denominator);	  Numerator    numerator    =    getNumerator(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
221	[BUG]  [BUGGY]  int  denominator  =  toProperString.indexOf(denominator,  0,  denominator);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Fraction  getFraction(int  numerator,  int  denominator)  {  if  (denominator  ==  0)  {  throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  toProperString.indexOf(denominator,  0,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  serialVersionUID  int  denominator  hashCode  numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	int  denominator  =  toProperString.indexOf(denominator,  0,  denominator);	  int    denominator    =    toProperString.indexOf(denominator,    hashCode);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
