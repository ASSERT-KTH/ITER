bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] int gcd = greatestCommonDivisor(Math.abs(numerator), denominator); [FE] AssertionFailedError [CONTEXT] public Fraction reduce() { [BUGGY] int gcd = greatestCommonDivisor(Math.abs(numerator), denominator); [BUGGY] if (gcd == 1) { return this; } return Fraction.getFraction(numerator / gcd, denominator / gcd); } [CLASS] Fraction [METHOD] reduce [RETURN_TYPE] Fraction  [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i numer numer0 numer1 numer2 numerator pos sign whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	1.0	466	466	1	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public Fraction reduce() { [BUGGY] [BUGGY] int gcd = greatestCommonDivisor(Math.abs(numerator), denominator); if (gcd == 1) { return this; } return Fraction.getFraction(numerator / gcd, denominator / gcd); } [CLASS] Fraction [METHOD] reduce [RETURN_TYPE] Fraction  [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i numer numer0 numer1 numer2 numerator pos sign whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	1.0	466	466	1	add	
3	[BUG] [BUGGY] if (gcd == 1) { [FE] AssertionFailedError [CONTEXT] public Fraction reduce() { int gcd = greatestCommonDivisor(Math.abs(numerator), denominator); [BUGGY] if (gcd == 1) { [BUGGY] return this; } return Fraction.getFraction(numerator / gcd, denominator / gcd); } [CLASS] Fraction [METHOD] reduce [RETURN_TYPE] Fraction  [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i numer numer0 numer1 numer2 numerator pos sign whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	1.0	467	467	1	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public Fraction reduce() { int gcd = greatestCommonDivisor(Math.abs(numerator), denominator); [BUGGY] [BUGGY] if (gcd == 1) { return this; } return Fraction.getFraction(numerator / gcd, denominator / gcd); } [CLASS] Fraction [METHOD] reduce [RETURN_TYPE] Fraction  [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i numer numer0 numer1 numer2 numerator pos sign whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	1.0	467	467	1	add	
5	[BUG] [BUGGY] return this; [FE] AssertionFailedError [CONTEXT] public Fraction reduce() { int gcd = greatestCommonDivisor(Math.abs(numerator), denominator); if (gcd == 1) { [BUGGY] return this; [BUGGY] } return Fraction.getFraction(numerator / gcd, denominator / gcd); } [CLASS] Fraction [METHOD] reduce [RETURN_TYPE] Fraction  [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i numer numer0 numer1 numer2 numerator pos sign whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	1.0	468	468	1	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public Fraction reduce() { int gcd = greatestCommonDivisor(Math.abs(numerator), denominator); if (gcd == 1) { [BUGGY] [BUGGY] return this; } return Fraction.getFraction(numerator / gcd, denominator / gcd); } [CLASS] Fraction [METHOD] reduce [RETURN_TYPE] Fraction  [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i numer numer0 numer1 numer2 numerator pos sign whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	1.0	468	468	1	add	
7	[BUG] [BUGGY] return Fraction.getFraction(numerator / gcd, denominator / gcd); [FE] AssertionFailedError [CONTEXT] public Fraction reduce() { int gcd = greatestCommonDivisor(Math.abs(numerator), denominator); if (gcd == 1) { return this; } [BUGGY] return Fraction.getFraction(numerator / gcd, denominator / gcd); [BUGGY] } [CLASS] Fraction [METHOD] reduce [RETURN_TYPE] Fraction  [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i numer numer0 numer1 numer2 numerator pos sign whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	1.0	470	470	1	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public Fraction reduce() { int gcd = greatestCommonDivisor(Math.abs(numerator), denominator); if (gcd == 1) { return this; } [BUGGY] [BUGGY] return Fraction.getFraction(numerator / gcd, denominator / gcd); } [CLASS] Fraction [METHOD] reduce [RETURN_TYPE] Fraction  [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i numer numer0 numer1 numer2 numerator pos sign whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	1.0	470	470	1	add	
9	[BUG] [BUGGY] if (numerator==Integer.MIN_VALUE ||  denominator==Integer.MIN_VALUE) { [FE] AssertionFailedError [CONTEXT] public static Fraction getFraction(int numerator, int denominator) { if (denominator == 0) { throw new ArithmeticException("The denominator must not be zero"); } if (denominator < 0) { [BUGGY] if (numerator==Integer.MIN_VALUE ||     denominator==Integer.MIN_VALUE) { [BUGGY] denominator==Integer.MIN_VALUE) { throw new ArithmeticException("overflow: can't negate"); } numerator = -numerator; denominator = -denominator; } return new Fraction(numerator, denominator); } [CLASS] Fraction [METHOD] getFraction [RETURN_TYPE] Fraction  int numerator int denominator [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO String toProperString toString boolean long serialVersionUID int denominator hashCode numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public static Fraction getFraction(int numerator, int denominator) { if (denominator == 0) { throw new ArithmeticException("The denominator must not be zero"); } if (denominator < 0) { [BUGGY] [BUGGY] if (numerator==Integer.MIN_VALUE ||     denominator==Integer.MIN_VALUE) { denominator==Integer.MIN_VALUE) { throw new ArithmeticException("overflow: can't negate"); } numerator = -numerator; denominator = -denominator; } return new Fraction(numerator, denominator); } [CLASS] Fraction [METHOD] getFraction [RETURN_TYPE] Fraction  int numerator int denominator [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO String toProperString toString boolean long serialVersionUID int denominator hashCode numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	146	147	1	add	
11	[BUG] [BUGGY] numerator = -numerator; [FE] AssertionFailedError [CONTEXT] public static Fraction getFraction(int numerator, int denominator) { if (denominator == 0) { throw new ArithmeticException("The denominator must not be zero"); } if (denominator < 0) { if (numerator==Integer.MIN_VALUE || denominator==Integer.MIN_VALUE) { throw new ArithmeticException("overflow: can't negate"); } [BUGGY] numerator = -numerator; [BUGGY] denominator = -denominator; } return new Fraction(numerator, denominator); } [CLASS] Fraction [METHOD] getFraction [RETURN_TYPE] Fraction  int numerator int denominator [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO String toProperString toString boolean long serialVersionUID int denominator hashCode numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public static Fraction getFraction(int numerator, int denominator) { if (denominator == 0) { throw new ArithmeticException("The denominator must not be zero"); } if (denominator < 0) { if (numerator==Integer.MIN_VALUE || denominator==Integer.MIN_VALUE) { throw new ArithmeticException("overflow: can't negate"); } [BUGGY] [BUGGY] numerator = -numerator; denominator = -denominator; } return new Fraction(numerator, denominator); } [CLASS] Fraction [METHOD] getFraction [RETURN_TYPE] Fraction  int numerator int denominator [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO String toProperString toString boolean long serialVersionUID int denominator hashCode numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	150	150	1	add	
13	[BUG] [BUGGY] denominator = -denominator; [FE] AssertionFailedError [CONTEXT] public static Fraction getFraction(int numerator, int denominator) { if (denominator == 0) { throw new ArithmeticException("The denominator must not be zero"); } if (denominator < 0) { if (numerator==Integer.MIN_VALUE || denominator==Integer.MIN_VALUE) { throw new ArithmeticException("overflow: can't negate"); } numerator = -numerator; [BUGGY] denominator = -denominator; [BUGGY] } return new Fraction(numerator, denominator); } [CLASS] Fraction [METHOD] getFraction [RETURN_TYPE] Fraction  int numerator int denominator [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO String toProperString toString boolean long serialVersionUID int denominator hashCode numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public static Fraction getFraction(int numerator, int denominator) { if (denominator == 0) { throw new ArithmeticException("The denominator must not be zero"); } if (denominator < 0) { if (numerator==Integer.MIN_VALUE || denominator==Integer.MIN_VALUE) { throw new ArithmeticException("overflow: can't negate"); } numerator = -numerator; [BUGGY] [BUGGY] denominator = -denominator; } return new Fraction(numerator, denominator); } [CLASS] Fraction [METHOD] getFraction [RETURN_TYPE] Fraction  int numerator int denominator [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO String toProperString toString boolean long serialVersionUID int denominator hashCode numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.4472135954999579	151	151	1	add	
15	[BUG] [BUGGY] if (u>0) { u=-u; } // make u negative if (v>0) { v=-v; } // make v negative // B1. [Find power of 2] [FE] AssertionFailedError [CONTEXT] private static int greatestCommonDivisor(int u, int v) {  if (Math.abs(u) <= 1 || Math.abs(v) <= 1) { return 1; }     [BUGGY] if (u>0) { u=-u; } // make u negative  if (v>0) { v=-v; } // make v negative    // B1. [Find power of 2] [BUGGY] if (v>0) { v=-v; } // make v negative  int k=0; while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even... u/=2; v/=2; k++; // cast out twos. } if (k==31) { throw new ArithmeticException("overflow: gcd is 2^31"); }  [CLASS] Fraction [METHOD] greatestCommonDivisor [RETURN_TYPE] int  int u int v [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO f String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i k numer numer0 numer1 numer2 numerator pos power sign t u v whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	578	580	1	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static int greatestCommonDivisor(int u, int v) {  if (Math.abs(u) <= 1 || Math.abs(v) <= 1) { return 1; }     [BUGGY] [BUGGY] if (u>0) { u=-u; } // make u negative  if (v>0) { v=-v; } // make v negative    // B1. [Find power of 2] if (v>0) { v=-v; } // make v negative  int k=0; while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even... u/=2; v/=2; k++; // cast out twos. } if (k==31) { throw new ArithmeticException("overflow: gcd is 2^31"); }  [CLASS] Fraction [METHOD] greatestCommonDivisor [RETURN_TYPE] int  int u int v [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO f String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i k numer numer0 numer1 numer2 numerator pos power sign t u v whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	578	580	1	add	
17	[BUG] [BUGGY] if (v>0) { v=-v; } // make v negative // B1. [Find power of 2] int k=0; [FE] AssertionFailedError [CONTEXT] private static int greatestCommonDivisor(int u, int v) {  if (Math.abs(u) <= 1 || Math.abs(v) <= 1) { return 1; }     if (u>0) { u=-u; } // make u negative [BUGGY] if (v>0) { v=-v; } // make v negative  // B1. [Find power of 2]    int k=0; [BUGGY]  int k=0; while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even... u/=2; v/=2; k++; // cast out twos. } if (k==31) { throw new ArithmeticException("overflow: gcd is 2^31"); }   [CLASS] Fraction [METHOD] greatestCommonDivisor [RETURN_TYPE] int  int u int v [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO f String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i k numer numer0 numer1 numer2 numerator pos power sign t u v whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	579	581	1	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static int greatestCommonDivisor(int u, int v) {  if (Math.abs(u) <= 1 || Math.abs(v) <= 1) { return 1; }     if (u>0) { u=-u; } // make u negative [BUGGY] [BUGGY] if (v>0) { v=-v; } // make v negative  // B1. [Find power of 2]    int k=0;  int k=0; while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even... u/=2; v/=2; k++; // cast out twos. } if (k==31) { throw new ArithmeticException("overflow: gcd is 2^31"); }   [CLASS] Fraction [METHOD] greatestCommonDivisor [RETURN_TYPE] int  int u int v [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO f String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i k numer numer0 numer1 numer2 numerator pos power sign t u v whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	579	581	1	add	
19	[BUG] [BUGGY] int k=0; [FE] AssertionFailedError [CONTEXT] if (Math.abs(u) <= 1 || Math.abs(v) <= 1) { return 1; }     if (u>0) { u=-u; } // make u negative if (v>0) { v=-v; } // make v negative  [BUGGY] int k=0; [BUGGY] while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even... u/=2; v/=2; k++; // cast out twos. } if (k==31) { throw new ArithmeticException("overflow: gcd is 2^31"); }   int t = ((u&1)==1) ? v : -(u/2)/*B3*/;  [CLASS] Fraction [METHOD] greatestCommonDivisor [RETURN_TYPE] int  int u int v [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO f String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i k numer numer0 numer1 numer2 numerator pos power sign t u v whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	581	581	1	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (Math.abs(u) <= 1 || Math.abs(v) <= 1) { return 1; }     if (u>0) { u=-u; } // make u negative if (v>0) { v=-v; } // make v negative  [BUGGY] [BUGGY] int k=0; while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even... u/=2; v/=2; k++; // cast out twos. } if (k==31) { throw new ArithmeticException("overflow: gcd is 2^31"); }   int t = ((u&1)==1) ? v : -(u/2)/*B3*/;  [CLASS] Fraction [METHOD] greatestCommonDivisor [RETURN_TYPE] int  int u int v [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO f String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i k numer numer0 numer1 numer2 numerator pos power sign t u v whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	581	581	1	add	
21	[BUG] [BUGGY] while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even... u/=2; v/=2; k++; // cast out twos. } [FE] AssertionFailedError [CONTEXT] return 1; }     if (u>0) { u=-u; } // make u negative if (v>0) { v=-v; } // make v negative  int k=0; [BUGGY] while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...   u/=2; v/=2; k++; // cast out twos.    } [BUGGY] u/=2; v/=2; k++; // cast out twos. } if (k==31) { throw new ArithmeticException("overflow: gcd is 2^31"); }   int t = ((u&1)==1) ? v : -(u/2)/*B3*/;   [CLASS] Fraction [METHOD] greatestCommonDivisor [RETURN_TYPE] int  int u int v [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO f String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i k numer numer0 numer1 numer2 numerator pos power sign t u v whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	582	584	1	replace	
22	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return 1; }     if (u>0) { u=-u; } // make u negative if (v>0) { v=-v; } // make v negative  int k=0; [BUGGY] [BUGGY] while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...   u/=2; v/=2; k++; // cast out twos.    } u/=2; v/=2; k++; // cast out twos. } if (k==31) { throw new ArithmeticException("overflow: gcd is 2^31"); }   int t = ((u&1)==1) ? v : -(u/2)/*B3*/;   [CLASS] Fraction [METHOD] greatestCommonDivisor [RETURN_TYPE] int  int u int v [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO f String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i k numer numer0 numer1 numer2 numerator pos power sign t u v whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	582	584	1	add	
23	[BUG] [BUGGY] if (k==31) { [FE] AssertionFailedError [CONTEXT]    if (u>0) { u=-u; } // make u negative if (v>0) { v=-v; } // make v negative  int k=0; while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even... u/=2; v/=2; k++; // cast out twos. } [BUGGY] if (k==31) { [BUGGY] throw new ArithmeticException("overflow: gcd is 2^31"); }   int t = ((u&1)==1) ? v : -(u/2)/*B3*/;   do {   [CLASS] Fraction [METHOD] greatestCommonDivisor [RETURN_TYPE] int  int u int v [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO f String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i k numer numer0 numer1 numer2 numerator pos power sign t u v whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	replace	
24	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]    if (u>0) { u=-u; } // make u negative if (v>0) { v=-v; } // make v negative  int k=0; while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even... u/=2; v/=2; k++; // cast out twos. } [BUGGY] [BUGGY] if (k==31) { throw new ArithmeticException("overflow: gcd is 2^31"); }   int t = ((u&1)==1) ? v : -(u/2)/*B3*/;   do {   [CLASS] Fraction [METHOD] greatestCommonDivisor [RETURN_TYPE] int  int u int v [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO f String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i k numer numer0 numer1 numer2 numerator pos power sign t u v whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	585	585	1	add	
25	[BUG] [BUGGY] int t = ((u&1)==1) ? v : -(u/2)/*B3*/; [FE] AssertionFailedError [CONTEXT]  int k=0; while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even... u/=2; v/=2; k++; // cast out twos. } if (k==31) { throw new ArithmeticException("overflow: gcd is 2^31"); }   [BUGGY] int t = ((u&1)==1) ? v : -(u/2)/*B3*/; [BUGGY]   do {   while ((t&1)==0) { // while t is even.. t/=2; // cast out twos }  if (t>0) { [CLASS] Fraction [METHOD] greatestCommonDivisor [RETURN_TYPE] int  int u int v [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO f String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i k numer numer0 numer1 numer2 numerator pos power sign t u v whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	590	590	1	replace	
26	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  int k=0; while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even... u/=2; v/=2; k++; // cast out twos. } if (k==31) { throw new ArithmeticException("overflow: gcd is 2^31"); }   [BUGGY] [BUGGY] int t = ((u&1)==1) ? v : -(u/2)/*B3*/;   do {   while ((t&1)==0) { // while t is even.. t/=2; // cast out twos }  if (t>0) { [CLASS] Fraction [METHOD] greatestCommonDivisor [RETURN_TYPE] int  int u int v [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO f String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i k numer numer0 numer1 numer2 numerator pos power sign t u v whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	590	590	1	add	
27	[BUG] [BUGGY] while ((t&1)==0) { // while t is even.. t/=2; // cast out twos  } [FE] AssertionFailedError [CONTEXT] throw new ArithmeticException("overflow: gcd is 2^31"); }   int t = ((u&1)==1) ? v : -(u/2)/*B3*/;   do {   [BUGGY] while ((t&1)==0) { // while t is even..    t/=2; // cast out twos      } [BUGGY] t/=2; // cast out twos }  if (t>0) { u = -t; } else { v = t; }  t = (v - u)/2; [CLASS] Fraction [METHOD] greatestCommonDivisor [RETURN_TYPE] int  int u int v [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO f String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i k numer numer0 numer1 numer2 numerator pos power sign t u v whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	596	598	1	replace	
28	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throw new ArithmeticException("overflow: gcd is 2^31"); }   int t = ((u&1)==1) ? v : -(u/2)/*B3*/;   do {   [BUGGY] [BUGGY] while ((t&1)==0) { // while t is even..    t/=2; // cast out twos      } t/=2; // cast out twos }  if (t>0) { u = -t; } else { v = t; }  t = (v - u)/2; [CLASS] Fraction [METHOD] greatestCommonDivisor [RETURN_TYPE] int  int u int v [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO f String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i k numer numer0 numer1 numer2 numerator pos power sign t u v whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	596	598	1	add	
29	[BUG] [BUGGY] if (t>0) { [FE] AssertionFailedError [CONTEXT] int t = ((u&1)==1) ? v : -(u/2)/*B3*/;   do {   while ((t&1)==0) { // while t is even.. t/=2; // cast out twos }  [BUGGY] if (t>0) { [BUGGY] u = -t; } else { v = t; }  t = (v - u)/2;   } while (t!=0); return -u*(1<<k); // gcd is u*2^k [CLASS] Fraction [METHOD] greatestCommonDivisor [RETURN_TYPE] int  int u int v [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO f String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i k numer numer0 numer1 numer2 numerator pos power sign t u v whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	600	600	1	replace	
30	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] int t = ((u&1)==1) ? v : -(u/2)/*B3*/;   do {   while ((t&1)==0) { // while t is even.. t/=2; // cast out twos }  [BUGGY] [BUGGY] if (t>0) { u = -t; } else { v = t; }  t = (v - u)/2;   } while (t!=0); return -u*(1<<k); // gcd is u*2^k [CLASS] Fraction [METHOD] greatestCommonDivisor [RETURN_TYPE] int  int u int v [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO f String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i k numer numer0 numer1 numer2 numerator pos power sign t u v whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	600	600	1	add	
31	[BUG] [BUGGY] u = -t; [FE] AssertionFailedError [CONTEXT]   do {   while ((t&1)==0) { // while t is even.. t/=2; // cast out twos }  if (t>0) { [BUGGY] u = -t; [BUGGY] } else { v = t; }  t = (v - u)/2;   } while (t!=0); return -u*(1<<k); // gcd is u*2^k } [CLASS] Fraction [METHOD] greatestCommonDivisor [RETURN_TYPE] int  int u int v [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO f String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i k numer numer0 numer1 numer2 numerator pos power sign t u v whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	601	601	1	replace	
32	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]   do {   while ((t&1)==0) { // while t is even.. t/=2; // cast out twos }  if (t>0) { [BUGGY] [BUGGY] u = -t; } else { v = t; }  t = (v - u)/2;   } while (t!=0); return -u*(1<<k); // gcd is u*2^k } [CLASS] Fraction [METHOD] greatestCommonDivisor [RETURN_TYPE] int  int u int v [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO f String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i k numer numer0 numer1 numer2 numerator pos power sign t u v whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	601	601	1	add	
33	[BUG] [BUGGY] v = t; [FE] AssertionFailedError [CONTEXT] if (t>0) { u = -t; } else { [BUGGY] v = t; [BUGGY] } [CLASS] Fraction [METHOD] greatestCommonDivisor [RETURN_TYPE] int  int u int v [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO f String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i k numer numer0 numer1 numer2 numerator pos power sign t u v whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	603	603	1	replace	
34	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (t>0) { u = -t; } else { [BUGGY] [BUGGY] v = t; } [CLASS] Fraction [METHOD] greatestCommonDivisor [RETURN_TYPE] int  int u int v [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO f String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i k numer numer0 numer1 numer2 numerator pos power sign t u v whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	603	603	1	add	
35	[BUG] [BUGGY] t = (v - u)/2; [FE] AssertionFailedError [CONTEXT] while ((t&1)==0) { // while t is even.. t/=2; // cast out twos }  if (t>0) { u = -t; } else { v = t; }  [BUGGY] t = (v - u)/2; [BUGGY]   } while (t!=0); return -u*(1<<k); // gcd is u*2^k } [CLASS] Fraction [METHOD] greatestCommonDivisor [RETURN_TYPE] int  int u int v [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO f String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i k numer numer0 numer1 numer2 numerator pos power sign t u v whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	606	606	1	replace	
36	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] while ((t&1)==0) { // while t is even.. t/=2; // cast out twos }  if (t>0) { u = -t; } else { v = t; }  [BUGGY] [BUGGY] t = (v - u)/2;   } while (t!=0); return -u*(1<<k); // gcd is u*2^k } [CLASS] Fraction [METHOD] greatestCommonDivisor [RETURN_TYPE] int  int u int v [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO f String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i k numer numer0 numer1 numer2 numerator pos power sign t u v whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	606	606	1	add	
37	[BUG] [BUGGY] } while (t!=0); [FE] AssertionFailedError [CONTEXT]  if (t>0) { u = -t; } else { v = t; }  t = (v - u)/2;   [BUGGY] } while (t!=0); [BUGGY] return -u*(1<<k); // gcd is u*2^k } [CLASS] Fraction [METHOD] greatestCommonDivisor [RETURN_TYPE] int  int u int v [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO f String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i k numer numer0 numer1 numer2 numerator pos power sign t u v whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	609	609	1	replace	
38	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  if (t>0) { u = -t; } else { v = t; }  t = (v - u)/2;   [BUGGY] [BUGGY] } while (t!=0); return -u*(1<<k); // gcd is u*2^k } [CLASS] Fraction [METHOD] greatestCommonDivisor [RETURN_TYPE] int  int u int v [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO f String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i k numer numer0 numer1 numer2 numerator pos power sign t u v whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	609	609	1	add	
39	[BUG] [BUGGY] return -u*(1<<k); // gcd is u*2^k } [FE] AssertionFailedError [CONTEXT] if (t>0) { u = -t; } else { v = t; }  t = (v - u)/2;   } while (t!=0); [BUGGY] return -u*(1<<k); // gcd is u*2^k } [BUGGY] } [CLASS] Fraction [METHOD] greatestCommonDivisor [RETURN_TYPE] int  int u int v [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO f String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i k numer numer0 numer1 numer2 numerator pos power sign t u v whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	610	611	1	replace	
40	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (t>0) { u = -t; } else { v = t; }  t = (v - u)/2;   } while (t!=0); [BUGGY] [BUGGY] return -u*(1<<k); // gcd is u*2^k } } [CLASS] Fraction [METHOD] greatestCommonDivisor [RETURN_TYPE] int  int u int v [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO f String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i k numer numer0 numer1 numer2 numerator pos power sign t u v whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.3333333333333333	610	611	1	add	
41	[BUG] [BUGGY] if (Math.abs(u) <= 1 || Math.abs(v) <= 1) { [FE] AssertionFailedError [CONTEXT] private static int greatestCommonDivisor(int u, int v) {  [BUGGY] if (Math.abs(u) <= 1 || Math.abs(v) <= 1) { [BUGGY] return 1; }     if (u>0) { u=-u; } // make u negative if (v>0) { v=-v; } // make v negative  int k=0; [CLASS] Fraction [METHOD] greatestCommonDivisor [RETURN_TYPE] int  int u int v [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO f String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i k numer numer0 numer1 numer2 numerator pos power sign t u v whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.31622776601683794	571	571	1	replace	
42	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static int greatestCommonDivisor(int u, int v) {  [BUGGY] [BUGGY] if (Math.abs(u) <= 1 || Math.abs(v) <= 1) { return 1; }     if (u>0) { u=-u; } // make u negative if (v>0) { v=-v; } // make v negative  int k=0; [CLASS] Fraction [METHOD] greatestCommonDivisor [RETURN_TYPE] int  int u int v [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO f String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i k numer numer0 numer1 numer2 numerator pos power sign t u v whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.31622776601683794	571	571	1	add	
43	[BUG] [BUGGY] return 1; [FE] AssertionFailedError [CONTEXT] private static int greatestCommonDivisor(int u, int v) {  if (Math.abs(u) <= 1 || Math.abs(v) <= 1) { [BUGGY] return 1; [BUGGY] }     if (u>0) { u=-u; } // make u negative if (v>0) { v=-v; } // make v negative  int k=0; while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even... [CLASS] Fraction [METHOD] greatestCommonDivisor [RETURN_TYPE] int  int u int v [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO f String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i k numer numer0 numer1 numer2 numerator pos power sign t u v whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.31622776601683794	572	572	1	replace	
44	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static int greatestCommonDivisor(int u, int v) {  if (Math.abs(u) <= 1 || Math.abs(v) <= 1) { [BUGGY] [BUGGY] return 1; }     if (u>0) { u=-u; } // make u negative if (v>0) { v=-v; } // make v negative  int k=0; while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even... [CLASS] Fraction [METHOD] greatestCommonDivisor [RETURN_TYPE] int  int u int v [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO f String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i k numer numer0 numer1 numer2 numerator pos power sign t u v whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.31622776601683794	572	572	1	add	
45	[BUG] [BUGGY] if (denominator == 0) { [FE] AssertionFailedError [CONTEXT] public static Fraction getFraction(int numerator, int denominator) { [BUGGY] if (denominator == 0) { [BUGGY] throw new ArithmeticException("The denominator must not be zero"); } if (denominator < 0) { if (numerator==Integer.MIN_VALUE || denominator==Integer.MIN_VALUE) { throw new ArithmeticException("overflow: can't negate"); } numerator = -numerator; denominator = -denominator; } [CLASS] Fraction [METHOD] getFraction [RETURN_TYPE] Fraction  int numerator int denominator [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO String toProperString toString boolean long serialVersionUID int denominator hashCode numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.25	142	142	1	replace	
46	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public static Fraction getFraction(int numerator, int denominator) { [BUGGY] [BUGGY] if (denominator == 0) { throw new ArithmeticException("The denominator must not be zero"); } if (denominator < 0) { if (numerator==Integer.MIN_VALUE || denominator==Integer.MIN_VALUE) { throw new ArithmeticException("overflow: can't negate"); } numerator = -numerator; denominator = -denominator; } [CLASS] Fraction [METHOD] getFraction [RETURN_TYPE] Fraction  int numerator int denominator [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO String toProperString toString boolean long serialVersionUID int denominator hashCode numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.25	142	142	1	add	
47	[BUG] [BUGGY] if (denominator < 0) { [FE] AssertionFailedError [CONTEXT] public static Fraction getFraction(int numerator, int denominator) { if (denominator == 0) { throw new ArithmeticException("The denominator must not be zero"); } [BUGGY] if (denominator < 0) { [BUGGY] if (numerator==Integer.MIN_VALUE || denominator==Integer.MIN_VALUE) { throw new ArithmeticException("overflow: can't negate"); } numerator = -numerator; denominator = -denominator; } return new Fraction(numerator, denominator); } [CLASS] Fraction [METHOD] getFraction [RETURN_TYPE] Fraction  int numerator int denominator [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO String toProperString toString boolean long serialVersionUID int denominator hashCode numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.25	145	145	1	replace	
48	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public static Fraction getFraction(int numerator, int denominator) { if (denominator == 0) { throw new ArithmeticException("The denominator must not be zero"); } [BUGGY] [BUGGY] if (denominator < 0) { if (numerator==Integer.MIN_VALUE || denominator==Integer.MIN_VALUE) { throw new ArithmeticException("overflow: can't negate"); } numerator = -numerator; denominator = -denominator; } return new Fraction(numerator, denominator); } [CLASS] Fraction [METHOD] getFraction [RETURN_TYPE] Fraction  int numerator int denominator [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO String toProperString toString boolean long serialVersionUID int denominator hashCode numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.25	145	145	1	add	
49	[BUG] [BUGGY] return new Fraction(numerator, denominator); [FE] AssertionFailedError [CONTEXT] throw new ArithmeticException("The denominator must not be zero"); } if (denominator < 0) { if (numerator==Integer.MIN_VALUE || denominator==Integer.MIN_VALUE) { throw new ArithmeticException("overflow: can't negate"); } numerator = -numerator; denominator = -denominator; } [BUGGY] return new Fraction(numerator, denominator); [BUGGY] } [CLASS] Fraction [METHOD] getFraction [RETURN_TYPE] Fraction  int numerator int denominator [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO String toProperString toString boolean long serialVersionUID int denominator hashCode numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.25	153	153	1	replace	
50	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throw new ArithmeticException("The denominator must not be zero"); } if (denominator < 0) { if (numerator==Integer.MIN_VALUE || denominator==Integer.MIN_VALUE) { throw new ArithmeticException("overflow: can't negate"); } numerator = -numerator; denominator = -denominator; } [BUGGY] [BUGGY] return new Fraction(numerator, denominator); } [CLASS] Fraction [METHOD] getFraction [RETURN_TYPE] Fraction  int numerator int denominator [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO String toProperString toString boolean long serialVersionUID int denominator hashCode numerator  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.25	153	153	1	add	
51	[BUG] [BUGGY] return numerator; [FE] AssertionFailedError [CONTEXT] public int getNumerator() { [BUGGY] return numerator; [BUGGY] } [CLASS] Fraction [METHOD] getNumerator [RETURN_TYPE] int  [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i numer numer0 numer1 numer2 numerator pos sign whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.21320071635561041	368	368	1	replace	
52	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public int getNumerator() { [BUGGY] [BUGGY] return numerator; } [CLASS] Fraction [METHOD] getNumerator [RETURN_TYPE] int  [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i numer numer0 numer1 numer2 numerator pos sign whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.21320071635561041	368	368	1	add	
53	[BUG] [BUGGY] return denominator; [FE] AssertionFailedError [CONTEXT] public int getDenominator() { [BUGGY] return denominator; [BUGGY] } [CLASS] Fraction [METHOD] getDenominator [RETURN_TYPE] int  [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i numer numer0 numer1 numer2 numerator pos sign whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.21320071635561041	377	377	1	replace	
54	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public int getDenominator() { [BUGGY] [BUGGY] return denominator; } [CLASS] Fraction [METHOD] getDenominator [RETURN_TYPE] int  [VARIABLES] Fraction FOUR_FIFTHS ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO String str toProperString toString boolean long numeratorValue serialVersionUID int a1 a2 denom denom0 denom1 denom2 denominator gcd hashCode i numer numer0 numer1 numer2 numerator pos sign whole wholeNumber  	projects/Lang49/src/java/org/apache/commons/lang/math/Fraction.java	0.21320071635561041	377	377	1	add	
