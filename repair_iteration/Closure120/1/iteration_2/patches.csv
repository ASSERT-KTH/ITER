bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile,  null));  [CE]  cannot  find  symbol  sourceFile  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile,  null));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile,  null));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(referenceMap,    null));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	108	None	replace
2	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUri,  null));  [CE]  cannot  find  symbol  baseUri  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUri,  null));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUri,  null));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(referenceMap,    null));    	non-compiled	[CE]  cannot  find  symbol  baseUri	108	None	replace
3	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  null));  [CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  null));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  null));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(referenceMap,    null));    	non-compiled	[CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;	108	None	replace
4	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  null,  varFilter));  [CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  null,  varFilter));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  null,  varFilter));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(referenceMap,    null));    	non-compiled	[CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;	108	None	replace
5	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  null,  scope));  [CE]  cannot  find  symbol  scope  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  null,  scope));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  null,  scope));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(referenceMap,    null));    	non-compiled	[CE]  cannot  find  symbol  scope	108	None	replace
6	[BUG]  [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  root));  [CE]  cannot  find  symbol  root  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  root));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  root));	  behavior.exitScope(t,    new    ReferenceMapWrapper(referenceMap,    baseUri));    	non-compiled	[CE]  cannot  find  symbol  root	16	None	replace
7	[BUG]  [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseBlock));  [CE]  cannot  find  symbol  baseBlock  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseBlock));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseBlock));	  behavior.exitScope(t,    new    ReferenceMapWrapper(referenceMap,    baseUri));    	non-compiled	[CE]  cannot  find  symbol  baseBlock	16	None	replace
8	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  varFilter,  t,  blockStack);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Predicate<Var>,NodeTraversal,Deque<BasicBlock>)  [FE]                          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  varFilter,  t,  blockStack);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  varFilter,  t,  blockStack);	  NodeTraversal.traverse(compiler,    sourceFile,    t,    blockStack);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Predicate<Var>,NodeTraversal,Deque<BasicBlock>)	30	None	replace
9	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  varFile,  t,  blockStack);  [CE]  cannot  find  symbol  varFile  [FE]                            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  varFile,  t,  blockStack);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  varFile,  t,  blockStack);	  NodeTraversal.traverse(compiler,    sourceFile,    t,    blockStack);    	non-compiled	[CE]  cannot  find  symbol  varFile	30	None	replace
10	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  sourceFile,  blockStack);  [CE]  cannot  find  symbol  root  [FE]                              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  sourceFile,  blockStack);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  root,  sourceFile,  blockStack);	  NodeTraversal.traverse(compiler,    sourceFile,    t,    blockStack);    	non-compiled	[CE]  cannot  find  symbol  root	30	None	replace
11	[BUG]  [BUGGY]  Node  originalRoot  =  n.getOwner();  [CE]  cannot  find  symbol  n  [FE]            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  n.getOwner();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  n.getOwner();	  Node    originalRoot    =    t.getOwner();    	non-compiled	[CE]  cannot  find  symbol  n	24	None	replace
12	[BUG]  [BUGGY]  Node  originalRoot  =  parent.getOwner();  [CE]  cannot  find  symbol  parent  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  parent.getOwner();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  parent.getOwner();	  Node    originalRoot    =    t.getOwner();    	non-compiled	[CE]  cannot  find  symbol  parent	24	None	replace
13	[BUG]  [BUGGY]  Node  originalRoot  =  t,  parent.getOwner();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  t,  parent.getOwner();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  t,  parent.getOwner();	  Node    originalRoot    =    t.getOwner();    	non-compiled	[CE]  ';'  expected	24	None	replace
14	[BUG]  [BUGGY]  Node  originalRoot  =  nameNode.getOwner();  [CE]  cannot  find  symbol  nameNode  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  nameNode.getOwner();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  nameNode.getOwner();	  Node    originalRoot    =    t.getOwner();    	non-compiled	[CE]  cannot  find  symbol  nameNode	24	None	replace
15	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  referenceMap,  new  ReferenceReference(referenceMap));  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  referenceMap,  new  ReferenceReference(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  referenceMap,  new  ReferenceReference(referenceMap));	  NodeTraversal.traverse(compiler,    t,    new    ReferenceReference(referenceMap));    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
16	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  referenceMap,  new  ReferenceReference(t));  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  referenceMap,  new  ReferenceReference(t));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  referenceMap,  new  ReferenceReference(t));	  NodeTraversal.traverse(compiler,    t,    new    ReferenceReference(referenceMap));    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
17	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  ReferenceReference(referenceMap,  sourceFile));  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  ReferenceReference(referenceMap,  sourceFile));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  new  ReferenceReference(referenceMap,  sourceFile));	  NodeTraversal.traverse(compiler,    t,    new    ReferenceReference(referenceMap));    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
18	[BUG]  [BUGGY]  Predicate  sourceFile  =  compiler.getSourceFile(t.getScopeRoot());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Predicate  sourceFile  =  compiler.getSourceFile(t.getScopeRoot());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  compiler.getSourceFile(t.getScopeRoot());	  Predicate    sourceFile    =    compiler.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
19	[BUG]  [BUGGY]  Predicate  sourceFile  =  compiler.getSourceFile(n);  [CE]  cannot  find  symbol  n  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Predicate  sourceFile  =  compiler.getSourceFile(n);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  compiler.getSourceFile(n);	  Predicate    sourceFile    =    compiler.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol  n	75	None	replace
20	[BUG]  [BUGGY]  Predicate  sourceFile  =  compiler.getSourceFile(t);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Predicate  sourceFile  =  compiler.getSourceFile(t);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  compiler.getSourceFile(t);	  Predicate    sourceFile    =    compiler.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
21	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  varFilter,  blockStack,  new  Reference());  [CE]  no  suitable  constructor  found  for  Reference()  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  varFilter,  blockStack,  new  Reference());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  varFilter,  blockStack,  new  Reference());	  NodeTraversal.traverse(compiler,    n,    blockStack,    new    Reference());    	non-compiled	[CE]  no  suitable  constructor  found  for  Reference()	113	None	replace
22	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  blockStack,  new  Reference());  [CE]  cannot  find  symbol  externs  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  blockStack,  new  Reference());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  externs,  blockStack,  new  Reference());	  NodeTraversal.traverse(compiler,    n,    blockStack,    new    Reference());    	non-compiled	[CE]  cannot  find  symbol  externs	113	None	replace
23	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  blockStack,  new  Reference());  [CE]  cannot  find  symbol  parent  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  blockStack,  new  Reference());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  parent,  blockStack,  new  Reference());	  NodeTraversal.traverse(compiler,    n,    blockStack,    new    Reference());    	non-compiled	[CE]  cannot  find  symbol  parent	113	None	replace
24	[BUG]  [BUGGY]  Node  originalRoot  =  scope.getOwnScope();  [CE]  cannot  find  symbol  scope  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  scope.getOwnScope();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  scope.getOwnScope();	  Node    originalRoot    =    t.getOwnScope();    	non-compiled	[CE]  cannot  find  symbol  scope	25	None	replace
25	[BUG]  [BUGGY]  Node  originalRoot  =  t,  scope.getOwnScope();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  t,  scope.getOwnScope();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  t,  scope.getOwnScope();	  Node    originalRoot    =    t.getOwnScope();    	non-compiled	[CE]  ';'  expected	25	None	replace
26	[BUG]  [BUGGY]  Node  originalRoot  =  parent.getOwnScope();  [CE]  cannot  find  symbol  parent  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  parent.getOwnScope();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  parent.getOwnScope();	  Node    originalRoot    =    t.getOwnScope();    	non-compiled	[CE]  cannot  find  symbol  parent	25	None	replace
27	[BUG]  [BUGGY]  Node  originalRoot  =  n.getOwnScope();  [CE]  cannot  find  symbol  n  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  n.getOwnScope();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  n.getOwnScope();	  Node    originalRoot    =    t.getOwnScope();    	non-compiled	[CE]  cannot  find  symbol  n	25	None	replace
28	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  blockStack));  [CE]  cannot  find  symbol  sourceFile  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  blockStack));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  blockStack));	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceCollectionWrapper(referenceMap,    sourceFile));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	104	None	replace
29	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  isLoop));  [CE]  cannot  find  symbol  sourceFile  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  isLoop));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  isLoop));	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceCollectionWrapper(referenceMap,    sourceFile));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	104	None	replace
30	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  sourceFile));  [CE]  cannot  find  symbol  sourceFile  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  sourceFile));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  sourceFile));	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceCollectionWrapper(referenceMap,    sourceFile));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	104	None	replace
31	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  marker));  [CE]  cannot  find  symbol  sourceFile  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  marker));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  marker));	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceCollectionWrapper(referenceMap,    sourceFile));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	104	None	replace
32	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  component));  [CE]  cannot  find  symbol  sourceFile  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  component));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  component));	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceCollectionWrapper(referenceMap,    sourceFile));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	104	None	replace
33	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  varFilter,  new  ReferenceCollectionWrapper(referenceMap));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  varFilter,  new  ReferenceCollectionWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  varFilter,  new  ReferenceCollectionWrapper(referenceMap));	  NodeTraversal.traverse(compiler,    sourceFile,    new    ReferenceCollectionWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
34	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  inputId,  new  ReferenceCollectionWrapper(referenceMap));  [CE]  cannot  find  symbol  inputId  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  inputId,  new  ReferenceCollectionWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  inputId,  new  ReferenceCollectionWrapper(referenceMap));	  NodeTraversal.traverse(compiler,    sourceFile,    new    ReferenceCollectionWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  inputId	40	None	replace
35	[BUG]  [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap),  varFilter,  isLoop);  [CE]  cannot  find  symbol  isLoop  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap),  varFilter,  isLoop);  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap),  varFilter,  isLoop);	  behavior.beforeExitScope(t,    new    ReferenceMapWrapper(referenceMap),    varFilter);    	non-compiled	[CE]  cannot  find  symbol  isLoop	110	None	replace
36	[BUG]  [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap),  sourceFile);  [CE]  cannot  find  symbol  sourceFile  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap),  sourceFile);  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap),  sourceFile);	  behavior.beforeExitScope(t,    new    ReferenceMapWrapper(referenceMap),    varFilter);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	110	None	replace
37	[BUG]  [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(varFilter),  referenceMap);  [CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(varFilter),  referenceMap);  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.beforeExitScope(t,  new  ReferenceMapWrapper(varFilter),  referenceMap);	  behavior.beforeExitScope(t,    new    ReferenceMapWrapper(referenceMap),    varFilter);    	non-compiled	[CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;	110	None	replace
38	[BUG]  [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap),  compiler);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap),  compiler);  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap),  compiler);	  behavior.beforeExitScope(t,    new    ReferenceMapWrapper(referenceMap),    varFilter);    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
39	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  basicBlock));  [CE]  cannot  find  symbol  basicBlock  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  basicBlock));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  basicBlock));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(referenceMap,    root));    	non-compiled	[CE]  cannot  find  symbol  basicBlock	58	None	replace
40	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseRoot));  [CE]  cannot  find  symbol  baseRoot  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseRoot));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseRoot));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(referenceMap,    root));    	non-compiled	[CE]  cannot  find  symbol  baseRoot	58	None	replace
41	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap),  t);  [CE]  cannot  find  symbol  sourceFile  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap),  t);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap),  t);	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceCollectionWrapper(referenceMap),    t);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	128	None	replace
42	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReferenceCollectionWrapper(referenceMap),  t);  [CE]  cannot  find  symbol  root  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReferenceCollectionWrapper(referenceMap),  t);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReferenceCollectionWrapper(referenceMap),  t);	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceCollectionWrapper(referenceMap),    t);    	non-compiled	[CE]  cannot  find  symbol  root	128	None	replace
43	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  component,  new  ReferenceCollectionWrapper(referenceMap),  t);  [CE]  cannot  find  symbol  component  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  component,  new  ReferenceCollectionWrapper(referenceMap),  t);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  component,  new  ReferenceCollectionWrapper(referenceMap),  t);	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceCollectionWrapper(referenceMap),    t);    	non-compiled	[CE]  cannot  find  symbol  component	128	None	replace
44	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceCollectionWrapper(t,  referenceMap));  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceCollectionWrapper(t,  referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceCollectionWrapper(t,  referenceMap));	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceCollectionWrapper(referenceMap),    t);    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
45	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  t,  blockStack,  new  Reference());  [CE]  cannot  find  symbol  sourceFile  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  t,  blockStack,  new  Reference());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  t,  blockStack,  new  Reference());	  NodeTraversal.traverse(compiler,    t,    blockStack,    new    Reference());    	non-compiled	[CE]  cannot  find  symbol  sourceFile	71	None	replace
46	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  sourceFile,  new  Reference());  [CE]  cannot  find  symbol  sourceFile  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  sourceFile,  new  Reference());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  sourceFile,  new  Reference());	  NodeTraversal.traverse(compiler,    t,    blockStack,    new    Reference());    	non-compiled	[CE]  cannot  find  symbol  sourceFile	71	None	replace
47	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  references,  new  Reference());  [CE]  cannot  find  symbol  references  [FE]                          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  references,  new  Reference());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  references,  new  Reference());	  NodeTraversal.traverse(compiler,    t,    blockStack,    new    Reference());    	non-compiled	[CE]  cannot  find  symbol  references	71	None	replace
48	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  blockStack,  new  Reference());  [CE]  cannot  find  symbol  root  [FE]                            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  blockStack,  new  Reference());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  root,  t,  blockStack,  new  Reference());	  NodeTraversal.traverse(compiler,    t,    blockStack,    new    Reference());    	non-compiled	[CE]  cannot  find  symbol  root	71	None	replace
49	[BUG]  [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  isLoop));  [CE]  cannot  find  symbol  isLoop  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  isLoop));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  isLoop));	  behavior.initScope(t,    new    ReferenceMapWrapper(referenceMap,    inputId));    	non-compiled	[CE]  cannot  find  symbol  isLoop	107	None	replace
50	[BUG]  [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  root));  [CE]  cannot  find  symbol  root  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  root));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  root));	  behavior.initScope(t,    new    ReferenceMapWrapper(referenceMap,    inputId));    	non-compiled	[CE]  cannot  find  symbol  root	107	None	replace
51	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  root,  new  Reference());  [CE]  cannot  find  symbol  sourceFile  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  root,  new  Reference());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  root,  new  Reference());	  NodeTraversal.traverse(compiler,    sourceFile,    blockStack,    new    Reference());    	non-compiled	[CE]  cannot  find  symbol  sourceFile	69	None	replace
52	[BUG]  [BUGGY]  Predicate  originalRoot  =  t.getScopeRoot();  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Predicate  originalRoot  =  t.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  originalRoot  =  t.getScopeRoot();	          Node    originalRoot    =    t.getScopeRoot();    Predicate    originalRoot    =    t.getScopeRoot();    	non-compiled	[CE]  incompatible  types	101	None	replace
53	[BUG]  [BUGGY]  n  =  t.getScopeRoot();  Predicate  originalRoot  =  n.getScopeRoot();  [CE]  cannot  find  symbol  n  [FE]          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  n  =  t.getScopeRoot();  Predicate  originalRoot  =  n.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	n  =  t.getScopeRoot();  Predicate  originalRoot  =  n.getScopeRoot();	          Node    originalRoot    =    t.getScopeRoot();    Predicate    originalRoot    =    t.getScopeRoot();    	non-compiled	[CE]  cannot  find  symbol  n	101	None	replace
54	[BUG]  [BUGGY]  n  =  t.getScopeRoot();  Predicate  originalRoot  =  t.getScopeRoot();  [CE]  cannot  find  symbol  n  [FE]            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  n  =  t.getScopeRoot();  Predicate  originalRoot  =  t.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	n  =  t.getScopeRoot();  Predicate  originalRoot  =  t.getScopeRoot();	          Node    originalRoot    =    t.getScopeRoot();    Predicate    originalRoot    =    t.getScopeRoot();    	non-compiled	[CE]  cannot  find  symbol  n	101	None	replace
55	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  nameNode.getSourceFile();  [CE]  cannot  find  symbol  nameNode  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  nameNode.getSourceFile();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  nameNode.getSourceFile();	  StaticSourceFile    sourceFile    =    baseUri.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol  nameNode	99	None	replace
56	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(!blockStack.isEmpty()  ||  blockStack.isEmpty());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	add	Preconditions.checkState(!blockStack.isEmpty()  ||  blockStack.isEmpty());	  Preconditions.checkState(!blockStack.isEmpty());    	compilable	  [FE]  AssertionFailedError  	20	23	replace
57	[BUG]  [BUGGY]  Preconditions.checkState(!blockStack.isEmpty()  ||  blockStack.isEmpty());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(!blockStack.isEmpty()  ||  blockStack.isEmpty());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(!blockStack.isEmpty()  ||  blockStack.isEmpty());	  Preconditions.checkState(!blockStack.isEmpty());    	compilable	  [FE]  AssertionFailedError  	20	23	replace
58	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(blockStack.isEmpty());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	add	Preconditions.checkState(blockStack.isEmpty());	  Preconditions.checkState(!blockStack.isEmpty());    	compilable	  [FE]  RuntimeException  	20	65	replace
59	[BUG]  [BUGGY]  Preconditions.checkState(blockStack.isEmpty());  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(blockStack.isEmpty());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(blockStack.isEmpty());	  Preconditions.checkState(!blockStack.isEmpty());    	compilable	  [FE]  RuntimeException  	20	65	replace
60	[BUG]  [BUGGY]  Preconditions.checkState(!blockStack.isEmpty()  &&  isFunction);  [CE]  cannot  find  symbol  isFunction  [FE]        AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(!blockStack.isEmpty()  &&  isFunction);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(!blockStack.isEmpty()  &&  isFunction);	  Preconditions.checkState(!blockStack.isEmpty());    	non-compiled	[CE]  cannot  find  symbol  isFunction	20	None	replace
61	[BUG]  [BUGGY]  Preconditions.checkState(!blockStack.isEmpty()  &&  isLoop);  [CE]  cannot  find  symbol  isLoop  [FE]          AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(!blockStack.isEmpty()  &&  isLoop);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(!blockStack.isEmpty()  &&  isLoop);	  Preconditions.checkState(!blockStack.isEmpty());    	non-compiled	[CE]  cannot  find  symbol  isLoop	20	None	replace
62	[BUG]  [BUGGY]  Node  originalRoot  =  t.getScriptRoot();  Node  OriginalRoot  =  t.getScopeRoot();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  t.getScriptRoot();  Node  OriginalRoot  =  t.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  t.getScriptRoot();  Node  OriginalRoot  =  t.getScopeRoot();	          Node    originalRoot    =    t.getScopeRoot();    Node    OriginalRoot    =    t.getScopeRoot();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
63	[BUG]  [BUGGY]  Node  originalRoot  =  t.getOwner();  Node  OriginalRoot  =  t.getScopeRoot();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  t.getOwner();  Node  OriginalRoot  =  t.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  t.getOwner();  Node  OriginalRoot  =  t.getScopeRoot();	          Node    originalRoot    =    t.getScopeRoot();    Node    OriginalRoot    =    t.getScopeRoot();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
64	[BUG]  [BUGGY]  Node  originalRoot  =  t.getReferenceRoot();  Node  OriginalRoot  =  t.getScopeRoot();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  t.getReferenceRoot();  Node  OriginalRoot  =  t.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  t.getReferenceRoot();  Node  OriginalRoot  =  t.getScopeRoot();	          Node    originalRoot    =    t.getScopeRoot();    Node    OriginalRoot    =    t.getScopeRoot();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
65	[BUG]  [BUGGY]  Node  originalRoot  =  t.getRawNode();  Node  OriginalRoot  =  t.getScopeRoot();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  t.getRawNode();  Node  OriginalRoot  =  t.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  t.getRawNode();  Node  OriginalRoot  =  t.getScopeRoot();	          Node    originalRoot    =    t.getScopeRoot();    Node    OriginalRoot    =    t.getScopeRoot();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
66	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceMapWrapper(t));  [CE]  cannot  find  symbol  sourceFile  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceMapWrapper(t));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceMapWrapper(t));	  NodeTraversal.traverse(compiler,    referenceMap,    new    ReferenceMapWrapper(t));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	36	None	replace
67	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  varFilter,  new  ReferenceMapWrapper(t));  [CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  varFilter,  new  ReferenceMapWrapper(t));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  varFilter,  new  ReferenceMapWrapper(t));	  NodeTraversal.traverse(compiler,    referenceMap,    new    ReferenceMapWrapper(t));    	non-compiled	[CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;	36	None	replace
68	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReferenceMapWrapper(t));  [CE]  cannot  find  symbol  root  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReferenceMapWrapper(t));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReferenceMapWrapper(t));	  NodeTraversal.traverse(compiler,    referenceMap,    new    ReferenceMapWrapper(t));    	non-compiled	[CE]  cannot  find  symbol  root	36	None	replace
69	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Deque<BasicBlock>,ReferenceCollectingCallback)  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  this);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  this);	  NodeTraversal.traverse(compiler,    t,    this,    blockStack);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Deque<BasicBlock>,ReferenceCollectingCallback)	4	None	replace
70	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  sourceFile,  this,  blockStack);  [CE]  cannot  find  symbol  sourceFile  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  sourceFile,  this,  blockStack);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  sourceFile,  this,  blockStack);	  NodeTraversal.traverse(compiler,    t,    this,    blockStack);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	4	None	replace
71	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  this,  blockStack);  [CE]  cannot  find  symbol  root  [FE]                          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  this,  blockStack);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  root,  t,  this,  blockStack);	  NodeTraversal.traverse(compiler,    t,    this,    blockStack);    	non-compiled	[CE]  cannot  find  symbol  root	4	None	replace
72	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  this,  blockStack);  [CE]  cannot  find  symbol  sourceFile  [FE]                            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  this,  blockStack);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  this,  blockStack);	  NodeTraversal.traverse(compiler,    t,    this,    blockStack);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	4	None	replace
73	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(!blockStack.isEmpty());  Preconditions.checkState(!blockStack.isEmpty());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	add	Preconditions.checkState(!blockStack.isEmpty());    Preconditions.checkState(!blockStack.isEmpty());	  	compilable	  [FE]  AssertionFailedError  	19	1	add
74	[BUG]  [BUGGY]  Preconditions.checkState(!blockStack.isEmpty());  Preconditions.checkState(!blockStack.isEmpty());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(!blockStack.isEmpty());  Preconditions.checkState(!blockStack.isEmpty());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(!blockStack.isEmpty());    Preconditions.checkState(!blockStack.isEmpty());	  	compilable	  [FE]  AssertionFailedError  	19	1	add
75	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(!blockStack.isEmpty());  Node  blockStack  =  t.getScopeRoot();  Preconditions.checkState(!blockStack.isEmpty());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	add	Preconditions.checkState(!blockStack.isEmpty());    Node  blockStack  =  t.getScopeRoot();  Preconditions.checkState(!blockStack.isEmpty());	  	compilable	  [FE]  AssertionFailedError  	19	1	add
76	[BUG]  [BUGGY]  Preconditions.checkState(!blockStack.isEmpty());  Node  blockStack  =  t.getScopeRoot();  Preconditions.checkState(!blockStack.isEmpty());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(!blockStack.isEmpty());  Node  blockStack  =  t.getScopeRoot();  Preconditions.checkState(!blockStack.isEmpty());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(!blockStack.isEmpty());    Node  blockStack  =  t.getScopeRoot();  Preconditions.checkState(!blockStack.isEmpty());	  	compilable	  [FE]  AssertionFailedError  	19	1	add
77	[BUG]  [BUGGY]  Preconditions.checkState(!blockStack.isEmpty());  Preconditions.checkState(!blockStack.isEmpty());  preconditions.checkState(!blockStack.isEmpty());  [CE]  cannot  find  symbol  preconditions  [FE]        AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(!blockStack.isEmpty());  Preconditions.checkState(!blockStack.isEmpty());  preconditions.checkState(!blockStack.isEmpty());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(!blockStack.isEmpty());    Preconditions.checkState(!blockStack.isEmpty());  preconditions.checkState(!blockStack.isEmpty());	  	non-compiled	[CE]  cannot  find  symbol  preconditions	19	None	add
78	[BUG]  [BUGGY]  Preconditions.checkState(!blockStack.isEmpty());  Node  blockStack  =  t.getScope();  Preconditions.checkState(!blockStack.isEmpty());  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(!blockStack.isEmpty());  Node  blockStack  =  t.getScope();  Preconditions.checkState(!blockStack.isEmpty());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(!blockStack.isEmpty());    Node  blockStack  =  t.getScope();  Preconditions.checkState(!blockStack.isEmpty());	  	non-compiled	[CE]  incompatible  types	19	None	add
79	[BUG]  [BUGGY]  Preconditions.checkState(!blockStack.isEmpty());  Preconditions.checkState(!blockStack.isEmpty());  t.getScopeRoot().removeChild(referenceMap);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(!blockStack.isEmpty());  Preconditions.checkState(!blockStack.isEmpty());  t.getScopeRoot().removeChild(referenceMap);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(!blockStack.isEmpty());    Preconditions.checkState(!blockStack.isEmpty());  t.getScopeRoot().removeChild(referenceMap);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	19	None	add
80	[BUG]  [BUGGY]  Preconditions.checkState(!blockStack.isEmpty());  Preconditions.checkState(!blockStack.isEmpty());  t.getScopeRoot().addChildToBack(referenceMap);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(!blockStack.isEmpty());  Preconditions.checkState(!blockStack.isEmpty());  t.getScopeRoot().addChildToBack(referenceMap);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(!blockStack.isEmpty());    Preconditions.checkState(!blockStack.isEmpty());  t.getScopeRoot().addChildToBack(referenceMap);	  	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	19	None	add
81	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  t.sourceRoot.getSourceFile();  [CE]  cannot  find  symbol  sourceRoot  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  t.sourceRoot.getSourceFile();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  t.sourceRoot.getSourceFile();	  StaticSourceFile    sourceFile    =    t.sourceFile.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol  sourceRoot	66	None	replace
82	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  t.sourceFile;  [CE]  cannot  find  symbol  sourceFile  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  t.sourceFile;  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  t.sourceFile;	  StaticSourceFile    sourceFile    =    t.sourceFile.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol  sourceFile	66	None	replace
83	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  t.sourceFile.toSourceFile();  [CE]  cannot  find  symbol  sourceFile  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  t.sourceFile.toSourceFile();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  t.sourceFile.toSourceFile();	  StaticSourceFile    sourceFile    =    t.sourceFile.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol  sourceFile	66	None	replace
84	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  root,  new  Reference());  [CE]  cannot  find  symbol  root  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  root,  new  Reference());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  root,  new  Reference());	  NodeTraversal.traverse(compiler,    blockStack,    sourceFile,    new    Reference());    	non-compiled	[CE]  cannot  find  symbol  root	72	None	replace
85	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  basicBlock,  new  Reference());  [CE]  cannot  find  symbol  basicBlock  [FE]                          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  basicBlock,  new  Reference());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  basicBlock,  new  Reference());	  NodeTraversal.traverse(compiler,    blockStack,    sourceFile,    new    Reference());    	non-compiled	[CE]  cannot  find  symbol  basicBlock	72	None	replace
86	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  inputId,  new  Reference());  [CE]  cannot  find  symbol  inputId  [FE]                            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  inputId,  new  Reference());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  inputId,  new  Reference());	  NodeTraversal.traverse(compiler,    blockStack,    sourceFile,    new    Reference());    	non-compiled	[CE]  cannot  find  symbol  inputId	72	None	replace
87	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  varFilter,  t,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Predicate<Var>,NodeTraversal,ReferenceCollectingCallback)  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  varFilter,  t,  this);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  varFilter,  t,  this);	  NodeTraversal.traverse(compiler,    sourceFile,    t,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Predicate<Var>,NodeTraversal,ReferenceCollectingCallback)	1	None	replace
88	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  t,  this);  [CE]  cannot  find  symbol  n  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  t,  this);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  n,  t,  this);	  NodeTraversal.traverse(compiler,    sourceFile,    t,    this);    	non-compiled	[CE]  cannot  find  symbol  n	1	None	replace
89	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  varFile,  t,  this);  [CE]  cannot  find  symbol  varFile  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  varFile,  t,  this);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  varFile,  t,  this);	  NodeTraversal.traverse(compiler,    sourceFile,    t,    this);    	non-compiled	[CE]  cannot  find  symbol  varFile	1	None	replace
90	[BUG]  [BUGGY]  Node  originalRoot  =  parent.getOwnScopeRoot();  [CE]  cannot  find  symbol  parent  [FE]        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  parent.getOwnScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  parent.getOwnScopeRoot();	  Node    originalRoot    =    t.getOwnScopeRoot();    	non-compiled	[CE]  cannot  find  symbol  parent	94	None	replace
91	[BUG]  [BUGGY]  Node  originalRoot  =  n.getOwnScopeRoot();  [CE]  cannot  find  symbol  n  [FE]          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  n.getOwnScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  n.getOwnScopeRoot();	  Node    originalRoot    =    t.getOwnScopeRoot();    	non-compiled	[CE]  cannot  find  symbol  n	94	None	replace
92	[BUG]  [BUGGY]  Node  originalRoot  =  t,  scope.getOwnScopeRoot();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  t,  scope.getOwnScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  t,  scope.getOwnScopeRoot();	  Node    originalRoot    =    t.getOwnScopeRoot();    	non-compiled	[CE]  ';'  expected	94	None	replace
93	[BUG]  [BUGGY]  Node  originalRoot  =  nameNode.getOwnScopeRoot();  [CE]  cannot  find  symbol  nameNode  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  nameNode.getOwnScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  nameNode.getOwnScopeRoot();	  Node    originalRoot    =    t.getOwnScopeRoot();    	non-compiled	[CE]  cannot  find  symbol  nameNode	94	None	replace
94	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  ReferenceReference(referenceMap),  blockStack);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  ReferenceReference(referenceMap),  blockStack);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  new  ReferenceReference(referenceMap),  blockStack);	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceReference(referenceMap),    t);    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
95	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceReference(referenceMap),  t);  [CE]  cannot  find  symbol  sourceFile  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceReference(referenceMap),  t);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceReference(referenceMap),  t);	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceReference(referenceMap),    t);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	134	None	replace
96	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReferenceReference(referenceMap),  t);  [CE]  cannot  find  symbol  root  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReferenceReference(referenceMap),  t);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReferenceReference(referenceMap),  t);	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceReference(referenceMap),    t);    	non-compiled	[CE]  cannot  find  symbol  root	134	None	replace
97	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  ReferenceReference(referenceMap),  isLoop);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  ReferenceReference(referenceMap),  isLoop);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  new  ReferenceReference(referenceMap),  isLoop);	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceReference(referenceMap),    t);    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
98	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(referenceMap),  varFilter);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(referenceMap),  varFilter);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(referenceMap),  varFilter);	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceReference(referenceMap),    t);    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
99	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  ReferenceMapWrapper(referenceMap),  blockStack);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,NodeTraversal,ReferenceMapWrapper,Deque<BasicBlock>)  [FE]            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  ReferenceMapWrapper(referenceMap),  blockStack);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  new  ReferenceMapWrapper(referenceMap),  blockStack);	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceMapWrapper(referenceMap),    t);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,NodeTraversal,ReferenceMapWrapper,Deque<BasicBlock>)	125	None	replace
100	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceMapWrapper(referenceMap),  t);  [CE]  cannot  find  symbol  sourceFile  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceMapWrapper(referenceMap),  t);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceMapWrapper(referenceMap),  t);	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceMapWrapper(referenceMap),    t);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	125	None	replace
101	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReferenceMapWrapper(referenceMap),  t);  [CE]  cannot  find  symbol  root  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReferenceMapWrapper(referenceMap),  t);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReferenceMapWrapper(referenceMap),  t);	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceMapWrapper(referenceMap),    t);    	non-compiled	[CE]  cannot  find  symbol  root	125	None	replace
102	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  baseBlock,  new  ReferenceMapWrapper(referenceMap),  t);  [CE]  cannot  find  symbol  baseBlock  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  baseBlock,  new  ReferenceMapWrapper(referenceMap),  t);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  baseBlock,  new  ReferenceMapWrapper(referenceMap),  t);	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceMapWrapper(referenceMap),    t);    	non-compiled	[CE]  cannot  find  symbol  baseBlock	125	None	replace
103	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  component,  new  ReferenceMapWrapper(referenceMap),  t);  [CE]  cannot  find  symbol  component  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  component,  new  ReferenceMapWrapper(referenceMap),  t);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  component,  new  ReferenceMapWrapper(referenceMap),  t);	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceMapWrapper(referenceMap),    t);    	non-compiled	[CE]  cannot  find  symbol  component	125	None	replace
104	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  isLoop,  blockStack);  [CE]  cannot  find  symbol  sourceFile  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  isLoop,  blockStack);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  isLoop,  blockStack);	  NodeTraversal.traverse(compiler,    t,    sourceFile,    blockStack);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	28	None	replace
105	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  sourceFile,  isLoop);  [CE]  cannot  find  symbol  sourceFile  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  sourceFile,  isLoop);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  sourceFile,  isLoop);	  NodeTraversal.traverse(compiler,    t,    sourceFile,    blockStack);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	28	None	replace
106	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  sourceFile,  this.blockStack);  [CE]  cannot  find  symbol  sourceFile  [FE]                          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  sourceFile,  this.blockStack);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  sourceFile,  this.blockStack);	  NodeTraversal.traverse(compiler,    t,    sourceFile,    blockStack);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	28	None	replace
107	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  scope.getScopeRoot().getSourceFile();  [CE]  cannot  find  symbol  scope  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  scope.getScopeRoot().getSourceFile();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  scope.getScopeRoot().getSourceFile();	  StaticSourceFile    sourceFile    =    t.getScopeRoot().getSourceFile();    	non-compiled	[CE]  cannot  find  symbol  scope	131	None	replace
108	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  compiler.getScopeRoot().getSourceFile();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  compiler.getScopeRoot().getSourceFile();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  compiler.getScopeRoot().getSourceFile();	  StaticSourceFile    sourceFile    =    t.getScopeRoot().getSourceFile();    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
109	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  parent.getScopeRoot().getSourceFile();  [CE]  cannot  find  symbol  parent  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  parent.getScopeRoot().getSourceFile();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  parent.getScopeRoot().getSourceFile();	  StaticSourceFile    sourceFile    =    t.getScopeRoot().getSourceFile();    	non-compiled	[CE]  cannot  find  symbol  parent	131	None	replace
110	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  t.getScopeRoot(),  t.getSourceFile();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  t.getScopeRoot(),  t.getSourceFile();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  t.getScopeRoot(),  t.getSourceFile();	  StaticSourceFile    sourceFile    =    t.getScopeRoot().getSourceFile();    	non-compiled	[CE]  ';'  expected	131	None	replace
111	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  parent.getScopeRoot();  [CE]  cannot  find  symbol  parent  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  parent.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  parent.getScopeRoot();	  StaticSourceFile    sourceFile    =    baseUri.getScopeRoot();    	non-compiled	[CE]  cannot  find  symbol  parent	103	None	replace
112	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  baseRoot,  blockStack);  [CE]  cannot  find  symbol  baseRoot  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  baseRoot,  blockStack);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  baseRoot,  blockStack);	  NodeTraversal.traverse(compiler,    t,    root,    blockStack);    	non-compiled	[CE]  cannot  find  symbol  baseRoot	29	None	replace
113	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  parent,  blockStack);  [CE]  cannot  find  symbol  parent  [FE]                          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  parent,  blockStack);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  parent,  blockStack);	  NodeTraversal.traverse(compiler,    t,    root,    blockStack);    	non-compiled	[CE]  cannot  find  symbol  parent	29	None	replace
114	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  scriptRoot,  blockStack);  [CE]  cannot  find  symbol  scriptRoot  [FE]                            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  scriptRoot,  blockStack);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  scriptRoot,  blockStack);	  NodeTraversal.traverse(compiler,    t,    root,    blockStack);    	non-compiled	[CE]  cannot  find  symbol  scriptRoot	29	None	replace
115	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  varFilter,  new  ReferenceMapWrapper(referenceMap));  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Predicate<Var>,ReferenceMapWrapper)  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  varFilter,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  varFilter,  new  ReferenceMapWrapper(referenceMap));	  NodeTraversal.traverse(compiler,    baseBlock,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Predicate<Var>,ReferenceMapWrapper)	46	None	replace
116	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  baseRoot,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  baseRoot  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  baseRoot,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  baseRoot,  new  ReferenceMapWrapper(referenceMap));	  NodeTraversal.traverse(compiler,    baseBlock,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  baseRoot	46	None	replace
117	[BUG]  [BUGGY]  Node  originalRoot  =  t.getScopeRoot()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  t.getScopeRoot()  +  1;  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  t.getScopeRoot()  +  1;	          Node    originalRoot    =    t.getScopeRoot();    Node    originalRoot    =    t.getScopeRoot();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	87	None	replace
118	[BUG]  [BUGGY]  Node  originalRoot  =  t.getRawScopeRoot();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  t.getRawScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  t.getRawScopeRoot();	          Node    originalRoot    =    t.getScopeRoot();    Node    originalRoot    =    t.getScopeRoot();    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
119	[BUG]  [BUGGY]  Node  originalRoot  =  t.getScriptRoot();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  t.getScriptRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  t.getScriptRoot();	          Node    originalRoot    =    t.getScopeRoot();    Node    originalRoot    =    t.getScopeRoot();    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
120	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  varFilter,  blockStack,  new  ReferenceMapWrapper(referenceMap));  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Predicate<Var>,Deque<BasicBlock>,ReferenceMapWrapper)  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  varFilter,  blockStack,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  varFilter,  blockStack,  new  ReferenceMapWrapper(referenceMap));	  NodeTraversal.traverse(compiler,    root,    blockStack,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Predicate<Var>,Deque<BasicBlock>,ReferenceMapWrapper)	45	None	replace
121	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  blockStack,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  parent  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  blockStack,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  parent,  blockStack,  new  ReferenceMapWrapper(referenceMap));	  NodeTraversal.traverse(compiler,    root,    blockStack,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  parent	45	None	replace
122	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  t,  blockStack,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  sourceFile  [FE]            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  t,  blockStack,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  t,  blockStack,  new  ReferenceMapWrapper(referenceMap));	  NodeTraversal.traverse(compiler,    t,    blockStack,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	44	None	replace
123	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  root,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  root  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  root,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  root,  new  ReferenceMapWrapper(referenceMap));	  NodeTraversal.traverse(compiler,    t,    blockStack,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  root	44	None	replace
124	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  blockStack,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  root  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  blockStack,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  root,  t,  blockStack,  new  ReferenceMapWrapper(referenceMap));	  NodeTraversal.traverse(compiler,    t,    blockStack,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  root	44	None	replace
125	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(compiler,  varFilter,  referenceMap));  [CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(compiler,  varFilter,  referenceMap));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(compiler,  varFilter,  referenceMap));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(compiler,    referenceMap,    varFilter));    	non-compiled	[CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;	111	None	replace
126	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(compiler,  sourceFile,  varFilter));  [CE]  cannot  find  symbol  sourceFile  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(compiler,  sourceFile,  varFilter));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(compiler,  sourceFile,  varFilter));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(compiler,    referenceMap,    varFilter));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	111	None	replace
127	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(compiler,  varFilter,  inputId));  [CE]  cannot  find  symbol  inputId  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(compiler,  varFilter,  inputId));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(compiler,  varFilter,  inputId));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(compiler,    referenceMap,    varFilter));    	non-compiled	[CE]  cannot  find  symbol  inputId	111	None	replace
128	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(compiler,  referenceMap,  isLoop,  varFilter));  [CE]  cannot  find  symbol  isLoop  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(compiler,  referenceMap,  isLoop,  varFilter));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(compiler,  referenceMap,  isLoop,  varFilter));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(compiler,    referenceMap,    varFilter));    	non-compiled	[CE]  cannot  find  symbol  isLoop	111	None	replace
129	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(compiler,  referenceMap,  varFilter,  isLoop));  [CE]  cannot  find  symbol  isLoop  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(compiler,  referenceMap,  varFilter,  isLoop));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(compiler,  referenceMap,  varFilter,  isLoop));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(compiler,    referenceMap,    varFilter));    	non-compiled	[CE]  cannot  find  symbol  isLoop	111	None	replace
130	[BUG]  [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  root));  [CE]  cannot  find  symbol  root  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  root));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  root));	  behavior.beforeExitScope(t,    new    ReferenceMapWrapper(referenceMap,    baseUri));    	non-compiled	[CE]  cannot  find  symbol  root	12	None	replace
131	[BUG]  [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseURL));  [CE]  cannot  find  symbol  baseURL  [FE]                          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseURL));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseURL));	  behavior.beforeExitScope(t,    new    ReferenceMapWrapper(referenceMap,    baseUri));    	non-compiled	[CE]  cannot  find  symbol  baseURL	12	None	replace
132	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  inputId,  blockStack,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  inputId  [FE]            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  inputId,  blockStack,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  inputId,  blockStack,  new  ReferenceMapWrapper(referenceMap));	  NodeTraversal.traverse(compiler,    sourceFile,    blockStack,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  inputId	96	None	replace
133	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  root,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  sourceFile  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  root,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  root,  new  ReferenceMapWrapper(referenceMap));	  NodeTraversal.traverse(compiler,    sourceFile,    blockStack,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	96	None	replace
134	[BUG]  [BUGGY]  Preconditions.checkState(!isLoop,  isFunction);  [CE]  cannot  find  symbol  isLoop  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(!isLoop,  isFunction);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(!isLoop,  isFunction);	  Preconditions.checkState(!isFunction);    	non-compiled	[CE]  cannot  find  symbol  isLoop	17	None	replace
135	[BUG]  [BUGGY]  Preconditions.checkState(!isFunction,  isLoop);  [CE]  cannot  find  symbol  isFunction  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(!isFunction,  isLoop);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(!isFunction,  isLoop);	  Preconditions.checkState(!isFunction);    	non-compiled	[CE]  cannot  find  symbol  isFunction	17	None	replace
136	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  compiler.getSourceFile(t.getScopeRoot());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  compiler.getSourceFile(t.getScopeRoot());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  compiler.getSourceFile(t.getScopeRoot());	  StaticSourceFile    sourceFile    =    compiler.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
137	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  compiler.getSourceFile(n);  [CE]  cannot  find  symbol  n  [FE]                          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  compiler.getSourceFile(n);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  compiler.getSourceFile(n);	  StaticSourceFile    sourceFile    =    compiler.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol  n	68	None	replace
138	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  compiler.getSourceFile(null);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  compiler.getSourceFile(null);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  compiler.getSourceFile(null);	  StaticSourceFile    sourceFile    =    compiler.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
139	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  varFilter,  new  ReferenceCollectionWrapper(referenceMap),  blockStack);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  varFilter,  new  ReferenceCollectionWrapper(referenceMap),  blockStack);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  varFilter,  new  ReferenceCollectionWrapper(referenceMap),  blockStack);	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceCollectionWrapper(referenceMap),    varFilter);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
140	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap),  varFilter);  [CE]  cannot  find  symbol  sourceFile  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap),  varFilter);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap),  varFilter);	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceCollectionWrapper(referenceMap),    varFilter);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	43	None	replace
141	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  varFilter,  new  ReferenceCollectionWrapper(blockStack),  referenceMap);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  varFilter,  new  ReferenceCollectionWrapper(blockStack),  referenceMap);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  varFilter,  new  ReferenceCollectionWrapper(blockStack),  referenceMap);	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceCollectionWrapper(referenceMap),    varFilter);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
142	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReferenceCollectionWrapper(referenceMap),  varFilter);  [CE]  cannot  find  symbol  root  [FE]                            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReferenceCollectionWrapper(referenceMap),  varFilter);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReferenceCollectionWrapper(referenceMap),  varFilter);	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceCollectionWrapper(referenceMap),    varFilter);    	non-compiled	[CE]  cannot  find  symbol  root	43	None	replace
143	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  ReferenceCollectionWrapper(referenceMap),  varFilter);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  ReferenceCollectionWrapper(referenceMap),  varFilter);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  new  ReferenceCollectionWrapper(referenceMap),  varFilter);	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceCollectionWrapper(referenceMap),    varFilter);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
144	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceReference(referenceMap,  inputId));  [CE]  cannot  find  symbol  sourceFile  [FE]                          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceReference(referenceMap,  inputId));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceReference(referenceMap,  inputId));	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceReference(referenceMap,    inputId));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	51	None	replace
145	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  inputId,  new  ReferenceReference(referenceMap,  isLoop));  [CE]  cannot  find  symbol  inputId  [FE]                            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  inputId,  new  ReferenceReference(referenceMap,  isLoop));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  inputId,  new  ReferenceReference(referenceMap,  isLoop));	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceReference(referenceMap,    inputId));    	non-compiled	[CE]  cannot  find  symbol  inputId	51	None	replace
146	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  ReferenceReference(referenceMap,  inputId));  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  ReferenceReference(referenceMap,  inputId));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  new  ReferenceReference(referenceMap,  inputId));	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceReference(referenceMap,    inputId));    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
147	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReferenceReference(referenceMap,  inputId));  [CE]  cannot  find  symbol  root  [FE]                                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReferenceReference(referenceMap,  inputId));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReferenceReference(referenceMap,  inputId));	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceReference(referenceMap,    inputId));    	non-compiled	[CE]  cannot  find  symbol  root	51	None	replace
148	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(referenceMap,  inputId,  isLoop));  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(referenceMap,  inputId,  isLoop));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(referenceMap,  inputId,  isLoop));	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceReference(referenceMap,    inputId));    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
149	[BUG]  [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  basicBlock));  [CE]  cannot  find  symbol  basicBlock  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  basicBlock));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  basicBlock));	  behavior.exitScope(t,    new    ReferenceMapWrapper(referenceMap,    parent));    	non-compiled	[CE]  cannot  find  symbol  basicBlock	15	None	replace
150	[BUG]  [BUGGY]  Behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  basicBlock));  [CE]  cannot  find  symbol  basicBlock  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  basicBlock));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  basicBlock));	  behavior.exitScope(t,    new    ReferenceMapWrapper(referenceMap,    parent));    	non-compiled	[CE]  cannot  find  symbol  basicBlock	15	None	replace
151	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  baseReferences,  new  ReferenceCollectionWrapper(referenceMap));  [CE]  cannot  find  symbol  baseReferences  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  baseReferences,  new  ReferenceCollectionWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  baseReferences,  new  ReferenceCollectionWrapper(referenceMap));	  NodeTraversal.traverse(compiler,    references,    new    ReferenceCollectionWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  baseReferences	63	None	replace
152	[BUG]  [BUGGY]  Predicate  sourceFile  =  t.sourceRoot.getSourceFile();  [CE]  cannot  find  symbol  sourceRoot  [FE]            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Predicate  sourceFile  =  t.sourceRoot.getSourceFile();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  t.sourceRoot.getSourceFile();	  Predicate    sourceFile    =    t.sourceFile.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol  sourceRoot	74	None	replace
153	[BUG]  [BUGGY]  Predicate  sourceFile  =  t.sourceFile;  [CE]  cannot  find  symbol  sourceFile  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Predicate  sourceFile  =  t.sourceFile;  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  t.sourceFile;	  Predicate    sourceFile    =    t.sourceFile.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol  sourceFile	74	None	replace
154	[BUG]  [BUGGY]  Predicate  sourceFile  =  t.sourceFile.getSourcePath();  [CE]  cannot  find  symbol  sourceFile  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Predicate  sourceFile  =  t.sourceFile.getSourcePath();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  t.sourceFile.getSourcePath();	  Predicate    sourceFile    =    t.sourceFile.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol  sourceFile	74	None	replace
155	[BUG]  [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap),  sourceFile);  [CE]  cannot  find  symbol  sourceFile  [FE]            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap),  sourceFile);  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap),  sourceFile);	  behavior.initScope(t,    new    ReferenceMapWrapper(referenceMap),    t);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	123	None	replace
156	[BUG]  [BUGGY]  Behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap),  t);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap),  t);  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap),  t);	  behavior.initScope(t,    new    ReferenceMapWrapper(referenceMap),    t);    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
157	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  varFilter,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Predicate<Var>,ReferenceCollectingCallback)  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  varFilter,  this);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  varFilter,  this);	  NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Predicate<Var>,ReferenceCollectingCallback)	112	None	replace
158	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  this);  [CE]  cannot  find  symbol  sourceFile  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  this);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  this);	  NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	112	None	replace
159	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  [CE]  cannot  find  symbol  parent  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  parent,  this);	  NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  parent	112	None	replace
160	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [CE]  cannot  find  symbol  n  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  n,  this);	  NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  n	112	None	replace
161	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  sourceFile,  new  ReferenceCollection());  [CE]  cannot  find  symbol  sourceFile  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  sourceFile,  new  ReferenceCollection());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  sourceFile,  new  ReferenceCollection());	  NodeTraversal.traverse(compiler,    t,    blockStack,    new    ReferenceCollection());    	non-compiled	[CE]  cannot  find  symbol  sourceFile	83	None	replace
162	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  t,  blockStack,  new  ReferenceCollection());  [CE]  cannot  find  symbol  sourceFile  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  t,  blockStack,  new  ReferenceCollection());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  t,  blockStack,  new  ReferenceCollection());	  NodeTraversal.traverse(compiler,    t,    blockStack,    new    ReferenceCollection());    	non-compiled	[CE]  cannot  find  symbol  sourceFile	83	None	replace
163	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  sourceFile,  blockStack,  new  ReferenceCollection());  [CE]  cannot  find  symbol  sourceFile  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  sourceFile,  blockStack,  new  ReferenceCollection());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  sourceFile,  blockStack,  new  ReferenceCollection());	  NodeTraversal.traverse(compiler,    t,    blockStack,    new    ReferenceCollection());    	non-compiled	[CE]  cannot  find  symbol  sourceFile	83	None	replace
164	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  root,  new  ReferenceCollection());  [CE]  cannot  find  symbol  root  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  root,  new  ReferenceCollection());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  root,  new  ReferenceCollection());	  NodeTraversal.traverse(compiler,    t,    blockStack,    new    ReferenceCollection());    	non-compiled	[CE]  cannot  find  symbol  root	83	None	replace
165	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  blockStack,  new  ReferenceCollection());  [CE]  cannot  find  symbol  root  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  blockStack,  new  ReferenceCollection());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  root,  t,  blockStack,  new  ReferenceCollection());	  NodeTraversal.traverse(compiler,    t,    blockStack,    new    ReferenceCollection());    	non-compiled	[CE]  cannot  find  symbol  root	83	None	replace
166	[BUG]  [BUGGY]  Predicate  sourceFile  =  compiler.sourceFileReference();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Predicate  sourceFile  =  compiler.sourceFileReference();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  compiler.sourceFileReference();	  Predicate    sourceFile    =    compiler.getSourceReference();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
167	[BUG]  [BUGGY]  Predicate  sourceFile  =  compiler.getSourceReference(t);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Predicate  sourceFile  =  compiler.getSourceReference(t);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  compiler.getSourceReference(t);	  Predicate    sourceFile    =    compiler.getSourceReference();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
168	[BUG]  [BUGGY]  Predicate  compiler  =  compiler.getSourceReference();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Predicate  compiler  =  compiler.getSourceReference();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  compiler  =  compiler.getSourceReference();	  Predicate    sourceFile    =    compiler.getSourceReference();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
169	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  t.varFilter.getSourceFile();  [CE]  cannot  find  symbol  varFilter  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  t.varFilter.getSourceFile();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  t.varFilter.getSourceFile();	  StaticSourceFile    sourceFile    =    varFilter.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol  varFilter	98	None	replace
170	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  this.varFilter.getSourceFile();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  this.varFilter.getSourceFile();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  this.varFilter.getSourceFile();	  StaticSourceFile    sourceFile    =    varFilter.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
171	[BUG]  [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  isLoop));  [CE]  cannot  find  symbol  isLoop  [FE]            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  isLoop));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  isLoop));	  behavior.initScope(t,    new    ReferenceMapWrapper(referenceMap,    varFilter));    	non-compiled	[CE]  cannot  find  symbol  isLoop	31	None	replace
172	[BUG]  [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile,  varFilter));  [CE]  cannot  find  symbol  sourceFile  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile,  varFilter));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile,  varFilter));	  behavior.initScope(t,    new    ReferenceMapWrapper(referenceMap,    varFilter));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	31	None	replace
173	[BUG]  [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  inputId));  [CE]  cannot  find  symbol  inputId  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  inputId));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  inputId));	  behavior.initScope(t,    new    ReferenceMapWrapper(referenceMap,    varFilter));    	non-compiled	[CE]  cannot  find  symbol  inputId	31	None	replace
174	[BUG]  [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUri,  varFilter));  [CE]  cannot  find  symbol  baseUri  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUri,  varFilter));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUri,  varFilter));	  behavior.initScope(t,    new    ReferenceMapWrapper(referenceMap,    varFilter));    	non-compiled	[CE]  cannot  find  symbol  baseUri	31	None	replace
175	[BUG]  [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  sourceFile));  [CE]  cannot  find  symbol  sourceFile  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  sourceFile));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  sourceFile));	  behavior.initScope(t,    new    ReferenceMapWrapper(referenceMap,    varFilter));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	31	None	replace
176	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  referenceMap));  [CE]  cannot  find  symbol  sourceFile  [FE]                          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  referenceMap));	  NodeTraversal.traverse(compiler,    t,    new    ReferenceCollectionWrapper(referenceMap,    sourceFile));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	64	None	replace
177	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  t));  [CE]  cannot  find  symbol  sourceFile  [FE]                            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  t));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  t));	  NodeTraversal.traverse(compiler,    t,    new    ReferenceCollectionWrapper(referenceMap,    sourceFile));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	64	None	replace
178	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  method));  [CE]  cannot  find  symbol  sourceFile  [FE]                              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  method));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  method));	  NodeTraversal.traverse(compiler,    t,    new    ReferenceCollectionWrapper(referenceMap,    sourceFile));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	64	None	replace
179	[BUG]  [BUGGY]  Node  originalRoot  =  sourceFile.getOwnerFile();  [CE]  cannot  find  symbol  sourceFile  [FE]        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  sourceFile.getOwnerFile();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  sourceFile.getOwnerFile();	  Node    originalRoot    =    t.getOwnerFile();    	non-compiled	[CE]  cannot  find  symbol  sourceFile	130	None	replace
180	[BUG]  [BUGGY]  Node  originalRoot  =  parent.getOwnerFile();  [CE]  cannot  find  symbol  parent  [FE]          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  parent.getOwnerFile();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  parent.getOwnerFile();	  Node    originalRoot    =    t.getOwnerFile();    	non-compiled	[CE]  cannot  find  symbol  parent	130	None	replace
181	[BUG]  [BUGGY]  Node  originalRoot  =  n.getOwnerFile();  [CE]  cannot  find  symbol  n  [FE]            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  n.getOwnerFile();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  n.getOwnerFile();	  Node    originalRoot    =    t.getOwnerFile();    	non-compiled	[CE]  cannot  find  symbol  n	130	None	replace
182	[BUG]  [BUGGY]  Node  originalRoot  =  nameNode.getOwnerFile();  [CE]  cannot  find  symbol  nameNode  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  nameNode.getOwnerFile();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  nameNode.getOwnerFile();	  Node    originalRoot    =    t.getOwnerFile();    	non-compiled	[CE]  cannot  find  symbol  nameNode	130	None	replace
183	[BUG]  [BUGGY]          Node    originalRoot    =    t.getScopeRoot();    Node  OriginalRoot  =  t.getScopeRoot();  Node  originalRoot  =  t.getScopeRoot();  Node  OriginalRoot  =  t.getScopeRoot();  [CE]  variable  originalRoot  is  already  defined  in  method  exitScope(NodeTraversal)  [FE]    AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]          Node    originalRoot    =    t.getScopeRoot();    Node  OriginalRoot  =  t.getScopeRoot();  Node  originalRoot  =  t.getScopeRoot();  Node  OriginalRoot  =  t.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	                Node        originalRoot        =        t.getScopeRoot();        Node    OriginalRoot    =    t.getScopeRoot();    Node  originalRoot  =  t.getScopeRoot();  Node  OriginalRoot  =  t.getScopeRoot();	  	non-compiled	[CE]  variable  originalRoot  is  already  defined  in  method  exitScope(NodeTraversal)	89	None	add
184	[BUG]  [BUGGY]          Node    originalRoot    =    t.getScopeRoot();    Node  OriginalRoot  =  t.getScopeRoot();  Node  originalRoot  =  t.getScopeRoot();  Node  OriginRoot  =  t.getScopeRoot();  [CE]  variable  originalRoot  is  already  defined  in  method  exitScope(NodeTraversal)  [FE]      AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]          Node    originalRoot    =    t.getScopeRoot();    Node  OriginalRoot  =  t.getScopeRoot();  Node  originalRoot  =  t.getScopeRoot();  Node  OriginRoot  =  t.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	                Node        originalRoot        =        t.getScopeRoot();        Node    OriginalRoot    =    t.getScopeRoot();    Node  originalRoot  =  t.getScopeRoot();  Node  OriginRoot  =  t.getScopeRoot();	  	non-compiled	[CE]  variable  originalRoot  is  already  defined  in  method  exitScope(NodeTraversal)	89	None	add
185	[BUG]  [BUGGY]          Node    originalRoot    =    t.getScopeRoot();    Node  OriginalRoot  =  t.getScopeRoot();  Node  originalRoot  =  t.getScopeRoot();  NodeExceptionRoot  =  t.getScopeRoot();  [CE]  variable  originalRoot  is  already  defined  in  method  exitScope(NodeTraversal)  [FE]        AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]          Node    originalRoot    =    t.getScopeRoot();    Node  OriginalRoot  =  t.getScopeRoot();  Node  originalRoot  =  t.getScopeRoot();  NodeExceptionRoot  =  t.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	                Node        originalRoot        =        t.getScopeRoot();        Node    OriginalRoot    =    t.getScopeRoot();    Node  originalRoot  =  t.getScopeRoot();  NodeExceptionRoot  =  t.getScopeRoot();	  	non-compiled	[CE]  variable  originalRoot  is  already  defined  in  method  exitScope(NodeTraversal)	89	None	add
186	[BUG]  [BUGGY]          Node    originalRoot    =    t.getScopeRoot();    Node  OriginalRoot  =  t.getScopeRoot();  Node  originalRoot  =  t.getScopeRoot();  Node  UriRoot  =  t.getScopeRoot();  [CE]  variable  originalRoot  is  already  defined  in  method  exitScope(NodeTraversal)  [FE]          AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]          Node    originalRoot    =    t.getScopeRoot();    Node  OriginalRoot  =  t.getScopeRoot();  Node  originalRoot  =  t.getScopeRoot();  Node  UriRoot  =  t.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	                Node        originalRoot        =        t.getScopeRoot();        Node    OriginalRoot    =    t.getScopeRoot();    Node  originalRoot  =  t.getScopeRoot();  Node  UriRoot  =  t.getScopeRoot();	  	non-compiled	[CE]  variable  originalRoot  is  already  defined  in  method  exitScope(NodeTraversal)	89	None	add
187	[BUG]  [BUGGY]          Node    originalRoot    =    t.getScopeRoot();    Node  OriginalRoot  =  t.getScopeRoot();  Node  originalRoot  =  t.getScopeRoot();  NodeOwnerRoot  =  t.getScopeRoot();  [CE]  variable  originalRoot  is  already  defined  in  method  exitScope(NodeTraversal)  [FE]            AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]          Node    originalRoot    =    t.getScopeRoot();    Node  OriginalRoot  =  t.getScopeRoot();  Node  originalRoot  =  t.getScopeRoot();  NodeOwnerRoot  =  t.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	                Node        originalRoot        =        t.getScopeRoot();        Node    OriginalRoot    =    t.getScopeRoot();    Node  originalRoot  =  t.getScopeRoot();  NodeOwnerRoot  =  t.getScopeRoot();	  	non-compiled	[CE]  variable  originalRoot  is  already  defined  in  method  exitScope(NodeTraversal)	89	None	add
188	[BUG]  [BUGGY]          Node    originalRoot    =    t.getScopeRoot();    Node  OriginalRoot  =  t.getScopeRoot();  Node  originalRoot  =  t.getScopeRoot();  Node  FactoryRoot  =  t.getScopeRoot();  [CE]  variable  originalRoot  is  already  defined  in  method  exitScope(NodeTraversal)  [FE]              AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]          Node    originalRoot    =    t.getScopeRoot();    Node  OriginalRoot  =  t.getScopeRoot();  Node  originalRoot  =  t.getScopeRoot();  Node  FactoryRoot  =  t.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	                Node        originalRoot        =        t.getScopeRoot();        Node    OriginalRoot    =    t.getScopeRoot();    Node  originalRoot  =  t.getScopeRoot();  Node  FactoryRoot  =  t.getScopeRoot();	  	non-compiled	[CE]  variable  originalRoot  is  already  defined  in  method  exitScope(NodeTraversal)	89	None	add
189	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  blockStack,  basicBlock);  [CE]  cannot  find  symbol  basicBlock  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  blockStack,  basicBlock);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  blockStack,  basicBlock);	  NodeTraversal.traverse(compiler,    t,    blockStack,    sourceFile);    	non-compiled	[CE]  cannot  find  symbol  basicBlock	109	None	replace
190	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  blockStack,  inputId);  [CE]  cannot  find  symbol  inputId  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  blockStack,  inputId);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  blockStack,  inputId);	  NodeTraversal.traverse(compiler,    t,    blockStack,    sourceFile);    	non-compiled	[CE]  cannot  find  symbol  inputId	109	None	replace
191	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  blockStack,  root);  [CE]  cannot  find  symbol  root  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  blockStack,  root);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  blockStack,  root);	  NodeTraversal.traverse(compiler,    t,    blockStack,    sourceFile);    	non-compiled	[CE]  cannot  find  symbol  root	109	None	replace
192	[BUG]  [BUGGY]  Node  originalRoot  =  t.getOwnerScope();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  t.getOwnerScope();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  t.getOwnerScope();	          Node    originalRoot    =    t.getScopeRoot();    Node    originalRoot    =    t.getScopeRoot());    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
193	[BUG]  [BUGGY]  Predicate  sourceFile  =  resourceMap.getSourceFile();  [CE]  cannot  find  symbol  resourceMap  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Predicate  sourceFile  =  resourceMap.getSourceFile();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  resourceMap.getSourceFile();	  Predicate    sourceFile    =    referenceMap.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol  resourceMap	77	None	replace
194	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  t,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  n  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  t,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  n,  t,  new  ReferenceMapWrapper(referenceMap));	  NodeTraversal.traverse(compiler,    root,    t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  n	92	None	replace
195	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  varFilter,  t,  new  ReferenceMapWrapper(referenceMap));  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Predicate<Var>,NodeTraversal,ReferenceMapWrapper)  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  varFilter,  t,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  varFilter,  t,  new  ReferenceMapWrapper(referenceMap));	  NodeTraversal.traverse(compiler,    root,    t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Predicate<Var>,NodeTraversal,ReferenceMapWrapper)	92	None	replace
196	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  t,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  nameNode  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  t,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  nameNode,  t,  new  ReferenceMapWrapper(referenceMap));	  NodeTraversal.traverse(compiler,    root,    t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  nameNode	92	None	replace
197	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile,  isLoop));  [CE]  cannot  find  symbol  sourceFile  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile,  isLoop));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile,  isLoop));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(referenceMap,    varFilter,    sourceFile));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	57	None	replace
198	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  root));  [CE]  cannot  find  symbol  root  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  root));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  root));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(referenceMap,    varFilter,    sourceFile));    	non-compiled	[CE]  cannot  find  symbol  root	57	None	replace
199	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  basicBlock,  varFilter));  [CE]  cannot  find  symbol  basicBlock  [FE]                          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  basicBlock,  varFilter));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  basicBlock,  varFilter));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(referenceMap,    varFilter,    sourceFile));    	non-compiled	[CE]  cannot  find  symbol  basicBlock	57	None	replace
200	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  root,  sourceFile));  [CE]  cannot  find  symbol  root  [FE]                            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  root,  sourceFile));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  root,  sourceFile));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(referenceMap,    varFilter,    sourceFile));    	non-compiled	[CE]  cannot  find  symbol  root	57	None	replace
201	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  blockStack,  new  ReferenceCollection());  [CE]  cannot  find  symbol  parent  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  blockStack,  new  ReferenceCollection());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  parent,  blockStack,  new  ReferenceCollection());	  NodeTraversal.traverse(compiler,    n,    blockStack,    new    ReferenceCollection());    	non-compiled	[CE]  cannot  find  symbol  parent	86	None	replace
202	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  blockStack,  new  ReferenceCollection());  [CE]  cannot  find  symbol  externs  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  blockStack,  new  ReferenceCollection());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  externs,  blockStack,  new  ReferenceCollection());	  NodeTraversal.traverse(compiler,    n,    blockStack,    new    ReferenceCollection());    	non-compiled	[CE]  cannot  find  symbol  externs	86	None	replace
203	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  t,  this);  [CE]  cannot  find  symbol  parent  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  t,  this);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  parent,  t,  this);	  NodeTraversal.traverse(compiler,    root,    t,    this);    	non-compiled	[CE]  cannot  find  symbol  parent	3	None	replace
204	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  isHoisted));  [CE]  cannot  find  symbol  isHoisted  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  isHoisted));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  isHoisted));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(referenceMap,    varFilter,    isLoop));    	non-compiled	[CE]  cannot  find  symbol  isHoisted	53	None	replace
205	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  isFunction));  [CE]  cannot  find  symbol  isFunction  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  isFunction));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  isFunction));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(referenceMap,    varFilter,    isLoop));    	non-compiled	[CE]  cannot  find  symbol  isFunction	53	None	replace
206	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile,  isHoisted));  [CE]  cannot  find  symbol  sourceFile  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile,  isHoisted));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile,  isHoisted));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(referenceMap,    varFilter,    isLoop));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	53	None	replace
207	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile,  isFunction));  [CE]  cannot  find  symbol  sourceFile  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile,  isFunction));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile,  isFunction));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(referenceMap,    varFilter,    isLoop));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	53	None	replace
208	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  varFilter,  new  ReferenceReference(referenceMap));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  varFilter,  new  ReferenceReference(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  varFilter,  new  ReferenceReference(referenceMap));	  NodeTraversal.traverse(compiler,    sourceFile,    new    ReferenceReference(referenceMap));    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
209	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  inputId,  new  ReferenceReference(referenceMap));  [CE]  cannot  find  symbol  inputId  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  inputId,  new  ReferenceReference(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  inputId,  new  ReferenceReference(referenceMap));	  NodeTraversal.traverse(compiler,    sourceFile,    new    ReferenceReference(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  inputId	48	None	replace
210	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap),  blockStack);  [CE]  cannot  find  symbol  sourceFile  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap),  blockStack);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap),  blockStack);	  NodeTraversal.traverse(compiler,    t,    new    ReferenceCollectionWrapper(referenceMap),    blockStack);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	126	None	replace
211	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReferenceCollectionWrapper(referenceMap),  blockStack);  [CE]  cannot  find  symbol  root  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReferenceCollectionWrapper(referenceMap),  blockStack);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReferenceCollectionWrapper(referenceMap),  blockStack);	  NodeTraversal.traverse(compiler,    t,    new    ReferenceCollectionWrapper(referenceMap),    blockStack);    	non-compiled	[CE]  cannot  find  symbol  root	126	None	replace
212	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceCollectionWrapper(referenceMap),  compiler);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceCollectionWrapper(referenceMap),  compiler);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceCollectionWrapper(referenceMap),  compiler);	  NodeTraversal.traverse(compiler,    t,    new    ReferenceCollectionWrapper(referenceMap),    blockStack);    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
213	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  ReferenceCollectionWrapper(referenceMap,  baseUri),  blockStack);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  ReferenceCollectionWrapper(referenceMap,  baseUri),  blockStack);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  new  ReferenceCollectionWrapper(referenceMap,  baseUri),  blockStack);	  NodeTraversal.traverse(compiler,    t,    new    ReferenceCollectionWrapper(referenceMap),    blockStack);    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
214	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  inputId,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  inputId  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  inputId,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  inputId,  new  ReferenceMapWrapper(referenceMap));	  NodeTraversal.traverse(compiler,    sourceFile,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  inputId	35	None	replace
215	[BUG]  [BUGGY]  Preconditions.checkState(!isFunction  ||!hasErrors);  [CE]  cannot  find  symbol  isFunction  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(!isFunction  ||!hasErrors);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(!isFunction  ||!hasErrors);	  Preconditions.checkState(!hasErrors);    	non-compiled	[CE]  cannot  find  symbol  isFunction	115	None	replace
216	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  t,  new  ReferenceMapWrapper(referenceMap));  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Deque<BasicBlock>,NodeTraversal,ReferenceMapWrapper)  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  t,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  t,  new  ReferenceMapWrapper(referenceMap));	  NodeTraversal.traverse(compiler,    sourceFile,    t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Deque<BasicBlock>,NodeTraversal,ReferenceMapWrapper)	91	None	replace
217	[BUG]  [BUGGY]  Predicate  sourceFile  =  t.varFilter.getSourceReference();  [CE]  cannot  find  symbol  varFilter  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Predicate  sourceFile  =  t.varFilter.getSourceReference();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  t.varFilter.getSourceReference();	  Predicate    sourceFile    =    varFilter.getSourceReference();    	non-compiled	[CE]  cannot  find  symbol  varFilter	100	None	replace
218	[BUG]  [BUGGY]  Predicate  sourceFile  =  this.varFilter.getSourceReference();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Predicate  sourceFile  =  this.varFilter.getSourceReference();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  this.varFilter.getSourceReference();	  Predicate    sourceFile    =    varFilter.getSourceReference();    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
219	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  sourceFile,  blockStack,  this);  [CE]  cannot  find  symbol  sourceFile  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  sourceFile,  blockStack,  this);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  sourceFile,  blockStack,  this);	  NodeTraversal.traverse(compiler,    t,    blockStack,    this);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	2	None	replace
220	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  root,  blockStack,  this);  [CE]  cannot  find  symbol  root  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  root,  blockStack,  this);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  root,  blockStack,  this);	  NodeTraversal.traverse(compiler,    t,    blockStack,    this);    	non-compiled	[CE]  cannot  find  symbol  root	2	None	replace
221	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  t,  blockStack,  this);  [CE]  cannot  find  symbol  sourceFile  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  t,  blockStack,  this);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  t,  blockStack,  this);	  NodeTraversal.traverse(compiler,    t,    blockStack,    this);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	2	None	replace
222	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  blockStack,  this);  [CE]  cannot  find  symbol  root  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  blockStack,  this);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  root,  t,  blockStack,  this);	  NodeTraversal.traverse(compiler,    t,    blockStack,    this);    	non-compiled	[CE]  cannot  find  symbol  root	2	None	replace
223	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  blockStack,  sourceFile,  this);  [CE]  cannot  find  symbol  sourceFile  [FE]                          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  blockStack,  sourceFile,  this);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  blockStack,  sourceFile,  this);	  NodeTraversal.traverse(compiler,    t,    blockStack,    this);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	2	None	replace
224	[BUG]  [BUGGY]  Behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter));  [CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter));	  Behavior.initScope(t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;	124	None	replace
225	[BUG]  [BUGGY]  Behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile));  [CE]  cannot  find  symbol  sourceFile  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile));	  Behavior.initScope(t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	124	None	replace
226	[BUG]  [BUGGY]  Behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  inputId));  [CE]  cannot  find  symbol  inputId  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  inputId));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  inputId));	  Behavior.initScope(t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  inputId	124	None	replace
227	[BUG]  [BUGGY]  Behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  parent));  [CE]  cannot  find  symbol  parent  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  parent));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  parent));	  Behavior.initScope(t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  parent	124	None	replace
228	[BUG]  [BUGGY]  Behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  baseFile));  [CE]  cannot  find  symbol  baseFile  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  baseFile));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  baseFile));	  Behavior.initScope(t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  baseFile	124	None	replace
229	[BUG]  [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseBlock));  [CE]  cannot  find  symbol  baseBlock  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseBlock));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseBlock));	  behavior.beforeExitScope(t,    new    ReferenceMapWrapper(referenceMap,    sourceFile));    	non-compiled	[CE]  cannot  find  symbol  baseBlock	10	None	replace
230	[BUG]  [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  isLoop));  [CE]  cannot  find  symbol  isLoop  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  isLoop));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  isLoop));	  behavior.beforeExitScope(t,    new    ReferenceMapWrapper(referenceMap,    varFilter));    	non-compiled	[CE]  cannot  find  symbol  isLoop	9	None	replace
231	[BUG]  [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile,  varFilter));  [CE]  cannot  find  symbol  sourceFile  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile,  varFilter));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile,  varFilter));	  behavior.beforeExitScope(t,    new    ReferenceMapWrapper(referenceMap,    varFilter));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	9	None	replace
232	[BUG]  [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUri,  varFilter));  [CE]  cannot  find  symbol  baseUri  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUri,  varFilter));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUri,  varFilter));	  behavior.beforeExitScope(t,    new    ReferenceMapWrapper(referenceMap,    varFilter));    	non-compiled	[CE]  cannot  find  symbol  baseUri	9	None	replace
233	[BUG]  [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  scope));  [CE]  cannot  find  symbol  scope  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  scope));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  scope));	  behavior.beforeExitScope(t,    new    ReferenceMapWrapper(referenceMap,    varFilter));    	non-compiled	[CE]  cannot  find  symbol  scope	9	None	replace
234	[BUG]  [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(varFilter,  referenceMap));  [CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(varFilter,  referenceMap));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.beforeExitScope(t,  new  ReferenceMapWrapper(varFilter,  referenceMap));	  behavior.beforeExitScope(t,    new    ReferenceMapWrapper(referenceMap,    varFilter));    	non-compiled	[CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;	9	None	replace
235	[BUG]  [BUGGY]  Predicate  sourceFile  =  t.sourceRoot.getSourceReference();  [CE]  cannot  find  symbol  sourceRoot  [FE]                          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Predicate  sourceFile  =  t.sourceRoot.getSourceReference();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  t.sourceRoot.getSourceReference();	  Predicate    sourceFile    =    t.sourceFile.getSourceReference();    	non-compiled	[CE]  cannot  find  symbol  sourceRoot	7	None	replace
236	[BUG]  [BUGGY]  Predicate  sourceFile  =  t.sourceFile.getSource();  [CE]  cannot  find  symbol  sourceFile  [FE]                            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Predicate  sourceFile  =  t.sourceFile.getSource();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  t.sourceFile.getSource();	  Predicate    sourceFile    =    t.sourceFile.getSourceReference();    	non-compiled	[CE]  cannot  find  symbol  sourceFile	7	None	replace
237	[BUG]  [BUGGY]  Predicate  sourceFile  =  this.sourceFile.getSourceReference();  [CE]  cannot  find  symbol  sourceFile  [FE]                              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Predicate  sourceFile  =  this.sourceFile.getSourceReference();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  this.sourceFile.getSourceReference();	  Predicate    sourceFile    =    t.sourceFile.getSourceReference();    	non-compiled	[CE]  cannot  find  symbol  sourceFile	7	None	replace
238	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap),  t);  [CE]  method  afterExitScope  in  interface  Behavior  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap),  t);  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap),  t);	  behavior.beforeExitScope(t,    new    ReferenceMapWrapper(referenceMap),    t);    	non-compiled	[CE]  method  afterExitScope  in  interface  Behavior  cannot  be  applied  to  given  types;	132	None	replace
239	[BUG]  [BUGGY]  Node  originalRoot  =  parent.getAssignedRoot();  [CE]  cannot  find  symbol  parent  [FE]          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  parent.getAssignedRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  parent.getAssignedRoot();	  Node    originalRoot    =    t.getAssignedRoot();    	non-compiled	[CE]  cannot  find  symbol  parent	23	None	replace
240	[BUG]  [BUGGY]  Node  originalRoot  =  scriptRoot.getAssignedRoot();  [CE]  cannot  find  symbol  scriptRoot  [FE]            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  scriptRoot.getAssignedRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  scriptRoot.getAssignedRoot();	  Node    originalRoot    =    t.getAssignedRoot();    	non-compiled	[CE]  cannot  find  symbol  scriptRoot	23	None	replace
241	[BUG]  [BUGGY]  Node  originalRoot  =  n.getAssignedRoot();  [CE]  cannot  find  symbol  n  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  n.getAssignedRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  n.getAssignedRoot();	  Node    originalRoot    =    t.getAssignedRoot();    	non-compiled	[CE]  cannot  find  symbol  n	23	None	replace
242	[BUG]  [BUGGY]  Node  originalRoot  =  nameNode.getAssignedRoot();  [CE]  cannot  find  symbol  nameNode  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  nameNode.getAssignedRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  nameNode.getAssignedRoot();	  Node    originalRoot    =    t.getAssignedRoot();    	non-compiled	[CE]  cannot  find  symbol  nameNode	23	None	replace
243	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  n  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  n,  root,  new  ReferenceMapWrapper(referenceMap));	  NodeTraversal.traverse(compiler,    n,    blockStack,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  n	97	None	replace
244	[BUG]  [BUGGY]  Predicate  sourceFile  =  t.varFilter.getSourceFile();  [CE]  cannot  find  symbol  varFilter  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Predicate  sourceFile  =  t.varFilter.getSourceFile();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  t.varFilter.getSourceFile();	  Predicate    sourceFile    =    varFilter.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol  varFilter	76	None	replace
245	[BUG]  [BUGGY]  Predicate  sourceFile  =  this.varFilter.getSourceFile();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Predicate  sourceFile  =  this.varFilter.getSourceFile();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  this.varFilter.getSourceFile();	  Predicate    sourceFile    =    varFilter.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
246	[BUG]  [BUGGY]  Predicate  sourceFile  =  inputId.getSourceReference();  [CE]  cannot  find  symbol  inputId  [FE]                            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Predicate  sourceFile  =  inputId.getSourceReference();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  inputId.getSourceReference();	  Predicate    sourceFile    =    references.getSourceReference();    	non-compiled	[CE]  cannot  find  symbol  inputId	8	None	replace
247	[BUG]  [BUGGY]  Preconditions.checkState(!isLoop.isHoisted);  [CE]  cannot  find  symbol  isLoop  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(!isLoop.isHoisted);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(!isLoop.isHoisted);	  Preconditions.checkState(!statement.isHoisted);    	non-compiled	[CE]  cannot  find  symbol  isLoop	116	None	replace
248	[BUG]  [BUGGY]  Preconditions.checkState(!isLoop,!statement.isHoisted);  [CE]  cannot  find  symbol  isLoop  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(!isLoop,!statement.isHoisted);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(!isLoop,!statement.isHoisted);	  Preconditions.checkState(!statement.isHoisted);    	non-compiled	[CE]  cannot  find  symbol  isLoop	116	None	replace
249	[BUG]  [BUGGY]  Preconditions.checkState(!isFunction.isHoisted);  [CE]  cannot  find  symbol  isFunction  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(!isFunction.isHoisted);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(!isFunction.isHoisted);	  Preconditions.checkState(!statement.isHoisted);    	non-compiled	[CE]  cannot  find  symbol  isFunction	116	None	replace
250	[BUG]  [BUGGY]  Preconditions.checkState(!isLoop,!isHoisted);  [CE]  cannot  find  symbol  isLoop  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(!isLoop,!isHoisted);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(!isLoop,!isHoisted);	  Preconditions.checkState(!statement.isHoisted);    	non-compiled	[CE]  cannot  find  symbol  isLoop	116	None	replace
251	[BUG]  [BUGGY]  Preconditions.checkState(!isLoop,  isHoisted);  [CE]  cannot  find  symbol  isLoop  [FE]                          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(!isLoop,  isHoisted);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(!isLoop,  isHoisted);	  Preconditions.checkState(!statement.isHoisted);    	non-compiled	[CE]  cannot  find  symbol  isLoop	116	None	replace
252	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  root,  new  ReferenceCollection());  [CE]  cannot  find  symbol  root  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  root,  new  ReferenceCollection());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  root,  new  ReferenceCollection());	  NodeTraversal.traverse(compiler,    blockStack,    sourceFile,    new    ReferenceCollection());    	non-compiled	[CE]  cannot  find  symbol  root	95	None	replace
253	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  inputId,  new  ReferenceCollection());  [CE]  cannot  find  symbol  inputId  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  inputId,  new  ReferenceCollection());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  inputId,  new  ReferenceCollection());	  NodeTraversal.traverse(compiler,    blockStack,    sourceFile,    new    ReferenceCollection());    	non-compiled	[CE]  cannot  find  symbol  inputId	95	None	replace
254	[BUG]  [BUGGY]  Behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter));  [CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter));	  Behavior.exitScope(t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;	117	None	replace
255	[BUG]  [BUGGY]  Behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile));  [CE]  cannot  find  symbol  sourceFile  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile));	  Behavior.exitScope(t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	117	None	replace
256	[BUG]  [BUGGY]  Behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  parent));  [CE]  cannot  find  symbol  parent  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  parent));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  parent));	  Behavior.exitScope(t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  parent	117	None	replace
257	[BUG]  [BUGGY]  Behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUri));  [CE]  cannot  find  symbol  baseUri  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUri));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUri));	  Behavior.exitScope(t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  baseUri	117	None	replace
258	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  n  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  n,  new  ReferenceMapWrapper(referenceMap));	  NodeTraversal.traverse(compiler,    root,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  n	39	None	replace
259	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  Reference());  [CE]  cannot  find  symbol  root  [FE]                          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  Reference());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  root,  new  Reference());	  NodeTraversal.traverse(compiler,    sourceFile,    new    Reference());    	non-compiled	[CE]  cannot  find  symbol  root	73	None	replace
260	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  varFilter,  new  Reference());  [CE]  no  suitable  constructor  found  for  Reference()  [FE]                            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  varFilter,  new  Reference());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  varFilter,  new  Reference());	  NodeTraversal.traverse(compiler,    sourceFile,    new    Reference());    	non-compiled	[CE]  no  suitable  constructor  found  for  Reference()	73	None	replace
261	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  varFile,  new  Reference());  [CE]  cannot  find  symbol  varFile  [FE]                              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  varFile,  new  Reference());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  varFile,  new  Reference());	  NodeTraversal.traverse(compiler,    sourceFile,    new    Reference());    	non-compiled	[CE]  cannot  find  symbol  varFile	73	None	replace
262	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockedStack,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  blockedStack  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockedStack,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockedStack,  new  ReferenceMapWrapper(referenceMap));	  NodeTraversal.traverse(compiler,    referenceMap,    new    ReferenceMapWrapper(blockStack));    	non-compiled	[CE]  cannot  find  symbol  blockedStack	47	None	replace
263	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blocking,  new  ReferenceMapWrapper(blockStack));  [CE]  cannot  find  symbol  blocking  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blocking,  new  ReferenceMapWrapper(blockStack));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blocking,  new  ReferenceMapWrapper(blockStack));	  NodeTraversal.traverse(compiler,    referenceMap,    new    ReferenceMapWrapper(blockStack));    	non-compiled	[CE]  cannot  find  symbol  blocking	47	None	replace
264	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ReferenceReference(referenceMap));  [CE]  cannot  find  symbol  n  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ReferenceReference(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  n,  new  ReferenceReference(referenceMap));	  NodeTraversal.traverse(compiler,    root,    new    ReferenceReference(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  n	50	None	replace
265	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  baseRoot,  new  ReferenceReference(referenceMap));  [CE]  cannot  find  symbol  baseRoot  [FE]                          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  baseRoot,  new  ReferenceReference(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  baseRoot,  new  ReferenceReference(referenceMap));	  NodeTraversal.traverse(compiler,    root,    new    ReferenceReference(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  baseRoot	50	None	replace
266	[BUG]  [BUGGY]  NameNode  originalRoot  =  t.getScopeRoot();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NameNode  originalRoot  =  t.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NameNode  originalRoot  =  t.getScopeRoot();	          Node    originalRoot    =    t.getScopeRoot();    NameNode    originalRoot    =    t.getScopeRoot();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
267	[BUG]  [BUGGY]  Node  originalRoot  =  parent.getScopeRoot();  NameNode  originalRoot  =  t.getScopeRoot();  [CE]  cannot  find  symbol  parent  [FE]            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  parent.getScopeRoot();  NameNode  originalRoot  =  t.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  parent.getScopeRoot();  NameNode  originalRoot  =  t.getScopeRoot();	          Node    originalRoot    =    t.getScopeRoot();    NameNode    originalRoot    =    t.getScopeRoot();    	non-compiled	[CE]  cannot  find  symbol  parent	102	None	replace
268	[BUG]  [BUGGY]  Node  originalRoot  =  t.getScopeRoot();  nameNode  =  t.getScopeRoot();  [CE]  cannot  find  symbol  nameNode  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  t.getScopeRoot();  nameNode  =  t.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  t.getScopeRoot();  nameNode  =  t.getScopeRoot();	          Node    originalRoot    =    t.getScopeRoot();    NameNode    originalRoot    =    t.getScopeRoot();    	non-compiled	[CE]  cannot  find  symbol  nameNode	102	None	replace
269	[BUG]  [BUGGY]  Predicate  sourceFile  =  inputId.getSourceFile();  [CE]  cannot  find  symbol  inputId  [FE]            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Predicate  sourceFile  =  inputId.getSourceFile();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  inputId.getSourceFile();	  Predicate    sourceFile    =    references.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol  inputId	119	None	replace
270	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  varFilter,  sourceFile,  new  ReferenceCollection());  [CE]  cannot  find  symbol  sourceFile  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  varFilter,  sourceFile,  new  ReferenceCollection());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  varFilter,  sourceFile,  new  ReferenceCollection());	  NodeTraversal.traverse(compiler,    varFilter,    blockStack,    new    ReferenceCollection());    	non-compiled	[CE]  cannot  find  symbol  sourceFile	85	None	replace
271	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  varFilter,  root,  new  ReferenceCollection());  [CE]  cannot  find  symbol  root  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  varFilter,  root,  new  ReferenceCollection());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  varFilter,  root,  new  ReferenceCollection());	  NodeTraversal.traverse(compiler,    varFilter,    blockStack,    new    ReferenceCollection());    	non-compiled	[CE]  cannot  find  symbol  root	85	None	replace
272	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  varFilter,  module,  new  ReferenceCollection());  [CE]  cannot  find  symbol  module  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  varFilter,  module,  new  ReferenceCollection());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  varFilter,  module,  new  ReferenceCollection());	  NodeTraversal.traverse(compiler,    varFilter,    blockStack,    new    ReferenceCollection());    	non-compiled	[CE]  cannot  find  symbol  module	85	None	replace
273	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  varFilter,  new  ReferenceCollection());  [CE]  cannot  find  symbol  sourceFile  [FE]                          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  varFilter,  new  ReferenceCollection());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  varFilter,  new  ReferenceCollection());	  NodeTraversal.traverse(compiler,    varFilter,    blockStack,    new    ReferenceCollection());    	non-compiled	[CE]  cannot  find  symbol  sourceFile	85	None	replace
274	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  varFilter,  new  ReferenceCollection());  [CE]  cannot  find  symbol  root  [FE]                            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  varFilter,  new  ReferenceCollection());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  root,  varFilter,  new  ReferenceCollection());	  NodeTraversal.traverse(compiler,    varFilter,    blockStack,    new    ReferenceCollection());    	non-compiled	[CE]  cannot  find  symbol  root	85	None	replace
275	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  Reference(),  this);  [CE]  cannot  find  symbol  sourceFile  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  Reference(),  this);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  new  Reference(),  this);	  NodeTraversal.traverse(compiler,    blockStack,    new    Reference(),    this);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	118	None	replace
276	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  Reference(),  this);  [CE]  cannot  find  symbol  root  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  Reference(),  this);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  root,  new  Reference(),  this);	  NodeTraversal.traverse(compiler,    blockStack,    new    Reference(),    this);    	non-compiled	[CE]  cannot  find  symbol  root	118	None	replace
277	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  Reference(),  this);  [CE]  no  suitable  constructor  found  for  Reference()  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  Reference(),  this);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  new  Reference(),  this);	  NodeTraversal.traverse(compiler,    blockStack,    new    Reference(),    this);    	non-compiled	[CE]  no  suitable  constructor  found  for  Reference()	118	None	replace
278	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Reference(),  this);  [CE]  cannot  find  symbol  n  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Reference(),  this);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  n,  new  Reference(),  this);	  NodeTraversal.traverse(compiler,    blockStack,    new    Reference(),    this);    	non-compiled	[CE]  cannot  find  symbol  n	118	None	replace
279	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  Reference(),  this,  behavior);  [CE]  no  suitable  constructor  found  for  Reference()  [FE]                          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  Reference(),  this,  behavior);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  new  Reference(),  this,  behavior);	  NodeTraversal.traverse(compiler,    blockStack,    new    Reference(),    this);    	non-compiled	[CE]  no  suitable  constructor  found  for  Reference()	118	None	replace
280	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  references.getScopeRoot();  [CE]  cannot  find  symbol  references  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  references.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  references.getScopeRoot();	  StaticSourceFile    sourceFile    =    referenceMap.getScopeRoot();    	non-compiled	[CE]  cannot  find  symbol  references	78	None	replace
281	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  resourceMap.getScopeRoot();  [CE]  cannot  find  symbol  resourceMap  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  resourceMap.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  resourceMap.getScopeRoot();	  StaticSourceFile    sourceFile    =    referenceMap.getScopeRoot();    	non-compiled	[CE]  cannot  find  symbol  resourceMap	78	None	replace
282	[BUG]  [BUGGY]  Preconditions.checkState(isLoop);  [CE]  cannot  find  symbol  isLoop  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(isLoop);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(isLoop);	  Preconditions.checkState(!isHoisted);    	non-compiled	[CE]  cannot  find  symbol  isLoop	18	None	replace
283	[BUG]  [BUGGY]  Preconditions.checkState(!statement.isLoop);  [CE]  cannot  find  symbol  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(!statement.isLoop);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(!statement.isLoop);	  Preconditions.checkState(!isHoisted);    	non-compiled	[CE]  cannot  find  symbol  statement	18	None	replace
284	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReferenceCollection());  [CE]  cannot  find  symbol  root  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReferenceCollection());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReferenceCollection());	  NodeTraversal.traverse(compiler,    baseBlock,    new    ReferenceCollection());    	non-compiled	[CE]  cannot  find  symbol  root	129	None	replace
285	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  varFilter,  new  ReferenceCollection());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Predicate<Var>,ReferenceCollection)  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  varFilter,  new  ReferenceCollection());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  varFilter,  new  ReferenceCollection());	  NodeTraversal.traverse(compiler,    baseBlock,    new    ReferenceCollection());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Predicate<Var>,ReferenceCollection)	129	None	replace
286	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollection());  [CE]  cannot  find  symbol  sourceFile  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollection());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollection());	  NodeTraversal.traverse(compiler,    baseBlock,    new    ReferenceCollection());    	non-compiled	[CE]  cannot  find  symbol  sourceFile	129	None	replace
287	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  t,  blockStack);  [CE]  cannot  find  symbol  n  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  t,  blockStack);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  n,  t,  blockStack);	  NodeTraversal.traverse(compiler,    root,    t,    blockStack);    	non-compiled	[CE]  cannot  find  symbol  n	27	None	replace
288	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  t,  blockStack);  [CE]  cannot  find  symbol  parent  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  t,  blockStack);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  parent,  t,  blockStack);	  NodeTraversal.traverse(compiler,    root,    t,    blockStack);    	non-compiled	[CE]  cannot  find  symbol  parent	27	None	replace
289	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  basicBlock.getSourceFile();  [CE]  cannot  find  symbol  basicBlock  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  basicBlock.getSourceFile();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  basicBlock.getSourceFile();	  StaticSourceFile    sourceFile    =    parent.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol  basicBlock	65	None	replace
290	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  baseBlock.getSourceFile();  [CE]  cannot  find  symbol  baseBlock  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  baseBlock.getSourceFile();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  baseBlock.getSourceFile();	  StaticSourceFile    sourceFile    =    parent.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol  baseBlock	65	None	replace
291	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  originalRoot.getSourceFile();  [CE]  cannot  find  symbol  originalRoot  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  originalRoot.getSourceFile();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  originalRoot.getSourceFile();	  StaticSourceFile    sourceFile    =    parent.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol  originalRoot	65	None	replace
292	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(referenceMap,  isFunction));  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(referenceMap,  isFunction));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(referenceMap,  isFunction));	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceReference(referenceMap,    isLoop));    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
293	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(referenceMap,  isLoop,  isFunction));  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(referenceMap,  isLoop,  isFunction));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(referenceMap,  isLoop,  isFunction));	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceReference(referenceMap,    isLoop));    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
294	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  isFunction,  new  ReferenceReference(referenceMap,  isLoop));  [CE]  cannot  find  symbol  isFunction  [FE]                                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  isFunction,  new  ReferenceReference(referenceMap,  isLoop));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  isFunction,  new  ReferenceReference(referenceMap,  isLoop));	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceReference(referenceMap,    isLoop));    	non-compiled	[CE]  cannot  find  symbol  isFunction	52	None	replace
295	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  ReferenceReference(referenceMap,  isLoop));  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  ReferenceReference(referenceMap,  isLoop));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  new  ReferenceReference(referenceMap,  isLoop));	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceReference(referenceMap,    isLoop));    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
296	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceReference(referenceMap,  isLoop));  [CE]  cannot  find  symbol  sourceFile  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceReference(referenceMap,  isLoop));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceReference(referenceMap,  isLoop));	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceReference(referenceMap,    isLoop));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	52	None	replace
297	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  references.getSourceFile();  [CE]  cannot  find  symbol  references  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  references.getSourceFile();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  references.getSourceFile();	  StaticSourceFile    sourceFile    =    referenceMap.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol  references	67	None	replace
298	[BUG]  [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  basicBlock));  [CE]  cannot  find  symbol  basicBlock  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  basicBlock));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  basicBlock));	  behavior.initScope(t,    new    ReferenceMapWrapper(referenceMap,    parent));    	non-compiled	[CE]  cannot  find  symbol  basicBlock	33	None	replace
299	[BUG]  [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  baseBlock));  [CE]  cannot  find  symbol  baseBlock  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  baseBlock));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  baseBlock));	  behavior.initScope(t,    new    ReferenceMapWrapper(referenceMap,    parent));    	non-compiled	[CE]  cannot  find  symbol  baseBlock	33	None	replace
300	[BUG]  [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap),  varFilter,  isLoop);  [CE]  cannot  find  symbol  isLoop  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap),  varFilter,  isLoop);  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap),  varFilter,  isLoop);	  behavior.initScope(t,    new    ReferenceMapWrapper(referenceMap),    varFilter);    	non-compiled	[CE]  cannot  find  symbol  isLoop	34	None	replace
301	[BUG]  [BUGGY]  Behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap),  varFilter,  isLoop);  [CE]  cannot  find  symbol  isLoop  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap),  varFilter,  isLoop);  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap),  varFilter,  isLoop);	  behavior.initScope(t,    new    ReferenceMapWrapper(referenceMap),    varFilter);    	non-compiled	[CE]  cannot  find  symbol  isLoop	34	None	replace
302	[BUG]  [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap),  blockStack);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap),  blockStack);  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap),  blockStack);	  behavior.initScope(t,    new    ReferenceMapWrapper(referenceMap),    varFilter);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
303	[BUG]  [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(varFilter),  referenceMap);  [CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(varFilter),  referenceMap);  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.initScope(t,  new  ReferenceMapWrapper(varFilter),  referenceMap);	  behavior.initScope(t,    new    ReferenceMapWrapper(referenceMap),    varFilter);    	non-compiled	[CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;	34	None	replace
304	[BUG]  [BUGGY]  Preconditions.checkState(!hasFunction,  isLoop);  [CE]  cannot  find  symbol  hasFunction  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(!hasFunction,  isLoop);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(!hasFunction,  isLoop);	  Preconditions.checkState(!hasFunction);    	non-compiled	[CE]  cannot  find  symbol  hasFunction	21	None	replace
305	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  ReferenceMapWrapper(blockStack));  [CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  ReferenceMapWrapper(blockStack));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  new  ReferenceMapWrapper(blockStack));	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceMapWrapper(t));    	non-compiled	[CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;	122	None	replace
306	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceMapWrapper(t,  sourceFile));  [CE]  cannot  find  symbol  sourceFile  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceMapWrapper(t,  sourceFile));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceMapWrapper(t,  sourceFile));	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceMapWrapper(t));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	122	None	replace
307	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceReference(referenceMap,  blockStack));  [CE]  cannot  find  symbol  sourceFile  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceReference(referenceMap,  blockStack));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceReference(referenceMap,  blockStack));	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceReference(referenceMap,    sourceFile));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	93	None	replace
308	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceReference(referenceMap,  varFilter));  [CE]  cannot  find  symbol  sourceFile  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceReference(referenceMap,  varFilter));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceReference(referenceMap,  varFilter));	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceReference(referenceMap,    sourceFile));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	93	None	replace
309	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceReference(referenceMap,  component));  [CE]  cannot  find  symbol  sourceFile  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceReference(referenceMap,  component));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceReference(referenceMap,  component));	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceReference(referenceMap,    sourceFile));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	93	None	replace
310	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceReference(referenceMap,  marker));  [CE]  cannot  find  symbol  sourceFile  [FE]                          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceReference(referenceMap,  marker));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceReference(referenceMap,  marker));	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceReference(referenceMap,    sourceFile));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	93	None	replace
311	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  sourceFile,  isLoop);  [CE]  cannot  find  symbol  sourceFile  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  sourceFile,  isLoop);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  sourceFile,  isLoop);	  NodeTraversal.traverse(compiler,    blockStack,    sourceFile);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	120	None	replace
312	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  root);  [CE]  cannot  find  symbol  root  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  root);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  root);	  NodeTraversal.traverse(compiler,    blockStack,    sourceFile);    	non-compiled	[CE]  cannot  find  symbol  root	120	None	replace
313	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  varFile);  [CE]  cannot  find  symbol  varFile  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  varFile);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  varFile);	  NodeTraversal.traverse(compiler,    blockStack,    sourceFile);    	non-compiled	[CE]  cannot  find  symbol  varFile	120	None	replace
314	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  basicBlock);  [CE]  cannot  find  symbol  basicBlock  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  basicBlock);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  basicBlock);	  NodeTraversal.traverse(compiler,    blockStack,    sourceFile);    	non-compiled	[CE]  cannot  find  symbol  basicBlock	120	None	replace
315	[BUG]  [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap),  varFilter);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap),  varFilter);  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap),  varFilter);	  behavior.exitScope(t,    new    ReferenceMapWrapper(referenceMap),    t);    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
316	[BUG]  [BUGGY]  Behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap),  t);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap),  t);  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap),  t);	  behavior.exitScope(t,    new    ReferenceMapWrapper(referenceMap),    t);    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
317	[BUG]  [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap),  blockStack);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap),  blockStack);  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap),  blockStack);	  behavior.exitScope(t,    new    ReferenceMapWrapper(referenceMap),    t);    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
318	[BUG]  [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  isLoop));  [CE]  cannot  find  symbol  isLoop  [FE]            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  isLoop));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  isLoop));	  behavior.exitScope(t,    new    ReferenceMapWrapper(referenceMap,    varFilter));    	non-compiled	[CE]  cannot  find  symbol  isLoop	13	None	replace
319	[BUG]  [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile,  varFilter));  [CE]  cannot  find  symbol  sourceFile  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile,  varFilter));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  sourceFile,  varFilter));	  behavior.exitScope(t,    new    ReferenceMapWrapper(referenceMap,    varFilter));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	13	None	replace
320	[BUG]  [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUri,  varFilter));  [CE]  cannot  find  symbol  baseUri  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUri,  varFilter));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUri,  varFilter));	  behavior.exitScope(t,    new    ReferenceMapWrapper(referenceMap,    varFilter));    	non-compiled	[CE]  cannot  find  symbol  baseUri	13	None	replace
321	[BUG]  [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(varFilter,  referenceMap));  [CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(varFilter,  referenceMap));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.exitScope(t,  new  ReferenceMapWrapper(varFilter,  referenceMap));	  behavior.exitScope(t,    new    ReferenceMapWrapper(referenceMap,    varFilter));    	non-compiled	[CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;	13	None	replace
322	[BUG]  [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  sourceFile));  [CE]  cannot  find  symbol  sourceFile  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  sourceFile));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  sourceFile));	  behavior.exitScope(t,    new    ReferenceMapWrapper(referenceMap,    varFilter));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	13	None	replace
323	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  blockStack,  t);  [CE]  cannot  find  symbol  root  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  blockStack,  t);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  root,  blockStack,  t);	  NodeTraversal.traverse(compiler,    blockStack,    t);    	non-compiled	[CE]  cannot  find  symbol  root	26	None	replace
324	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  blockStack,  t);  [CE]  cannot  find  symbol  sourceFile  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  blockStack,  t);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  blockStack,  t);	  NodeTraversal.traverse(compiler,    blockStack,    t);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	26	None	replace
325	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  baseBlock,  blockStack,  t);  [CE]  cannot  find  symbol  baseBlock  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  baseBlock,  blockStack,  t);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  baseBlock,  blockStack,  t);	  NodeTraversal.traverse(compiler,    blockStack,    t);    	non-compiled	[CE]  cannot  find  symbol  baseBlock	26	None	replace
326	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  sourceFile,  t);  [CE]  cannot  find  symbol  sourceFile  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  sourceFile,  t);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  sourceFile,  t);	  NodeTraversal.traverse(compiler,    blockStack,    t);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	26	None	replace
327	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  blockStack,  t,  this);  [CE]  cannot  find  symbol  root  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  blockStack,  t,  this);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  root,  blockStack,  t,  this);	  NodeTraversal.traverse(compiler,    blockStack,    t,    this);    	non-compiled	[CE]  cannot  find  symbol  root	127	None	replace
328	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  blockStack,  t,  this);  [CE]  cannot  find  symbol  sourceFile  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  blockStack,  t,  this);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  blockStack,  t,  this);	  NodeTraversal.traverse(compiler,    blockStack,    t,    this);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	127	None	replace
329	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  blockStack,  t,  this);  [CE]  cannot  find  symbol  n  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  blockStack,  t,  this);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  n,  blockStack,  t,  this);	  NodeTraversal.traverse(compiler,    blockStack,    t,    this);    	non-compiled	[CE]  cannot  find  symbol  n	127	None	replace
330	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  sourceFile,  this);  [CE]  cannot  find  symbol  sourceFile  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  sourceFile,  this);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  sourceFile,  this);	  NodeTraversal.traverse(compiler,    blockStack,    t,    this);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	127	None	replace
331	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(t));  [CE]  cannot  find  symbol  sourceFile  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(t));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(t));	  NodeTraversal.traverse(compiler,    referenceMap,    new    ReferenceCollectionWrapper(t));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	61	None	replace
332	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  varFilter,  new  ReferenceCollectionWrapper(t));  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  varFilter,  new  ReferenceCollectionWrapper(t));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  varFilter,  new  ReferenceCollectionWrapper(t));	  NodeTraversal.traverse(compiler,    referenceMap,    new    ReferenceCollectionWrapper(t));    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
333	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceCollectionWrapper(t));  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceCollectionWrapper(t));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceCollectionWrapper(t));	  NodeTraversal.traverse(compiler,    referenceMap,    new    ReferenceCollectionWrapper(t));    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
334	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReferenceCollectionWrapper(t));  [CE]  cannot  find  symbol  root  [FE]                          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReferenceCollectionWrapper(t));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReferenceCollectionWrapper(t));	  NodeTraversal.traverse(compiler,    referenceMap,    new    ReferenceCollectionWrapper(t));    	non-compiled	[CE]  cannot  find  symbol  root	61	None	replace
335	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  root,  new  ReferenceCollection());  [CE]  cannot  find  symbol  sourceFile  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  root,  new  ReferenceCollection());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  root,  new  ReferenceCollection());	  NodeTraversal.traverse(compiler,    sourceFile,    blockStack,    new    ReferenceCollection());    	non-compiled	[CE]  cannot  find  symbol  sourceFile	82	None	replace
336	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  varFile,  blockStack,  new  ReferenceCollection());  [CE]  cannot  find  symbol  varFile  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  varFile,  blockStack,  new  ReferenceCollection());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  varFile,  blockStack,  new  ReferenceCollection());	  NodeTraversal.traverse(compiler,    sourceFile,    blockStack,    new    ReferenceCollection());    	non-compiled	[CE]  cannot  find  symbol  varFile	82	None	replace
337	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  compiler.getScopeRoot(t.getScopeRoot());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  compiler.getScopeRoot(t.getScopeRoot());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  compiler.getScopeRoot(t.getScopeRoot());	  StaticSourceFile    sourceFile    =    compiler.getScopeRoot();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
338	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  compiler.getScopeRoot(),  t.getScopeRoot();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  compiler.getScopeRoot(),  t.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  compiler.getScopeRoot(),  t.getScopeRoot();	  StaticSourceFile    sourceFile    =    compiler.getScopeRoot();    	non-compiled	[CE]  ';'  expected	79	None	replace
339	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  compiler.getScopeRoot(t);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  compiler.getScopeRoot(t);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  compiler.getScopeRoot(t);	  StaticSourceFile    sourceFile    =    compiler.getScopeRoot();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
340	[BUG]  [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  basicBlock));  [CE]  cannot  find  symbol  basicBlock  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  basicBlock));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  basicBlock));	  behavior.beforeExitScope(t,    new    ReferenceMapWrapper(referenceMap,    parent));    	non-compiled	[CE]  cannot  find  symbol  basicBlock	11	None	replace
341	[BUG]  [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  n));  [CE]  cannot  find  symbol  n  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  n));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  n));	  behavior.beforeExitScope(t,    new    ReferenceMapWrapper(referenceMap,    parent));    	non-compiled	[CE]  cannot  find  symbol  n	11	None	replace
342	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  initialRoot,  new  ReferenceCollectionWrapper(referenceMap));  [CE]  cannot  find  symbol  initialRoot  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  initialRoot,  new  ReferenceCollectionWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  initialRoot,  new  ReferenceCollectionWrapper(referenceMap));	  NodeTraversal.traverse(compiler,    component,    new    ReferenceCollectionWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  initialRoot	42	None	replace
343	[BUG]  [BUGGY]  Predicate  sourceFile  =  resourceMap.getSourceReference();  [CE]  cannot  find  symbol  resourceMap  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Predicate  sourceFile  =  resourceMap.getSourceReference();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  resourceMap.getSourceReference();	  Predicate    sourceFile    =    referenceMap.getSourceReference();    	non-compiled	[CE]  cannot  find  symbol  resourceMap	5	None	replace
344	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  referenceMap,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  sourceFile  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  referenceMap,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  referenceMap,  new  ReferenceMapWrapper(referenceMap));	  NodeTraversal.traverse(compiler,    referenceMap,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	37	None	replace
345	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  referenceMap,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  n  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  referenceMap,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  n,  referenceMap,  new  ReferenceMapWrapper(referenceMap));	  NodeTraversal.traverse(compiler,    referenceMap,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  n	37	None	replace
346	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  referenceMap,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  root  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  referenceMap,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  root,  referenceMap,  new  ReferenceMapWrapper(referenceMap));	  NodeTraversal.traverse(compiler,    referenceMap,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  root	37	None	replace
347	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  component,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  component  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  component,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  component,  new  ReferenceMapWrapper(referenceMap));	  NodeTraversal.traverse(compiler,    referenceMap,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  component	37	None	replace
348	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  root,  varFilter));  [CE]  cannot  find  symbol  root  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  root,  varFilter));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  root,  varFilter));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(referenceMap,    baseUri,    varFilter));    	non-compiled	[CE]  cannot  find  symbol  root	55	None	replace
349	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseVarFilter,  varFilter));  [CE]  cannot  find  symbol  baseVarFilter  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseVarFilter,  varFilter));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseVarFilter,  varFilter));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(referenceMap,    baseUri,    varFilter));    	non-compiled	[CE]  cannot  find  symbol  baseVarFilter	55	None	replace
350	[BUG]  [BUGGY]  Node  originalRoot  =  referenceMap.getReferenceRoot();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  referenceMap.getReferenceRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  referenceMap.getReferenceRoot();	  Node    originalRoot    =    t.getReferenceRoot();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
351	[BUG]  [BUGGY]  Node  originalRoot  =  nameNode.getReferenceRoot();  [CE]  cannot  find  symbol  nameNode  [FE]          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  nameNode.getReferenceRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  nameNode.getReferenceRoot();	  Node    originalRoot    =    t.getReferenceRoot();    	non-compiled	[CE]  cannot  find  symbol  nameNode	22	None	replace
352	[BUG]  [BUGGY]  Node  originalRoot  =  parent.getReferenceRoot();  [CE]  cannot  find  symbol  parent  [FE]            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  parent.getReferenceRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  parent.getReferenceRoot();	  Node    originalRoot    =    t.getReferenceRoot();    	non-compiled	[CE]  cannot  find  symbol  parent	22	None	replace
353	[BUG]  [BUGGY]  Node  originalRoot  =  t,  parent.getReferenceRoot();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  t,  parent.getReferenceRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  t,  parent.getReferenceRoot();	  Node    originalRoot    =    t.getReferenceRoot();    	non-compiled	[CE]  ';'  expected	22	None	replace
354	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  referenceMap,  new  ReferenceCollectionWrapper(referenceMap),  blockStack);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  referenceMap,  new  ReferenceCollectionWrapper(referenceMap),  blockStack);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  referenceMap,  new  ReferenceCollectionWrapper(referenceMap),  blockStack);	  NodeTraversal.traverse(compiler,    referenceMap,    new    ReferenceCollectionWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
355	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  referenceMap,  new  ReferenceCollectionWrapper(referenceMap,  isLoop));  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  referenceMap,  new  ReferenceCollectionWrapper(referenceMap,  isLoop));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  referenceMap,  new  ReferenceCollectionWrapper(referenceMap,  isLoop));	  NodeTraversal.traverse(compiler,    referenceMap,    new    ReferenceCollectionWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
356	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  referenceMap,  new  ReferenceCollectionWrapper(referenceMap,  sourceFile));  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  referenceMap,  new  ReferenceCollectionWrapper(referenceMap,  sourceFile));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  referenceMap,  new  ReferenceCollectionWrapper(referenceMap,  sourceFile));	  NodeTraversal.traverse(compiler,    referenceMap,    new    ReferenceCollectionWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
357	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap),  behavior);  [CE]  cannot  find  symbol  sourceFile  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap),  behavior);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap),  behavior);	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceCollectionWrapper(referenceMap),    behavior);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	105	None	replace
358	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  ReferenceCollectionWrapper(referenceMap),  behavior);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  ReferenceCollectionWrapper(referenceMap),  behavior);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  new  ReferenceCollectionWrapper(referenceMap),  behavior);	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceCollectionWrapper(referenceMap),    behavior);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
359	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  behavior,  new  ReferenceCollectionWrapper(referenceMap),  blockStack);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  behavior,  new  ReferenceCollectionWrapper(referenceMap),  blockStack);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  behavior,  new  ReferenceCollectionWrapper(referenceMap),  blockStack);	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceCollectionWrapper(referenceMap),    behavior);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
360	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReferenceCollectionWrapper(referenceMap),  behavior);  [CE]  cannot  find  symbol  root  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReferenceCollectionWrapper(referenceMap),  behavior);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReferenceCollectionWrapper(referenceMap),  behavior);	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceCollectionWrapper(referenceMap),    behavior);    	non-compiled	[CE]  cannot  find  symbol  root	105	None	replace
361	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(varFilter,  referenceMap,  isLoop));  [CE]  cannot  find  symbol  isLoop  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(varFilter,  referenceMap,  isLoop));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(varFilter,  referenceMap,  isLoop));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(varFilter,    referenceMap));    	non-compiled	[CE]  cannot  find  symbol  isLoop	56	None	replace
362	[BUG]  [BUGGY]  Behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter));  [CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(varFilter,    referenceMap));    	non-compiled	[CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;	56	None	replace
363	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ReferenceCollectionWrapper(referenceMap));  [CE]  cannot  find  symbol  n  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ReferenceCollectionWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  n,  new  ReferenceCollectionWrapper(referenceMap));	  NodeTraversal.traverse(compiler,    root,    new    ReferenceCollectionWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  n	41	None	replace
364	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  baseRoot,  new  ReferenceCollectionWrapper(referenceMap));  [CE]  cannot  find  symbol  baseRoot  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  baseRoot,  new  ReferenceCollectionWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  baseRoot,  new  ReferenceCollectionWrapper(referenceMap));	  NodeTraversal.traverse(compiler,    root,    new    ReferenceCollectionWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  baseRoot	41	None	replace
365	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  varFilter);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Deque<BasicBlock>,Predicate<Var>)  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  varFilter);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  varFilter);	  NodeTraversal.traverse(compiler,    blockStack,    pattern);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Deque<BasicBlock>,Predicate<Var>)	121	None	replace
366	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  behavior);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Deque<BasicBlock>,Behavior)  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  behavior);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  behavior);	  NodeTraversal.traverse(compiler,    blockStack,    pattern);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Deque<BasicBlock>,Behavior)	121	None	replace
367	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  problemReporter);  [CE]  cannot  find  symbol  problemReporter  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  problemReporter);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  problemReporter);	  NodeTraversal.traverse(compiler,    blockStack,    pattern);    	non-compiled	[CE]  cannot  find  symbol  problemReporter	121	None	replace
368	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseURL));  [CE]  cannot  find  symbol  baseURL  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseURL));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseURL));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(referenceMap,    baseUri));    	non-compiled	[CE]  cannot  find  symbol  baseURL	60	None	replace
369	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  root.getScopeRoot();  [CE]  cannot  find  symbol  root  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  root.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  root.getScopeRoot();	  StaticSourceFile    sourceFile    =    scope.getScopeRoot();    	non-compiled	[CE]  cannot  find  symbol  root	81	None	replace
370	[BUG]  [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap),  baseUri);  [CE]  cannot  find  symbol  baseUri  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap),  baseUri);  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap),  baseUri);	  behavior.beforeExitScope(t,    new    ReferenceMapWrapper(referenceMap),    t);    	non-compiled	[CE]  cannot  find  symbol  baseUri	132	None	replace
371	[BUG]  [BUGGY]  Preconditions.checkState(!hasFunctionDeclaration);  [CE]  cannot  find  symbol  hasFunctionDeclaration  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(!hasFunctionDeclaration);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(!hasFunctionDeclaration);	  Preconditions.checkState(!hasFunction);    	non-compiled	[CE]  cannot  find  symbol  hasFunctionDeclaration	21	None	replace
372	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootRoot,  t,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  rootRoot  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootRoot,  t,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  rootRoot,  t,  new  ReferenceMapWrapper(referenceMap));	  NodeTraversal.traverse(compiler,    root,    t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  rootRoot	92	None	replace
373	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  isLoop,  new  ReferenceReference(referenceMap,  isLoop));  [CE]  cannot  find  symbol  isLoop  [FE]                            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  isLoop,  new  ReferenceReference(referenceMap,  isLoop));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  isLoop,  new  ReferenceReference(referenceMap,  isLoop));	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceReference(referenceMap,    isLoop));    	non-compiled	[CE]  cannot  find  symbol  isLoop	52	None	replace
374	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(referenceMap,  isHoisted));  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(referenceMap,  isHoisted));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(referenceMap,  isHoisted));	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceReference(referenceMap,    isLoop));    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
375	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  isLoop,  new  ReferenceReference(referenceMap,  blockStack));  [CE]  cannot  find  symbol  isLoop  [FE]                                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  isLoop,  new  ReferenceReference(referenceMap,  blockStack));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  isLoop,  new  ReferenceReference(referenceMap,  blockStack));	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceReference(referenceMap,    isLoop));    	non-compiled	[CE]  cannot  find  symbol  isLoop	52	None	replace
376	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  compiler.getSourceFile(blockStack);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  compiler.getSourceFile(blockStack);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  compiler.getSourceFile(blockStack);	  StaticSourceFile    sourceFile    =    compiler.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
377	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  compiler.getSourceFile(buffer);  [CE]  cannot  find  symbol  buffer  [FE]                          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  compiler.getSourceFile(buffer);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  compiler.getSourceFile(buffer);	  StaticSourceFile    sourceFile    =    compiler.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol  buffer	68	None	replace
378	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUri,  sourceFile));  [CE]  cannot  find  symbol  baseUri  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUri,  sourceFile));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUri,  sourceFile));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(referenceMap,    varFilter,    sourceFile));    	non-compiled	[CE]  cannot  find  symbol  baseUri	57	None	replace
379	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootRoot,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  rootRoot  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootRoot,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  rootRoot,  new  ReferenceMapWrapper(referenceMap));	  NodeTraversal.traverse(compiler,    root,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  rootRoot	39	None	replace
380	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  sourceFile,  blockStack);  [CE]  cannot  find  symbol  n  [FE]                          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  sourceFile,  blockStack);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  n,  sourceFile,  blockStack);	  NodeTraversal.traverse(compiler,    sourceFile,    t,    blockStack);    	non-compiled	[CE]  cannot  find  symbol  n	30	None	replace
381	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  sourceFile,  new  Reference());  [CE]  cannot  find  symbol  root  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  sourceFile,  new  Reference());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  root,  sourceFile,  new  Reference());	  NodeTraversal.traverse(compiler,    sourceFile,    blockStack,    new    Reference());    	non-compiled	[CE]  cannot  find  symbol  root	69	None	replace
382	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  root,  blockStack,  sourceFile);  [CE]  cannot  find  symbol  root  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  root,  blockStack,  sourceFile);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  root,  blockStack,  sourceFile);	  NodeTraversal.traverse(compiler,    t,    blockStack,    sourceFile);    	non-compiled	[CE]  cannot  find  symbol  root	109	None	replace
383	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootRoot,  blockStack,  new  Reference());  [CE]  cannot  find  symbol  rootRoot  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootRoot,  blockStack,  new  Reference());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  rootRoot,  blockStack,  new  Reference());	  NodeTraversal.traverse(compiler,    root,    blockStack,    new    Reference());    	non-compiled	[CE]  cannot  find  symbol  rootRoot	70	None	replace
384	[BUG]  [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  null));  [CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  null));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  null));	  behavior.beforeExitScope(t,    new    ReferenceMapWrapper(referenceMap,    sourceFile));    	non-compiled	[CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;	10	None	replace
385	[BUG]  [BUGGY]  Predicate  referenceFile  =  referenceMap.getSourceFile();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Predicate  referenceFile  =  referenceMap.getSourceFile();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  referenceFile  =  referenceMap.getSourceFile();	  Predicate    sourceFile    =    referenceMap.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
386	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  rootRoot,  blockStack);  [CE]  cannot  find  symbol  rootRoot  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  rootRoot,  blockStack);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  rootRoot,  blockStack);	  NodeTraversal.traverse(compiler,    t,    root,    blockStack);    	non-compiled	[CE]  cannot  find  symbol  rootRoot	29	None	replace
387	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  blockStack,  isLoop);  [CE]  cannot  find  symbol  isLoop  [FE]                          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  blockStack,  isLoop);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  blockStack,  isLoop);	  NodeTraversal.traverse(compiler,    t,    root,    blockStack);    	non-compiled	[CE]  cannot  find  symbol  isLoop	29	None	replace
388	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  buffer));  [CE]  cannot  find  symbol  sourceFile  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  buffer));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  buffer));	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceCollectionWrapper(referenceMap,    sourceFile));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	104	None	replace
389	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  targetStack));  [CE]  cannot  find  symbol  sourceFile  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  targetStack));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  targetStack));	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceCollectionWrapper(referenceMap,    sourceFile));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	104	None	replace
390	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  mask));  [CE]  cannot  find  symbol  sourceFile  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  mask));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  mask));	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceCollectionWrapper(referenceMap,    sourceFile));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	104	None	replace
391	[BUG]  [BUGGY]          Node    originalRoot    =    t.getScopeRoot();    Node  OriginalRoot  =  t.getScopeRoot();  Node  originalRoot  =  t.getScopeRoot();  Node  UrnRoot  =  t.getScopeRoot();  [CE]  variable  originalRoot  is  already  defined  in  method  exitScope(NodeTraversal)  [FE]    AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]          Node    originalRoot    =    t.getScopeRoot();    Node  OriginalRoot  =  t.getScopeRoot();  Node  originalRoot  =  t.getScopeRoot();  Node  UrnRoot  =  t.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	                Node        originalRoot        =        t.getScopeRoot();        Node    OriginalRoot    =    t.getScopeRoot();    Node  originalRoot  =  t.getScopeRoot();  Node  UrnRoot  =  t.getScopeRoot();	  	non-compiled	[CE]  variable  originalRoot  is  already  defined  in  method  exitScope(NodeTraversal)	89	None	add
392	[BUG]  [BUGGY]          Node    originalRoot    =    t.getScopeRoot();    Node  OriginalRoot  =  t.getScopeRoot();  Node  originalRoot  =  t.getScopeRoot();  Node  ursprünglichRoot  =  t.getScopeRoot();  [CE]  variable  originalRoot  is  already  defined  in  method  exitScope(NodeTraversal)  [FE]      AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]          Node    originalRoot    =    t.getScopeRoot();    Node  OriginalRoot  =  t.getScopeRoot();  Node  originalRoot  =  t.getScopeRoot();  Node  ursprünglichRoot  =  t.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	                Node        originalRoot        =        t.getScopeRoot();        Node    OriginalRoot    =    t.getScopeRoot();    Node  originalRoot  =  t.getScopeRoot();  Node  ursprünglichRoot  =  t.getScopeRoot();	  	non-compiled	[CE]  variable  originalRoot  is  already  defined  in  method  exitScope(NodeTraversal)	89	None	add
393	[BUG]  [BUGGY]          Node    originalRoot    =    t.getScopeRoot();    Node  OriginalRoot  =  t.getScopeRoot();  Node  originalRoot  =  t.getScopeRoot();  Node  InitialRoot  =  t.getScopeRoot();  [CE]  variable  originalRoot  is  already  defined  in  method  exitScope(NodeTraversal)  [FE]        AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]          Node    originalRoot    =    t.getScopeRoot();    Node  OriginalRoot  =  t.getScopeRoot();  Node  originalRoot  =  t.getScopeRoot();  Node  InitialRoot  =  t.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	                Node        originalRoot        =        t.getScopeRoot();        Node    OriginalRoot    =    t.getScopeRoot();    Node  originalRoot  =  t.getScopeRoot();  Node  InitialRoot  =  t.getScopeRoot();	  	non-compiled	[CE]  variable  originalRoot  is  already  defined  in  method  exitScope(NodeTraversal)	89	None	add
394	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootRoot,  this);  [CE]  cannot  find  symbol  rootRoot  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootRoot,  this);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  rootRoot,  this);	  NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  rootRoot	112	None	replace
395	[BUG]  [BUGGY]  Predicate  referenceFile  =  referenceMap.getSourceReference();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Predicate  referenceFile  =  referenceMap.getSourceReference();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  referenceFile  =  referenceMap.getSourceReference();	  Predicate    sourceFile    =    referenceMap.getSourceReference();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
396	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  this.sourceFile.getSourceFile();  [CE]  cannot  find  symbol  sourceFile  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  this.sourceFile.getSourceFile();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  this.sourceFile.getSourceFile();	  StaticSourceFile    sourceFile    =    t.sourceFile.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol  sourceFile	66	None	replace
397	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this,  new  Reference(),  blockStack);  [CE]  no  suitable  constructor  found  for  Reference()  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  this,  new  Reference(),  blockStack);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  this,  new  Reference(),  blockStack);	  NodeTraversal.traverse(compiler,    blockStack,    new    Reference(),    this);    	non-compiled	[CE]  no  suitable  constructor  found  for  Reference()	118	None	replace
398	[BUG]  [BUGGY]  Preconditions.checkState(!loop);  [CE]  cannot  find  symbol  loop  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(!loop);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(!loop);	  Preconditions.checkState(!isHoisted);    	non-compiled	[CE]  cannot  find  symbol  loop	18	None	replace
399	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  sourceFile,  t,  this);  [CE]  cannot  find  symbol  root  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  sourceFile,  t,  this);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  root,  sourceFile,  t,  this);	  NodeTraversal.traverse(compiler,    blockStack,    t,    this);    	non-compiled	[CE]  cannot  find  symbol  root	127	None	replace
400	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(compiler,  sourceFile,  referenceMap,  varFilter));  [CE]  cannot  find  symbol  sourceFile  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(compiler,  sourceFile,  referenceMap,  varFilter));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(compiler,  sourceFile,  referenceMap,  varFilter));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(compiler,    referenceMap,    varFilter));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	111	None	replace
401	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(compiler,  referenceMap,  sourceFile,  varFilter));  [CE]  cannot  find  symbol  sourceFile  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(compiler,  referenceMap,  sourceFile,  varFilter));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(compiler,  referenceMap,  sourceFile,  varFilter));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(compiler,    referenceMap,    varFilter));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	111	None	replace
402	[BUG]  [BUGGY]  Predicate  sourceFile  =  varFilter.getSourceFile(null);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Predicate  sourceFile  =  varFilter.getSourceFile(null);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  varFilter.getSourceFile(null);	  Predicate    sourceFile    =    varFilter.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
403	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ReferenceCollectionWrapper(t));  [CE]  cannot  find  symbol  n  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ReferenceCollectionWrapper(t));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  n,  new  ReferenceCollectionWrapper(t));	  NodeTraversal.traverse(compiler,    referenceMap,    new    ReferenceCollectionWrapper(t));    	non-compiled	[CE]  cannot  find  symbol  n	61	None	replace
404	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  sourceFile,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  root  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  sourceFile,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  root,  sourceFile,  new  ReferenceMapWrapper(referenceMap));	  NodeTraversal.traverse(compiler,    referenceMap,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  root	37	None	replace
405	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  blockStack,  t);  [CE]  cannot  find  symbol  n  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  blockStack,  t);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  n,  blockStack,  t);	  NodeTraversal.traverse(compiler,    blockStack,    t);    	non-compiled	[CE]  cannot  find  symbol  n	26	None	replace
406	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  sourceFile,  blockStack,  new  Reference());  [CE]  cannot  find  symbol  sourceFile  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  sourceFile,  blockStack,  new  Reference());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  sourceFile,  blockStack,  new  Reference());	  NodeTraversal.traverse(compiler,    t,    blockStack,    new    Reference());    	non-compiled	[CE]  cannot  find  symbol  sourceFile	71	None	replace
407	[BUG]  [BUGGY]  Node  originalRoot  =  t.getScopeRoot();  Node  OriginalRoot  =  t.getOwnScopeRoot();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  t.getScopeRoot();  Node  OriginalRoot  =  t.getOwnScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  t.getScopeRoot();  Node  OriginalRoot  =  t.getOwnScopeRoot();	          Node    originalRoot    =    t.getScopeRoot();    Node    OriginalRoot    =    t.getScopeRoot();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
408	[BUG]  [BUGGY]  Node  originalRoot  =  t.getScopeRoot();  Node  OriginalRoot  =  t.getOriginalRoot();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  t.getScopeRoot();  Node  OriginalRoot  =  t.getOriginalRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  t.getScopeRoot();  Node  OriginalRoot  =  t.getOriginalRoot();	          Node    originalRoot    =    t.getScopeRoot();    Node    OriginalRoot    =    t.getScopeRoot();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
409	[BUG]  [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  n));  [CE]  cannot  find  symbol  n  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  n));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  n));	  behavior.exitScope(t,    new    ReferenceMapWrapper(referenceMap,    parent));    	non-compiled	[CE]  cannot  find  symbol  n	15	None	replace
410	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  compiler.getScopeRoot(referenceMap);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  compiler.getScopeRoot(referenceMap);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  compiler.getScopeRoot(referenceMap);	  StaticSourceFile    sourceFile    =    compiler.getScopeRoot();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
411	[BUG]  [BUGGY]  Predicate  sourceFile  =  compiler.getSourceFile(null);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Predicate  sourceFile  =  compiler.getSourceFile(null);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  compiler.getSourceFile(null);	  Predicate    sourceFile    =    compiler.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
412	[BUG]  [BUGGY]  Predicate  sourceFile  =  compiler.getSourceFile(blockStack);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Predicate  sourceFile  =  compiler.getSourceFile(blockStack);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  compiler.getSourceFile(blockStack);	  Predicate    sourceFile    =    compiler.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
413	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  null);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Deque<BasicBlock>,<null>)  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  null);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  null);	  NodeTraversal.traverse(compiler,    blockStack,    pattern);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Deque<BasicBlock>,<null>)	121	None	replace
414	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(referenceMap),  behavior);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(referenceMap),  behavior);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(referenceMap),  behavior);	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceReference(referenceMap),    t);    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
415	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(referenceMap),  t,  behavior);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(referenceMap),  t,  behavior);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(referenceMap),  t,  behavior);	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceReference(referenceMap),    t);    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
416	[BUG]  [BUGGY]  Behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUri));  [CE]  cannot  find  symbol  baseUri  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUri));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUri));	  Behavior.initScope(t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  baseUri	124	None	replace
417	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  varFilter,  blockStack,  new  ReferenceCollection());  [CE]  cannot  find  symbol  root  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  varFilter,  blockStack,  new  ReferenceCollection());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  root,  varFilter,  blockStack,  new  ReferenceCollection());	  NodeTraversal.traverse(compiler,    varFilter,    blockStack,    new    ReferenceCollection());    	non-compiled	[CE]  cannot  find  symbol  root	85	None	replace
418	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  varFilter,  blockStack,  new  ReferenceCollection());  [CE]  cannot  find  symbol  sourceFile  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  varFilter,  blockStack,  new  ReferenceCollection());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  varFilter,  blockStack,  new  ReferenceCollection());	  NodeTraversal.traverse(compiler,    varFilter,    blockStack,    new    ReferenceCollection());    	non-compiled	[CE]  cannot  find  symbol  sourceFile	85	None	replace
419	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  sourceFile,  blockStack,  new  ReferenceCollection());  [CE]  cannot  find  symbol  n  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  sourceFile,  blockStack,  new  ReferenceCollection());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  n,  sourceFile,  blockStack,  new  ReferenceCollection());	  NodeTraversal.traverse(compiler,    varFilter,    blockStack,    new    ReferenceCollection());    	non-compiled	[CE]  cannot  find  symbol  n	85	None	replace
420	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  sourceFile,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  n  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  sourceFile,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  n,  sourceFile,  new  ReferenceMapWrapper(referenceMap));	  NodeTraversal.traverse(compiler,    sourceFile,    t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  n	91	None	replace
421	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(varFilter,  sourceFile,  referenceMap));  [CE]  cannot  find  symbol  sourceFile  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(varFilter,  sourceFile,  referenceMap));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(varFilter,  sourceFile,  referenceMap));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(varFilter,    referenceMap));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	56	None	replace
422	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(varFilter,  referenceMap),  isLoop);  [CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(varFilter,  referenceMap),  isLoop);  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(varFilter,  referenceMap),  isLoop);	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(varFilter,    referenceMap));    	non-compiled	[CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;	56	None	replace
423	[BUG]  [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUrl));  [CE]  cannot  find  symbol  baseUrl  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUrl));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUrl));	  behavior.exitScope(t,    new    ReferenceMapWrapper(referenceMap,    sourceFile));    	non-compiled	[CE]  cannot  find  symbol  baseUrl	14	None	replace
424	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  varFilter.getSourceFile(null);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  varFilter.getSourceFile(null);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  varFilter.getSourceFile(null);	  StaticSourceFile    sourceFile    =    varFilter.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
425	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUri,  isFunction));  [CE]  cannot  find  symbol  baseUri  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUri,  isFunction));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUri,  isFunction));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(referenceMap,    varFilter,    isLoop));    	non-compiled	[CE]  cannot  find  symbol  baseUri	53	None	replace
426	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  resourceMap.getSourceFile();  [CE]  cannot  find  symbol  resourceMap  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  resourceMap.getSourceFile();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  resourceMap.getSourceFile();	  StaticSourceFile    sourceFile    =    referenceMap.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol  resourceMap	67	None	replace
427	[BUG]  [BUGGY]  Predicate  sourceFile  =  compiler.getSourceReference(t.getScopeRoot());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Predicate  sourceFile  =  compiler.getSourceReference(t.getScopeRoot());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  compiler.getSourceReference(t.getScopeRoot());	  Predicate    sourceFile    =    compiler.getSourceReference();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
428	[BUG]  [BUGGY]  Predicate  sourceFile  =  compiler.getSourceReference(null);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Predicate  sourceFile  =  compiler.getSourceReference(null);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  compiler.getSourceReference(null);	  Predicate    sourceFile    =    compiler.getSourceReference();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
429	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  blockStack);  [CE]  cannot  find  symbol  sourceFile  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  blockStack);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  blockStack);	  NodeTraversal.traverse(compiler,    t,    sourceFile,    blockStack);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	28	None	replace
430	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  inputId.getScopeRoot();  [CE]  cannot  find  symbol  inputId  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  inputId.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  inputId.getScopeRoot();	  StaticSourceFile    sourceFile    =    scope.getScopeRoot();    	non-compiled	[CE]  cannot  find  symbol  inputId	81	None	replace
431	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  referenceMap.getBaseRoot();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  referenceMap.getBaseRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  referenceMap.getBaseRoot();	  StaticSourceFile    sourceFile    =    referenceMap.getScopeRoot();    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
432	[BUG]  [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUrl));  [CE]  cannot  find  symbol  baseUrl  [FE]            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUrl));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUrl));	  behavior.initScope(t,    new    ReferenceMapWrapper(referenceMap,    baseUri));    	non-compiled	[CE]  cannot  find  symbol  baseUrl	106	None	replace
433	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  sourceFile,  new  ReferenceCollection());  [CE]  cannot  find  symbol  root  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  sourceFile,  new  ReferenceCollection());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  root,  sourceFile,  new  ReferenceCollection());	  NodeTraversal.traverse(compiler,    sourceFile,    blockStack,    new    ReferenceCollection());    	non-compiled	[CE]  cannot  find  symbol  root	82	None	replace
434	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootRoot,  t,  blockStack);  [CE]  cannot  find  symbol  rootRoot  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootRoot,  t,  blockStack);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  rootRoot,  t,  blockStack);	  NodeTraversal.traverse(compiler,    root,    t,    blockStack);    	non-compiled	[CE]  cannot  find  symbol  rootRoot	27	None	replace
435	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  inputId,  new  ReferenceReference(referenceMap,  blockStack));  [CE]  cannot  find  symbol  inputId  [FE]                          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  inputId,  new  ReferenceReference(referenceMap,  blockStack));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  inputId,  new  ReferenceReference(referenceMap,  blockStack));	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceReference(referenceMap,    inputId));    	non-compiled	[CE]  cannot  find  symbol  inputId	51	None	replace
436	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReferenceReference(referenceMap,  sourceFile));  [CE]  cannot  find  symbol  root  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReferenceReference(referenceMap,  sourceFile));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReferenceReference(referenceMap,  sourceFile));	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceReference(referenceMap,    sourceFile));    	non-compiled	[CE]  cannot  find  symbol  root	93	None	replace
437	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceReference(referenceMap,  targetStack));  [CE]  cannot  find  symbol  sourceFile  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceReference(referenceMap,  targetStack));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceReference(referenceMap,  targetStack));	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceReference(referenceMap,    sourceFile));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	93	None	replace
438	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceReference(referenceMap,  buffer));  [CE]  cannot  find  symbol  sourceFile  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceReference(referenceMap,  buffer));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceReference(referenceMap,  buffer));	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceReference(referenceMap,    sourceFile));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	93	None	replace
439	[BUG]  [BUGGY]  Node  originalRoot  =  sourceFile.getOwner();  [CE]  cannot  find  symbol  sourceFile  [FE]            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  sourceFile.getOwner();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  sourceFile.getOwner();	  Node    originalRoot    =    t.getOwner();    	non-compiled	[CE]  cannot  find  symbol  sourceFile	24	None	replace
440	[BUG]  [BUGGY]  Node  originalRoot  =  t,  compiler.getOwner();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  t,  compiler.getOwner();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  t,  compiler.getOwner();	  Node    originalRoot    =    t.getOwner();    	non-compiled	[CE]  ';'  expected	24	None	replace
441	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  sourceFile,  behavior);  [CE]  cannot  find  symbol  sourceFile  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  sourceFile,  behavior);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  sourceFile,  behavior);	  NodeTraversal.traverse(compiler,    blockStack,    sourceFile);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	120	None	replace
442	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  t,  this,  blockStack);  [CE]  cannot  find  symbol  sourceFile  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  t,  this,  blockStack);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  t,  this,  blockStack);	  NodeTraversal.traverse(compiler,    t,    this,    blockStack);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	4	None	replace
443	[BUG]  [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  null));  [CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  null));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  null));	  behavior.initScope(t,    new    ReferenceMapWrapper(referenceMap,    inputId));    	non-compiled	[CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;	107	None	replace
444	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUrl));  [CE]  cannot  find  symbol  baseUrl  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUrl));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUrl));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(referenceMap,    baseUri));    	non-compiled	[CE]  cannot  find  symbol  baseUrl	60	None	replace
445	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  blockStack,  new  Reference());  [CE]  cannot  find  symbol  roots  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  roots,  blockStack,  new  Reference());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  roots,  blockStack,  new  Reference());	  NodeTraversal.traverse(compiler,    n,    blockStack,    new    Reference());    	non-compiled	[CE]  cannot  find  symbol  roots	113	None	replace
446	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  compiler));  [CE]  cannot  find  symbol  sourceFile  [FE]                          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  compiler));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  compiler));	  NodeTraversal.traverse(compiler,    t,    new    ReferenceCollectionWrapper(referenceMap,    sourceFile));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	64	None	replace
447	[BUG]  [BUGGY]  Preconditions.checkState(!blockStack.peek()  ==  null);  [CE]  bad  operand  type  BasicBlock  for  unary  operator  '!'  [FE]    AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(!blockStack.peek()  ==  null);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(!blockStack.peek()  ==  null);	  Preconditions.checkState(!blockStack.isEmpty());    	non-compiled	[CE]  bad  operand  type  BasicBlock  for  unary  operator  '!'	20	None	replace
448	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(!blockStack.isEmpty()  ||!blockStack.isEmpty());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	add	Preconditions.checkState(!blockStack.isEmpty()  ||!blockStack.isEmpty());	  Preconditions.checkState(!blockStack.isEmpty());    	compilable	  [FE]  AssertionFailedError  	20	23	replace
449	[BUG]  [BUGGY]  Preconditions.checkState(!blockStack.isEmpty()  ||!blockStack.isEmpty());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(!blockStack.isEmpty()  ||!blockStack.isEmpty());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(!blockStack.isEmpty()  ||!blockStack.isEmpty());	  Preconditions.checkState(!blockStack.isEmpty());    	compilable	  [FE]  AssertionFailedError  	20	23	replace
450	[BUG]  [BUGGY]  Predicate  sourceFile  =  varFilter.getSourceReference(null);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Predicate  sourceFile  =  varFilter.getSourceReference(null);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  varFilter.getSourceReference(null);	  Predicate    sourceFile    =    varFilter.getSourceReference();    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
451	[BUG]  [BUGGY]  Preconditions.checkState(!blockStack.isEmpty());  Preconditions.checkState(!blockStack.isEmpty());  t.getScopeRoot().replaceChild(blockStack,  new  ReferenceMapWrapper(referenceMap));  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(!blockStack.isEmpty());  Preconditions.checkState(!blockStack.isEmpty());  t.getScopeRoot().replaceChild(blockStack,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(!blockStack.isEmpty());    Preconditions.checkState(!blockStack.isEmpty());  t.getScopeRoot().replaceChild(blockStack,  new  ReferenceMapWrapper(referenceMap));	  	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	19	None	add
452	[BUG]  [BUGGY]  Preconditions.checkState(!blockStack.isEmpty());  Preconditions.checkState(!blockStack.isEmpty());  t.getScopeRoot().replaceChild(blockStack,  new  ReferenceCollectionWrapper(referenceMap));  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(!blockStack.isEmpty());  Preconditions.checkState(!blockStack.isEmpty());  t.getScopeRoot().replaceChild(blockStack,  new  ReferenceCollectionWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(!blockStack.isEmpty());    Preconditions.checkState(!blockStack.isEmpty());  t.getScopeRoot().replaceChild(blockStack,  new  ReferenceCollectionWrapper(referenceMap));	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
453	[BUG]  [BUGGY]  Node  originalRoot  =  t.getOwnerScope();  Node  originalRoot  =  t.getScopeRoot());  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  t.getOwnerScope();  Node  originalRoot  =  t.getScopeRoot());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  t.getOwnerScope();  Node  originalRoot  =  t.getScopeRoot());	          Node    originalRoot    =    t.getScopeRoot();    Node    originalRoot    =    t.getScopeRoot());    	non-compiled	[CE]  ';'  expected	88	None	replace
454	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  t.getScopeRoot();  Preconditions.checkState(originalRoot!=  null);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	add	Node  originalRoot  =  t.getScopeRoot();  Preconditions.checkState(originalRoot!=  null);	          Node    originalRoot    =    t.getScopeRoot();    Node    originalRoot    =    t.getScopeRoot());    	compilable	  [FE]  AssertionFailedError  	88	23	replace
455	[BUG]  [BUGGY]  Node  originalRoot  =  t.getScopeRoot();  Preconditions.checkState(originalRoot!=  null);  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  t.getScopeRoot();  Preconditions.checkState(originalRoot!=  null);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  t.getScopeRoot();  Preconditions.checkState(originalRoot!=  null);	          Node    originalRoot    =    t.getScopeRoot();    Node    originalRoot    =    t.getScopeRoot());    	compilable	  [FE]  AssertionFailedError  	88	23	replace
456	[BUG]  [BUGGY]  Node  originalRoot  =  t.getOwnScopeRoot();  Node  originalRoot  =  t.getScopeRoot());  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  t.getOwnScopeRoot();  Node  originalRoot  =  t.getScopeRoot());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  t.getOwnScopeRoot();  Node  originalRoot  =  t.getScopeRoot());	          Node    originalRoot    =    t.getScopeRoot();    Node    originalRoot    =    t.getScopeRoot());    	non-compiled	[CE]  ';'  expected	88	None	replace
457	[BUG]  [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(varFilter,  referenceMap));  [CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(varFilter,  referenceMap));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.initScope(t,  new  ReferenceMapWrapper(varFilter,  referenceMap));	  behavior.initScope(t,    new    ReferenceMapWrapper(referenceMap,    varFilter));    	non-compiled	[CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;	31	None	replace
458	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Reference());  [CE]  cannot  find  symbol  n  [FE]                          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Reference());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  n,  new  Reference());	  NodeTraversal.traverse(compiler,    sourceFile,    new    Reference());    	non-compiled	[CE]  cannot  find  symbol  n	73	None	replace
459	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  blockStack,  new  ReferenceMapWrapper(t));  [CE]  cannot  find  symbol  n  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  blockStack,  new  ReferenceMapWrapper(t));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  n,  blockStack,  new  ReferenceMapWrapper(t));	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceMapWrapper(t));    	non-compiled	[CE]  cannot  find  symbol  n	122	None	replace
460	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  n.getSourceFile();  [CE]  cannot  find  symbol  n  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  n.getSourceFile();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  n.getSourceFile();	  StaticSourceFile    sourceFile    =    parent.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol  n	65	None	replace
461	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceMapWrapper(referenceMap),  blockStack);  [CE]  cannot  find  symbol  sourceFile  [FE]            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceMapWrapper(referenceMap),  blockStack);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceMapWrapper(referenceMap),  blockStack);	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceMapWrapper(referenceMap),    t);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	125	None	replace
462	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  blockStack,  new  ReferenceMapWrapper(referenceMap),  t);  [CE]  cannot  find  symbol  root  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  blockStack,  new  ReferenceMapWrapper(referenceMap),  t);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  root,  blockStack,  new  ReferenceMapWrapper(referenceMap),  t);	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceMapWrapper(referenceMap),    t);    	non-compiled	[CE]  cannot  find  symbol  root	125	None	replace
463	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  referenceMap,  new  ReferenceReference(reference));  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  referenceMap,  new  ReferenceReference(reference));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  referenceMap,  new  ReferenceReference(reference));	  NodeTraversal.traverse(compiler,    t,    new    ReferenceReference(referenceMap));    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
464	[BUG]  [BUGGY]  Predicate  initialRoot  =  t.getScopeRoot();  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Predicate  initialRoot  =  t.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  initialRoot  =  t.getScopeRoot();	          Node    originalRoot    =    t.getScopeRoot();    Predicate    originalRoot    =    t.getScopeRoot();    	non-compiled	[CE]  incompatible  types	101	None	replace
465	[BUG]  [BUGGY]  Predicate  originRoot  =  t.getScopeRoot();  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Predicate  originRoot  =  t.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  originRoot  =  t.getScopeRoot();	          Node    originalRoot    =    t.getScopeRoot();    Predicate    originalRoot    =    t.getScopeRoot();    	non-compiled	[CE]  incompatible  types	101	None	replace
466	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  n));  [CE]  cannot  find  symbol  n  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  n));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  n));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(referenceMap,    root));    	non-compiled	[CE]  cannot  find  symbol  n	58	None	replace
467	[BUG]  [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  null,  varFilter));  [CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  null,  varFilter));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  null,  varFilter));	  behavior.exitScope(t,    new    ReferenceMapWrapper(referenceMap,    varFilter));    	non-compiled	[CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;	13	None	replace
468	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootRoot,  t,  this);  [CE]  cannot  find  symbol  rootRoot  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootRoot,  t,  this);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  rootRoot,  t,  this);	  NodeTraversal.traverse(compiler,    root,    t,    this);    	non-compiled	[CE]  cannot  find  symbol  rootRoot	3	None	replace
469	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  root,  this);  [CE]  cannot  find  symbol  root  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  root,  this);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  root,  this);	  NodeTraversal.traverse(compiler,    root,    t,    this);    	non-compiled	[CE]  cannot  find  symbol  root	3	None	replace
470	[BUG]  [BUGGY]  Predicate  sourceFile  =  this.sourceFile.getSourceFile();  [CE]  cannot  find  symbol  sourceFile  [FE]            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Predicate  sourceFile  =  this.sourceFile.getSourceFile();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  this.sourceFile.getSourceFile();	  Predicate    sourceFile    =    t.sourceFile.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol  sourceFile	74	None	replace
471	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  blockStack,  new  ReferenceCollection());  [CE]  cannot  find  symbol  roots  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  roots,  blockStack,  new  ReferenceCollection());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  roots,  blockStack,  new  ReferenceCollection());	  NodeTraversal.traverse(compiler,    n,    blockStack,    new    ReferenceCollection());    	non-compiled	[CE]  cannot  find  symbol  roots	86	None	replace
472	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootRoot,  new  ReferenceReference(referenceMap));  [CE]  cannot  find  symbol  rootRoot  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootRoot,  new  ReferenceReference(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  rootRoot,  new  ReferenceReference(referenceMap));	  NodeTraversal.traverse(compiler,    root,    new    ReferenceReference(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  rootRoot	50	None	replace
473	[BUG]  [BUGGY]  Preconditions.checkState(!isLoop  &&!statement.isHoisted);  [CE]  cannot  find  symbol  isLoop  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(!isLoop  &&!statement.isHoisted);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(!isLoop  &&!statement.isHoisted);	  Preconditions.checkState(!statement.isHoisted);    	non-compiled	[CE]  cannot  find  symbol  isLoop	116	None	replace
474	[BUG]  [BUGGY]  Preconditions.checkState(!isLoop  ||!statement.isHoisted);  [CE]  cannot  find  symbol  isLoop  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(!isLoop  ||!statement.isHoisted);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(!isLoop  ||!statement.isHoisted);	  Preconditions.checkState(!statement.isHoisted);    	non-compiled	[CE]  cannot  find  symbol  isLoop	116	None	replace
475	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootRoot,  blockStack,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  rootRoot  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootRoot,  blockStack,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  rootRoot,  blockStack,  new  ReferenceMapWrapper(referenceMap));	  NodeTraversal.traverse(compiler,    root,    blockStack,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  rootRoot	45	None	replace
476	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootRoot,  blockStack,  new  ReferenceCollection());  [CE]  cannot  find  symbol  rootRoot  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootRoot,  blockStack,  new  ReferenceCollection());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  rootRoot,  blockStack,  new  ReferenceCollection());	  NodeTraversal.traverse(compiler,    root,    blockStack,    new    ReferenceCollection());    	non-compiled	[CE]  cannot  find  symbol  rootRoot	84	None	replace
477	[BUG]  [BUGGY]  Node  originalRoot  =  t,  sourceFile.getOwnerFile();  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  t,  sourceFile.getOwnerFile();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  t,  sourceFile.getOwnerFile();	  Node    originalRoot    =    t.getOwnerFile();    	non-compiled	[CE]  ';'  expected	130	None	replace
478	[BUG]  [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap),  sourceFile);  [CE]  cannot  find  symbol  sourceFile  [FE]            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap),  sourceFile);  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap),  sourceFile);	  behavior.exitScope(t,    new    ReferenceMapWrapper(referenceMap),    t);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	114	None	replace
479	[BUG]  [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap),  baseUri);  [CE]  cannot  find  symbol  baseUri  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap),  baseUri);  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap),  baseUri);	  behavior.exitScope(t,    new    ReferenceMapWrapper(referenceMap),    t);    	non-compiled	[CE]  cannot  find  symbol  baseUri	114	None	replace
480	[BUG]  [BUGGY]  Node  originalRoot  =  n.getReferenceRoot();  [CE]  cannot  find  symbol  n  [FE]        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  n.getReferenceRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  n.getReferenceRoot();	  Node    originalRoot    =    t.getReferenceRoot();    	non-compiled	[CE]  cannot  find  symbol  n	22	None	replace
481	[BUG]  [BUGGY]  Node  originalRoot  =  references.getReferenceRoot();  [CE]  cannot  find  symbol  references  [FE]          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  references.getReferenceRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  references.getReferenceRoot();	  Node    originalRoot    =    t.getReferenceRoot();    	non-compiled	[CE]  cannot  find  symbol  references	22	None	replace
482	[BUG]  [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  sourceFile));  [CE]  cannot  find  symbol  sourceFile  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  sourceFile));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  sourceFile));	  behavior.beforeExitScope(t,    new    ReferenceMapWrapper(referenceMap,    varFilter));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	9	None	replace
483	[BUG]  [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(compiler,  referenceMap,  varFilter));  [CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(compiler,  referenceMap,  varFilter));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.beforeExitScope(t,  new  ReferenceMapWrapper(compiler,  referenceMap,  varFilter));	  behavior.beforeExitScope(t,    new    ReferenceMapWrapper(referenceMap,    varFilter));    	non-compiled	[CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;	9	None	replace
484	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  nameNode.getScopeRoot();  [CE]  cannot  find  symbol  nameNode  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  nameNode.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  nameNode.getScopeRoot();	  StaticSourceFile    sourceFile    =    baseUri.getScopeRoot();    	non-compiled	[CE]  cannot  find  symbol  nameNode	103	None	replace
485	[BUG]  [BUGGY]  Node  originalRoot  =  n.getScopeRoot();  NameNode  originalRoot  =  t.getScopeRoot();  [CE]  cannot  find  symbol  n  [FE]          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  n.getScopeRoot();  NameNode  originalRoot  =  t.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  n.getScopeRoot();  NameNode  originalRoot  =  t.getScopeRoot();	          Node    originalRoot    =    t.getScopeRoot();    NameNode    originalRoot    =    t.getScopeRoot();    	non-compiled	[CE]  cannot  find  symbol  n	102	None	replace
486	[BUG]  [BUGGY]  Node  originalRoot  =  nameNode.getScopeRoot();  NameNode  originalRoot  =  t.getScopeRoot();  [CE]  cannot  find  symbol  nameNode  [FE]            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  nameNode.getScopeRoot();  NameNode  originalRoot  =  t.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  nameNode.getScopeRoot();  NameNode  originalRoot  =  t.getScopeRoot();	          Node    originalRoot    =    t.getScopeRoot();    NameNode    originalRoot    =    t.getScopeRoot();    	non-compiled	[CE]  cannot  find  symbol  nameNode	102	None	replace
487	[BUG]  [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUrl));  [CE]  cannot  find  symbol  baseUrl  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUrl));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseUrl));	  behavior.beforeExitScope(t,    new    ReferenceMapWrapper(referenceMap,    baseUri));    	non-compiled	[CE]  cannot  find  symbol  baseUrl	12	None	replace
488	[BUG]  [BUGGY]  Preconditions.checkState(!varFilter);  [CE]  bad  operand  type  Predicate<Var>  for  unary  operator  '!'  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(!varFilter);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(!varFilter);	  Preconditions.checkState(!isFunction);    	non-compiled	[CE]  bad  operand  type  Predicate<Var>  for  unary  operator  '!'	17	None	replace
489	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootRoot,  new  ReferenceCollectionWrapper(referenceMap));  [CE]  cannot  find  symbol  rootRoot  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootRoot,  new  ReferenceCollectionWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  rootRoot,  new  ReferenceCollectionWrapper(referenceMap));	  NodeTraversal.traverse(compiler,    root,    new    ReferenceCollectionWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  rootRoot	41	None	replace
490	[BUG]  [BUGGY]  Node  originalRoot  =  root.getOwnScopeRoot();  [CE]  cannot  find  symbol  root  [FE]        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  root.getOwnScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  root.getOwnScopeRoot();	  Node    originalRoot    =    t.getOwnScopeRoot();    	non-compiled	[CE]  cannot  find  symbol  root	94	None	replace
491	[BUG]  [BUGGY]  Behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  behavior));  [CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  behavior));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  behavior));	  Behavior.exitScope(t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;	117	None	replace
492	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceCollectionWrapper(referenceMap),  sourceFile);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceCollectionWrapper(referenceMap),  sourceFile);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceCollectionWrapper(referenceMap),  sourceFile);	  NodeTraversal.traverse(compiler,    t,    new    ReferenceCollectionWrapper(referenceMap),    blockStack);    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
493	[BUG]  [BUGGY]  Predicate  sourceFile  =  varFilter.declareSourceFile(null,  t.getSourceFile());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Predicate  sourceFile  =  varFilter.declareSourceFile(null,  t.getSourceFile());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  varFilter.declareSourceFile(null,  t.getSourceFile());	  Predicate    sourceFile    =    varFilter.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
494	[BUG]  [BUGGY]  Predicate  sourceFile  =  varFilter.computeSourceFile(t,  scope.getSourceFile());  [CE]  cannot  find  symbol  scope  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Predicate  sourceFile  =  varFilter.computeSourceFile(t,  scope.getSourceFile());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  varFilter.computeSourceFile(t,  scope.getSourceFile());	  Predicate    sourceFile    =    varFilter.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol  scope	76	None	replace
495	[BUG]  [BUGGY]  Node  originalRoot  =  t.getAssignedRoot();  Node  OriginalRoot  =  t.getScopeRoot();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  t.getAssignedRoot();  Node  OriginalRoot  =  t.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  t.getAssignedRoot();  Node  OriginalRoot  =  t.getScopeRoot();	          Node    originalRoot    =    t.getScopeRoot();    Node    OriginalRoot    =    t.getScopeRoot();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
496	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  t.getCurrentNode();  Node  OriginalRoot  =  t.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	add	Node  originalRoot  =  t.getCurrentNode();  Node  OriginalRoot  =  t.getScopeRoot();	          Node    originalRoot    =    t.getScopeRoot();    Node    OriginalRoot    =    t.getScopeRoot();    	compilable	  [FE]  AssertionFailedError  	90	23	replace
497	[BUG]  [BUGGY]  Node  originalRoot  =  t.getCurrentNode();  Node  OriginalRoot  =  t.getScopeRoot();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  t.getCurrentNode();  Node  OriginalRoot  =  t.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  t.getCurrentNode();  Node  OriginalRoot  =  t.getScopeRoot();	          Node    originalRoot    =    t.getScopeRoot();    Node    OriginalRoot    =    t.getScopeRoot();    	compilable	  [FE]  AssertionFailedError  	90	23	replace
498	[BUG]  [BUGGY]  Node  originalRoot  =  t.getOwnerDomain();  Node  OriginalRoot  =  t.getScopeRoot();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  t.getOwnerDomain();  Node  OriginalRoot  =  t.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  t.getOwnerDomain();  Node  OriginalRoot  =  t.getScopeRoot();	          Node    originalRoot    =    t.getScopeRoot();    Node    OriginalRoot    =    t.getScopeRoot();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
499	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(referenceMap,  isLoop),  isFunction);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(referenceMap,  isLoop),  isFunction);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(referenceMap,  isLoop),  isFunction);	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceReference(referenceMap,    isLoop));    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
500	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  referenceRoot));  [CE]  cannot  find  symbol  referenceRoot  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  referenceRoot));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  referenceRoot));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(referenceMap,    baseUri));    	non-compiled	[CE]  cannot  find  symbol  referenceRoot	60	None	replace
501	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  new  ReferenceCollectionWrapper(referenceMap));  [CE]  cannot  find  symbol  nameNode  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  new  ReferenceCollectionWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  nameNode,  new  ReferenceCollectionWrapper(referenceMap));	  NodeTraversal.traverse(compiler,    root,    new    ReferenceCollectionWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  nameNode	41	None	replace
502	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  basicBlock));  [CE]  cannot  find  symbol  basicBlock  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  basicBlock));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  basicBlock));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(referenceMap,    varFilter,    sourceFile));    	non-compiled	[CE]  cannot  find  symbol  basicBlock	57	None	replace
503	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  sourceFile,  this);  [CE]  cannot  find  symbol  sourceFile  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  sourceFile,  this);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  sourceFile,  this);	  NodeTraversal.traverse(compiler,    sourceFile,    t,    this);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	1	None	replace
504	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  t.getScopeRoot().cloneTree().getSourceFile();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  t.getScopeRoot().cloneTree().getSourceFile();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  t.getScopeRoot().cloneTree().getSourceFile();	  StaticSourceFile    sourceFile    =    t.getScopeRoot().getSourceFile();    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
505	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  t.getScopeRoot().getSourceFile(null);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  t.getScopeRoot().getSourceFile(null);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  t.getScopeRoot().getSourceFile(null);	  StaticSourceFile    sourceFile    =    t.getScopeRoot().getSourceFile();    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
506	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  t.getScopeRoot().cloneTree();  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  t.getScopeRoot().cloneTree();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  t.getScopeRoot().cloneTree();	  StaticSourceFile    sourceFile    =    t.getScopeRoot().getSourceFile();    	non-compiled	[CE]  incompatible  types	131	None	replace
507	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  t.getScopeRoot().findSourceFile(referenceMap);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  t.getScopeRoot().findSourceFile(referenceMap);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  t.getScopeRoot().findSourceFile(referenceMap);	  StaticSourceFile    sourceFile    =    t.getScopeRoot().getSourceFile();    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
508	[BUG]  [BUGGY]  Node  originalRoot  =  referenceMap.getOwnScope();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  referenceMap.getOwnScope();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  referenceMap.getOwnScope();	  Node    originalRoot    =    t.getOwnScope();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
509	[BUG]  [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  referenceRoot));  [CE]  cannot  find  symbol  referenceRoot  [FE]            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  referenceRoot));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  referenceRoot));	  behavior.initScope(t,    new    ReferenceMapWrapper(referenceMap,    baseUri));    	non-compiled	[CE]  cannot  find  symbol  referenceRoot	106	None	replace
510	[BUG]  [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(compiler,  referenceMap,  varFilter));  [CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(compiler,  referenceMap,  varFilter));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.initScope(t,  new  ReferenceMapWrapper(compiler,  referenceMap,  varFilter));	  behavior.initScope(t,    new    ReferenceMapWrapper(referenceMap,    varFilter));    	non-compiled	[CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;	31	None	replace
511	[BUG]  [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap),  baseUri);  [CE]  cannot  find  symbol  baseUri  [FE]            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap),  baseUri);  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap),  baseUri);	  behavior.initScope(t,    new    ReferenceMapWrapper(referenceMap),    t);    	non-compiled	[CE]  cannot  find  symbol  baseUri	123	None	replace
512	[BUG]  [BUGGY]  Behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  isHoisted));  [CE]  cannot  find  symbol  isHoisted  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  isHoisted));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  varFilter,  isHoisted));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(referenceMap,    varFilter,    isLoop));    	non-compiled	[CE]  cannot  find  symbol  isHoisted	53	None	replace
513	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  new  ReferenceReference(referenceMap));  [CE]  cannot  find  symbol  nameNode  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  new  ReferenceReference(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  nameNode,  new  ReferenceReference(referenceMap));	  NodeTraversal.traverse(compiler,    root,    new    ReferenceReference(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  nameNode	50	None	replace
514	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  baseUri,  new  ReferenceReference(referenceMap));  [CE]  cannot  find  symbol  baseUri  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  baseUri,  new  ReferenceReference(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  baseUri,  new  ReferenceReference(referenceMap));	  NodeTraversal.traverse(compiler,    sourceFile,    new    ReferenceReference(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  baseUri	48	None	replace
515	[BUG]  [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  baseNode));  [CE]  cannot  find  symbol  baseNode  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  baseNode));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.initScope(t,  new  ReferenceMapWrapper(referenceMap,  baseNode));	  behavior.initScope(t,    new    ReferenceMapWrapper(referenceMap,    parent));    	non-compiled	[CE]  cannot  find  symbol  baseNode	33	None	replace
516	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  basicBlock,  new  ReferenceCollection());  [CE]  cannot  find  symbol  basicBlock  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  basicBlock,  new  ReferenceCollection());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  basicBlock,  new  ReferenceCollection());	  NodeTraversal.traverse(compiler,    blockStack,    sourceFile,    new    ReferenceCollection());    	non-compiled	[CE]  cannot  find  symbol  basicBlock	95	None	replace
517	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  behavior,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  sourceFile  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  behavior,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  behavior,  new  ReferenceMapWrapper(referenceMap));	  NodeTraversal.traverse(compiler,    sourceFile,    t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	91	None	replace
518	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  baseUri,  t,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  baseUri  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  baseUri,  t,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  baseUri,  t,  new  ReferenceMapWrapper(referenceMap));	  NodeTraversal.traverse(compiler,    sourceFile,    t,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  baseUri	91	None	replace
519	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  methodFile));  [CE]  cannot  find  symbol  sourceFile  [FE]                          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  methodFile));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  methodFile));	  NodeTraversal.traverse(compiler,    t,    new    ReferenceCollectionWrapper(referenceMap,    sourceFile));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	64	None	replace
520	[BUG]  [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseNode));  [CE]  cannot  find  symbol  baseNode  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseNode));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  baseNode));	  behavior.exitScope(t,    new    ReferenceMapWrapper(referenceMap,    parent));    	non-compiled	[CE]  cannot  find  symbol  baseNode	15	None	replace
521	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  root,  blockStack);  [CE]  cannot  find  symbol  sourceFile  [FE]                          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  root,  blockStack);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  root,  blockStack);	  NodeTraversal.traverse(compiler,    sourceFile,    t,    blockStack);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	30	None	replace
522	[BUG]  [BUGGY]  Predicate  sourceFile  =  t.sourceFile.removeFirst();  [CE]  cannot  find  symbol  sourceFile  [FE]                          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Predicate  sourceFile  =  t.sourceFile.removeFirst();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  t.sourceFile.removeFirst();	  Predicate    sourceFile    =    t.sourceFile.getSourceReference();    	non-compiled	[CE]  cannot  find  symbol  sourceFile	7	None	replace
523	[BUG]  [BUGGY]  Predicate  sourceFile  =  t.sourceFile.removeFirstChild();  [CE]  cannot  find  symbol  sourceFile  [FE]                            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Predicate  sourceFile  =  t.sourceFile.removeFirstChild();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  t.sourceFile.removeFirstChild();	  Predicate    sourceFile    =    t.sourceFile.getSourceReference();    	non-compiled	[CE]  cannot  find  symbol  sourceFile	7	None	replace
524	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  new  Reference());  [CE]  cannot  find  symbol  n  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  new  Reference());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  n,  root,  new  Reference());	  NodeTraversal.traverse(compiler,    n,    blockStack,    new    Reference());    	non-compiled	[CE]  cannot  find  symbol  n	113	None	replace
525	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceMapWrapper(t,  referenceMap));  [CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceMapWrapper(t,  referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceMapWrapper(t,  referenceMap));	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceMapWrapper(referenceMap),    t);    	non-compiled	[CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;	125	None	replace
526	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceMapWrapper(referenceMap),  t,  behavior);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Deque<BasicBlock>,ReferenceMapWrapper,NodeTraversal,Behavior)  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceMapWrapper(referenceMap),  t,  behavior);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceMapWrapper(referenceMap),  t,  behavior);	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceMapWrapper(referenceMap),    t);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Deque<BasicBlock>,ReferenceMapWrapper,NodeTraversal,Behavior)	125	None	replace
527	[BUG]  [BUGGY]  Predicate  sourceFile  =  referenceMap.removeSourceFile();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Predicate  sourceFile  =  referenceMap.removeSourceFile();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  referenceMap.removeSourceFile();	  Predicate    sourceFile    =    referenceMap.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
528	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  basicRoot));  [CE]  cannot  find  symbol  basicRoot  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  basicRoot));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  basicRoot));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(referenceMap,    root));    	non-compiled	[CE]  cannot  find  symbol  basicRoot	58	None	replace
529	[BUG]  [BUGGY]  Predicate  sourceFile  =  inputId,  compiler.getSourceReference();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Predicate  sourceFile  =  inputId,  compiler.getSourceReference();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  inputId,  compiler.getSourceReference();	  Predicate    sourceFile    =    compiler.getSourceReference();    	non-compiled	[CE]  ';'  expected	6	None	replace
530	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  module,  new  ReferenceCollection());  [CE]  cannot  find  symbol  module  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  module,  new  ReferenceCollection());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  module,  new  ReferenceCollection());	  NodeTraversal.traverse(compiler,    t,    blockStack,    new    ReferenceCollection());    	non-compiled	[CE]  cannot  find  symbol  module	83	None	replace
531	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(inputId,  referenceMap));  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(inputId,  referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceReference(inputId,  referenceMap));	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceReference(referenceMap,    inputId));    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
532	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(compiler,  varFilter,  references));  [CE]  cannot  find  symbol  references  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(compiler,  varFilter,  references));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(compiler,  varFilter,  references));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(compiler,    referenceMap,    varFilter));    	non-compiled	[CE]  cannot  find  symbol  references	111	None	replace
533	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(compiler,  varFilter,  sourceFile));  [CE]  cannot  find  symbol  sourceFile  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(compiler,  varFilter,  sourceFile));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(compiler,  varFilter,  sourceFile));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(compiler,    referenceMap,    varFilter));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	111	None	replace
534	[BUG]  [BUGGY]  Node  originalRoot  =  t,  sourceFile.getOwner();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  t,  sourceFile.getOwner();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  t,  sourceFile.getOwner();	  Node    originalRoot    =    t.getOwner();    	non-compiled	[CE]  ';'  expected	24	None	replace
535	[BUG]  [BUGGY]  Node  originalRoot  =  referenceMap.getOwner();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  referenceMap.getOwner();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  referenceMap.getOwner();	  Node    originalRoot    =    t.getOwner();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
536	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  blockStack,  path);  [CE]  cannot  find  symbol  path  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  blockStack,  path);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  blockStack,  path);	  NodeTraversal.traverse(compiler,    t,    blockStack,    sourceFile);    	non-compiled	[CE]  cannot  find  symbol  path	109	None	replace
537	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  blockStack,  sourceFile,  isLoop);  [CE]  cannot  find  symbol  sourceFile  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  blockStack,  sourceFile,  isLoop);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  blockStack,  sourceFile,  isLoop);	  NodeTraversal.traverse(compiler,    t,    blockStack,    sourceFile);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	109	None	replace
538	[BUG]  [BUGGY]  Preconditions.checkState(!blockStack.peek());  [CE]  bad  operand  type  BasicBlock  for  unary  operator  '!'  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(!blockStack.peek());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(!blockStack.peek());	  Preconditions.checkState(!isFunction);    	non-compiled	[CE]  bad  operand  type  BasicBlock  for  unary  operator  '!'	17	None	replace
539	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  moduleRoot,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  root  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  moduleRoot,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  root,  moduleRoot,  new  ReferenceMapWrapper(referenceMap));	  NodeTraversal.traverse(compiler,    root,    blockStack,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  root	45	None	replace
540	[BUG]  [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  inputId));  [CE]  cannot  find  symbol  inputId  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  inputId));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  inputId));	  behavior.exitScope(t,    new    ReferenceMapWrapper(referenceMap,    sourceFile));    	non-compiled	[CE]  cannot  find  symbol  inputId	14	None	replace
541	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceCollectionWrapper(t,  referenceMap),  behavior);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceCollectionWrapper(t,  referenceMap),  behavior);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  new  ReferenceCollectionWrapper(t,  referenceMap),  behavior);	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceCollectionWrapper(referenceMap),    behavior);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
542	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  ReferenceReference(referenceMap,  baseUri));  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  ReferenceReference(referenceMap,  baseUri));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  new  ReferenceReference(referenceMap,  baseUri));	  NodeTraversal.traverse(compiler,    t,    new    ReferenceReference(referenceMap));    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
543	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  ReferenceCollectionWrapper(blockStack),  referenceMap);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  ReferenceCollectionWrapper(blockStack),  referenceMap);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  new  ReferenceCollectionWrapper(blockStack),  referenceMap);	  NodeTraversal.traverse(compiler,    t,    new    ReferenceCollectionWrapper(referenceMap),    blockStack);    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
544	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  referenceMap,  new  ReferenceCollectionWrapper(referenceMap),  t);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  referenceMap,  new  ReferenceCollectionWrapper(referenceMap),  t);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  referenceMap,  new  ReferenceCollectionWrapper(referenceMap),  t);	  NodeTraversal.traverse(compiler,    referenceMap,    new    ReferenceCollectionWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
545	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  baseUri,  blockStack);  [CE]  cannot  find  symbol  baseUri  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  baseUri,  blockStack);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  baseUri,  blockStack);	  NodeTraversal.traverse(compiler,    t,    root,    blockStack);    	non-compiled	[CE]  cannot  find  symbol  baseUri	29	None	replace
546	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  blockStack,  pattern);  [CE]  cannot  find  symbol  pattern  [FE]                          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  blockStack,  pattern);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  blockStack,  pattern);	  NodeTraversal.traverse(compiler,    t,    root,    blockStack);    	non-compiled	[CE]  cannot  find  symbol  pattern	29	None	replace
547	[BUG]  [BUGGY]          Node    originalRoot    =    t.getScopeRoot();    Node  OriginalRoot  =  t.getScopeRoot();  Node  initialRoot  =  t.getScopeRoot();  Node  OriginalRoot  =  t.getScopeRoot();  [CE]  variable  OriginalRoot  is  already  defined  in  method  exitScope(NodeTraversal)  [FE]    AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]          Node    originalRoot    =    t.getScopeRoot();    Node  OriginalRoot  =  t.getScopeRoot();  Node  initialRoot  =  t.getScopeRoot();  Node  OriginalRoot  =  t.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	                Node        originalRoot        =        t.getScopeRoot();        Node    OriginalRoot    =    t.getScopeRoot();    Node  initialRoot  =  t.getScopeRoot();  Node  OriginalRoot  =  t.getScopeRoot();	  	non-compiled	[CE]  variable  OriginalRoot  is  already  defined  in  method  exitScope(NodeTraversal)	89	None	add
548	[BUG]  [BUGGY]  Predicate  sourceFile  =  inputId,  compiler.getSourceFile();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Predicate  sourceFile  =  inputId,  compiler.getSourceFile();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  inputId,  compiler.getSourceFile();	  Predicate    sourceFile    =    compiler.getSourceFile();    	non-compiled	[CE]  ';'  expected	75	None	replace
549	[BUG]  [BUGGY]  Node  originalRoot  =  referenceMap.getAssignedRoot();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  referenceMap.getAssignedRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  referenceMap.getAssignedRoot();	  Node    originalRoot    =    t.getAssignedRoot();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
550	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  blockStack,  new  ReferenceMapWrapper(referenceMap,  sourceFile));  [CE]  cannot  find  symbol  sourceFile  [FE]            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  blockStack,  new  ReferenceMapWrapper(referenceMap,  sourceFile));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  blockStack,  new  ReferenceMapWrapper(referenceMap,  sourceFile));	  NodeTraversal.traverse(compiler,    t,    blockStack,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	44	None	replace
551	[BUG]  [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap),  t.getScopeRoot());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap),  t.getScopeRoot());  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap),  t.getScopeRoot());	  behavior.beforeExitScope(t,    new    ReferenceMapWrapper(referenceMap),    t);    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
552	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  this.baseUri.getSourceFile();  [CE]  cannot  find  symbol  baseUri  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  this.baseUri.getSourceFile();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  this.baseUri.getSourceFile();	  StaticSourceFile    sourceFile    =    baseUri.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol  baseUri	99	None	replace
553	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  null),  t);  [CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  null),  t);  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  null),  t);	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(referenceMap,    null));    	non-compiled	[CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;	108	None	replace
554	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  inputId,  varFilter));  [CE]  cannot  find  symbol  inputId  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  inputId,  varFilter));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap,  inputId,  varFilter));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(referenceMap,    baseUri,    varFilter));    	non-compiled	[CE]  cannot  find  symbol  inputId	55	None	replace
555	[BUG]  [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  t));  [CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  t));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  t));	  behavior.beforeExitScope(t,    new    ReferenceMapWrapper(referenceMap,    referenceRoot));    	non-compiled	[CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;	133	None	replace
556	[BUG]  [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  t.getScopeRoot()));  [CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  t.getScopeRoot()));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.beforeExitScope(t,  new  ReferenceMapWrapper(referenceMap,  t.getScopeRoot()));	  behavior.beforeExitScope(t,    new    ReferenceMapWrapper(referenceMap,    referenceRoot));    	non-compiled	[CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;	133	None	replace
557	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  ReferenceCollection());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,NodeTraversal,ReferenceCollection)  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  ReferenceCollection());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  new  ReferenceCollection());	  NodeTraversal.traverse(compiler,    baseBlock,    new    ReferenceCollection());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,NodeTraversal,ReferenceCollection)	129	None	replace
558	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  baseRoot,  new  ReferenceCollection());  [CE]  cannot  find  symbol  baseRoot  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  baseRoot,  new  ReferenceCollection());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  baseRoot,  new  ReferenceCollection());	  NodeTraversal.traverse(compiler,    baseBlock,    new    ReferenceCollection());    	non-compiled	[CE]  cannot  find  symbol  baseRoot	129	None	replace
559	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  varFilter.getSourceFile(scope);  [CE]  cannot  find  symbol  scope  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  varFilter.getSourceFile(scope);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  varFilter.getSourceFile(scope);	  StaticSourceFile    sourceFile    =    varFilter.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol  scope	98	None	replace
560	[BUG]  [BUGGY]  Preconditions.checkState(!referenceMap.hasErrors);  [CE]  cannot  find  symbol  hasErrors  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(!referenceMap.hasErrors);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(!referenceMap.hasErrors);	  Preconditions.checkState(!hasErrors);    	non-compiled	[CE]  cannot  find  symbol  hasErrors	115	None	replace
561	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  referenceMap.getScopeRoot(),  t.getScopeRoot();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  referenceMap.getScopeRoot(),  t.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  referenceMap.getScopeRoot(),  t.getScopeRoot();	  StaticSourceFile    sourceFile    =    referenceMap.getScopeRoot();    	non-compiled	[CE]  ';'  expected	78	None	replace
562	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  referenceMap,  t.getScopeRoot();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  referenceMap,  t.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  referenceMap,  t.getScopeRoot();	  StaticSourceFile    sourceFile    =    referenceMap.getScopeRoot();    	non-compiled	[CE]  ';'  expected	78	None	replace
563	[BUG]  [BUGGY]  Preconditions.checkState(!blockStack.isEmpty());  Deque  blockStack  =  t.getScopeRoot();  Preconditions.checkState(!blockStack.isEmpty());  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(!blockStack.isEmpty());  Deque  blockStack  =  t.getScopeRoot();  Preconditions.checkState(!blockStack.isEmpty());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(!blockStack.isEmpty());    Deque  blockStack  =  t.getScopeRoot();  Preconditions.checkState(!blockStack.isEmpty());	  	non-compiled	[CE]  incompatible  types	19	None	add
564	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(!blockStack.isEmpty());  Preconditions.checkState(!blockStack.isEmpty());  t.getScopeRoot().detachFromParent();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	add	Preconditions.checkState(!blockStack.isEmpty());    Preconditions.checkState(!blockStack.isEmpty());  t.getScopeRoot().detachFromParent();	  	compilable	  [FE]  AssertionFailedError  	19	65	add
565	[BUG]  [BUGGY]  Preconditions.checkState(!blockStack.isEmpty());  Preconditions.checkState(!blockStack.isEmpty());  t.getScopeRoot().detachFromParent();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(!blockStack.isEmpty());  Preconditions.checkState(!blockStack.isEmpty());  t.getScopeRoot().detachFromParent();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(!blockStack.isEmpty());    Preconditions.checkState(!blockStack.isEmpty());  t.getScopeRoot().detachFromParent();	  	compilable	  [FE]  AssertionFailedError  	19	65	add
566	[BUG]  [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  referenceRoot));  [CE]  cannot  find  symbol  referenceRoot  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  referenceRoot));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.exitScope(t,  new  ReferenceMapWrapper(referenceMap,  referenceRoot));	  behavior.exitScope(t,    new    ReferenceMapWrapper(referenceMap,    baseUri));    	non-compiled	[CE]  cannot  find  symbol  referenceRoot	16	None	replace
567	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  module,  blockStack,  this);  [CE]  cannot  find  symbol  module  [FE]                  AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  module,  blockStack,  this);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  module,  blockStack,  this);	  NodeTraversal.traverse(compiler,    t,    blockStack,    this);    	non-compiled	[CE]  cannot  find  symbol  module	2	None	replace
568	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  blockStack,  pattern,  this);  [CE]  cannot  find  symbol  pattern  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  blockStack,  pattern,  this);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  blockStack,  pattern,  this);	  NodeTraversal.traverse(compiler,    t,    blockStack,    this);    	non-compiled	[CE]  cannot  find  symbol  pattern	2	None	replace
569	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  referenceMap.sourceFile();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  referenceMap.sourceFile();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  referenceMap.sourceFile();	  StaticSourceFile    sourceFile    =    referenceMap.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
570	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  referenceMap.getSourceFile(null);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  referenceMap.getSourceFile(null);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  referenceMap.getSourceFile(null);	  StaticSourceFile    sourceFile    =    referenceMap.getSourceFile();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
571	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  t,  this);  [CE]  cannot  find  symbol  nameNode  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  t,  this);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  nameNode,  t,  this);	  NodeTraversal.traverse(compiler,    root,    t,    this);    	non-compiled	[CE]  cannot  find  symbol  nameNode	3	None	replace
572	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  varFilter,  basicBlock,  new  ReferenceCollection());  [CE]  cannot  find  symbol  basicBlock  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  varFilter,  basicBlock,  new  ReferenceCollection());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  varFilter,  basicBlock,  new  ReferenceCollection());	  NodeTraversal.traverse(compiler,    varFilter,    blockStack,    new    ReferenceCollection());    	non-compiled	[CE]  cannot  find  symbol  basicBlock	85	None	replace
573	[BUG]  [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(varFilter,  referenceMap,  baseUri));  [CE]  cannot  find  symbol  baseUri  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.afterExitScope(t,  new  ReferenceMapWrapper(varFilter,  referenceMap,  baseUri));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.afterExitScope(t,  new  ReferenceMapWrapper(varFilter,  referenceMap,  baseUri));	  behavior.afterExitScope(t,    new    ReferenceMapWrapper(varFilter,    referenceMap));    	non-compiled	[CE]  cannot  find  symbol  baseUri	56	None	replace
574	[BUG]  [BUGGY]  Predicate  sourceFile  =  referenceMap.getSourceReference(null);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Predicate  sourceFile  =  referenceMap.getSourceReference(null);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Predicate  sourceFile  =  referenceMap.getSourceReference(null);	  Predicate    sourceFile    =    referenceMap.getSourceReference();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
575	[BUG]  [BUGGY]  Node  originalRoot  =  referenceMap.getOwnScopeRoot();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  referenceMap.getOwnScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  referenceMap.getOwnScopeRoot();	  Node    originalRoot    =    t.getOwnScopeRoot();    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
576	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  nameNode  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  nameNode,  new  ReferenceMapWrapper(referenceMap));	  NodeTraversal.traverse(compiler,    root,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  nameNode	39	None	replace
577	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  t,  compiler.getScopeRoot();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  StaticSourceFile  sourceFile  =  t,  compiler.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	StaticSourceFile  sourceFile  =  t,  compiler.getScopeRoot();	  StaticSourceFile    sourceFile    =    compiler.getScopeRoot();    	non-compiled	[CE]  ';'  expected	79	None	replace
578	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  sourceFile,  root);  [CE]  cannot  find  symbol  sourceFile  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  sourceFile,  root);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  sourceFile,  root);	  NodeTraversal.traverse(compiler,    t,    sourceFile,    blockStack);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	28	None	replace
579	[BUG]  [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(compiler,  referenceMap,  varFilter));  [CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  behavior.exitScope(t,  new  ReferenceMapWrapper(compiler,  referenceMap,  varFilter));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	behavior.exitScope(t,  new  ReferenceMapWrapper(compiler,  referenceMap,  varFilter));	  behavior.exitScope(t,    new    ReferenceMapWrapper(referenceMap,    varFilter));    	non-compiled	[CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;	13	None	replace
580	[BUG]  [BUGGY]  Behavior.exitScope(t,  new  ReferenceMapWrapper(varFilter,  referenceMap));  [CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Behavior.exitScope(t,  new  ReferenceMapWrapper(varFilter,  referenceMap));  [BUGGY]      }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Behavior.exitScope(t,  new  ReferenceMapWrapper(varFilter,  referenceMap));	  behavior.exitScope(t,    new    ReferenceMapWrapper(referenceMap,    varFilter));    	non-compiled	[CE]  constructor  ReferenceMapWrapper  in  class  ReferenceMapWrapper  cannot  be  applied  to  given  types;	13	None	replace
581	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  baseUri,  new  ReferenceMapWrapper(referenceMap));  [CE]  cannot  find  symbol  baseUri  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  baseUri,  new  ReferenceMapWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  baseUri,  new  ReferenceMapWrapper(referenceMap));	  NodeTraversal.traverse(compiler,    sourceFile,    new    ReferenceMapWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  baseUri	35	None	replace
582	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  targetFile));  [CE]  cannot  find  symbol  sourceFile  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  targetFile));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceCollectionWrapper(referenceMap,  targetFile));	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceCollectionWrapper(referenceMap,    sourceFile));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	104	None	replace
583	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  baseUri,  new  ReferenceCollectionWrapper(referenceMap));  [CE]  cannot  find  symbol  baseUri  [FE]                AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  baseUri,  new  ReferenceCollectionWrapper(referenceMap));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  baseUri,  new  ReferenceCollectionWrapper(referenceMap));	  NodeTraversal.traverse(compiler,    sourceFile,    new    ReferenceCollectionWrapper(referenceMap));    	non-compiled	[CE]  cannot  find  symbol  baseUri	40	None	replace
584	[BUG]  [BUGGY]  Preconditions.checkState(!blockStack.peek()!=  null);  [CE]  bad  operand  type  BasicBlock  for  unary  operator  '!'  [FE]    AssertionFailedError    [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(!blockStack.peek()!=  null);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(!blockStack.peek()!=  null);	  Preconditions.checkState(!blockStack.isEmpty());    	non-compiled	[CE]  bad  operand  type  BasicBlock  for  unary  operator  '!'	20	None	replace
585	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceReference(referenceMap,  stopLoop));  [CE]  cannot  find  symbol  sourceFile  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceReference(referenceMap,  stopLoop));  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  sourceFile,  new  ReferenceReference(referenceMap,  stopLoop));	  NodeTraversal.traverse(compiler,    blockStack,    new    ReferenceReference(referenceMap,    sourceFile));    	non-compiled	[CE]  cannot  find  symbol  sourceFile	93	None	replace
586	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null);  Node  originalRoot  =  t.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	add	Preconditions.checkState(t.getScopeRoot()!=  null);  Node  originalRoot  =  t.getScopeRoot();	          Node    originalRoot    =    t.getScopeRoot();    Node    originalRoot    =    t.getScopeRoot();    	compilable	  [FE]  AssertionFailedError  	87	23	replace
587	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null);  Node  originalRoot  =  t.getScopeRoot();  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null);  Node  originalRoot  =  t.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(t.getScopeRoot()!=  null);  Node  originalRoot  =  t.getScopeRoot();	          Node    originalRoot    =    t.getScopeRoot();    Node    originalRoot    =    t.getScopeRoot();    	compilable	  [FE]  AssertionFailedError  	87	23	replace
588	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(t.getScopeRoot()  ==  null);  Node  originalRoot  =  t.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	add	Preconditions.checkState(t.getScopeRoot()  ==  null);  Node  originalRoot  =  t.getScopeRoot();	          Node    originalRoot    =    t.getScopeRoot();    Node    originalRoot    =    t.getScopeRoot();    	compilable	  [FE]  RuntimeException  	87	65	replace
589	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()  ==  null);  Node  originalRoot  =  t.getScopeRoot();  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(t.getScopeRoot()  ==  null);  Node  originalRoot  =  t.getScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(t.getScopeRoot()  ==  null);  Node  originalRoot  =  t.getScopeRoot();	          Node    originalRoot    =    t.getScopeRoot();    Node    originalRoot    =    t.getScopeRoot();    	compilable	  [FE]  RuntimeException  	87	65	replace
590	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null);  Preconditions.checkState(t.getScopeRoot()  ==  null);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	add	Preconditions.checkState(t.getScopeRoot()!=  null);  Preconditions.checkState(t.getScopeRoot()  ==  null);	          Node    originalRoot    =    t.getScopeRoot();    Node    originalRoot    =    t.getScopeRoot();    	compilable	  [FE]  RuntimeException  	87	65	replace
591	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null);  Preconditions.checkState(t.getScopeRoot()  ==  null);  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null);  Preconditions.checkState(t.getScopeRoot()  ==  null);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(t.getScopeRoot()!=  null);  Preconditions.checkState(t.getScopeRoot()  ==  null);	          Node    originalRoot    =    t.getScopeRoot();    Node    originalRoot    =    t.getScopeRoot();    	compilable	  [FE]  RuntimeException  	87	65	replace
592	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(t.getScopeRoot()  ==  null);  Preconditions.checkState(t.getScopeRoot()!=  null);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	add	Preconditions.checkState(t.getScopeRoot()  ==  null);  Preconditions.checkState(t.getScopeRoot()!=  null);	          Node    originalRoot    =    t.getScopeRoot();    Node    originalRoot    =    t.getScopeRoot();    	compilable	  [FE]  RuntimeException  	87	65	replace
593	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()  ==  null);  Preconditions.checkState(t.getScopeRoot()!=  null);  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Preconditions.checkState(t.getScopeRoot()  ==  null);  Preconditions.checkState(t.getScopeRoot()!=  null);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Preconditions.checkState(t.getScopeRoot()  ==  null);  Preconditions.checkState(t.getScopeRoot()!=  null);	          Node    originalRoot    =    t.getScopeRoot();    Node    originalRoot    =    t.getScopeRoot();    	compilable	  [FE]  RuntimeException  	87	65	replace
594	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  this,  t);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Deque<BasicBlock>,ReferenceCollectingCallback,NodeTraversal)  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  this,  t);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  this,  t);	  NodeTraversal.traverse(compiler,    t,    this,    blockStack);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Deque<BasicBlock>,ReferenceCollectingCallback,NodeTraversal)	4	None	replace
595	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  this,  isLoop);  [CE]  cannot  find  symbol  isLoop  [FE]                        AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  this,  isLoop);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  this,  isLoop);	  NodeTraversal.traverse(compiler,    t,    this,    blockStack);    	non-compiled	[CE]  cannot  find  symbol  isLoop	4	None	replace
596	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  BasicBlock());  [CE]  constructor  BasicBlock  in  class  BasicBlock  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  blockStack,  new  BasicBlock());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  blockStack,  new  BasicBlock());	  NodeTraversal.traverse(compiler,    blockStack,    pattern);    	non-compiled	[CE]  constructor  BasicBlock  in  class  BasicBlock  cannot  be  applied  to  given  types;	121	None	replace
597	[BUG]  [BUGGY]  Node  originalRoot  =  t.getOwnerScopeRoot();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  Node  originalRoot  =  t.getOwnerScopeRoot();  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	Node  originalRoot  =  t.getOwnerScopeRoot();	          Node    originalRoot    =    t.getScopeRoot();    Node    originalRoot    =    t.getScopeRoot());    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
598	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  blockStack,  new  ReferenceCollection());  [CE]  cannot  find  symbol  nameNode  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  blockStack,  new  ReferenceCollection());  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  nameNode,  blockStack,  new  ReferenceCollection());	  NodeTraversal.traverse(compiler,    n,    blockStack,    new    ReferenceCollection());    	non-compiled	[CE]  cannot  find  symbol  nameNode	86	None	replace
599	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  blockStack,  new  Reference(),  isLoop);  [CE]  no  suitable  constructor  found  for  Reference()  [FE]                      AssertionFailedError      [CONTEXT]      public  void  exitScope(NodeTraversal  t)  {  blockStack.pop();  if  (t.getScope().isGlobal())  {  compiler.updateGlobalVarReferences(referenceMap,  t.getScopeRoot());  behavior.afterExitScope(t,  compiler.getGlobalVarReferences());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  blockStack,  new  Reference(),  isLoop);  [BUGGY]      behavior.afterExitScope(t,  new  ReferenceMapWrapper(referenceMap));  }  }  [CLASS]  ReferenceCollectingCallback  ReferenceMapWrapper  1  ReferenceCollection  Reference  BasicBlock  [METHOD]  exitScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Set  DECLARATION_PARENTS  NodeTraversal  t  Node  externs  n  nameNode  originalRoot  parent  root  scriptRoot  BasicBlock  basicBlock  parent  Deque  blockStack  Predicate  varFilter  AbstractCompiler  compiler  boolean  isFunction  isHoisted  isLoop  Scope  scope  InputId  inputId  List  references  Behavior  DO_NOTHING_BEHAVIOR  behavior  StaticSourceFile  sourceFile  Map  referenceMap  	projects/Closure120/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	0.12403473458920847	187	187	1	replace	NodeTraversal.traverse(compiler,  t,  blockStack,  new  Reference(),  isLoop);	  NodeTraversal.traverse(compiler,    t,    blockStack,    new    Reference());    	non-compiled	[CE]  no  suitable  constructor  found  for  Reference()	71	None	replace
